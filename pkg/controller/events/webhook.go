// Copyright 2025 Philipp Hossner
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package events

import (
	"time"

	"github.com/google/uuid"
)

// Webhook scatter-gather event type constants.
// Note: Other webhook events (lifecycle, observability) are defined in types.go
const (
	EventTypeWebhookValidationRequestSG  = "webhook.validation.request.sg"  // Scatter-gather request
	EventTypeWebhookValidationResponseSG = "webhook.validation.response.sg" // Scatter-gather response
)

// -----------------------------------------------------------------------------
// Webhook Validation Events (Scatter-Gather Pattern)
// -----------------------------------------------------------------------------

// WebhookValidationRequest is published by the webhook component via scatter-gather
// to request validation from all registered validators.
//
// This event uses the scatter-gather pattern (EventBus.Request()) where multiple
// validator components (BasicValidator, DryRunValidator, etc.) respond with
// WebhookValidationResponse events.
//
// Contract:
//   - Published by: pkg/controller/webhook (validator.go)
//   - Consumed by: All validator components (basic, dryrun, etc.)
//   - Response: WebhookValidationResponse (one per validator)
//   - Timing: Synchronous with admission request (< 5s timeout)
type WebhookValidationRequest struct {
	// ID uniquely identifies this validation request for response correlation.
	// Generated by webhook component using UUID.
	ID string

	// GVK identifies the resource type in "group/version.Kind" format.
	// Examples: "networking.k8s.io/v1.Ingress", "v1.ConfigMap"
	GVK string

	// Namespace is the Kubernetes namespace of the resource.
	// Empty for cluster-scoped resources.
	Namespace string

	// Name is the Kubernetes name of the resource.
	// May be empty for CREATE operations using generateName.
	Name string

	// Object is the full resource object from the AdmissionRequest.
	// Typically map[string]interface{} parsed from JSON.
	Object interface{}

	// Operation indicates the admission operation type.
	// Values: "CREATE", "UPDATE", "DELETE"
	Operation string

	// timestamp when the validation request was created (private for Event interface).
	timestamp time.Time
}

// EventType implements the Event interface.
func (e *WebhookValidationRequest) EventType() string {
	return EventTypeWebhookValidationRequestSG
}

// Timestamp implements the Event interface.
func (e *WebhookValidationRequest) Timestamp() time.Time {
	return e.timestamp
}

// RequestID implements the Request interface for scatter-gather pattern.
func (e *WebhookValidationRequest) RequestID() string {
	return e.ID
}

// NewWebhookValidationRequest creates a new webhook validation request.
//
// Parameters:
//   - gvk: Resource Group/Version.Kind (e.g., "networking.k8s.io/v1.Ingress")
//   - namespace: Resource namespace (empty for cluster-scoped)
//   - name: Resource name
//   - obj: Full resource object from admission request
//   - operation: "CREATE", "UPDATE", or "DELETE"
//
// Returns:
//   - Immutable WebhookValidationRequest with unique ID
func NewWebhookValidationRequest(gvk, namespace, name string, obj interface{}, operation string) *WebhookValidationRequest {
	return &WebhookValidationRequest{
		ID:        uuid.New().String(),
		GVK:       gvk,
		Namespace: namespace,
		Name:      name,
		Object:    obj, // Note: Object is interface{}, caller responsible for deep copy if needed
		Operation: operation,
		timestamp: time.Now(),
	}
}

// WebhookValidationResponse is published by validator components in response to
// a WebhookValidationRequest.
//
// Each validator (BasicValidator, DryRunValidator, etc.) publishes exactly one
// response per request. The webhook component aggregates all responses using
// AND logic: all validators must allow for the resource to be admitted.
//
// Contract:
//   - Published by: Validator components (basic, dryrun, etc.)
//   - Consumed by: pkg/controller/webhook (via EventBus.Request() result)
//   - Timing: Must respond within 5s timeout
//   - Logic: ANY deny = overall deny, ALL allow = overall allow
type WebhookValidationResponse struct {
	// ValidatorID identifies which validator produced this response.
	// Examples: "basic", "dryrun"
	ValidatorID string

	// Allowed indicates whether this validator allows the resource.
	// false = deny, true = allow
	Allowed bool

	// Reason provides a human-readable explanation for denial.
	// Empty if Allowed is true.
	// Shown to user in kubectl output if resource is denied.
	Reason string

	// requestID correlates this response to the original request (private for RequestID method).
	// Must match WebhookValidationRequest.RequestID.
	requestID string

	// timestamp when the validation response was created (private for Event interface).
	timestamp time.Time
}

// EventType implements the Event interface.
func (e *WebhookValidationResponse) EventType() string {
	return EventTypeWebhookValidationResponseSG
}

// Timestamp implements the Event interface.
func (e *WebhookValidationResponse) Timestamp() time.Time {
	return e.timestamp
}

// RequestID implements the Response interface for scatter-gather pattern.
func (e *WebhookValidationResponse) RequestID() string {
	return e.requestID
}

// Responder implements the Response interface for scatter-gather pattern.
func (e *WebhookValidationResponse) Responder() string {
	return e.ValidatorID
}

// NewWebhookValidationResponse creates a new webhook validation response.
//
// Parameters:
//   - requestID: ID from the corresponding WebhookValidationRequest
//   - validatorID: Identifier for this validator (e.g., "basic", "dryrun")
//   - allowed: Whether this validator allows the resource
//   - reason: Human-readable denial reason (empty if allowed)
//
// Returns:
//   - Immutable WebhookValidationResponse
func NewWebhookValidationResponse(requestID, validatorID string, allowed bool, reason string) *WebhookValidationResponse {
	return &WebhookValidationResponse{
		requestID:   requestID,
		ValidatorID: validatorID,
		Allowed:     allowed,
		Reason:      reason,
		timestamp:   time.Now(),
	}
}
