// Package dataplaneapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package dataplaneapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAPIEndpoints request
	GetAPIEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, params *DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClusterWithBody request with any body
	PostClusterWithBody(ctx context.Context, params *PostClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCluster(ctx context.Context, params *PostClusterParams, body PostClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditClusterWithBody request with any body
	EditClusterWithBody(ctx context.Context, params *EditClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditCluster(ctx context.Context, params *EditClusterParams, body EditClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InitiateCertificateRefresh request
	InitiateCertificateRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInfo request
	GetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAWSRegions request
	GetAWSRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAWSRegionWithBody request with any body
	CreateAWSRegionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAWSRegion(ctx context.Context, body CreateAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAWSRegion request
	DeleteAWSRegion(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAWSRegion request
	GetAWSRegion(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAWSRegionWithBody request with any body
	ReplaceAWSRegionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAWSRegion(ctx context.Context, id string, body ReplaceAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsuls request
	GetConsuls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConsulWithBody request with any body
	CreateConsulWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConsul(ctx context.Context, body CreateConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsul request
	DeleteConsul(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsul request
	GetConsul(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceConsulWithBody request with any body
	ReplaceConsulWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceConsul(ctx context.Context, id string, body ReplaceConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicesEndpoints request
	GetServicesEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHaproxyEndpoints request
	GetHaproxyEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigurationEndpoints request
	GetConfigurationEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAcmeProviders request
	GetAcmeProviders(ctx context.Context, params *GetAcmeProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAcmeProviderWithBody request with any body
	CreateAcmeProviderWithBody(ctx context.Context, params *CreateAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAcmeProvider(ctx context.Context, params *CreateAcmeProviderParams, body CreateAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAcmeProvider request
	DeleteAcmeProvider(ctx context.Context, name string, params *DeleteAcmeProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAcmeProvider request
	GetAcmeProvider(ctx context.Context, name string, params *GetAcmeProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditAcmeProviderWithBody request with any body
	EditAcmeProviderWithBody(ctx context.Context, name string, params *EditAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditAcmeProvider(ctx context.Context, name string, params *EditAcmeProviderParams, body EditAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackends request
	GetBackends(ctx context.Context, params *GetBackendsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBackendWithBody request with any body
	CreateBackendWithBody(ctx context.Context, params *CreateBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBackend(ctx context.Context, params *CreateBackendParams, body CreateBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackend request
	DeleteBackend(ctx context.Context, name string, params *DeleteBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackend request
	GetBackend(ctx context.Context, name string, params *GetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceBackendWithBody request with any body
	ReplaceBackendWithBody(ctx context.Context, name string, params *ReplaceBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceBackend(ctx context.Context, name string, params *ReplaceBackendParams, body ReplaceBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAclBackend request
	GetAllAclBackend(ctx context.Context, parentName ParentName, params *GetAllAclBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllAclBackendWithBody request with any body
	ReplaceAllAclBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllAclBackend(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, body ReplaceAllAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAclBackend request
	DeleteAclBackend(ctx context.Context, parentName ParentName, index int, params *DeleteAclBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAclBackend request
	GetAclBackend(ctx context.Context, parentName ParentName, index int, params *GetAclBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAclBackendWithBody request with any body
	CreateAclBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAclBackend(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, body CreateAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAclBackendWithBody request with any body
	ReplaceAclBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAclBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, body ReplaceAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllFilterBackend request
	GetAllFilterBackend(ctx context.Context, parentName ParentName, params *GetAllFilterBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllFilterBackendWithBody request with any body
	ReplaceAllFilterBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllFilterBackend(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, body ReplaceAllFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFilterBackend request
	DeleteFilterBackend(ctx context.Context, parentName ParentName, index int, params *DeleteFilterBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilterBackend request
	GetFilterBackend(ctx context.Context, parentName ParentName, index int, params *GetFilterBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFilterBackendWithBody request with any body
	CreateFilterBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFilterBackend(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, body CreateFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceFilterBackendWithBody request with any body
	ReplaceFilterBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceFilterBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, body ReplaceFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPAfterResponseRuleBackend request
	GetAllHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPAfterResponseRuleBackendWithBody request with any body
	ReplaceAllHTTPAfterResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, body ReplaceAllHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPAfterResponseRuleBackend request
	DeleteHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPAfterResponseRuleBackend request
	GetHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPAfterResponseRuleBackendWithBody request with any body
	CreateHTTPAfterResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, body CreateHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPAfterResponseRuleBackendWithBody request with any body
	ReplaceHTTPAfterResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, body ReplaceHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPCheckBackend request
	GetAllHTTPCheckBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPCheckBackendWithBody request with any body
	ReplaceAllHTTPCheckBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPCheckBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, body ReplaceAllHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPCheckBackend request
	DeleteHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPCheckBackend request
	GetHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPCheckBackendWithBody request with any body
	CreateHTTPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, body CreateHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPCheckBackendWithBody request with any body
	ReplaceHTTPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, body ReplaceHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPErrorRuleBackend request
	GetAllHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPErrorRuleBackendWithBody request with any body
	ReplaceAllHTTPErrorRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, body ReplaceAllHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPErrorRuleBackend request
	DeleteHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPErrorRuleBackend request
	GetHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPErrorRuleBackendWithBody request with any body
	CreateHTTPErrorRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, body CreateHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPErrorRuleBackendWithBody request with any body
	ReplaceHTTPErrorRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, body ReplaceHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPRequestRuleBackend request
	GetAllHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPRequestRuleBackendWithBody request with any body
	ReplaceAllHTTPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, body ReplaceAllHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPRequestRuleBackend request
	DeleteHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPRequestRuleBackend request
	GetHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPRequestRuleBackendWithBody request with any body
	CreateHTTPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, body CreateHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPRequestRuleBackendWithBody request with any body
	ReplaceHTTPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, body ReplaceHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPResponseRuleBackend request
	GetAllHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPResponseRuleBackendWithBody request with any body
	ReplaceAllHTTPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, body ReplaceAllHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPResponseRuleBackend request
	DeleteHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPResponseRuleBackend request
	GetHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPResponseRuleBackendWithBody request with any body
	CreateHTTPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, body CreateHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPResponseRuleBackendWithBody request with any body
	ReplaceHTTPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, body ReplaceHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLogTargetBackend request
	GetAllLogTargetBackend(ctx context.Context, parentName ParentName, params *GetAllLogTargetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllLogTargetBackendWithBody request with any body
	ReplaceAllLogTargetBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllLogTargetBackend(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, body ReplaceAllLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogTargetBackend request
	DeleteLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogTargetBackend request
	GetLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *GetLogTargetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogTargetBackendWithBody request with any body
	CreateLogTargetBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, body CreateLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLogTargetBackendWithBody request with any body
	ReplaceLogTargetBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, body ReplaceLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerSwitchingRules request
	GetServerSwitchingRules(ctx context.Context, parentName ParentName, params *GetServerSwitchingRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceServerSwitchingRulesWithBody request with any body
	ReplaceServerSwitchingRulesWithBody(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceServerSwitchingRules(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, body ReplaceServerSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServerSwitchingRule request
	DeleteServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *DeleteServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerSwitchingRule request
	GetServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *GetServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServerSwitchingRuleWithBody request with any body
	CreateServerSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, body CreateServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceServerSwitchingRuleWithBody request with any body
	ReplaceServerSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, body ReplaceServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerTemplates request
	GetServerTemplates(ctx context.Context, parentName ParentName, params *GetServerTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServerTemplateWithBody request with any body
	CreateServerTemplateWithBody(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServerTemplate(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, body CreateServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServerTemplate request
	DeleteServerTemplate(ctx context.Context, parentName ParentName, prefix string, params *DeleteServerTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerTemplate request
	GetServerTemplate(ctx context.Context, parentName ParentName, prefix string, params *GetServerTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceServerTemplateWithBody request with any body
	ReplaceServerTemplateWithBody(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceServerTemplate(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, body ReplaceServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllServerBackend request
	GetAllServerBackend(ctx context.Context, parentName ParentName, params *GetAllServerBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServerBackendWithBody request with any body
	CreateServerBackendWithBody(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServerBackend(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, body CreateServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServerBackend request
	DeleteServerBackend(ctx context.Context, parentName ParentName, name string, params *DeleteServerBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerBackend request
	GetServerBackend(ctx context.Context, parentName ParentName, name string, params *GetServerBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceServerBackendWithBody request with any body
	ReplaceServerBackendWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceServerBackend(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, body ReplaceServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStickRules request
	GetStickRules(ctx context.Context, parentName ParentName, params *GetStickRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceStickRulesWithBody request with any body
	ReplaceStickRulesWithBody(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceStickRules(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, body ReplaceStickRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStickRule request
	DeleteStickRule(ctx context.Context, parentName ParentName, index int, params *DeleteStickRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStickRule request
	GetStickRule(ctx context.Context, parentName ParentName, index int, params *GetStickRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStickRuleWithBody request with any body
	CreateStickRuleWithBody(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStickRule(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, body CreateStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceStickRuleWithBody request with any body
	ReplaceStickRuleWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceStickRule(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, body ReplaceStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTCPCheckBackend request
	GetAllTCPCheckBackend(ctx context.Context, parentName ParentName, params *GetAllTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllTCPCheckBackendWithBody request with any body
	ReplaceAllTCPCheckBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllTCPCheckBackend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, body ReplaceAllTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPCheckBackend request
	DeleteTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPCheckBackend request
	GetTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPCheckBackendWithBody request with any body
	CreateTCPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, body CreateTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTCPCheckBackendWithBody request with any body
	ReplaceTCPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, body ReplaceTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTCPRequestRuleBackend request
	GetAllTCPRequestRuleBackend(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllTCPRequestRuleBackendWithBody request with any body
	ReplaceAllTCPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllTCPRequestRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, body ReplaceAllTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPRequestRuleBackend request
	DeleteTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPRequestRuleBackend request
	GetTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPRequestRuleBackendWithBody request with any body
	CreateTCPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, body CreateTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTCPRequestRuleBackendWithBody request with any body
	ReplaceTCPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, body ReplaceTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTCPResponseRuleBackend request
	GetAllTCPResponseRuleBackend(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllTCPResponseRuleBackendWithBody request with any body
	ReplaceAllTCPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllTCPResponseRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, body ReplaceAllTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPResponseRuleBackend request
	DeleteTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPResponseRuleBackend request
	GetTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPResponseRuleBackendWithBody request with any body
	CreateTCPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, body CreateTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTCPResponseRuleBackendWithBody request with any body
	ReplaceTCPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, body ReplaceTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCaches request
	GetCaches(ctx context.Context, params *GetCachesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCacheWithBody request with any body
	CreateCacheWithBody(ctx context.Context, params *CreateCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCache(ctx context.Context, params *CreateCacheParams, body CreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCache request
	DeleteCache(ctx context.Context, name string, params *DeleteCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCache request
	GetCache(ctx context.Context, name string, params *GetCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceCacheWithBody request with any body
	ReplaceCacheWithBody(ctx context.Context, name string, params *ReplaceCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceCache(ctx context.Context, name string, params *ReplaceCacheParams, body ReplaceCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCrtLoads request
	GetCrtLoads(ctx context.Context, params *GetCrtLoadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCrtLoadWithBody request with any body
	CreateCrtLoadWithBody(ctx context.Context, params *CreateCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCrtLoad(ctx context.Context, params *CreateCrtLoadParams, body CreateCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCrtLoad request
	DeleteCrtLoad(ctx context.Context, certificate string, params *DeleteCrtLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCrtLoad request
	GetCrtLoad(ctx context.Context, certificate string, params *GetCrtLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceCrtLoadWithBody request with any body
	ReplaceCrtLoadWithBody(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceCrtLoad(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, body ReplaceCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCrtStores request
	GetCrtStores(ctx context.Context, params *GetCrtStoresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCrtStoreWithBody request with any body
	CreateCrtStoreWithBody(ctx context.Context, params *CreateCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCrtStore(ctx context.Context, params *CreateCrtStoreParams, body CreateCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCrtStore request
	DeleteCrtStore(ctx context.Context, name string, params *DeleteCrtStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCrtStore request
	GetCrtStore(ctx context.Context, name string, params *GetCrtStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditCrtStoreWithBody request with any body
	EditCrtStoreWithBody(ctx context.Context, name string, params *EditCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditCrtStore(ctx context.Context, name string, params *EditCrtStoreParams, body EditCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultsSections request
	GetDefaultsSections(ctx context.Context, params *GetDefaultsSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDefaultsSectionWithBody request with any body
	AddDefaultsSectionWithBody(ctx context.Context, params *AddDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDefaultsSection(ctx context.Context, params *AddDefaultsSectionParams, body AddDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDefaultsSectionWithBody request with any body
	CreateDefaultsSectionWithBody(ctx context.Context, params *CreateDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDefaultsSection(ctx context.Context, params *CreateDefaultsSectionParams, body CreateDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDefaultsSection request
	DeleteDefaultsSection(ctx context.Context, name string, params *DeleteDefaultsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultsSection request
	GetDefaultsSection(ctx context.Context, name string, params *GetDefaultsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceDefaultsSectionWithBody request with any body
	ReplaceDefaultsSectionWithBody(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceDefaultsSection(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, body ReplaceDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAclDefaults request
	GetAllAclDefaults(ctx context.Context, parentName ParentName, params *GetAllAclDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllAclDefaultsWithBody request with any body
	ReplaceAllAclDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllAclDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, body ReplaceAllAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAclDefaults request
	DeleteAclDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteAclDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAclDefaults request
	GetAclDefaults(ctx context.Context, parentName ParentName, index int, params *GetAclDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAclDefaultsWithBody request with any body
	CreateAclDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAclDefaults(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, body CreateAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAclDefaultsWithBody request with any body
	ReplaceAclDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAclDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, body ReplaceAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPAfterResponseRuleDefaults request
	GetAllHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPAfterResponseRuleDefaultsWithBody request with any body
	ReplaceAllHTTPAfterResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, body ReplaceAllHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPAfterResponseRuleDefaults request
	DeleteHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPAfterResponseRuleDefaults request
	GetHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPAfterResponseRuleDefaultsWithBody request with any body
	CreateHTTPAfterResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, body CreateHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPAfterResponseRuleDefaultsWithBody request with any body
	ReplaceHTTPAfterResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, body ReplaceHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPCheckDefaults request
	GetAllHTTPCheckDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPCheckDefaultsWithBody request with any body
	ReplaceAllHTTPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPCheckDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, body ReplaceAllHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPCheckDefaults request
	DeleteHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPCheckDefaults request
	GetHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPCheckDefaultsWithBody request with any body
	CreateHTTPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, body CreateHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPCheckDefaultsWithBody request with any body
	ReplaceHTTPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, body ReplaceHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPErrorRuleDefaults request
	GetAllHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPErrorRuleDefaultsWithBody request with any body
	ReplaceAllHTTPErrorRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, body ReplaceAllHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPErrorRuleDefaults request
	DeleteHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPErrorRuleDefaults request
	GetHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPErrorRuleDefaultsWithBody request with any body
	CreateHTTPErrorRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, body CreateHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPErrorRuleDefaultsWithBody request with any body
	ReplaceHTTPErrorRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, body ReplaceHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPRequestRuleDefaults request
	GetAllHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPRequestRuleDefaultsWithBody request with any body
	ReplaceAllHTTPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, body ReplaceAllHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPRequestRuleDefaults request
	DeleteHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPRequestRuleDefaults request
	GetHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPRequestRuleDefaultsWithBody request with any body
	CreateHTTPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, body CreateHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPRequestRuleDefaultsWithBody request with any body
	ReplaceHTTPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, body ReplaceHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPResponseRuleDefaults request
	GetAllHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPResponseRuleDefaultsWithBody request with any body
	ReplaceAllHTTPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, body ReplaceAllHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPResponseRuleDefaults request
	DeleteHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPResponseRuleDefaults request
	GetHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPResponseRuleDefaultsWithBody request with any body
	CreateHTTPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, body CreateHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPResponseRuleDefaultsWithBody request with any body
	ReplaceHTTPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, body ReplaceHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLogTargetDefaults request
	GetAllLogTargetDefaults(ctx context.Context, parentName ParentName, params *GetAllLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllLogTargetDefaultsWithBody request with any body
	ReplaceAllLogTargetDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllLogTargetDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, body ReplaceAllLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogTargetDefaults request
	DeleteLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogTargetDefaults request
	GetLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *GetLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogTargetDefaultsWithBody request with any body
	CreateLogTargetDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, body CreateLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLogTargetDefaultsWithBody request with any body
	ReplaceLogTargetDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, body ReplaceLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllQUICInitialRuleDefaults request
	GetAllQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllQUICInitialRuleDefaultsWithBody request with any body
	ReplaceAllQUICInitialRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, body ReplaceAllQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteQUICInitialRuleDefaults request
	DeleteQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQUICInitialRuleDefaults request
	GetQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateQUICInitialRuleDefaultsWithBody request with any body
	CreateQUICInitialRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, body CreateQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceQUICInitialRuleDefaultsWithBody request with any body
	ReplaceQUICInitialRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, body ReplaceQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTCPCheckDefaults request
	GetAllTCPCheckDefaults(ctx context.Context, parentName ParentName, params *GetAllTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllTCPCheckDefaultsWithBody request with any body
	ReplaceAllTCPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllTCPCheckDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, body ReplaceAllTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPCheckDefaults request
	DeleteTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPCheckDefaults request
	GetTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPCheckDefaultsWithBody request with any body
	CreateTCPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, body CreateTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTCPCheckDefaultsWithBody request with any body
	ReplaceTCPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, body ReplaceTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTCPRequestRuleDefaults request
	GetAllTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllTCPRequestRuleDefaultsWithBody request with any body
	ReplaceAllTCPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, body ReplaceAllTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPRequestRuleDefaults request
	DeleteTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPRequestRuleDefaults request
	GetTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPRequestRuleDefaultsWithBody request with any body
	CreateTCPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, body CreateTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTCPRequestRuleDefaultsWithBody request with any body
	ReplaceTCPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, body ReplaceTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTCPResponseRuleDefaults request
	GetAllTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllTCPResponseRuleDefaultsWithBody request with any body
	ReplaceAllTCPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, body ReplaceAllTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPResponseRuleDefaults request
	DeleteTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPResponseRuleDefaults request
	GetTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPResponseRuleDefaultsWithBody request with any body
	CreateTCPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, body CreateTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTCPResponseRuleDefaultsWithBody request with any body
	ReplaceTCPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, body ReplaceTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFCGIApps request
	GetFCGIApps(ctx context.Context, params *GetFCGIAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFCGIAppWithBody request with any body
	CreateFCGIAppWithBody(ctx context.Context, params *CreateFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFCGIApp(ctx context.Context, params *CreateFCGIAppParams, body CreateFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFCGIApp request
	DeleteFCGIApp(ctx context.Context, name string, params *DeleteFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFCGIApp request
	GetFCGIApp(ctx context.Context, name string, params *GetFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceFCGIAppWithBody request with any body
	ReplaceFCGIAppWithBody(ctx context.Context, name string, params *ReplaceFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceFCGIApp(ctx context.Context, name string, params *ReplaceFCGIAppParams, body ReplaceFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAclFCGIApp request
	GetAllAclFCGIApp(ctx context.Context, parentName ParentName, params *GetAllAclFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllAclFCGIAppWithBody request with any body
	ReplaceAllAclFCGIAppWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllAclFCGIApp(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, body ReplaceAllAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAclFCGIApp request
	DeleteAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *DeleteAclFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAclFCGIApp request
	GetAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *GetAclFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAclFCGIAppWithBody request with any body
	CreateAclFCGIAppWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, body CreateAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAclFCGIAppWithBody request with any body
	ReplaceAclFCGIAppWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, body ReplaceAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFrontends request
	GetFrontends(ctx context.Context, params *GetFrontendsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFrontendWithBody request with any body
	CreateFrontendWithBody(ctx context.Context, params *CreateFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFrontend(ctx context.Context, params *CreateFrontendParams, body CreateFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFrontend request
	DeleteFrontend(ctx context.Context, name string, params *DeleteFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFrontend request
	GetFrontend(ctx context.Context, name string, params *GetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceFrontendWithBody request with any body
	ReplaceFrontendWithBody(ctx context.Context, name string, params *ReplaceFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceFrontend(ctx context.Context, name string, params *ReplaceFrontendParams, body ReplaceFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAclFrontend request
	GetAllAclFrontend(ctx context.Context, parentName ParentName, params *GetAllAclFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllAclFrontendWithBody request with any body
	ReplaceAllAclFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllAclFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, body ReplaceAllAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAclFrontend request
	DeleteAclFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteAclFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAclFrontend request
	GetAclFrontend(ctx context.Context, parentName ParentName, index int, params *GetAclFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAclFrontendWithBody request with any body
	CreateAclFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAclFrontend(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, body CreateAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAclFrontendWithBody request with any body
	ReplaceAclFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAclFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, body ReplaceAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackendSwitchingRules request
	GetBackendSwitchingRules(ctx context.Context, parentName ParentName, params *GetBackendSwitchingRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceBackendSwitchingRulesWithBody request with any body
	ReplaceBackendSwitchingRulesWithBody(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceBackendSwitchingRules(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, body ReplaceBackendSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackendSwitchingRule request
	DeleteBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *DeleteBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackendSwitchingRule request
	GetBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *GetBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBackendSwitchingRuleWithBody request with any body
	CreateBackendSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, body CreateBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceBackendSwitchingRuleWithBody request with any body
	ReplaceBackendSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, body ReplaceBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllBindFrontend request
	GetAllBindFrontend(ctx context.Context, parentName ParentName, params *GetAllBindFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBindFrontendWithBody request with any body
	CreateBindFrontendWithBody(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBindFrontend(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, body CreateBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBindFrontend request
	DeleteBindFrontend(ctx context.Context, parentName ParentName, name string, params *DeleteBindFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBindFrontend request
	GetBindFrontend(ctx context.Context, parentName ParentName, name string, params *GetBindFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceBindFrontendWithBody request with any body
	ReplaceBindFrontendWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceBindFrontend(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, body ReplaceBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeclareCaptures request
	GetDeclareCaptures(ctx context.Context, parentName ParentName, params *GetDeclareCapturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceDeclareCapturesWithBody request with any body
	ReplaceDeclareCapturesWithBody(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceDeclareCaptures(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, body ReplaceDeclareCapturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeclareCapture request
	DeleteDeclareCapture(ctx context.Context, parentName ParentName, index int, params *DeleteDeclareCaptureParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeclareCapture request
	GetDeclareCapture(ctx context.Context, parentName ParentName, index int, params *GetDeclareCaptureParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeclareCaptureWithBody request with any body
	CreateDeclareCaptureWithBody(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeclareCapture(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, body CreateDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceDeclareCaptureWithBody request with any body
	ReplaceDeclareCaptureWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceDeclareCapture(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, body ReplaceDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllFilterFrontend request
	GetAllFilterFrontend(ctx context.Context, parentName ParentName, params *GetAllFilterFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllFilterFrontendWithBody request with any body
	ReplaceAllFilterFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllFilterFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, body ReplaceAllFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFilterFrontend request
	DeleteFilterFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteFilterFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilterFrontend request
	GetFilterFrontend(ctx context.Context, parentName ParentName, index int, params *GetFilterFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFilterFrontendWithBody request with any body
	CreateFilterFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFilterFrontend(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, body CreateFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceFilterFrontendWithBody request with any body
	ReplaceFilterFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceFilterFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, body ReplaceFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPAfterResponseRuleFrontend request
	GetAllHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPAfterResponseRuleFrontendWithBody request with any body
	ReplaceAllHTTPAfterResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, body ReplaceAllHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPAfterResponseRuleFrontend request
	DeleteHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPAfterResponseRuleFrontend request
	GetHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPAfterResponseRuleFrontendWithBody request with any body
	CreateHTTPAfterResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, body CreateHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPAfterResponseRuleFrontendWithBody request with any body
	ReplaceHTTPAfterResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, body ReplaceHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPErrorRuleFrontend request
	GetAllHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPErrorRuleFrontendWithBody request with any body
	ReplaceAllHTTPErrorRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, body ReplaceAllHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPErrorRuleFrontend request
	DeleteHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPErrorRuleFrontend request
	GetHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPErrorRuleFrontendWithBody request with any body
	CreateHTTPErrorRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, body CreateHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPErrorRuleFrontendWithBody request with any body
	ReplaceHTTPErrorRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, body ReplaceHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPRequestRuleFrontend request
	GetAllHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPRequestRuleFrontendWithBody request with any body
	ReplaceAllHTTPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, body ReplaceAllHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPRequestRuleFrontend request
	DeleteHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPRequestRuleFrontend request
	GetHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPRequestRuleFrontendWithBody request with any body
	CreateHTTPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, body CreateHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPRequestRuleFrontendWithBody request with any body
	ReplaceHTTPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, body ReplaceHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHTTPResponseRuleFrontend request
	GetAllHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllHTTPResponseRuleFrontendWithBody request with any body
	ReplaceAllHTTPResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, body ReplaceAllHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPResponseRuleFrontend request
	DeleteHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPResponseRuleFrontend request
	GetHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPResponseRuleFrontendWithBody request with any body
	CreateHTTPResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, body CreateHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPResponseRuleFrontendWithBody request with any body
	ReplaceHTTPResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, body ReplaceHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLogTargetFrontend request
	GetAllLogTargetFrontend(ctx context.Context, parentName ParentName, params *GetAllLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllLogTargetFrontendWithBody request with any body
	ReplaceAllLogTargetFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllLogTargetFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, body ReplaceAllLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogTargetFrontend request
	DeleteLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogTargetFrontend request
	GetLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *GetLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogTargetFrontendWithBody request with any body
	CreateLogTargetFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, body CreateLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLogTargetFrontendWithBody request with any body
	ReplaceLogTargetFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, body ReplaceLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllQUICInitialRuleFrontend request
	GetAllQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllQUICInitialRuleFrontendWithBody request with any body
	ReplaceAllQUICInitialRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, body ReplaceAllQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteQUICInitialRuleFrontend request
	DeleteQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQUICInitialRuleFrontend request
	GetQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateQUICInitialRuleFrontendWithBody request with any body
	CreateQUICInitialRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, body CreateQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceQUICInitialRuleFrontendWithBody request with any body
	ReplaceQUICInitialRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, body ReplaceQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSSLFrontUses request
	GetAllSSLFrontUses(ctx context.Context, parentName ParentName, params *GetAllSSLFrontUsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSSLFrontUseWithBody request with any body
	CreateSSLFrontUseWithBody(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSSLFrontUse(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, body CreateSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSSLFrontUse request
	DeleteSSLFrontUse(ctx context.Context, parentName ParentName, index int, params *DeleteSSLFrontUseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSSLFrontUse request
	GetSSLFrontUse(ctx context.Context, parentName ParentName, index int, params *GetSSLFrontUseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceSSLFrontUseWithBody request with any body
	ReplaceSSLFrontUseWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceSSLFrontUse(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, body ReplaceSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTCPRequestRuleFrontend request
	GetAllTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllTCPRequestRuleFrontendWithBody request with any body
	ReplaceAllTCPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, body ReplaceAllTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPRequestRuleFrontend request
	DeleteTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPRequestRuleFrontend request
	GetTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPRequestRuleFrontendWithBody request with any body
	CreateTCPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, body CreateTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTCPRequestRuleFrontendWithBody request with any body
	ReplaceTCPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, body ReplaceTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobal request
	GetGlobal(ctx context.Context, params *GetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceGlobalWithBody request with any body
	ReplaceGlobalWithBody(ctx context.Context, params *ReplaceGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceGlobal(ctx context.Context, params *ReplaceGlobalParams, body ReplaceGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLogTargetGlobal request
	GetAllLogTargetGlobal(ctx context.Context, params *GetAllLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllLogTargetGlobalWithBody request with any body
	ReplaceAllLogTargetGlobalWithBody(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllLogTargetGlobal(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, body ReplaceAllLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogTargetGlobal request
	DeleteLogTargetGlobal(ctx context.Context, index int, params *DeleteLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogTargetGlobal request
	GetLogTargetGlobal(ctx context.Context, index int, params *GetLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogTargetGlobalWithBody request with any body
	CreateLogTargetGlobalWithBody(ctx context.Context, index int, params *CreateLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogTargetGlobal(ctx context.Context, index int, params *CreateLogTargetGlobalParams, body CreateLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLogTargetGlobalWithBody request with any body
	ReplaceLogTargetGlobalWithBody(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLogTargetGlobal(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, body ReplaceLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroups request
	GetGroups(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGroupWithBody request with any body
	CreateGroupWithBody(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGroup(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroup request
	DeleteGroup(ctx context.Context, name string, params *DeleteGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroup request
	GetGroup(ctx context.Context, name string, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceGroupWithBody request with any body
	ReplaceGroupWithBody(ctx context.Context, name string, params *ReplaceGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceGroup(ctx context.Context, name string, params *ReplaceGroupParams, body ReplaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPErrorsSections request
	GetHTTPErrorsSections(ctx context.Context, params *GetHTTPErrorsSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPErrorsSectionWithBody request with any body
	CreateHTTPErrorsSectionWithBody(ctx context.Context, params *CreateHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPErrorsSection(ctx context.Context, params *CreateHTTPErrorsSectionParams, body CreateHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPErrorsSection request
	DeleteHTTPErrorsSection(ctx context.Context, name string, params *DeleteHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPErrorsSection request
	GetHTTPErrorsSection(ctx context.Context, name string, params *GetHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceHTTPErrorsSectionWithBody request with any body
	ReplaceHTTPErrorsSectionWithBody(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceHTTPErrorsSection(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, body ReplaceHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogForwards request
	GetLogForwards(ctx context.Context, params *GetLogForwardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogForwardWithBody request with any body
	CreateLogForwardWithBody(ctx context.Context, params *CreateLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogForward(ctx context.Context, params *CreateLogForwardParams, body CreateLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogForward request
	DeleteLogForward(ctx context.Context, name string, params *DeleteLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogForward request
	GetLogForward(ctx context.Context, name string, params *GetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLogForwardWithBody request with any body
	ReplaceLogForwardWithBody(ctx context.Context, name string, params *ReplaceLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLogForward(ctx context.Context, name string, params *ReplaceLogForwardParams, body ReplaceLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllBindLogForward request
	GetAllBindLogForward(ctx context.Context, parentName ParentName, params *GetAllBindLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBindLogForwardWithBody request with any body
	CreateBindLogForwardWithBody(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBindLogForward(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, body CreateBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBindLogForward request
	DeleteBindLogForward(ctx context.Context, parentName ParentName, name string, params *DeleteBindLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBindLogForward request
	GetBindLogForward(ctx context.Context, parentName ParentName, name string, params *GetBindLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceBindLogForwardWithBody request with any body
	ReplaceBindLogForwardWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceBindLogForward(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, body ReplaceBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDgramBinds request
	GetDgramBinds(ctx context.Context, parentName ParentName, params *GetDgramBindsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDgramBindWithBody request with any body
	CreateDgramBindWithBody(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDgramBind(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, body CreateDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDgramBind request
	DeleteDgramBind(ctx context.Context, parentName ParentName, name string, params *DeleteDgramBindParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDgramBind request
	GetDgramBind(ctx context.Context, parentName ParentName, name string, params *GetDgramBindParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceDgramBindWithBody request with any body
	ReplaceDgramBindWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceDgramBind(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, body ReplaceDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLogTargetLogForward request
	GetAllLogTargetLogForward(ctx context.Context, parentName ParentName, params *GetAllLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllLogTargetLogForwardWithBody request with any body
	ReplaceAllLogTargetLogForwardWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllLogTargetLogForward(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, body ReplaceAllLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogTargetLogForward request
	DeleteLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogTargetLogForward request
	GetLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *GetLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogTargetLogForwardWithBody request with any body
	CreateLogTargetLogForwardWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, body CreateLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLogTargetLogForwardWithBody request with any body
	ReplaceLogTargetLogForwardWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, body ReplaceLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogProfiles request
	GetLogProfiles(ctx context.Context, params *GetLogProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogProfileWithBody request with any body
	CreateLogProfileWithBody(ctx context.Context, params *CreateLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogProfile(ctx context.Context, params *CreateLogProfileParams, body CreateLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogProfile request
	DeleteLogProfile(ctx context.Context, name string, params *DeleteLogProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogProfile request
	GetLogProfile(ctx context.Context, name string, params *GetLogProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditLogProfileWithBody request with any body
	EditLogProfileWithBody(ctx context.Context, name string, params *EditLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditLogProfile(ctx context.Context, name string, params *EditLogProfileParams, body EditLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMailerEntries request
	GetMailerEntries(ctx context.Context, params *GetMailerEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMailerEntryWithBody request with any body
	CreateMailerEntryWithBody(ctx context.Context, params *CreateMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMailerEntry(ctx context.Context, params *CreateMailerEntryParams, body CreateMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMailerEntry request
	DeleteMailerEntry(ctx context.Context, name string, params *DeleteMailerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMailerEntry request
	GetMailerEntry(ctx context.Context, name string, params *GetMailerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceMailerEntryWithBody request with any body
	ReplaceMailerEntryWithBody(ctx context.Context, name string, params *ReplaceMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceMailerEntry(ctx context.Context, name string, params *ReplaceMailerEntryParams, body ReplaceMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMailersSections request
	GetMailersSections(ctx context.Context, params *GetMailersSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMailersSectionWithBody request with any body
	CreateMailersSectionWithBody(ctx context.Context, params *CreateMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMailersSection(ctx context.Context, params *CreateMailersSectionParams, body CreateMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMailersSection request
	DeleteMailersSection(ctx context.Context, name string, params *DeleteMailersSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMailersSection request
	GetMailersSection(ctx context.Context, name string, params *GetMailersSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditMailersSectionWithBody request with any body
	EditMailersSectionWithBody(ctx context.Context, name string, params *EditMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditMailersSection(ctx context.Context, name string, params *EditMailersSectionParams, body EditMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNameservers request
	GetNameservers(ctx context.Context, params *GetNameserversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNameserverWithBody request with any body
	CreateNameserverWithBody(ctx context.Context, params *CreateNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNameserver(ctx context.Context, params *CreateNameserverParams, body CreateNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNameserver request
	DeleteNameserver(ctx context.Context, name string, params *DeleteNameserverParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNameserver request
	GetNameserver(ctx context.Context, name string, params *GetNameserverParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceNameserverWithBody request with any body
	ReplaceNameserverWithBody(ctx context.Context, name string, params *ReplaceNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceNameserver(ctx context.Context, name string, params *ReplaceNameserverParams, body ReplaceNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeerEntries request
	GetPeerEntries(ctx context.Context, params *GetPeerEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePeerEntryWithBody request with any body
	CreatePeerEntryWithBody(ctx context.Context, params *CreatePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePeerEntry(ctx context.Context, params *CreatePeerEntryParams, body CreatePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePeerEntry request
	DeletePeerEntry(ctx context.Context, name string, params *DeletePeerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeerEntry request
	GetPeerEntry(ctx context.Context, name string, params *GetPeerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplacePeerEntryWithBody request with any body
	ReplacePeerEntryWithBody(ctx context.Context, name string, params *ReplacePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplacePeerEntry(ctx context.Context, name string, params *ReplacePeerEntryParams, body ReplacePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeerSections request
	GetPeerSections(ctx context.Context, params *GetPeerSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePeerWithBody request with any body
	CreatePeerWithBody(ctx context.Context, params *CreatePeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePeer(ctx context.Context, params *CreatePeerParams, body CreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePeer request
	DeletePeer(ctx context.Context, name string, params *DeletePeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeerSection request
	GetPeerSection(ctx context.Context, name string, params *GetPeerSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllBindPeer request
	GetAllBindPeer(ctx context.Context, parentName ParentName, params *GetAllBindPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBindPeerWithBody request with any body
	CreateBindPeerWithBody(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBindPeer(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, body CreateBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBindPeer request
	DeleteBindPeer(ctx context.Context, parentName ParentName, name string, params *DeleteBindPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBindPeer request
	GetBindPeer(ctx context.Context, parentName ParentName, name string, params *GetBindPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceBindPeerWithBody request with any body
	ReplaceBindPeerWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceBindPeer(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, body ReplaceBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLogTargetPeer request
	GetAllLogTargetPeer(ctx context.Context, parentName ParentName, params *GetAllLogTargetPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAllLogTargetPeerWithBody request with any body
	ReplaceAllLogTargetPeerWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceAllLogTargetPeer(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, body ReplaceAllLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogTargetPeer request
	DeleteLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogTargetPeer request
	GetLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *GetLogTargetPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogTargetPeerWithBody request with any body
	CreateLogTargetPeerWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, body CreateLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLogTargetPeerWithBody request with any body
	ReplaceLogTargetPeerWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, body ReplaceLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllServerPeer request
	GetAllServerPeer(ctx context.Context, parentName ParentName, params *GetAllServerPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServerPeerWithBody request with any body
	CreateServerPeerWithBody(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServerPeer(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, body CreateServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServerPeer request
	DeleteServerPeer(ctx context.Context, parentName ParentName, name string, params *DeleteServerPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerPeer request
	GetServerPeer(ctx context.Context, parentName ParentName, name string, params *GetServerPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceServerPeerWithBody request with any body
	ReplaceServerPeerWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceServerPeer(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, body ReplaceServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTables request
	GetTables(ctx context.Context, parentName ParentName, params *GetTablesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTableWithBody request with any body
	CreateTableWithBody(ctx context.Context, parentName ParentName, params *CreateTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTable(ctx context.Context, parentName ParentName, params *CreateTableParams, body CreateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTable request
	DeleteTable(ctx context.Context, parentName ParentName, name string, params *DeleteTableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTable request
	GetTable(ctx context.Context, parentName ParentName, name string, params *GetTableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTableWithBody request with any body
	ReplaceTableWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTable(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, body ReplaceTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrograms request
	GetPrograms(ctx context.Context, params *GetProgramsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProgramWithBody request with any body
	CreateProgramWithBody(ctx context.Context, params *CreateProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProgram(ctx context.Context, params *CreateProgramParams, body CreateProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProgram request
	DeleteProgram(ctx context.Context, name string, params *DeleteProgramParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProgram request
	GetProgram(ctx context.Context, name string, params *GetProgramParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceProgramWithBody request with any body
	ReplaceProgramWithBody(ctx context.Context, name string, params *ReplaceProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceProgram(ctx context.Context, name string, params *ReplaceProgramParams, body ReplaceProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHAProxyConfiguration request
	GetHAProxyConfiguration(ctx context.Context, params *GetHAProxyConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHAProxyConfigurationWithBody request with any body
	PostHAProxyConfigurationWithBody(ctx context.Context, params *PostHAProxyConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHAProxyConfigurationWithTextBody(ctx context.Context, params *PostHAProxyConfigurationParams, body PostHAProxyConfigurationTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResolvers request
	GetResolvers(ctx context.Context, params *GetResolversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResolverWithBody request with any body
	CreateResolverWithBody(ctx context.Context, params *CreateResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResolver(ctx context.Context, params *CreateResolverParams, body CreateResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResolver request
	DeleteResolver(ctx context.Context, name string, params *DeleteResolverParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResolver request
	GetResolver(ctx context.Context, name string, params *GetResolverParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceResolverWithBody request with any body
	ReplaceResolverWithBody(ctx context.Context, name string, params *ReplaceResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceResolver(ctx context.Context, name string, params *ReplaceResolverParams, body ReplaceResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRings request
	GetRings(ctx context.Context, params *GetRingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRingWithBody request with any body
	CreateRingWithBody(ctx context.Context, params *CreateRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRing(ctx context.Context, params *CreateRingParams, body CreateRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRing request
	DeleteRing(ctx context.Context, name string, params *DeleteRingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRing request
	GetRing(ctx context.Context, name string, params *GetRingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceRingWithBody request with any body
	ReplaceRingWithBody(ctx context.Context, name string, params *ReplaceRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceRing(ctx context.Context, name string, params *ReplaceRingParams, body ReplaceRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllServerRing request
	GetAllServerRing(ctx context.Context, parentName ParentName, params *GetAllServerRingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServerRingWithBody request with any body
	CreateServerRingWithBody(ctx context.Context, parentName ParentName, params *CreateServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServerRing(ctx context.Context, parentName ParentName, params *CreateServerRingParams, body CreateServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServerRing request
	DeleteServerRing(ctx context.Context, parentName ParentName, name string, params *DeleteServerRingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerRing request
	GetServerRing(ctx context.Context, parentName ParentName, name string, params *GetServerRingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceServerRingWithBody request with any body
	ReplaceServerRingWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceServerRing(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, body ReplaceServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTraces request
	DeleteTraces(ctx context.Context, params *DeleteTracesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraces request
	GetTraces(ctx context.Context, params *GetTracesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTracesWithBody request with any body
	CreateTracesWithBody(ctx context.Context, params *CreateTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTraces(ctx context.Context, params *CreateTracesParams, body CreateTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceTracesWithBody request with any body
	ReplaceTracesWithBody(ctx context.Context, params *ReplaceTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceTraces(ctx context.Context, params *ReplaceTracesParams, body ReplaceTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTraceEntryWithBody request with any body
	DeleteTraceEntryWithBody(ctx context.Context, params *DeleteTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTraceEntry(ctx context.Context, params *DeleteTraceEntryParams, body DeleteTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTraceEntryWithBody request with any body
	CreateTraceEntryWithBody(ctx context.Context, params *CreateTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTraceEntry(ctx context.Context, params *CreateTraceEntryParams, body CreateTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserlists request
	GetUserlists(ctx context.Context, params *GetUserlistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserlistWithBody request with any body
	CreateUserlistWithBody(ctx context.Context, params *CreateUserlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserlist(ctx context.Context, params *CreateUserlistParams, body CreateUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserlist request
	DeleteUserlist(ctx context.Context, name string, params *DeleteUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserlist request
	GetUserlist(ctx context.Context, name string, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, params *CreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, params *CreateUserParams, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, username string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, username string, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceUserWithBody request with any body
	ReplaceUserWithBody(ctx context.Context, username string, params *ReplaceUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceUser(ctx context.Context, username string, params *ReplaceUserParams, body ReplaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigurationVersion request
	GetConfigurationVersion(ctx context.Context, params *GetConfigurationVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReloads request
	GetReloads(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReload request
	GetReload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuntimeEndpoints request
	GetRuntimeEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicesHaproxyRuntimeAcls request
	GetServicesHaproxyRuntimeAcls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicesHaproxyRuntimeAclsId request
	GetServicesHaproxyRuntimeAclsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicesHaproxyRuntimeAclsParentNameEntries request
	GetServicesHaproxyRuntimeAclsParentNameEntries(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServicesHaproxyRuntimeAclsParentNameEntriesWithBody request with any body
	PostServicesHaproxyRuntimeAclsParentNameEntriesWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServicesHaproxyRuntimeAclsParentNameEntries(ctx context.Context, parentName ParentName, body PostServicesHaproxyRuntimeAclsParentNameEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPayloadRuntimeACLWithBody request with any body
	AddPayloadRuntimeACLWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPayloadRuntimeACL(ctx context.Context, parentName ParentName, body AddPayloadRuntimeACLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServicesHaproxyRuntimeAclsParentNameEntriesId request
	DeleteServicesHaproxyRuntimeAclsParentNameEntriesId(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicesHaproxyRuntimeAclsParentNameEntriesId request
	GetServicesHaproxyRuntimeAclsParentNameEntriesId(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllRuntimeServer request
	GetAllRuntimeServer(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRuntimeServerWithBody request with any body
	AddRuntimeServerWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRuntimeServer(ctx context.Context, parentName ParentName, body AddRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRuntimeServer request
	DeleteRuntimeServer(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuntimeServer request
	GetRuntimeServer(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceRuntimeServerWithBody request with any body
	ReplaceRuntimeServerWithBody(ctx context.Context, parentName ParentName, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceRuntimeServer(ctx context.Context, parentName ParentName, name string, body ReplaceRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHaproxyProcessInfo request
	GetHaproxyProcessInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllRuntimeMapFiles request
	GetAllRuntimeMapFiles(ctx context.Context, params *GetAllRuntimeMapFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClearRuntimeMap request
	ClearRuntimeMap(ctx context.Context, name string, params *ClearRuntimeMapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneRuntimeMap request
	GetOneRuntimeMap(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPayloadRuntimeMapWithBody request with any body
	AddPayloadRuntimeMapWithBody(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPayloadRuntimeMap(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, body AddPayloadRuntimeMapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowRuntimeMap request
	ShowRuntimeMap(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMapEntryWithBody request with any body
	AddMapEntryWithBody(ctx context.Context, parentName ParentName, params *AddMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMapEntry(ctx context.Context, parentName ParentName, params *AddMapEntryParams, body AddMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRuntimeMapEntry request
	DeleteRuntimeMapEntry(ctx context.Context, parentName ParentName, id string, params *DeleteRuntimeMapEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuntimeMapEntry request
	GetRuntimeMapEntry(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceRuntimeMapEntryWithBody request with any body
	ReplaceRuntimeMapEntryWithBody(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceRuntimeMapEntry(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, body ReplaceRuntimeMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCaFiles request
	GetAllCaFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCaFileWithBody request with any body
	CreateCaFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCaFile request
	DeleteCaFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCaFile request
	GetCaFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetCaFileWithBody request with any body
	SetCaFileWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCaEntryWithBody request with any body
	AddCaEntryWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCaEntry request
	GetCaEntry(ctx context.Context, name string, index int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCerts request
	GetAllCerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCertWithBody request with any body
	CreateCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCert request
	DeleteCert(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCert request
	GetCert(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceCertWithBody request with any body
	ReplaceCertWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCrl request
	GetAllCrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCrlWithBody request with any body
	CreateCrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCrl request
	DeleteCrl(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCrl request
	GetCrl(ctx context.Context, name string, params *GetCrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceCrlWithBody request with any body
	ReplaceCrlWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCrtLists request
	GetAllCrtLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCrtListEntry request
	DeleteCrtListEntry(ctx context.Context, params *DeleteCrtListEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCrtListEntries request
	GetAllCrtListEntries(ctx context.Context, params *GetAllCrtListEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCrtListEntryWithBody request with any body
	AddCrtListEntryWithBody(ctx context.Context, params *AddCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCrtListEntry(ctx context.Context, params *AddCrtListEntryParams, body AddCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStickTables request
	GetStickTables(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStickTable request
	GetStickTable(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStickTableEntries request
	GetStickTableEntries(ctx context.Context, parentName ParentName, params *GetStickTableEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetStickTableEntriesWithBody request with any body
	SetStickTableEntriesWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetStickTableEntries(ctx context.Context, parentName ParentName, body SetStickTableEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSites request
	GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSiteWithBody request with any body
	CreateSiteWithBody(ctx context.Context, params *CreateSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSite(ctx context.Context, params *CreateSiteParams, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSite request
	DeleteSite(ctx context.Context, name string, params *DeleteSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSite request
	GetSite(ctx context.Context, name string, params *GetSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceSiteWithBody request with any body
	ReplaceSiteWithBody(ctx context.Context, name string, params *ReplaceSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceSite(ctx context.Context, name string, params *ReplaceSiteParams, body ReplaceSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpoeEndpoints request
	GetSpoeEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSpoeFiles request
	GetAllSpoeFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpoeWithBody request with any body
	CreateSpoeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpoeFile request
	DeleteSpoeFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneSpoeFile request
	GetOneSpoeFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSpoeScope request
	GetAllSpoeScope(ctx context.Context, parentName ParentName, params *GetAllSpoeScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpoeScopeWithBody request with any body
	CreateSpoeScopeWithBody(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpoeScope(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, body CreateSpoeScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpoeScope request
	DeleteSpoeScope(ctx context.Context, parentName ParentName, name string, params *DeleteSpoeScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpoeScope request
	GetSpoeScope(ctx context.Context, parentName ParentName, name string, params *GetSpoeScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSpoeAgent request
	GetAllSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpoeAgentWithBody request with any body
	CreateSpoeAgentWithBody(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, body CreateSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpoeAgent request
	DeleteSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpoeAgent request
	GetSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceSpoeAgentWithBody request with any body
	ReplaceSpoeAgentWithBody(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, body ReplaceSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSpoeGroup request
	GetAllSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpoeGroupWithBody request with any body
	CreateSpoeGroupWithBody(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, body CreateSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpoeGroup request
	DeleteSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpoeGroup request
	GetSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceSpoeGroupWithBody request with any body
	ReplaceSpoeGroupWithBody(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, body ReplaceSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSpoeMessage request
	GetAllSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpoeMessageWithBody request with any body
	CreateSpoeMessageWithBody(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, body CreateSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpoeMessage request
	DeleteSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpoeMessage request
	GetSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceSpoeMessageWithBody request with any body
	ReplaceSpoeMessageWithBody(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, body ReplaceSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSpoeTransaction request
	GetAllSpoeTransaction(ctx context.Context, parentName ParentName, params *GetAllSpoeTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartSpoeTransaction request
	StartSpoeTransaction(ctx context.Context, parentName ParentName, params *StartSpoeTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpoeTransaction request
	DeleteSpoeTransaction(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpoeTransaction request
	GetSpoeTransaction(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitSpoeTransaction request
	CommitSpoeTransaction(ctx context.Context, parentName ParentName, id string, params *CommitSpoeTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpoeConfigurationVersion request
	GetSpoeConfigurationVersion(ctx context.Context, parentName ParentName, params *GetSpoeConfigurationVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatsEndpoints request
	GetStatsEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStats request
	GetStats(ctx context.Context, params *GetStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageEndpoints request
	GetStorageEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllStorageGeneralFiles request
	GetAllStorageGeneralFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStorageGeneralFileWithBody request with any body
	CreateStorageGeneralFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStorageGeneralFile request
	DeleteStorageGeneralFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneStorageGeneralFile request
	GetOneStorageGeneralFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceStorageGeneralFileWithBody request with any body
	ReplaceStorageGeneralFileWithBody(ctx context.Context, name string, params *ReplaceStorageGeneralFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllStorageMapFiles request
	GetAllStorageMapFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStorageMapFileWithBody request with any body
	CreateStorageMapFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStorageMap request
	DeleteStorageMap(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneStorageMap request
	GetOneStorageMap(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceStorageMapFileWithBody request with any body
	ReplaceStorageMapFileWithBody(ctx context.Context, name string, params *ReplaceStorageMapFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceStorageMapFileWithTextBody(ctx context.Context, name string, params *ReplaceStorageMapFileParams, body ReplaceStorageMapFileTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllStorageSSLCertificates request
	GetAllStorageSSLCertificates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStorageSSLCertificateWithBody request with any body
	CreateStorageSSLCertificateWithBody(ctx context.Context, params *CreateStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStorageSSLCertificate request
	DeleteStorageSSLCertificate(ctx context.Context, name string, params *DeleteStorageSSLCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneStorageSSLCertificate request
	GetOneStorageSSLCertificate(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceStorageSSLCertificateWithBody request with any body
	ReplaceStorageSSLCertificateWithBody(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceStorageSSLCertificateWithTextBody(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, body ReplaceStorageSSLCertificateTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllStorageSSLCrtListFiles request
	GetAllStorageSSLCrtListFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStorageSSLCrtListFileWithBody request with any body
	CreateStorageSSLCrtListFileWithBody(ctx context.Context, params *CreateStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStorageSSLCrtListFile request
	DeleteStorageSSLCrtListFile(ctx context.Context, name string, params *DeleteStorageSSLCrtListFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneStorageSSLCrtListFile request
	GetOneStorageSSLCrtListFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceStorageSSLCrtListFileWithBody request with any body
	ReplaceStorageSSLCrtListFileWithBody(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceStorageSSLCrtListFileWithTextBody(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, body ReplaceStorageSSLCrtListFileTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStorageSSLCrtListEntry request
	DeleteStorageSSLCrtListEntry(ctx context.Context, name string, params *DeleteStorageSSLCrtListEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageSSLCrtListEntries request
	GetStorageSSLCrtListEntries(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStorageSSLCrtListEntryWithBody request with any body
	CreateStorageSSLCrtListEntryWithBody(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStorageSSLCrtListEntry(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, body CreateStorageSSLCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactions request
	GetTransactions(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartTransaction request
	StartTransaction(ctx context.Context, params *StartTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTransaction request
	DeleteTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransaction request
	GetTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitTransaction request
	CommitTransaction(ctx context.Context, id string, params *CommitTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpecification request
	GetSpecification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenapiv3Specification request
	GetOpenapiv3Specification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAPIEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, params *DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClusterWithBody(ctx context.Context, params *PostClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClusterRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCluster(ctx context.Context, params *PostClusterParams, body PostClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClusterRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditClusterWithBody(ctx context.Context, params *EditClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditClusterRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditCluster(ctx context.Context, params *EditClusterParams, body EditClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditClusterRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitiateCertificateRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitiateCertificateRefreshRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAWSRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAWSRegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAWSRegionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAWSRegionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAWSRegion(ctx context.Context, body CreateAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAWSRegionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAWSRegion(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAWSRegionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAWSRegion(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAWSRegionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAWSRegionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAWSRegionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAWSRegion(ctx context.Context, id string, body ReplaceAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAWSRegionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsuls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsulsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConsulWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConsulRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConsul(ctx context.Context, body CreateConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConsulRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsul(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsulRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsul(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsulRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceConsulWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceConsulRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceConsul(ctx context.Context, id string, body ReplaceConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceConsulRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicesEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHaproxyEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHaproxyEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigurationEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAcmeProviders(ctx context.Context, params *GetAcmeProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAcmeProviderWithBody(ctx context.Context, params *CreateAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAcmeProviderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAcmeProvider(ctx context.Context, params *CreateAcmeProviderParams, body CreateAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAcmeProviderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAcmeProvider(ctx context.Context, name string, params *DeleteAcmeProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAcmeProviderRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAcmeProvider(ctx context.Context, name string, params *GetAcmeProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeProviderRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditAcmeProviderWithBody(ctx context.Context, name string, params *EditAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditAcmeProviderRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditAcmeProvider(ctx context.Context, name string, params *EditAcmeProviderParams, body EditAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditAcmeProviderRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackends(ctx context.Context, params *GetBackendsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackendsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackendWithBody(ctx context.Context, params *CreateBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackendRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackend(ctx context.Context, params *CreateBackendParams, body CreateBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackendRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackend(ctx context.Context, name string, params *DeleteBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackendRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackend(ctx context.Context, name string, params *GetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackendRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBackendWithBody(ctx context.Context, name string, params *ReplaceBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBackendRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBackend(ctx context.Context, name string, params *ReplaceBackendParams, body ReplaceBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBackendRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAclBackend(ctx context.Context, parentName ParentName, params *GetAllAclBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAclBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclBackend(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, body ReplaceAllAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAclBackend(ctx context.Context, parentName ParentName, index int, params *DeleteAclBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAclBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAclBackend(ctx context.Context, parentName ParentName, index int, params *GetAclBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAclBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclBackend(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, body CreateAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, body ReplaceAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllFilterBackend(ctx context.Context, parentName ParentName, params *GetAllFilterBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllFilterBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllFilterBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllFilterBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllFilterBackend(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, body ReplaceAllFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllFilterBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFilterBackend(ctx context.Context, parentName ParentName, index int, params *DeleteFilterBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFilterBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilterBackend(ctx context.Context, parentName ParentName, index int, params *GetFilterBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilterBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFilterBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFilterBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFilterBackend(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, body CreateFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFilterBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFilterBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFilterBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFilterBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, body ReplaceFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFilterBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPAfterResponseRuleBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPAfterResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPAfterResponseRuleBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, body ReplaceAllHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPAfterResponseRuleBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPAfterResponseRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPAfterResponseRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPAfterResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPAfterResponseRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, body CreateHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPAfterResponseRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPAfterResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPAfterResponseRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPAfterResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, body ReplaceHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPAfterResponseRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPCheckBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPCheckBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPCheckBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPCheckBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPCheckBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, body ReplaceAllHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPCheckBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPCheckBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPCheckBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPCheckBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, body CreateHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPCheckBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPCheckBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPCheckBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, body ReplaceHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPCheckBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPErrorRuleBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPErrorRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPErrorRuleBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, body ReplaceAllHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPErrorRuleBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPErrorRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPErrorRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, body CreateHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, body ReplaceHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPRequestRuleBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPRequestRuleBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, body ReplaceAllHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPRequestRuleBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPRequestRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPRequestRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRequestRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, body CreateHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRequestRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPRequestRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, body ReplaceHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPRequestRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPResponseRuleBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPResponseRuleBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, body ReplaceAllHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPResponseRuleBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPResponseRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPResponseRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPResponseRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, body CreateHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPResponseRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPResponseRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, body ReplaceHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPResponseRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLogTargetBackend(ctx context.Context, parentName ParentName, params *GetAllLogTargetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLogTargetBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetBackend(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, body ReplaceAllLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogTargetBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *GetLogTargetBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogTargetBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, body CreateLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, body ReplaceLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerSwitchingRules(ctx context.Context, parentName ParentName, params *GetServerSwitchingRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerSwitchingRulesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerSwitchingRulesWithBody(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerSwitchingRulesRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerSwitchingRules(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, body ReplaceServerSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerSwitchingRulesRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *DeleteServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServerSwitchingRuleRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *GetServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerSwitchingRuleRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerSwitchingRuleRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, body CreateServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerSwitchingRuleRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerSwitchingRuleRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerSwitchingRule(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, body ReplaceServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerSwitchingRuleRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerTemplates(ctx context.Context, parentName ParentName, params *GetServerTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerTemplatesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerTemplateWithBody(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerTemplateRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerTemplate(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, body CreateServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerTemplateRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServerTemplate(ctx context.Context, parentName ParentName, prefix string, params *DeleteServerTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServerTemplateRequest(c.Server, parentName, prefix, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerTemplate(ctx context.Context, parentName ParentName, prefix string, params *GetServerTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerTemplateRequest(c.Server, parentName, prefix, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerTemplateWithBody(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerTemplateRequestWithBody(c.Server, parentName, prefix, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerTemplate(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, body ReplaceServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerTemplateRequest(c.Server, parentName, prefix, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllServerBackend(ctx context.Context, parentName ParentName, params *GetAllServerBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllServerBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerBackendWithBody(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerBackend(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, body CreateServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServerBackend(ctx context.Context, parentName ParentName, name string, params *DeleteServerBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServerBackendRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerBackend(ctx context.Context, parentName ParentName, name string, params *GetServerBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerBackendRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerBackendWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerBackendRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerBackend(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, body ReplaceServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerBackendRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStickRules(ctx context.Context, parentName ParentName, params *GetStickRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStickRulesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStickRulesWithBody(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStickRulesRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStickRules(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, body ReplaceStickRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStickRulesRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStickRule(ctx context.Context, parentName ParentName, index int, params *DeleteStickRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStickRuleRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStickRule(ctx context.Context, parentName ParentName, index int, params *GetStickRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStickRuleRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStickRuleWithBody(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStickRuleRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStickRule(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, body CreateStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStickRuleRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStickRuleWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStickRuleRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStickRule(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, body ReplaceStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStickRuleRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTCPCheckBackend(ctx context.Context, parentName ParentName, params *GetAllTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTCPCheckBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPCheckBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPCheckBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPCheckBackend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, body ReplaceAllTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPCheckBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPCheckBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPCheckBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPCheckBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, body CreateTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPCheckBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPCheckBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPCheckBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPCheckBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, body ReplaceTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPCheckBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTCPRequestRuleBackend(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTCPRequestRuleBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPRequestRuleBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPRequestRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, body ReplaceAllTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPRequestRuleBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPRequestRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPRequestRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRequestRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, body CreateTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRequestRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPRequestRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPRequestRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPRequestRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, body ReplaceTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPRequestRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTCPResponseRuleBackend(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTCPResponseRuleBackendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPResponseRuleBackendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPResponseRuleBackend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, body ReplaceAllTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPResponseRuleBackendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPResponseRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPResponseRuleBackendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPResponseRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, body CreateTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPResponseRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPResponseRuleBackendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPResponseRuleBackendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPResponseRuleBackend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, body ReplaceTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPResponseRuleBackendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCaches(ctx context.Context, params *GetCachesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCachesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCacheWithBody(ctx context.Context, params *CreateCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCacheRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCache(ctx context.Context, params *CreateCacheParams, body CreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCacheRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCache(ctx context.Context, name string, params *DeleteCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCacheRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCache(ctx context.Context, name string, params *GetCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCacheRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCacheWithBody(ctx context.Context, name string, params *ReplaceCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCacheRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCache(ctx context.Context, name string, params *ReplaceCacheParams, body ReplaceCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCacheRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCrtLoads(ctx context.Context, params *GetCrtLoadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCrtLoadsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCrtLoadWithBody(ctx context.Context, params *CreateCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCrtLoadRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCrtLoad(ctx context.Context, params *CreateCrtLoadParams, body CreateCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCrtLoadRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCrtLoad(ctx context.Context, certificate string, params *DeleteCrtLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCrtLoadRequest(c.Server, certificate, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCrtLoad(ctx context.Context, certificate string, params *GetCrtLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCrtLoadRequest(c.Server, certificate, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCrtLoadWithBody(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCrtLoadRequestWithBody(c.Server, certificate, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCrtLoad(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, body ReplaceCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCrtLoadRequest(c.Server, certificate, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCrtStores(ctx context.Context, params *GetCrtStoresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCrtStoresRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCrtStoreWithBody(ctx context.Context, params *CreateCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCrtStoreRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCrtStore(ctx context.Context, params *CreateCrtStoreParams, body CreateCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCrtStoreRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCrtStore(ctx context.Context, name string, params *DeleteCrtStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCrtStoreRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCrtStore(ctx context.Context, name string, params *GetCrtStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCrtStoreRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditCrtStoreWithBody(ctx context.Context, name string, params *EditCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditCrtStoreRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditCrtStore(ctx context.Context, name string, params *EditCrtStoreParams, body EditCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditCrtStoreRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultsSections(ctx context.Context, params *GetDefaultsSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultsSectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultsSectionWithBody(ctx context.Context, params *AddDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultsSectionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultsSection(ctx context.Context, params *AddDefaultsSectionParams, body AddDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultsSectionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDefaultsSectionWithBody(ctx context.Context, params *CreateDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDefaultsSectionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDefaultsSection(ctx context.Context, params *CreateDefaultsSectionParams, body CreateDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDefaultsSectionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDefaultsSection(ctx context.Context, name string, params *DeleteDefaultsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDefaultsSectionRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultsSection(ctx context.Context, name string, params *GetDefaultsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultsSectionRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDefaultsSectionWithBody(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDefaultsSectionRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDefaultsSection(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, body ReplaceDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDefaultsSectionRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAclDefaults(ctx context.Context, parentName ParentName, params *GetAllAclDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAclDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, body ReplaceAllAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAclDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteAclDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAclDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAclDefaults(ctx context.Context, parentName ParentName, index int, params *GetAclDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAclDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclDefaults(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, body CreateAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, body ReplaceAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPAfterResponseRuleDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPAfterResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPAfterResponseRuleDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, body ReplaceAllHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPAfterResponseRuleDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPAfterResponseRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPAfterResponseRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPAfterResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPAfterResponseRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, body CreateHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPAfterResponseRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPAfterResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPAfterResponseRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPAfterResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, body ReplaceHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPAfterResponseRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPCheckDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPCheckDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPCheckDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPCheckDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, body ReplaceAllHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPCheckDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPCheckDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPCheckDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPCheckDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, body CreateHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPCheckDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPCheckDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, body ReplaceHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPCheckDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPErrorRuleDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPErrorRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPErrorRuleDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, body ReplaceAllHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPErrorRuleDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPErrorRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPErrorRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, body CreateHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, body ReplaceHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPRequestRuleDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPRequestRuleDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, body ReplaceAllHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPRequestRuleDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPRequestRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPRequestRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRequestRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, body CreateHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRequestRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPRequestRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, body ReplaceHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPRequestRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPResponseRuleDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPResponseRuleDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, body ReplaceAllHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPResponseRuleDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPResponseRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPResponseRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPResponseRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, body CreateHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPResponseRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPResponseRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, body ReplaceHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPResponseRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLogTargetDefaults(ctx context.Context, parentName ParentName, params *GetAllLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLogTargetDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, body ReplaceAllLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogTargetDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *GetLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogTargetDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, body CreateLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, body ReplaceLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllQUICInitialRuleDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllQUICInitialRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllQUICInitialRuleDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, body ReplaceAllQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllQUICInitialRuleDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteQUICInitialRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQUICInitialRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateQUICInitialRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateQUICInitialRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, body CreateQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateQUICInitialRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceQUICInitialRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceQUICInitialRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceQUICInitialRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, body ReplaceQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceQUICInitialRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTCPCheckDefaults(ctx context.Context, parentName ParentName, params *GetAllTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTCPCheckDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPCheckDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPCheckDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, body ReplaceAllTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPCheckDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPCheckDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPCheckDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPCheckDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, body CreateTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPCheckDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPCheckDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPCheckDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPCheckDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, body ReplaceTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPCheckDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTCPRequestRuleDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPRequestRuleDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, body ReplaceAllTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPRequestRuleDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPRequestRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPRequestRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRequestRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, body CreateTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRequestRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPRequestRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPRequestRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPRequestRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, body ReplaceTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPRequestRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTCPResponseRuleDefaultsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPResponseRuleDefaultsRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, body ReplaceAllTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPResponseRuleDefaultsRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPResponseRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPResponseRuleDefaultsRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPResponseRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, body CreateTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPResponseRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPResponseRuleDefaultsWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPResponseRuleDefaultsRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPResponseRuleDefaults(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, body ReplaceTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPResponseRuleDefaultsRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFCGIApps(ctx context.Context, params *GetFCGIAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFCGIAppsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFCGIAppWithBody(ctx context.Context, params *CreateFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFCGIAppRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFCGIApp(ctx context.Context, params *CreateFCGIAppParams, body CreateFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFCGIAppRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFCGIApp(ctx context.Context, name string, params *DeleteFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFCGIAppRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFCGIApp(ctx context.Context, name string, params *GetFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFCGIAppRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFCGIAppWithBody(ctx context.Context, name string, params *ReplaceFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFCGIAppRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFCGIApp(ctx context.Context, name string, params *ReplaceFCGIAppParams, body ReplaceFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFCGIAppRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAclFCGIApp(ctx context.Context, parentName ParentName, params *GetAllAclFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAclFCGIAppRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclFCGIAppWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclFCGIAppRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclFCGIApp(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, body ReplaceAllAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclFCGIAppRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *DeleteAclFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAclFCGIAppRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *GetAclFCGIAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAclFCGIAppRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclFCGIAppWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclFCGIAppRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, body CreateAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclFCGIAppRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclFCGIAppWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclFCGIAppRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclFCGIApp(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, body ReplaceAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclFCGIAppRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFrontends(ctx context.Context, params *GetFrontendsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFrontendsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFrontendWithBody(ctx context.Context, params *CreateFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFrontendRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFrontend(ctx context.Context, params *CreateFrontendParams, body CreateFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFrontendRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFrontend(ctx context.Context, name string, params *DeleteFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFrontendRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFrontend(ctx context.Context, name string, params *GetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFrontendRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFrontendWithBody(ctx context.Context, name string, params *ReplaceFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFrontendRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFrontend(ctx context.Context, name string, params *ReplaceFrontendParams, body ReplaceFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFrontendRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAclFrontend(ctx context.Context, parentName ParentName, params *GetAllAclFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAclFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllAclFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, body ReplaceAllAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllAclFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAclFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteAclFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAclFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAclFrontend(ctx context.Context, parentName ParentName, index int, params *GetAclFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAclFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAclFrontend(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, body CreateAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAclFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAclFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, body ReplaceAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAclFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackendSwitchingRules(ctx context.Context, parentName ParentName, params *GetBackendSwitchingRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackendSwitchingRulesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBackendSwitchingRulesWithBody(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBackendSwitchingRulesRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBackendSwitchingRules(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, body ReplaceBackendSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBackendSwitchingRulesRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *DeleteBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackendSwitchingRuleRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *GetBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackendSwitchingRuleRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackendSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackendSwitchingRuleRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, body CreateBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackendSwitchingRuleRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBackendSwitchingRuleWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBackendSwitchingRuleRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBackendSwitchingRule(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, body ReplaceBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBackendSwitchingRuleRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllBindFrontend(ctx context.Context, parentName ParentName, params *GetAllBindFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllBindFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBindFrontendWithBody(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBindFrontend(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, body CreateBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBindFrontend(ctx context.Context, parentName ParentName, name string, params *DeleteBindFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBindFrontendRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBindFrontend(ctx context.Context, parentName ParentName, name string, params *GetBindFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBindFrontendRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBindFrontendWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBindFrontendRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBindFrontend(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, body ReplaceBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBindFrontendRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeclareCaptures(ctx context.Context, parentName ParentName, params *GetDeclareCapturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeclareCapturesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeclareCapturesWithBody(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeclareCapturesRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeclareCaptures(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, body ReplaceDeclareCapturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeclareCapturesRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeclareCapture(ctx context.Context, parentName ParentName, index int, params *DeleteDeclareCaptureParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeclareCaptureRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeclareCapture(ctx context.Context, parentName ParentName, index int, params *GetDeclareCaptureParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeclareCaptureRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeclareCaptureWithBody(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeclareCaptureRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeclareCapture(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, body CreateDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeclareCaptureRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeclareCaptureWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeclareCaptureRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeclareCapture(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, body ReplaceDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeclareCaptureRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllFilterFrontend(ctx context.Context, parentName ParentName, params *GetAllFilterFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllFilterFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllFilterFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllFilterFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllFilterFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, body ReplaceAllFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllFilterFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFilterFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteFilterFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFilterFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilterFrontend(ctx context.Context, parentName ParentName, index int, params *GetFilterFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilterFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFilterFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFilterFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFilterFrontend(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, body CreateFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFilterFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFilterFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFilterFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFilterFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, body ReplaceFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFilterFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPAfterResponseRuleFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPAfterResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPAfterResponseRuleFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, body ReplaceAllHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPAfterResponseRuleFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPAfterResponseRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPAfterResponseRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPAfterResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPAfterResponseRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, body CreateHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPAfterResponseRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPAfterResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPAfterResponseRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPAfterResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, body ReplaceHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPAfterResponseRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPErrorRuleFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPErrorRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPErrorRuleFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, body ReplaceAllHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPErrorRuleFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPErrorRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPErrorRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, body CreateHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, body ReplaceHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPRequestRuleFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPRequestRuleFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, body ReplaceAllHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPRequestRuleFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPRequestRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPRequestRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRequestRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, body CreateHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRequestRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPRequestRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, body ReplaceHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPRequestRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHTTPResponseRuleFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPResponseRuleFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, body ReplaceAllHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllHTTPResponseRuleFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPResponseRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPResponseRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPResponseRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, body CreateHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPResponseRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPResponseRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPResponseRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPResponseRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, body ReplaceHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPResponseRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLogTargetFrontend(ctx context.Context, parentName ParentName, params *GetAllLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLogTargetFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, body ReplaceAllLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogTargetFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *GetLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogTargetFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, body CreateLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, body ReplaceLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllQUICInitialRuleFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllQUICInitialRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllQUICInitialRuleFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, body ReplaceAllQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllQUICInitialRuleFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteQUICInitialRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQUICInitialRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateQUICInitialRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateQUICInitialRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, body CreateQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateQUICInitialRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceQUICInitialRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceQUICInitialRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceQUICInitialRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, body ReplaceQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceQUICInitialRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSSLFrontUses(ctx context.Context, parentName ParentName, params *GetAllSSLFrontUsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSSLFrontUsesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSSLFrontUseWithBody(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSSLFrontUseRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSSLFrontUse(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, body CreateSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSSLFrontUseRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSSLFrontUse(ctx context.Context, parentName ParentName, index int, params *DeleteSSLFrontUseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSSLFrontUseRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSSLFrontUse(ctx context.Context, parentName ParentName, index int, params *GetSSLFrontUseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSSLFrontUseRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSSLFrontUseWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSSLFrontUseRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSSLFrontUse(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, body ReplaceSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSSLFrontUseRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTCPRequestRuleFrontendRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPRequestRuleFrontendRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, body ReplaceAllTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllTCPRequestRuleFrontendRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPRequestRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPRequestRuleFrontendRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRequestRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, body CreateTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRequestRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPRequestRuleFrontendWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPRequestRuleFrontendRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTCPRequestRuleFrontend(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, body ReplaceTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTCPRequestRuleFrontendRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobal(ctx context.Context, params *GetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceGlobalWithBody(ctx context.Context, params *ReplaceGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceGlobalRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceGlobal(ctx context.Context, params *ReplaceGlobalParams, body ReplaceGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceGlobalRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLogTargetGlobal(ctx context.Context, params *GetAllLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLogTargetGlobalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetGlobalWithBody(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetGlobalRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetGlobal(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, body ReplaceAllLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetGlobalRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogTargetGlobal(ctx context.Context, index int, params *DeleteLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogTargetGlobalRequest(c.Server, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogTargetGlobal(ctx context.Context, index int, params *GetLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogTargetGlobalRequest(c.Server, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetGlobalWithBody(ctx context.Context, index int, params *CreateLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetGlobalRequestWithBody(c.Server, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetGlobal(ctx context.Context, index int, params *CreateLogTargetGlobalParams, body CreateLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetGlobalRequest(c.Server, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetGlobalWithBody(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetGlobalRequestWithBody(c.Server, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetGlobal(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, body ReplaceLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetGlobalRequest(c.Server, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroups(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupWithBody(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroup(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroup(ctx context.Context, name string, params *DeleteGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroup(ctx context.Context, name string, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceGroupWithBody(ctx context.Context, name string, params *ReplaceGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceGroupRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceGroup(ctx context.Context, name string, params *ReplaceGroupParams, body ReplaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceGroupRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPErrorsSections(ctx context.Context, params *GetHTTPErrorsSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPErrorsSectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorsSectionWithBody(ctx context.Context, params *CreateHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorsSectionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPErrorsSection(ctx context.Context, params *CreateHTTPErrorsSectionParams, body CreateHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPErrorsSectionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPErrorsSection(ctx context.Context, name string, params *DeleteHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPErrorsSectionRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPErrorsSection(ctx context.Context, name string, params *GetHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPErrorsSectionRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorsSectionWithBody(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorsSectionRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceHTTPErrorsSection(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, body ReplaceHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceHTTPErrorsSectionRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogForwards(ctx context.Context, params *GetLogForwardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogForwardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogForwardWithBody(ctx context.Context, params *CreateLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogForwardRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogForward(ctx context.Context, params *CreateLogForwardParams, body CreateLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogForwardRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogForward(ctx context.Context, name string, params *DeleteLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogForwardRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogForward(ctx context.Context, name string, params *GetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogForwardRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogForwardWithBody(ctx context.Context, name string, params *ReplaceLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogForwardRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogForward(ctx context.Context, name string, params *ReplaceLogForwardParams, body ReplaceLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogForwardRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllBindLogForward(ctx context.Context, parentName ParentName, params *GetAllBindLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllBindLogForwardRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBindLogForwardWithBody(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindLogForwardRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBindLogForward(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, body CreateBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindLogForwardRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBindLogForward(ctx context.Context, parentName ParentName, name string, params *DeleteBindLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBindLogForwardRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBindLogForward(ctx context.Context, parentName ParentName, name string, params *GetBindLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBindLogForwardRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBindLogForwardWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBindLogForwardRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBindLogForward(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, body ReplaceBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBindLogForwardRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDgramBinds(ctx context.Context, parentName ParentName, params *GetDgramBindsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDgramBindsRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDgramBindWithBody(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDgramBindRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDgramBind(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, body CreateDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDgramBindRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDgramBind(ctx context.Context, parentName ParentName, name string, params *DeleteDgramBindParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDgramBindRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDgramBind(ctx context.Context, parentName ParentName, name string, params *GetDgramBindParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDgramBindRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDgramBindWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDgramBindRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDgramBind(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, body ReplaceDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDgramBindRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLogTargetLogForward(ctx context.Context, parentName ParentName, params *GetAllLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLogTargetLogForwardRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetLogForwardWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetLogForwardRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetLogForward(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, body ReplaceAllLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetLogForwardRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogTargetLogForwardRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *GetLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogTargetLogForwardRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetLogForwardWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetLogForwardRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, body CreateLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetLogForwardRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetLogForwardWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetLogForwardRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetLogForward(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, body ReplaceLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetLogForwardRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogProfiles(ctx context.Context, params *GetLogProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogProfileWithBody(ctx context.Context, params *CreateLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogProfileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogProfile(ctx context.Context, params *CreateLogProfileParams, body CreateLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogProfileRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogProfile(ctx context.Context, name string, params *DeleteLogProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogProfileRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogProfile(ctx context.Context, name string, params *GetLogProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogProfileRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditLogProfileWithBody(ctx context.Context, name string, params *EditLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditLogProfileRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditLogProfile(ctx context.Context, name string, params *EditLogProfileParams, body EditLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditLogProfileRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMailerEntries(ctx context.Context, params *GetMailerEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMailerEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMailerEntryWithBody(ctx context.Context, params *CreateMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMailerEntryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMailerEntry(ctx context.Context, params *CreateMailerEntryParams, body CreateMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMailerEntryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMailerEntry(ctx context.Context, name string, params *DeleteMailerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMailerEntryRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMailerEntry(ctx context.Context, name string, params *GetMailerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMailerEntryRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceMailerEntryWithBody(ctx context.Context, name string, params *ReplaceMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceMailerEntryRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceMailerEntry(ctx context.Context, name string, params *ReplaceMailerEntryParams, body ReplaceMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceMailerEntryRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMailersSections(ctx context.Context, params *GetMailersSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMailersSectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMailersSectionWithBody(ctx context.Context, params *CreateMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMailersSectionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMailersSection(ctx context.Context, params *CreateMailersSectionParams, body CreateMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMailersSectionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMailersSection(ctx context.Context, name string, params *DeleteMailersSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMailersSectionRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMailersSection(ctx context.Context, name string, params *GetMailersSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMailersSectionRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMailersSectionWithBody(ctx context.Context, name string, params *EditMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMailersSectionRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMailersSection(ctx context.Context, name string, params *EditMailersSectionParams, body EditMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMailersSectionRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNameservers(ctx context.Context, params *GetNameserversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNameserversRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNameserverWithBody(ctx context.Context, params *CreateNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNameserverRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNameserver(ctx context.Context, params *CreateNameserverParams, body CreateNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNameserverRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNameserver(ctx context.Context, name string, params *DeleteNameserverParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNameserverRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNameserver(ctx context.Context, name string, params *GetNameserverParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNameserverRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceNameserverWithBody(ctx context.Context, name string, params *ReplaceNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceNameserverRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceNameserver(ctx context.Context, name string, params *ReplaceNameserverParams, body ReplaceNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceNameserverRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeerEntries(ctx context.Context, params *GetPeerEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeerEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePeerEntryWithBody(ctx context.Context, params *CreatePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePeerEntryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePeerEntry(ctx context.Context, params *CreatePeerEntryParams, body CreatePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePeerEntryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePeerEntry(ctx context.Context, name string, params *DeletePeerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePeerEntryRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeerEntry(ctx context.Context, name string, params *GetPeerEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeerEntryRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacePeerEntryWithBody(ctx context.Context, name string, params *ReplacePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacePeerEntryRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacePeerEntry(ctx context.Context, name string, params *ReplacePeerEntryParams, body ReplacePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacePeerEntryRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeerSections(ctx context.Context, params *GetPeerSectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeerSectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePeerWithBody(ctx context.Context, params *CreatePeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePeerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePeer(ctx context.Context, params *CreatePeerParams, body CreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePeerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePeer(ctx context.Context, name string, params *DeletePeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePeerRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeerSection(ctx context.Context, name string, params *GetPeerSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeerSectionRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllBindPeer(ctx context.Context, parentName ParentName, params *GetAllBindPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllBindPeerRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBindPeerWithBody(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindPeerRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBindPeer(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, body CreateBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindPeerRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBindPeer(ctx context.Context, parentName ParentName, name string, params *DeleteBindPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBindPeerRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBindPeer(ctx context.Context, parentName ParentName, name string, params *GetBindPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBindPeerRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBindPeerWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBindPeerRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceBindPeer(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, body ReplaceBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceBindPeerRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLogTargetPeer(ctx context.Context, parentName ParentName, params *GetAllLogTargetPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLogTargetPeerRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetPeerWithBody(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetPeerRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAllLogTargetPeer(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, body ReplaceAllLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAllLogTargetPeerRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogTargetPeerRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *GetLogTargetPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogTargetPeerRequest(c.Server, parentName, index, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetPeerWithBody(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetPeerRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, body CreateLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogTargetPeerRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetPeerWithBody(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetPeerRequestWithBody(c.Server, parentName, index, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLogTargetPeer(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, body ReplaceLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLogTargetPeerRequest(c.Server, parentName, index, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllServerPeer(ctx context.Context, parentName ParentName, params *GetAllServerPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllServerPeerRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerPeerWithBody(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerPeerRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerPeer(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, body CreateServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerPeerRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServerPeer(ctx context.Context, parentName ParentName, name string, params *DeleteServerPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServerPeerRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerPeer(ctx context.Context, parentName ParentName, name string, params *GetServerPeerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerPeerRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerPeerWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerPeerRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerPeer(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, body ReplaceServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerPeerRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTables(ctx context.Context, parentName ParentName, params *GetTablesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTablesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTableWithBody(ctx context.Context, parentName ParentName, params *CreateTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTableRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTable(ctx context.Context, parentName ParentName, params *CreateTableParams, body CreateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTableRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTable(ctx context.Context, parentName ParentName, name string, params *DeleteTableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTableRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTable(ctx context.Context, parentName ParentName, name string, params *GetTableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTableWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTableRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTable(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, body ReplaceTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTableRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrograms(ctx context.Context, params *GetProgramsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProgramsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProgramWithBody(ctx context.Context, params *CreateProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProgramRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProgram(ctx context.Context, params *CreateProgramParams, body CreateProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProgramRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProgram(ctx context.Context, name string, params *DeleteProgramParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProgramRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProgram(ctx context.Context, name string, params *GetProgramParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProgramRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceProgramWithBody(ctx context.Context, name string, params *ReplaceProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceProgramRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceProgram(ctx context.Context, name string, params *ReplaceProgramParams, body ReplaceProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceProgramRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHAProxyConfiguration(ctx context.Context, params *GetHAProxyConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHAProxyConfigurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHAProxyConfigurationWithBody(ctx context.Context, params *PostHAProxyConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHAProxyConfigurationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHAProxyConfigurationWithTextBody(ctx context.Context, params *PostHAProxyConfigurationParams, body PostHAProxyConfigurationTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHAProxyConfigurationRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResolvers(ctx context.Context, params *GetResolversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResolversRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResolverWithBody(ctx context.Context, params *CreateResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResolverRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResolver(ctx context.Context, params *CreateResolverParams, body CreateResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResolverRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResolver(ctx context.Context, name string, params *DeleteResolverParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResolverRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResolver(ctx context.Context, name string, params *GetResolverParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResolverRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceResolverWithBody(ctx context.Context, name string, params *ReplaceResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceResolverRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceResolver(ctx context.Context, name string, params *ReplaceResolverParams, body ReplaceResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceResolverRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRings(ctx context.Context, params *GetRingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRingWithBody(ctx context.Context, params *CreateRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRingRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRing(ctx context.Context, params *CreateRingParams, body CreateRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRingRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRing(ctx context.Context, name string, params *DeleteRingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRingRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRing(ctx context.Context, name string, params *GetRingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRingRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceRingWithBody(ctx context.Context, name string, params *ReplaceRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceRingRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceRing(ctx context.Context, name string, params *ReplaceRingParams, body ReplaceRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceRingRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllServerRing(ctx context.Context, parentName ParentName, params *GetAllServerRingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllServerRingRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerRingWithBody(ctx context.Context, parentName ParentName, params *CreateServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerRingRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServerRing(ctx context.Context, parentName ParentName, params *CreateServerRingParams, body CreateServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServerRingRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServerRing(ctx context.Context, parentName ParentName, name string, params *DeleteServerRingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServerRingRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerRing(ctx context.Context, parentName ParentName, name string, params *GetServerRingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerRingRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerRingWithBody(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerRingRequestWithBody(c.Server, parentName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceServerRing(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, body ReplaceServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceServerRingRequest(c.Server, parentName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTraces(ctx context.Context, params *DeleteTracesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTracesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraces(ctx context.Context, params *GetTracesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTracesWithBody(ctx context.Context, params *CreateTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTracesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTraces(ctx context.Context, params *CreateTracesParams, body CreateTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTracesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTracesWithBody(ctx context.Context, params *ReplaceTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTracesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceTraces(ctx context.Context, params *ReplaceTracesParams, body ReplaceTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceTracesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTraceEntryWithBody(ctx context.Context, params *DeleteTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTraceEntryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTraceEntry(ctx context.Context, params *DeleteTraceEntryParams, body DeleteTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTraceEntryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTraceEntryWithBody(ctx context.Context, params *CreateTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTraceEntryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTraceEntry(ctx context.Context, params *CreateTraceEntryParams, body CreateTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTraceEntryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserlists(ctx context.Context, params *GetUserlistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserlistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserlistWithBody(ctx context.Context, params *CreateUserlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserlistRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserlist(ctx context.Context, params *CreateUserlistParams, body CreateUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserlistRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserlist(ctx context.Context, name string, params *DeleteUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserlistRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserlist(ctx context.Context, name string, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserlistRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, params *CreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, params *CreateUserParams, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, username string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, username string, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceUserWithBody(ctx context.Context, username string, params *ReplaceUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceUserRequestWithBody(c.Server, username, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceUser(ctx context.Context, username string, params *ReplaceUserParams, body ReplaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceUserRequest(c.Server, username, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigurationVersion(ctx context.Context, params *GetConfigurationVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationVersionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReloads(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReloadsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReloadRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRuntimeEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuntimeEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicesHaproxyRuntimeAcls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesHaproxyRuntimeAclsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicesHaproxyRuntimeAclsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesHaproxyRuntimeAclsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicesHaproxyRuntimeAclsParentNameEntries(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesHaproxyRuntimeAclsParentNameEntriesRequest(c.Server, parentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicesHaproxyRuntimeAclsParentNameEntriesWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicesHaproxyRuntimeAclsParentNameEntriesRequestWithBody(c.Server, parentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicesHaproxyRuntimeAclsParentNameEntries(ctx context.Context, parentName ParentName, body PostServicesHaproxyRuntimeAclsParentNameEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicesHaproxyRuntimeAclsParentNameEntriesRequest(c.Server, parentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPayloadRuntimeACLWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPayloadRuntimeACLRequestWithBody(c.Server, parentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPayloadRuntimeACL(ctx context.Context, parentName ParentName, body AddPayloadRuntimeACLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPayloadRuntimeACLRequest(c.Server, parentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServicesHaproxyRuntimeAclsParentNameEntriesId(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServicesHaproxyRuntimeAclsParentNameEntriesIdRequest(c.Server, parentName, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicesHaproxyRuntimeAclsParentNameEntriesId(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesHaproxyRuntimeAclsParentNameEntriesIdRequest(c.Server, parentName, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllRuntimeServer(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRuntimeServerRequest(c.Server, parentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRuntimeServerWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRuntimeServerRequestWithBody(c.Server, parentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRuntimeServer(ctx context.Context, parentName ParentName, body AddRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRuntimeServerRequest(c.Server, parentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRuntimeServer(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRuntimeServerRequest(c.Server, parentName, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRuntimeServer(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuntimeServerRequest(c.Server, parentName, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceRuntimeServerWithBody(ctx context.Context, parentName ParentName, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceRuntimeServerRequestWithBody(c.Server, parentName, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceRuntimeServer(ctx context.Context, parentName ParentName, name string, body ReplaceRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceRuntimeServerRequest(c.Server, parentName, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHaproxyProcessInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHaproxyProcessInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllRuntimeMapFiles(ctx context.Context, params *GetAllRuntimeMapFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRuntimeMapFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClearRuntimeMap(ctx context.Context, name string, params *ClearRuntimeMapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClearRuntimeMapRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneRuntimeMap(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneRuntimeMapRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPayloadRuntimeMapWithBody(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPayloadRuntimeMapRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPayloadRuntimeMap(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, body AddPayloadRuntimeMapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPayloadRuntimeMapRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowRuntimeMap(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowRuntimeMapRequest(c.Server, parentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMapEntryWithBody(ctx context.Context, parentName ParentName, params *AddMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMapEntryRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMapEntry(ctx context.Context, parentName ParentName, params *AddMapEntryParams, body AddMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMapEntryRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRuntimeMapEntry(ctx context.Context, parentName ParentName, id string, params *DeleteRuntimeMapEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRuntimeMapEntryRequest(c.Server, parentName, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRuntimeMapEntry(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuntimeMapEntryRequest(c.Server, parentName, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceRuntimeMapEntryWithBody(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceRuntimeMapEntryRequestWithBody(c.Server, parentName, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceRuntimeMapEntry(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, body ReplaceRuntimeMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceRuntimeMapEntryRequest(c.Server, parentName, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCaFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCaFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCaFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCaFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCaFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCaFileRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCaFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCaFileRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCaFileWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCaFileRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCaEntryWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCaEntryRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCaEntry(ctx context.Context, name string, index int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCaEntryRequest(c.Server, name, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCertsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCert(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCert(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCertWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCertRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCrlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCrlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCrl(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCrlRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCrl(ctx context.Context, name string, params *GetCrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCrlRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCrlWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCrlRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCrtLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCrtListsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCrtListEntry(ctx context.Context, params *DeleteCrtListEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCrtListEntryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCrtListEntries(ctx context.Context, params *GetAllCrtListEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCrtListEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCrtListEntryWithBody(ctx context.Context, params *AddCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCrtListEntryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCrtListEntry(ctx context.Context, params *AddCrtListEntryParams, body AddCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCrtListEntryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStickTables(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStickTablesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStickTable(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStickTableRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStickTableEntries(ctx context.Context, parentName ParentName, params *GetStickTableEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStickTableEntriesRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetStickTableEntriesWithBody(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetStickTableEntriesRequestWithBody(c.Server, parentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetStickTableEntries(ctx context.Context, parentName ParentName, body SetStickTableEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetStickTableEntriesRequest(c.Server, parentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSitesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSiteWithBody(ctx context.Context, params *CreateSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSiteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSite(ctx context.Context, params *CreateSiteParams, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSiteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSite(ctx context.Context, name string, params *DeleteSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSiteRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSite(ctx context.Context, name string, params *GetSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiteRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSiteWithBody(ctx context.Context, name string, params *ReplaceSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSiteRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSite(ctx context.Context, name string, params *ReplaceSiteParams, body ReplaceSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSiteRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpoeEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpoeEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSpoeFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSpoeFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpoeFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpoeFileRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneSpoeFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneSpoeFileRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSpoeScope(ctx context.Context, parentName ParentName, params *GetAllSpoeScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSpoeScopeRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeScopeWithBody(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeScopeRequestWithBody(c.Server, parentName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeScope(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, body CreateSpoeScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeScopeRequest(c.Server, parentName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpoeScope(ctx context.Context, parentName ParentName, name string, params *DeleteSpoeScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpoeScopeRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpoeScope(ctx context.Context, parentName ParentName, name string, params *GetSpoeScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpoeScopeRequest(c.Server, parentName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSpoeAgentRequest(c.Server, parentName, scopeName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeAgentWithBody(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeAgentRequestWithBody(c.Server, parentName, scopeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, body CreateSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeAgentRequest(c.Server, parentName, scopeName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpoeAgentRequest(c.Server, parentName, scopeName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpoeAgentRequest(c.Server, parentName, scopeName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSpoeAgentWithBody(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSpoeAgentRequestWithBody(c.Server, parentName, scopeName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSpoeAgent(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, body ReplaceSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSpoeAgentRequest(c.Server, parentName, scopeName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSpoeGroupRequest(c.Server, parentName, scopeName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeGroupWithBody(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeGroupRequestWithBody(c.Server, parentName, scopeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, body CreateSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeGroupRequest(c.Server, parentName, scopeName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpoeGroupRequest(c.Server, parentName, scopeName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpoeGroupRequest(c.Server, parentName, scopeName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSpoeGroupWithBody(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSpoeGroupRequestWithBody(c.Server, parentName, scopeName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSpoeGroup(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, body ReplaceSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSpoeGroupRequest(c.Server, parentName, scopeName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSpoeMessageRequest(c.Server, parentName, scopeName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeMessageWithBody(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeMessageRequestWithBody(c.Server, parentName, scopeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, body CreateSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpoeMessageRequest(c.Server, parentName, scopeName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpoeMessageRequest(c.Server, parentName, scopeName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpoeMessageRequest(c.Server, parentName, scopeName, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSpoeMessageWithBody(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSpoeMessageRequestWithBody(c.Server, parentName, scopeName, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceSpoeMessage(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, body ReplaceSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceSpoeMessageRequest(c.Server, parentName, scopeName, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSpoeTransaction(ctx context.Context, parentName ParentName, params *GetAllSpoeTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSpoeTransactionRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartSpoeTransaction(ctx context.Context, parentName ParentName, params *StartSpoeTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartSpoeTransactionRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpoeTransaction(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpoeTransactionRequest(c.Server, parentName, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpoeTransaction(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpoeTransactionRequest(c.Server, parentName, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitSpoeTransaction(ctx context.Context, parentName ParentName, id string, params *CommitSpoeTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitSpoeTransactionRequest(c.Server, parentName, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpoeConfigurationVersion(ctx context.Context, parentName ParentName, params *GetSpoeConfigurationVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpoeConfigurationVersionRequest(c.Server, parentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatsEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStats(ctx context.Context, params *GetStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllStorageGeneralFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllStorageGeneralFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStorageGeneralFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStorageGeneralFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStorageGeneralFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStorageGeneralFileRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneStorageGeneralFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneStorageGeneralFileRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStorageGeneralFileWithBody(ctx context.Context, name string, params *ReplaceStorageGeneralFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStorageGeneralFileRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllStorageMapFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllStorageMapFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStorageMapFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStorageMapFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStorageMap(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStorageMapRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneStorageMap(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneStorageMapRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStorageMapFileWithBody(ctx context.Context, name string, params *ReplaceStorageMapFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStorageMapFileRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStorageMapFileWithTextBody(ctx context.Context, name string, params *ReplaceStorageMapFileParams, body ReplaceStorageMapFileTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStorageMapFileRequestWithTextBody(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllStorageSSLCertificates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllStorageSSLCertificatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStorageSSLCertificateWithBody(ctx context.Context, params *CreateStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStorageSSLCertificateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStorageSSLCertificate(ctx context.Context, name string, params *DeleteStorageSSLCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStorageSSLCertificateRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneStorageSSLCertificate(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneStorageSSLCertificateRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStorageSSLCertificateWithBody(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStorageSSLCertificateRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStorageSSLCertificateWithTextBody(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, body ReplaceStorageSSLCertificateTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStorageSSLCertificateRequestWithTextBody(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllStorageSSLCrtListFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllStorageSSLCrtListFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStorageSSLCrtListFileWithBody(ctx context.Context, params *CreateStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStorageSSLCrtListFileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStorageSSLCrtListFile(ctx context.Context, name string, params *DeleteStorageSSLCrtListFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStorageSSLCrtListFileRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneStorageSSLCrtListFile(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneStorageSSLCrtListFileRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStorageSSLCrtListFileWithBody(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStorageSSLCrtListFileRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceStorageSSLCrtListFileWithTextBody(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, body ReplaceStorageSSLCrtListFileTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceStorageSSLCrtListFileRequestWithTextBody(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStorageSSLCrtListEntry(ctx context.Context, name string, params *DeleteStorageSSLCrtListEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStorageSSLCrtListEntryRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageSSLCrtListEntries(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageSSLCrtListEntriesRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStorageSSLCrtListEntryWithBody(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStorageSSLCrtListEntryRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStorageSSLCrtListEntry(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, body CreateStorageSSLCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStorageSSLCrtListEntryRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransactions(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartTransaction(ctx context.Context, params *StartTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartTransactionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTransactionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitTransaction(ctx context.Context, id string, params *CommitTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitTransactionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpecification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpecificationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenapiv3Specification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenapiv3SpecificationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAPIEndpointsRequest generates requests for GetAPIEndpoints
func NewGetAPIEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, params *DeleteClusterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Configuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configuration", runtime.ParamLocationQuery, *params.Configuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClusterRequest calls the generic PostCluster builder with application/json body
func NewPostClusterRequest(server string, params *PostClusterParams, body PostClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClusterRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostClusterRequestWithBody generates requests for PostCluster with any type of body
func NewPostClusterRequestWithBody(server string, params *PostClusterParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Configuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configuration", runtime.ParamLocationQuery, *params.Configuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdvertisedAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertised_address", runtime.ParamLocationQuery, *params.AdvertisedAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdvertisedPort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertised_port", runtime.ParamLocationQuery, *params.AdvertisedPort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEditClusterRequest calls the generic EditCluster builder with application/json body
func NewEditClusterRequest(server string, params *EditClusterParams, body EditClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditClusterRequestWithBody(server, params, "application/json", bodyReader)
}

// NewEditClusterRequestWithBody generates requests for EditCluster with any type of body
func NewEditClusterRequestWithBody(server string, params *EditClusterParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInitiateCertificateRefreshRequest generates requests for InitiateCertificateRefresh
func NewInitiateCertificateRefreshRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/certificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInfoRequest generates requests for GetInfo
func NewGetInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAWSRegionsRequest generates requests for GetAWSRegions
func NewGetAWSRegionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAWSRegionRequest calls the generic CreateAWSRegion builder with application/json body
func NewCreateAWSRegionRequest(server string, body CreateAWSRegionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAWSRegionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAWSRegionRequestWithBody generates requests for CreateAWSRegion with any type of body
func NewCreateAWSRegionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAWSRegionRequest generates requests for DeleteAWSRegion
func NewDeleteAWSRegionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/aws/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAWSRegionRequest generates requests for GetAWSRegion
func NewGetAWSRegionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/aws/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAWSRegionRequest calls the generic ReplaceAWSRegion builder with application/json body
func NewReplaceAWSRegionRequest(server string, id string, body ReplaceAWSRegionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAWSRegionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceAWSRegionRequestWithBody generates requests for ReplaceAWSRegion with any type of body
func NewReplaceAWSRegionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/aws/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConsulsRequest generates requests for GetConsuls
func NewGetConsulsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/consul")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConsulRequest calls the generic CreateConsul builder with application/json body
func NewCreateConsulRequest(server string, body CreateConsulJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConsulRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConsulRequestWithBody generates requests for CreateConsul with any type of body
func NewCreateConsulRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/consul")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConsulRequest generates requests for DeleteConsul
func NewDeleteConsulRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/consul/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConsulRequest generates requests for GetConsul
func NewGetConsulRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/consul/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceConsulRequest calls the generic ReplaceConsul builder with application/json body
func NewReplaceConsulRequest(server string, id string, body ReplaceConsulJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceConsulRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceConsulRequestWithBody generates requests for ReplaceConsul with any type of body
func NewReplaceConsulRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_discovery/consul/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServicesEndpointsRequest generates requests for GetServicesEndpoints
func NewGetServicesEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHaproxyEndpointsRequest generates requests for GetHaproxyEndpoints
func NewGetHaproxyEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigurationEndpointsRequest generates requests for GetConfigurationEndpoints
func NewGetConfigurationEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAcmeProvidersRequest generates requests for GetAcmeProviders
func NewGetAcmeProvidersRequest(server string, params *GetAcmeProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/acme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAcmeProviderRequest calls the generic CreateAcmeProvider builder with application/json body
func NewCreateAcmeProviderRequest(server string, params *CreateAcmeProviderParams, body CreateAcmeProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAcmeProviderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAcmeProviderRequestWithBody generates requests for CreateAcmeProvider with any type of body
func NewCreateAcmeProviderRequestWithBody(server string, params *CreateAcmeProviderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/acme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAcmeProviderRequest generates requests for DeleteAcmeProvider
func NewDeleteAcmeProviderRequest(server string, name string, params *DeleteAcmeProviderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/acme/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAcmeProviderRequest generates requests for GetAcmeProvider
func NewGetAcmeProviderRequest(server string, name string, params *GetAcmeProviderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/acme/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditAcmeProviderRequest calls the generic EditAcmeProvider builder with application/json body
func NewEditAcmeProviderRequest(server string, name string, params *EditAcmeProviderParams, body EditAcmeProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditAcmeProviderRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewEditAcmeProviderRequestWithBody generates requests for EditAcmeProvider with any type of body
func NewEditAcmeProviderRequestWithBody(server string, name string, params *EditAcmeProviderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/acme/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBackendsRequest generates requests for GetBackends
func NewGetBackendsRequest(server string, params *GetBackendsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBackendRequest calls the generic CreateBackend builder with application/json body
func NewCreateBackendRequest(server string, params *CreateBackendParams, body CreateBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBackendRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateBackendRequestWithBody generates requests for CreateBackend with any type of body
func NewCreateBackendRequestWithBody(server string, params *CreateBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBackendRequest generates requests for DeleteBackend
func NewDeleteBackendRequest(server string, name string, params *DeleteBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackendRequest generates requests for GetBackend
func NewGetBackendRequest(server string, name string, params *GetBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceBackendRequest calls the generic ReplaceBackend builder with application/json body
func NewReplaceBackendRequest(server string, name string, params *ReplaceBackendParams, body ReplaceBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceBackendRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceBackendRequestWithBody generates requests for ReplaceBackend with any type of body
func NewReplaceBackendRequestWithBody(server string, name string, params *ReplaceBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAclBackendRequest generates requests for GetAllAclBackend
func NewGetAllAclBackendRequest(server string, parentName ParentName, params *GetAllAclBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AclName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acl_name", runtime.ParamLocationQuery, *params.AclName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllAclBackendRequest calls the generic ReplaceAllAclBackend builder with application/json body
func NewReplaceAllAclBackendRequest(server string, parentName ParentName, params *ReplaceAllAclBackendParams, body ReplaceAllAclBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllAclBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllAclBackendRequestWithBody generates requests for ReplaceAllAclBackend with any type of body
func NewReplaceAllAclBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllAclBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAclBackendRequest generates requests for DeleteAclBackend
func NewDeleteAclBackendRequest(server string, parentName ParentName, index int, params *DeleteAclBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAclBackendRequest generates requests for GetAclBackend
func NewGetAclBackendRequest(server string, parentName ParentName, index int, params *GetAclBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAclBackendRequest calls the generic CreateAclBackend builder with application/json body
func NewCreateAclBackendRequest(server string, parentName ParentName, index int, params *CreateAclBackendParams, body CreateAclBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAclBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateAclBackendRequestWithBody generates requests for CreateAclBackend with any type of body
func NewCreateAclBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateAclBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceAclBackendRequest calls the generic ReplaceAclBackend builder with application/json body
func NewReplaceAclBackendRequest(server string, parentName ParentName, index int, params *ReplaceAclBackendParams, body ReplaceAclBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAclBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceAclBackendRequestWithBody generates requests for ReplaceAclBackend with any type of body
func NewReplaceAclBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceAclBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllFilterBackendRequest generates requests for GetAllFilterBackend
func NewGetAllFilterBackendRequest(server string, parentName ParentName, params *GetAllFilterBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/filters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllFilterBackendRequest calls the generic ReplaceAllFilterBackend builder with application/json body
func NewReplaceAllFilterBackendRequest(server string, parentName ParentName, params *ReplaceAllFilterBackendParams, body ReplaceAllFilterBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllFilterBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllFilterBackendRequestWithBody generates requests for ReplaceAllFilterBackend with any type of body
func NewReplaceAllFilterBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllFilterBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/filters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFilterBackendRequest generates requests for DeleteFilterBackend
func NewDeleteFilterBackendRequest(server string, parentName ParentName, index int, params *DeleteFilterBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFilterBackendRequest generates requests for GetFilterBackend
func NewGetFilterBackendRequest(server string, parentName ParentName, index int, params *GetFilterBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFilterBackendRequest calls the generic CreateFilterBackend builder with application/json body
func NewCreateFilterBackendRequest(server string, parentName ParentName, index int, params *CreateFilterBackendParams, body CreateFilterBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFilterBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateFilterBackendRequestWithBody generates requests for CreateFilterBackend with any type of body
func NewCreateFilterBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateFilterBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceFilterBackendRequest calls the generic ReplaceFilterBackend builder with application/json body
func NewReplaceFilterBackendRequest(server string, parentName ParentName, index int, params *ReplaceFilterBackendParams, body ReplaceFilterBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceFilterBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceFilterBackendRequestWithBody generates requests for ReplaceFilterBackend with any type of body
func NewReplaceFilterBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceFilterBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPAfterResponseRuleBackendRequest generates requests for GetAllHTTPAfterResponseRuleBackend
func NewGetAllHTTPAfterResponseRuleBackendRequest(server string, parentName ParentName, params *GetAllHTTPAfterResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_after_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPAfterResponseRuleBackendRequest calls the generic ReplaceAllHTTPAfterResponseRuleBackend builder with application/json body
func NewReplaceAllHTTPAfterResponseRuleBackendRequest(server string, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, body ReplaceAllHTTPAfterResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPAfterResponseRuleBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPAfterResponseRuleBackendRequestWithBody generates requests for ReplaceAllHTTPAfterResponseRuleBackend with any type of body
func NewReplaceAllHTTPAfterResponseRuleBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_after_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPAfterResponseRuleBackendRequest generates requests for DeleteHTTPAfterResponseRuleBackend
func NewDeleteHTTPAfterResponseRuleBackendRequest(server string, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPAfterResponseRuleBackendRequest generates requests for GetHTTPAfterResponseRuleBackend
func NewGetHTTPAfterResponseRuleBackendRequest(server string, parentName ParentName, index int, params *GetHTTPAfterResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPAfterResponseRuleBackendRequest calls the generic CreateHTTPAfterResponseRuleBackend builder with application/json body
func NewCreateHTTPAfterResponseRuleBackendRequest(server string, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, body CreateHTTPAfterResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPAfterResponseRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPAfterResponseRuleBackendRequestWithBody generates requests for CreateHTTPAfterResponseRuleBackend with any type of body
func NewCreateHTTPAfterResponseRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPAfterResponseRuleBackendRequest calls the generic ReplaceHTTPAfterResponseRuleBackend builder with application/json body
func NewReplaceHTTPAfterResponseRuleBackendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, body ReplaceHTTPAfterResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPAfterResponseRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPAfterResponseRuleBackendRequestWithBody generates requests for ReplaceHTTPAfterResponseRuleBackend with any type of body
func NewReplaceHTTPAfterResponseRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPCheckBackendRequest generates requests for GetAllHTTPCheckBackend
func NewGetAllHTTPCheckBackendRequest(server string, parentName ParentName, params *GetAllHTTPCheckBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPCheckBackendRequest calls the generic ReplaceAllHTTPCheckBackend builder with application/json body
func NewReplaceAllHTTPCheckBackendRequest(server string, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, body ReplaceAllHTTPCheckBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPCheckBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPCheckBackendRequestWithBody generates requests for ReplaceAllHTTPCheckBackend with any type of body
func NewReplaceAllHTTPCheckBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPCheckBackendRequest generates requests for DeleteHTTPCheckBackend
func NewDeleteHTTPCheckBackendRequest(server string, parentName ParentName, index int, params *DeleteHTTPCheckBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPCheckBackendRequest generates requests for GetHTTPCheckBackend
func NewGetHTTPCheckBackendRequest(server string, parentName ParentName, index int, params *GetHTTPCheckBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPCheckBackendRequest calls the generic CreateHTTPCheckBackend builder with application/json body
func NewCreateHTTPCheckBackendRequest(server string, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, body CreateHTTPCheckBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPCheckBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPCheckBackendRequestWithBody generates requests for CreateHTTPCheckBackend with any type of body
func NewCreateHTTPCheckBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPCheckBackendRequest calls the generic ReplaceHTTPCheckBackend builder with application/json body
func NewReplaceHTTPCheckBackendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, body ReplaceHTTPCheckBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPCheckBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPCheckBackendRequestWithBody generates requests for ReplaceHTTPCheckBackend with any type of body
func NewReplaceHTTPCheckBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPErrorRuleBackendRequest generates requests for GetAllHTTPErrorRuleBackend
func NewGetAllHTTPErrorRuleBackendRequest(server string, parentName ParentName, params *GetAllHTTPErrorRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_error_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPErrorRuleBackendRequest calls the generic ReplaceAllHTTPErrorRuleBackend builder with application/json body
func NewReplaceAllHTTPErrorRuleBackendRequest(server string, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, body ReplaceAllHTTPErrorRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPErrorRuleBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPErrorRuleBackendRequestWithBody generates requests for ReplaceAllHTTPErrorRuleBackend with any type of body
func NewReplaceAllHTTPErrorRuleBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_error_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPErrorRuleBackendRequest generates requests for DeleteHTTPErrorRuleBackend
func NewDeleteHTTPErrorRuleBackendRequest(server string, parentName ParentName, index int, params *DeleteHTTPErrorRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPErrorRuleBackendRequest generates requests for GetHTTPErrorRuleBackend
func NewGetHTTPErrorRuleBackendRequest(server string, parentName ParentName, index int, params *GetHTTPErrorRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPErrorRuleBackendRequest calls the generic CreateHTTPErrorRuleBackend builder with application/json body
func NewCreateHTTPErrorRuleBackendRequest(server string, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, body CreateHTTPErrorRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPErrorRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPErrorRuleBackendRequestWithBody generates requests for CreateHTTPErrorRuleBackend with any type of body
func NewCreateHTTPErrorRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPErrorRuleBackendRequest calls the generic ReplaceHTTPErrorRuleBackend builder with application/json body
func NewReplaceHTTPErrorRuleBackendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, body ReplaceHTTPErrorRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPErrorRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPErrorRuleBackendRequestWithBody generates requests for ReplaceHTTPErrorRuleBackend with any type of body
func NewReplaceHTTPErrorRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPRequestRuleBackendRequest generates requests for GetAllHTTPRequestRuleBackend
func NewGetAllHTTPRequestRuleBackendRequest(server string, parentName ParentName, params *GetAllHTTPRequestRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPRequestRuleBackendRequest calls the generic ReplaceAllHTTPRequestRuleBackend builder with application/json body
func NewReplaceAllHTTPRequestRuleBackendRequest(server string, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, body ReplaceAllHTTPRequestRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPRequestRuleBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPRequestRuleBackendRequestWithBody generates requests for ReplaceAllHTTPRequestRuleBackend with any type of body
func NewReplaceAllHTTPRequestRuleBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPRequestRuleBackendRequest generates requests for DeleteHTTPRequestRuleBackend
func NewDeleteHTTPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *DeleteHTTPRequestRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPRequestRuleBackendRequest generates requests for GetHTTPRequestRuleBackend
func NewGetHTTPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *GetHTTPRequestRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPRequestRuleBackendRequest calls the generic CreateHTTPRequestRuleBackend builder with application/json body
func NewCreateHTTPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, body CreateHTTPRequestRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPRequestRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPRequestRuleBackendRequestWithBody generates requests for CreateHTTPRequestRuleBackend with any type of body
func NewCreateHTTPRequestRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPRequestRuleBackendRequest calls the generic ReplaceHTTPRequestRuleBackend builder with application/json body
func NewReplaceHTTPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, body ReplaceHTTPRequestRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPRequestRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPRequestRuleBackendRequestWithBody generates requests for ReplaceHTTPRequestRuleBackend with any type of body
func NewReplaceHTTPRequestRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPResponseRuleBackendRequest generates requests for GetAllHTTPResponseRuleBackend
func NewGetAllHTTPResponseRuleBackendRequest(server string, parentName ParentName, params *GetAllHTTPResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPResponseRuleBackendRequest calls the generic ReplaceAllHTTPResponseRuleBackend builder with application/json body
func NewReplaceAllHTTPResponseRuleBackendRequest(server string, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, body ReplaceAllHTTPResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPResponseRuleBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPResponseRuleBackendRequestWithBody generates requests for ReplaceAllHTTPResponseRuleBackend with any type of body
func NewReplaceAllHTTPResponseRuleBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPResponseRuleBackendRequest generates requests for DeleteHTTPResponseRuleBackend
func NewDeleteHTTPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *DeleteHTTPResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPResponseRuleBackendRequest generates requests for GetHTTPResponseRuleBackend
func NewGetHTTPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *GetHTTPResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPResponseRuleBackendRequest calls the generic CreateHTTPResponseRuleBackend builder with application/json body
func NewCreateHTTPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, body CreateHTTPResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPResponseRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPResponseRuleBackendRequestWithBody generates requests for CreateHTTPResponseRuleBackend with any type of body
func NewCreateHTTPResponseRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPResponseRuleBackendRequest calls the generic ReplaceHTTPResponseRuleBackend builder with application/json body
func NewReplaceHTTPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, body ReplaceHTTPResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPResponseRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPResponseRuleBackendRequestWithBody generates requests for ReplaceHTTPResponseRuleBackend with any type of body
func NewReplaceHTTPResponseRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLogTargetBackendRequest generates requests for GetAllLogTargetBackend
func NewGetAllLogTargetBackendRequest(server string, parentName ParentName, params *GetAllLogTargetBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllLogTargetBackendRequest calls the generic ReplaceAllLogTargetBackend builder with application/json body
func NewReplaceAllLogTargetBackendRequest(server string, parentName ParentName, params *ReplaceAllLogTargetBackendParams, body ReplaceAllLogTargetBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllLogTargetBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllLogTargetBackendRequestWithBody generates requests for ReplaceAllLogTargetBackend with any type of body
func NewReplaceAllLogTargetBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllLogTargetBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogTargetBackendRequest generates requests for DeleteLogTargetBackend
func NewDeleteLogTargetBackendRequest(server string, parentName ParentName, index int, params *DeleteLogTargetBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogTargetBackendRequest generates requests for GetLogTargetBackend
func NewGetLogTargetBackendRequest(server string, parentName ParentName, index int, params *GetLogTargetBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogTargetBackendRequest calls the generic CreateLogTargetBackend builder with application/json body
func NewCreateLogTargetBackendRequest(server string, parentName ParentName, index int, params *CreateLogTargetBackendParams, body CreateLogTargetBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogTargetBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateLogTargetBackendRequestWithBody generates requests for CreateLogTargetBackend with any type of body
func NewCreateLogTargetBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateLogTargetBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceLogTargetBackendRequest calls the generic ReplaceLogTargetBackend builder with application/json body
func NewReplaceLogTargetBackendRequest(server string, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, body ReplaceLogTargetBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLogTargetBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceLogTargetBackendRequestWithBody generates requests for ReplaceLogTargetBackend with any type of body
func NewReplaceLogTargetBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServerSwitchingRulesRequest generates requests for GetServerSwitchingRules
func NewGetServerSwitchingRulesRequest(server string, parentName ParentName, params *GetServerSwitchingRulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_switching_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceServerSwitchingRulesRequest calls the generic ReplaceServerSwitchingRules builder with application/json body
func NewReplaceServerSwitchingRulesRequest(server string, parentName ParentName, params *ReplaceServerSwitchingRulesParams, body ReplaceServerSwitchingRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceServerSwitchingRulesRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceServerSwitchingRulesRequestWithBody generates requests for ReplaceServerSwitchingRules with any type of body
func NewReplaceServerSwitchingRulesRequestWithBody(server string, parentName ParentName, params *ReplaceServerSwitchingRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_switching_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServerSwitchingRuleRequest generates requests for DeleteServerSwitchingRule
func NewDeleteServerSwitchingRuleRequest(server string, parentName ParentName, index int, params *DeleteServerSwitchingRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerSwitchingRuleRequest generates requests for GetServerSwitchingRule
func NewGetServerSwitchingRuleRequest(server string, parentName ParentName, index int, params *GetServerSwitchingRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServerSwitchingRuleRequest calls the generic CreateServerSwitchingRule builder with application/json body
func NewCreateServerSwitchingRuleRequest(server string, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, body CreateServerSwitchingRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServerSwitchingRuleRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateServerSwitchingRuleRequestWithBody generates requests for CreateServerSwitchingRule with any type of body
func NewCreateServerSwitchingRuleRequestWithBody(server string, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceServerSwitchingRuleRequest calls the generic ReplaceServerSwitchingRule builder with application/json body
func NewReplaceServerSwitchingRuleRequest(server string, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, body ReplaceServerSwitchingRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceServerSwitchingRuleRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceServerSwitchingRuleRequestWithBody generates requests for ReplaceServerSwitchingRule with any type of body
func NewReplaceServerSwitchingRuleRequestWithBody(server string, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServerTemplatesRequest generates requests for GetServerTemplates
func NewGetServerTemplatesRequest(server string, parentName ParentName, params *GetServerTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServerTemplateRequest calls the generic CreateServerTemplate builder with application/json body
func NewCreateServerTemplateRequest(server string, parentName ParentName, params *CreateServerTemplateParams, body CreateServerTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServerTemplateRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateServerTemplateRequestWithBody generates requests for CreateServerTemplate with any type of body
func NewCreateServerTemplateRequestWithBody(server string, parentName ParentName, params *CreateServerTemplateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServerTemplateRequest generates requests for DeleteServerTemplate
func NewDeleteServerTemplateRequest(server string, parentName ParentName, prefix string, params *DeleteServerTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerTemplateRequest generates requests for GetServerTemplate
func NewGetServerTemplateRequest(server string, parentName ParentName, prefix string, params *GetServerTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceServerTemplateRequest calls the generic ReplaceServerTemplate builder with application/json body
func NewReplaceServerTemplateRequest(server string, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, body ReplaceServerTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceServerTemplateRequestWithBody(server, parentName, prefix, params, "application/json", bodyReader)
}

// NewReplaceServerTemplateRequestWithBody generates requests for ReplaceServerTemplate with any type of body
func NewReplaceServerTemplateRequestWithBody(server string, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/server_templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllServerBackendRequest generates requests for GetAllServerBackend
func NewGetAllServerBackendRequest(server string, parentName ParentName, params *GetAllServerBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServerBackendRequest calls the generic CreateServerBackend builder with application/json body
func NewCreateServerBackendRequest(server string, parentName ParentName, params *CreateServerBackendParams, body CreateServerBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServerBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateServerBackendRequestWithBody generates requests for CreateServerBackend with any type of body
func NewCreateServerBackendRequestWithBody(server string, parentName ParentName, params *CreateServerBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServerBackendRequest generates requests for DeleteServerBackend
func NewDeleteServerBackendRequest(server string, parentName ParentName, name string, params *DeleteServerBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerBackendRequest generates requests for GetServerBackend
func NewGetServerBackendRequest(server string, parentName ParentName, name string, params *GetServerBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceServerBackendRequest calls the generic ReplaceServerBackend builder with application/json body
func NewReplaceServerBackendRequest(server string, parentName ParentName, name string, params *ReplaceServerBackendParams, body ReplaceServerBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceServerBackendRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceServerBackendRequestWithBody generates requests for ReplaceServerBackend with any type of body
func NewReplaceServerBackendRequestWithBody(server string, parentName ParentName, name string, params *ReplaceServerBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStickRulesRequest generates requests for GetStickRules
func NewGetStickRulesRequest(server string, parentName ParentName, params *GetStickRulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/stick_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceStickRulesRequest calls the generic ReplaceStickRules builder with application/json body
func NewReplaceStickRulesRequest(server string, parentName ParentName, params *ReplaceStickRulesParams, body ReplaceStickRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceStickRulesRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceStickRulesRequestWithBody generates requests for ReplaceStickRules with any type of body
func NewReplaceStickRulesRequestWithBody(server string, parentName ParentName, params *ReplaceStickRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/stick_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStickRuleRequest generates requests for DeleteStickRule
func NewDeleteStickRuleRequest(server string, parentName ParentName, index int, params *DeleteStickRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/stick_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStickRuleRequest generates requests for GetStickRule
func NewGetStickRuleRequest(server string, parentName ParentName, index int, params *GetStickRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/stick_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStickRuleRequest calls the generic CreateStickRule builder with application/json body
func NewCreateStickRuleRequest(server string, parentName ParentName, index int, params *CreateStickRuleParams, body CreateStickRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStickRuleRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateStickRuleRequestWithBody generates requests for CreateStickRule with any type of body
func NewCreateStickRuleRequestWithBody(server string, parentName ParentName, index int, params *CreateStickRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/stick_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceStickRuleRequest calls the generic ReplaceStickRule builder with application/json body
func NewReplaceStickRuleRequest(server string, parentName ParentName, index int, params *ReplaceStickRuleParams, body ReplaceStickRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceStickRuleRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceStickRuleRequestWithBody generates requests for ReplaceStickRule with any type of body
func NewReplaceStickRuleRequestWithBody(server string, parentName ParentName, index int, params *ReplaceStickRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/stick_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTCPCheckBackendRequest generates requests for GetAllTCPCheckBackend
func NewGetAllTCPCheckBackendRequest(server string, parentName ParentName, params *GetAllTCPCheckBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllTCPCheckBackendRequest calls the generic ReplaceAllTCPCheckBackend builder with application/json body
func NewReplaceAllTCPCheckBackendRequest(server string, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, body ReplaceAllTCPCheckBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllTCPCheckBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllTCPCheckBackendRequestWithBody generates requests for ReplaceAllTCPCheckBackend with any type of body
func NewReplaceAllTCPCheckBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPCheckBackendRequest generates requests for DeleteTCPCheckBackend
func NewDeleteTCPCheckBackendRequest(server string, parentName ParentName, index int, params *DeleteTCPCheckBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPCheckBackendRequest generates requests for GetTCPCheckBackend
func NewGetTCPCheckBackendRequest(server string, parentName ParentName, index int, params *GetTCPCheckBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPCheckBackendRequest calls the generic CreateTCPCheckBackend builder with application/json body
func NewCreateTCPCheckBackendRequest(server string, parentName ParentName, index int, params *CreateTCPCheckBackendParams, body CreateTCPCheckBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPCheckBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateTCPCheckBackendRequestWithBody generates requests for CreateTCPCheckBackend with any type of body
func NewCreateTCPCheckBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateTCPCheckBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTCPCheckBackendRequest calls the generic ReplaceTCPCheckBackend builder with application/json body
func NewReplaceTCPCheckBackendRequest(server string, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, body ReplaceTCPCheckBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTCPCheckBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceTCPCheckBackendRequestWithBody generates requests for ReplaceTCPCheckBackend with any type of body
func NewReplaceTCPCheckBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTCPRequestRuleBackendRequest generates requests for GetAllTCPRequestRuleBackend
func NewGetAllTCPRequestRuleBackendRequest(server string, parentName ParentName, params *GetAllTCPRequestRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllTCPRequestRuleBackendRequest calls the generic ReplaceAllTCPRequestRuleBackend builder with application/json body
func NewReplaceAllTCPRequestRuleBackendRequest(server string, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, body ReplaceAllTCPRequestRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllTCPRequestRuleBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllTCPRequestRuleBackendRequestWithBody generates requests for ReplaceAllTCPRequestRuleBackend with any type of body
func NewReplaceAllTCPRequestRuleBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPRequestRuleBackendRequest generates requests for DeleteTCPRequestRuleBackend
func NewDeleteTCPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *DeleteTCPRequestRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPRequestRuleBackendRequest generates requests for GetTCPRequestRuleBackend
func NewGetTCPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *GetTCPRequestRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPRequestRuleBackendRequest calls the generic CreateTCPRequestRuleBackend builder with application/json body
func NewCreateTCPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, body CreateTCPRequestRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPRequestRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateTCPRequestRuleBackendRequestWithBody generates requests for CreateTCPRequestRuleBackend with any type of body
func NewCreateTCPRequestRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTCPRequestRuleBackendRequest calls the generic ReplaceTCPRequestRuleBackend builder with application/json body
func NewReplaceTCPRequestRuleBackendRequest(server string, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, body ReplaceTCPRequestRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTCPRequestRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceTCPRequestRuleBackendRequestWithBody generates requests for ReplaceTCPRequestRuleBackend with any type of body
func NewReplaceTCPRequestRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTCPResponseRuleBackendRequest generates requests for GetAllTCPResponseRuleBackend
func NewGetAllTCPResponseRuleBackendRequest(server string, parentName ParentName, params *GetAllTCPResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllTCPResponseRuleBackendRequest calls the generic ReplaceAllTCPResponseRuleBackend builder with application/json body
func NewReplaceAllTCPResponseRuleBackendRequest(server string, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, body ReplaceAllTCPResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllTCPResponseRuleBackendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllTCPResponseRuleBackendRequestWithBody generates requests for ReplaceAllTCPResponseRuleBackend with any type of body
func NewReplaceAllTCPResponseRuleBackendRequestWithBody(server string, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPResponseRuleBackendRequest generates requests for DeleteTCPResponseRuleBackend
func NewDeleteTCPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *DeleteTCPResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPResponseRuleBackendRequest generates requests for GetTCPResponseRuleBackend
func NewGetTCPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *GetTCPResponseRuleBackendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPResponseRuleBackendRequest calls the generic CreateTCPResponseRuleBackend builder with application/json body
func NewCreateTCPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, body CreateTCPResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPResponseRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateTCPResponseRuleBackendRequestWithBody generates requests for CreateTCPResponseRuleBackend with any type of body
func NewCreateTCPResponseRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTCPResponseRuleBackendRequest calls the generic ReplaceTCPResponseRuleBackend builder with application/json body
func NewReplaceTCPResponseRuleBackendRequest(server string, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, body ReplaceTCPResponseRuleBackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTCPResponseRuleBackendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceTCPResponseRuleBackendRequestWithBody generates requests for ReplaceTCPResponseRuleBackend with any type of body
func NewReplaceTCPResponseRuleBackendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/backends/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCachesRequest generates requests for GetCaches
func NewGetCachesRequest(server string, params *GetCachesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/caches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCacheRequest calls the generic CreateCache builder with application/json body
func NewCreateCacheRequest(server string, params *CreateCacheParams, body CreateCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCacheRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCacheRequestWithBody generates requests for CreateCache with any type of body
func NewCreateCacheRequestWithBody(server string, params *CreateCacheParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/caches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCacheRequest generates requests for DeleteCache
func NewDeleteCacheRequest(server string, name string, params *DeleteCacheParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/caches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCacheRequest generates requests for GetCache
func NewGetCacheRequest(server string, name string, params *GetCacheParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/caches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCacheRequest calls the generic ReplaceCache builder with application/json body
func NewReplaceCacheRequest(server string, name string, params *ReplaceCacheParams, body ReplaceCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceCacheRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceCacheRequestWithBody generates requests for ReplaceCache with any type of body
func NewReplaceCacheRequestWithBody(server string, name string, params *ReplaceCacheParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/caches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCrtLoadsRequest generates requests for GetCrtLoads
func NewGetCrtLoadsRequest(server string, params *GetCrtLoadsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_loads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crt_store", runtime.ParamLocationQuery, params.CrtStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCrtLoadRequest calls the generic CreateCrtLoad builder with application/json body
func NewCreateCrtLoadRequest(server string, params *CreateCrtLoadParams, body CreateCrtLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCrtLoadRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCrtLoadRequestWithBody generates requests for CreateCrtLoad with any type of body
func NewCreateCrtLoadRequestWithBody(server string, params *CreateCrtLoadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_loads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crt_store", runtime.ParamLocationQuery, params.CrtStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCrtLoadRequest generates requests for DeleteCrtLoad
func NewDeleteCrtLoadRequest(server string, certificate string, params *DeleteCrtLoadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_loads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crt_store", runtime.ParamLocationQuery, params.CrtStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCrtLoadRequest generates requests for GetCrtLoad
func NewGetCrtLoadRequest(server string, certificate string, params *GetCrtLoadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_loads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crt_store", runtime.ParamLocationQuery, params.CrtStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCrtLoadRequest calls the generic ReplaceCrtLoad builder with application/json body
func NewReplaceCrtLoadRequest(server string, certificate string, params *ReplaceCrtLoadParams, body ReplaceCrtLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceCrtLoadRequestWithBody(server, certificate, params, "application/json", bodyReader)
}

// NewReplaceCrtLoadRequestWithBody generates requests for ReplaceCrtLoad with any type of body
func NewReplaceCrtLoadRequestWithBody(server string, certificate string, params *ReplaceCrtLoadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_loads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crt_store", runtime.ParamLocationQuery, params.CrtStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCrtStoresRequest generates requests for GetCrtStores
func NewGetCrtStoresRequest(server string, params *GetCrtStoresParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_stores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCrtStoreRequest calls the generic CreateCrtStore builder with application/json body
func NewCreateCrtStoreRequest(server string, params *CreateCrtStoreParams, body CreateCrtStoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCrtStoreRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCrtStoreRequestWithBody generates requests for CreateCrtStore with any type of body
func NewCreateCrtStoreRequestWithBody(server string, params *CreateCrtStoreParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_stores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCrtStoreRequest generates requests for DeleteCrtStore
func NewDeleteCrtStoreRequest(server string, name string, params *DeleteCrtStoreParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCrtStoreRequest generates requests for GetCrtStore
func NewGetCrtStoreRequest(server string, name string, params *GetCrtStoreParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditCrtStoreRequest calls the generic EditCrtStore builder with application/json body
func NewEditCrtStoreRequest(server string, name string, params *EditCrtStoreParams, body EditCrtStoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditCrtStoreRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewEditCrtStoreRequestWithBody generates requests for EditCrtStore with any type of body
func NewEditCrtStoreRequestWithBody(server string, name string, params *EditCrtStoreParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/crt_stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDefaultsSectionsRequest generates requests for GetDefaultsSections
func NewGetDefaultsSectionsRequest(server string, params *GetDefaultsSectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddDefaultsSectionRequest calls the generic AddDefaultsSection builder with application/json body
func NewAddDefaultsSectionRequest(server string, params *AddDefaultsSectionParams, body AddDefaultsSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDefaultsSectionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddDefaultsSectionRequestWithBody generates requests for AddDefaultsSection with any type of body
func NewAddDefaultsSectionRequestWithBody(server string, params *AddDefaultsSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDefaultsSectionRequest calls the generic CreateDefaultsSection builder with application/json body
func NewCreateDefaultsSectionRequest(server string, params *CreateDefaultsSectionParams, body CreateDefaultsSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDefaultsSectionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateDefaultsSectionRequestWithBody generates requests for CreateDefaultsSection with any type of body
func NewCreateDefaultsSectionRequestWithBody(server string, params *CreateDefaultsSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDefaultsSectionRequest generates requests for DeleteDefaultsSection
func NewDeleteDefaultsSectionRequest(server string, name string, params *DeleteDefaultsSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDefaultsSectionRequest generates requests for GetDefaultsSection
func NewGetDefaultsSectionRequest(server string, name string, params *GetDefaultsSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceDefaultsSectionRequest calls the generic ReplaceDefaultsSection builder with application/json body
func NewReplaceDefaultsSectionRequest(server string, name string, params *ReplaceDefaultsSectionParams, body ReplaceDefaultsSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceDefaultsSectionRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceDefaultsSectionRequestWithBody generates requests for ReplaceDefaultsSection with any type of body
func NewReplaceDefaultsSectionRequestWithBody(server string, name string, params *ReplaceDefaultsSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAclDefaultsRequest generates requests for GetAllAclDefaults
func NewGetAllAclDefaultsRequest(server string, parentName ParentName, params *GetAllAclDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AclName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acl_name", runtime.ParamLocationQuery, *params.AclName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllAclDefaultsRequest calls the generic ReplaceAllAclDefaults builder with application/json body
func NewReplaceAllAclDefaultsRequest(server string, parentName ParentName, params *ReplaceAllAclDefaultsParams, body ReplaceAllAclDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllAclDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllAclDefaultsRequestWithBody generates requests for ReplaceAllAclDefaults with any type of body
func NewReplaceAllAclDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllAclDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAclDefaultsRequest generates requests for DeleteAclDefaults
func NewDeleteAclDefaultsRequest(server string, parentName ParentName, index int, params *DeleteAclDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAclDefaultsRequest generates requests for GetAclDefaults
func NewGetAclDefaultsRequest(server string, parentName ParentName, index int, params *GetAclDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAclDefaultsRequest calls the generic CreateAclDefaults builder with application/json body
func NewCreateAclDefaultsRequest(server string, parentName ParentName, index int, params *CreateAclDefaultsParams, body CreateAclDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAclDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateAclDefaultsRequestWithBody generates requests for CreateAclDefaults with any type of body
func NewCreateAclDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateAclDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceAclDefaultsRequest calls the generic ReplaceAclDefaults builder with application/json body
func NewReplaceAclDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceAclDefaultsParams, body ReplaceAclDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAclDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceAclDefaultsRequestWithBody generates requests for ReplaceAclDefaults with any type of body
func NewReplaceAclDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceAclDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPAfterResponseRuleDefaultsRequest generates requests for GetAllHTTPAfterResponseRuleDefaults
func NewGetAllHTTPAfterResponseRuleDefaultsRequest(server string, parentName ParentName, params *GetAllHTTPAfterResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_after_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPAfterResponseRuleDefaultsRequest calls the generic ReplaceAllHTTPAfterResponseRuleDefaults builder with application/json body
func NewReplaceAllHTTPAfterResponseRuleDefaultsRequest(server string, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, body ReplaceAllHTTPAfterResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPAfterResponseRuleDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPAfterResponseRuleDefaultsRequestWithBody generates requests for ReplaceAllHTTPAfterResponseRuleDefaults with any type of body
func NewReplaceAllHTTPAfterResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_after_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPAfterResponseRuleDefaultsRequest generates requests for DeleteHTTPAfterResponseRuleDefaults
func NewDeleteHTTPAfterResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPAfterResponseRuleDefaultsRequest generates requests for GetHTTPAfterResponseRuleDefaults
func NewGetHTTPAfterResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *GetHTTPAfterResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPAfterResponseRuleDefaultsRequest calls the generic CreateHTTPAfterResponseRuleDefaults builder with application/json body
func NewCreateHTTPAfterResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, body CreateHTTPAfterResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPAfterResponseRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPAfterResponseRuleDefaultsRequestWithBody generates requests for CreateHTTPAfterResponseRuleDefaults with any type of body
func NewCreateHTTPAfterResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPAfterResponseRuleDefaultsRequest calls the generic ReplaceHTTPAfterResponseRuleDefaults builder with application/json body
func NewReplaceHTTPAfterResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, body ReplaceHTTPAfterResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPAfterResponseRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPAfterResponseRuleDefaultsRequestWithBody generates requests for ReplaceHTTPAfterResponseRuleDefaults with any type of body
func NewReplaceHTTPAfterResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPCheckDefaultsRequest generates requests for GetAllHTTPCheckDefaults
func NewGetAllHTTPCheckDefaultsRequest(server string, parentName ParentName, params *GetAllHTTPCheckDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPCheckDefaultsRequest calls the generic ReplaceAllHTTPCheckDefaults builder with application/json body
func NewReplaceAllHTTPCheckDefaultsRequest(server string, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, body ReplaceAllHTTPCheckDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPCheckDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPCheckDefaultsRequestWithBody generates requests for ReplaceAllHTTPCheckDefaults with any type of body
func NewReplaceAllHTTPCheckDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPCheckDefaultsRequest generates requests for DeleteHTTPCheckDefaults
func NewDeleteHTTPCheckDefaultsRequest(server string, parentName ParentName, index int, params *DeleteHTTPCheckDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPCheckDefaultsRequest generates requests for GetHTTPCheckDefaults
func NewGetHTTPCheckDefaultsRequest(server string, parentName ParentName, index int, params *GetHTTPCheckDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPCheckDefaultsRequest calls the generic CreateHTTPCheckDefaults builder with application/json body
func NewCreateHTTPCheckDefaultsRequest(server string, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, body CreateHTTPCheckDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPCheckDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPCheckDefaultsRequestWithBody generates requests for CreateHTTPCheckDefaults with any type of body
func NewCreateHTTPCheckDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPCheckDefaultsRequest calls the generic ReplaceHTTPCheckDefaults builder with application/json body
func NewReplaceHTTPCheckDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, body ReplaceHTTPCheckDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPCheckDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPCheckDefaultsRequestWithBody generates requests for ReplaceHTTPCheckDefaults with any type of body
func NewReplaceHTTPCheckDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPErrorRuleDefaultsRequest generates requests for GetAllHTTPErrorRuleDefaults
func NewGetAllHTTPErrorRuleDefaultsRequest(server string, parentName ParentName, params *GetAllHTTPErrorRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_error_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPErrorRuleDefaultsRequest calls the generic ReplaceAllHTTPErrorRuleDefaults builder with application/json body
func NewReplaceAllHTTPErrorRuleDefaultsRequest(server string, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, body ReplaceAllHTTPErrorRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPErrorRuleDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPErrorRuleDefaultsRequestWithBody generates requests for ReplaceAllHTTPErrorRuleDefaults with any type of body
func NewReplaceAllHTTPErrorRuleDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_error_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPErrorRuleDefaultsRequest generates requests for DeleteHTTPErrorRuleDefaults
func NewDeleteHTTPErrorRuleDefaultsRequest(server string, parentName ParentName, index int, params *DeleteHTTPErrorRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPErrorRuleDefaultsRequest generates requests for GetHTTPErrorRuleDefaults
func NewGetHTTPErrorRuleDefaultsRequest(server string, parentName ParentName, index int, params *GetHTTPErrorRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPErrorRuleDefaultsRequest calls the generic CreateHTTPErrorRuleDefaults builder with application/json body
func NewCreateHTTPErrorRuleDefaultsRequest(server string, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, body CreateHTTPErrorRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPErrorRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPErrorRuleDefaultsRequestWithBody generates requests for CreateHTTPErrorRuleDefaults with any type of body
func NewCreateHTTPErrorRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPErrorRuleDefaultsRequest calls the generic ReplaceHTTPErrorRuleDefaults builder with application/json body
func NewReplaceHTTPErrorRuleDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, body ReplaceHTTPErrorRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPErrorRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPErrorRuleDefaultsRequestWithBody generates requests for ReplaceHTTPErrorRuleDefaults with any type of body
func NewReplaceHTTPErrorRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPRequestRuleDefaultsRequest generates requests for GetAllHTTPRequestRuleDefaults
func NewGetAllHTTPRequestRuleDefaultsRequest(server string, parentName ParentName, params *GetAllHTTPRequestRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPRequestRuleDefaultsRequest calls the generic ReplaceAllHTTPRequestRuleDefaults builder with application/json body
func NewReplaceAllHTTPRequestRuleDefaultsRequest(server string, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, body ReplaceAllHTTPRequestRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPRequestRuleDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPRequestRuleDefaultsRequestWithBody generates requests for ReplaceAllHTTPRequestRuleDefaults with any type of body
func NewReplaceAllHTTPRequestRuleDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPRequestRuleDefaultsRequest generates requests for DeleteHTTPRequestRuleDefaults
func NewDeleteHTTPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *DeleteHTTPRequestRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPRequestRuleDefaultsRequest generates requests for GetHTTPRequestRuleDefaults
func NewGetHTTPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *GetHTTPRequestRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPRequestRuleDefaultsRequest calls the generic CreateHTTPRequestRuleDefaults builder with application/json body
func NewCreateHTTPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, body CreateHTTPRequestRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPRequestRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPRequestRuleDefaultsRequestWithBody generates requests for CreateHTTPRequestRuleDefaults with any type of body
func NewCreateHTTPRequestRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPRequestRuleDefaultsRequest calls the generic ReplaceHTTPRequestRuleDefaults builder with application/json body
func NewReplaceHTTPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, body ReplaceHTTPRequestRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPRequestRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPRequestRuleDefaultsRequestWithBody generates requests for ReplaceHTTPRequestRuleDefaults with any type of body
func NewReplaceHTTPRequestRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPResponseRuleDefaultsRequest generates requests for GetAllHTTPResponseRuleDefaults
func NewGetAllHTTPResponseRuleDefaultsRequest(server string, parentName ParentName, params *GetAllHTTPResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPResponseRuleDefaultsRequest calls the generic ReplaceAllHTTPResponseRuleDefaults builder with application/json body
func NewReplaceAllHTTPResponseRuleDefaultsRequest(server string, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, body ReplaceAllHTTPResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPResponseRuleDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPResponseRuleDefaultsRequestWithBody generates requests for ReplaceAllHTTPResponseRuleDefaults with any type of body
func NewReplaceAllHTTPResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPResponseRuleDefaultsRequest generates requests for DeleteHTTPResponseRuleDefaults
func NewDeleteHTTPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *DeleteHTTPResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPResponseRuleDefaultsRequest generates requests for GetHTTPResponseRuleDefaults
func NewGetHTTPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *GetHTTPResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPResponseRuleDefaultsRequest calls the generic CreateHTTPResponseRuleDefaults builder with application/json body
func NewCreateHTTPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, body CreateHTTPResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPResponseRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPResponseRuleDefaultsRequestWithBody generates requests for CreateHTTPResponseRuleDefaults with any type of body
func NewCreateHTTPResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPResponseRuleDefaultsRequest calls the generic ReplaceHTTPResponseRuleDefaults builder with application/json body
func NewReplaceHTTPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, body ReplaceHTTPResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPResponseRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPResponseRuleDefaultsRequestWithBody generates requests for ReplaceHTTPResponseRuleDefaults with any type of body
func NewReplaceHTTPResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLogTargetDefaultsRequest generates requests for GetAllLogTargetDefaults
func NewGetAllLogTargetDefaultsRequest(server string, parentName ParentName, params *GetAllLogTargetDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllLogTargetDefaultsRequest calls the generic ReplaceAllLogTargetDefaults builder with application/json body
func NewReplaceAllLogTargetDefaultsRequest(server string, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, body ReplaceAllLogTargetDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllLogTargetDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllLogTargetDefaultsRequestWithBody generates requests for ReplaceAllLogTargetDefaults with any type of body
func NewReplaceAllLogTargetDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogTargetDefaultsRequest generates requests for DeleteLogTargetDefaults
func NewDeleteLogTargetDefaultsRequest(server string, parentName ParentName, index int, params *DeleteLogTargetDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogTargetDefaultsRequest generates requests for GetLogTargetDefaults
func NewGetLogTargetDefaultsRequest(server string, parentName ParentName, index int, params *GetLogTargetDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogTargetDefaultsRequest calls the generic CreateLogTargetDefaults builder with application/json body
func NewCreateLogTargetDefaultsRequest(server string, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, body CreateLogTargetDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogTargetDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateLogTargetDefaultsRequestWithBody generates requests for CreateLogTargetDefaults with any type of body
func NewCreateLogTargetDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceLogTargetDefaultsRequest calls the generic ReplaceLogTargetDefaults builder with application/json body
func NewReplaceLogTargetDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, body ReplaceLogTargetDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLogTargetDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceLogTargetDefaultsRequestWithBody generates requests for ReplaceLogTargetDefaults with any type of body
func NewReplaceLogTargetDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllQUICInitialRuleDefaultsRequest generates requests for GetAllQUICInitialRuleDefaults
func NewGetAllQUICInitialRuleDefaultsRequest(server string, parentName ParentName, params *GetAllQUICInitialRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/quic_initial_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllQUICInitialRuleDefaultsRequest calls the generic ReplaceAllQUICInitialRuleDefaults builder with application/json body
func NewReplaceAllQUICInitialRuleDefaultsRequest(server string, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, body ReplaceAllQUICInitialRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllQUICInitialRuleDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllQUICInitialRuleDefaultsRequestWithBody generates requests for ReplaceAllQUICInitialRuleDefaults with any type of body
func NewReplaceAllQUICInitialRuleDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/quic_initial_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteQUICInitialRuleDefaultsRequest generates requests for DeleteQUICInitialRuleDefaults
func NewDeleteQUICInitialRuleDefaultsRequest(server string, parentName ParentName, index int, params *DeleteQUICInitialRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQUICInitialRuleDefaultsRequest generates requests for GetQUICInitialRuleDefaults
func NewGetQUICInitialRuleDefaultsRequest(server string, parentName ParentName, index int, params *GetQUICInitialRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateQUICInitialRuleDefaultsRequest calls the generic CreateQUICInitialRuleDefaults builder with application/json body
func NewCreateQUICInitialRuleDefaultsRequest(server string, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, body CreateQUICInitialRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateQUICInitialRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateQUICInitialRuleDefaultsRequestWithBody generates requests for CreateQUICInitialRuleDefaults with any type of body
func NewCreateQUICInitialRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceQUICInitialRuleDefaultsRequest calls the generic ReplaceQUICInitialRuleDefaults builder with application/json body
func NewReplaceQUICInitialRuleDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, body ReplaceQUICInitialRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceQUICInitialRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceQUICInitialRuleDefaultsRequestWithBody generates requests for ReplaceQUICInitialRuleDefaults with any type of body
func NewReplaceQUICInitialRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTCPCheckDefaultsRequest generates requests for GetAllTCPCheckDefaults
func NewGetAllTCPCheckDefaultsRequest(server string, parentName ParentName, params *GetAllTCPCheckDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllTCPCheckDefaultsRequest calls the generic ReplaceAllTCPCheckDefaults builder with application/json body
func NewReplaceAllTCPCheckDefaultsRequest(server string, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, body ReplaceAllTCPCheckDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllTCPCheckDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllTCPCheckDefaultsRequestWithBody generates requests for ReplaceAllTCPCheckDefaults with any type of body
func NewReplaceAllTCPCheckDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_checks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPCheckDefaultsRequest generates requests for DeleteTCPCheckDefaults
func NewDeleteTCPCheckDefaultsRequest(server string, parentName ParentName, index int, params *DeleteTCPCheckDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPCheckDefaultsRequest generates requests for GetTCPCheckDefaults
func NewGetTCPCheckDefaultsRequest(server string, parentName ParentName, index int, params *GetTCPCheckDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPCheckDefaultsRequest calls the generic CreateTCPCheckDefaults builder with application/json body
func NewCreateTCPCheckDefaultsRequest(server string, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, body CreateTCPCheckDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPCheckDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateTCPCheckDefaultsRequestWithBody generates requests for CreateTCPCheckDefaults with any type of body
func NewCreateTCPCheckDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTCPCheckDefaultsRequest calls the generic ReplaceTCPCheckDefaults builder with application/json body
func NewReplaceTCPCheckDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, body ReplaceTCPCheckDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTCPCheckDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceTCPCheckDefaultsRequestWithBody generates requests for ReplaceTCPCheckDefaults with any type of body
func NewReplaceTCPCheckDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTCPRequestRuleDefaultsRequest generates requests for GetAllTCPRequestRuleDefaults
func NewGetAllTCPRequestRuleDefaultsRequest(server string, parentName ParentName, params *GetAllTCPRequestRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllTCPRequestRuleDefaultsRequest calls the generic ReplaceAllTCPRequestRuleDefaults builder with application/json body
func NewReplaceAllTCPRequestRuleDefaultsRequest(server string, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, body ReplaceAllTCPRequestRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllTCPRequestRuleDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllTCPRequestRuleDefaultsRequestWithBody generates requests for ReplaceAllTCPRequestRuleDefaults with any type of body
func NewReplaceAllTCPRequestRuleDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPRequestRuleDefaultsRequest generates requests for DeleteTCPRequestRuleDefaults
func NewDeleteTCPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *DeleteTCPRequestRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPRequestRuleDefaultsRequest generates requests for GetTCPRequestRuleDefaults
func NewGetTCPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *GetTCPRequestRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPRequestRuleDefaultsRequest calls the generic CreateTCPRequestRuleDefaults builder with application/json body
func NewCreateTCPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, body CreateTCPRequestRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPRequestRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateTCPRequestRuleDefaultsRequestWithBody generates requests for CreateTCPRequestRuleDefaults with any type of body
func NewCreateTCPRequestRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTCPRequestRuleDefaultsRequest calls the generic ReplaceTCPRequestRuleDefaults builder with application/json body
func NewReplaceTCPRequestRuleDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, body ReplaceTCPRequestRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTCPRequestRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceTCPRequestRuleDefaultsRequestWithBody generates requests for ReplaceTCPRequestRuleDefaults with any type of body
func NewReplaceTCPRequestRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTCPResponseRuleDefaultsRequest generates requests for GetAllTCPResponseRuleDefaults
func NewGetAllTCPResponseRuleDefaultsRequest(server string, parentName ParentName, params *GetAllTCPResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllTCPResponseRuleDefaultsRequest calls the generic ReplaceAllTCPResponseRuleDefaults builder with application/json body
func NewReplaceAllTCPResponseRuleDefaultsRequest(server string, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, body ReplaceAllTCPResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllTCPResponseRuleDefaultsRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllTCPResponseRuleDefaultsRequestWithBody generates requests for ReplaceAllTCPResponseRuleDefaults with any type of body
func NewReplaceAllTCPResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPResponseRuleDefaultsRequest generates requests for DeleteTCPResponseRuleDefaults
func NewDeleteTCPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *DeleteTCPResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPResponseRuleDefaultsRequest generates requests for GetTCPResponseRuleDefaults
func NewGetTCPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *GetTCPResponseRuleDefaultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPResponseRuleDefaultsRequest calls the generic CreateTCPResponseRuleDefaults builder with application/json body
func NewCreateTCPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, body CreateTCPResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPResponseRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateTCPResponseRuleDefaultsRequestWithBody generates requests for CreateTCPResponseRuleDefaults with any type of body
func NewCreateTCPResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTCPResponseRuleDefaultsRequest calls the generic ReplaceTCPResponseRuleDefaults builder with application/json body
func NewReplaceTCPResponseRuleDefaultsRequest(server string, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, body ReplaceTCPResponseRuleDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTCPResponseRuleDefaultsRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceTCPResponseRuleDefaultsRequestWithBody generates requests for ReplaceTCPResponseRuleDefaults with any type of body
func NewReplaceTCPResponseRuleDefaultsRequestWithBody(server string, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/defaults/%s/tcp_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFCGIAppsRequest generates requests for GetFCGIApps
func NewGetFCGIAppsRequest(server string, params *GetFCGIAppsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFCGIAppRequest calls the generic CreateFCGIApp builder with application/json body
func NewCreateFCGIAppRequest(server string, params *CreateFCGIAppParams, body CreateFCGIAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFCGIAppRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateFCGIAppRequestWithBody generates requests for CreateFCGIApp with any type of body
func NewCreateFCGIAppRequestWithBody(server string, params *CreateFCGIAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFCGIAppRequest generates requests for DeleteFCGIApp
func NewDeleteFCGIAppRequest(server string, name string, params *DeleteFCGIAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFCGIAppRequest generates requests for GetFCGIApp
func NewGetFCGIAppRequest(server string, name string, params *GetFCGIAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceFCGIAppRequest calls the generic ReplaceFCGIApp builder with application/json body
func NewReplaceFCGIAppRequest(server string, name string, params *ReplaceFCGIAppParams, body ReplaceFCGIAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceFCGIAppRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceFCGIAppRequestWithBody generates requests for ReplaceFCGIApp with any type of body
func NewReplaceFCGIAppRequestWithBody(server string, name string, params *ReplaceFCGIAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAclFCGIAppRequest generates requests for GetAllAclFCGIApp
func NewGetAllAclFCGIAppRequest(server string, parentName ParentName, params *GetAllAclFCGIAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AclName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acl_name", runtime.ParamLocationQuery, *params.AclName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllAclFCGIAppRequest calls the generic ReplaceAllAclFCGIApp builder with application/json body
func NewReplaceAllAclFCGIAppRequest(server string, parentName ParentName, params *ReplaceAllAclFCGIAppParams, body ReplaceAllAclFCGIAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllAclFCGIAppRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllAclFCGIAppRequestWithBody generates requests for ReplaceAllAclFCGIApp with any type of body
func NewReplaceAllAclFCGIAppRequestWithBody(server string, parentName ParentName, params *ReplaceAllAclFCGIAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAclFCGIAppRequest generates requests for DeleteAclFCGIApp
func NewDeleteAclFCGIAppRequest(server string, parentName ParentName, index int, params *DeleteAclFCGIAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAclFCGIAppRequest generates requests for GetAclFCGIApp
func NewGetAclFCGIAppRequest(server string, parentName ParentName, index int, params *GetAclFCGIAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAclFCGIAppRequest calls the generic CreateAclFCGIApp builder with application/json body
func NewCreateAclFCGIAppRequest(server string, parentName ParentName, index int, params *CreateAclFCGIAppParams, body CreateAclFCGIAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAclFCGIAppRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateAclFCGIAppRequestWithBody generates requests for CreateAclFCGIApp with any type of body
func NewCreateAclFCGIAppRequestWithBody(server string, parentName ParentName, index int, params *CreateAclFCGIAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceAclFCGIAppRequest calls the generic ReplaceAclFCGIApp builder with application/json body
func NewReplaceAclFCGIAppRequest(server string, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, body ReplaceAclFCGIAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAclFCGIAppRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceAclFCGIAppRequestWithBody generates requests for ReplaceAclFCGIApp with any type of body
func NewReplaceAclFCGIAppRequestWithBody(server string, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/fcgi_apps/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFrontendsRequest generates requests for GetFrontends
func NewGetFrontendsRequest(server string, params *GetFrontendsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFrontendRequest calls the generic CreateFrontend builder with application/json body
func NewCreateFrontendRequest(server string, params *CreateFrontendParams, body CreateFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFrontendRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateFrontendRequestWithBody generates requests for CreateFrontend with any type of body
func NewCreateFrontendRequestWithBody(server string, params *CreateFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFrontendRequest generates requests for DeleteFrontend
func NewDeleteFrontendRequest(server string, name string, params *DeleteFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFrontendRequest generates requests for GetFrontend
func NewGetFrontendRequest(server string, name string, params *GetFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceFrontendRequest calls the generic ReplaceFrontend builder with application/json body
func NewReplaceFrontendRequest(server string, name string, params *ReplaceFrontendParams, body ReplaceFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceFrontendRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceFrontendRequestWithBody generates requests for ReplaceFrontend with any type of body
func NewReplaceFrontendRequestWithBody(server string, name string, params *ReplaceFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAclFrontendRequest generates requests for GetAllAclFrontend
func NewGetAllAclFrontendRequest(server string, parentName ParentName, params *GetAllAclFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AclName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acl_name", runtime.ParamLocationQuery, *params.AclName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllAclFrontendRequest calls the generic ReplaceAllAclFrontend builder with application/json body
func NewReplaceAllAclFrontendRequest(server string, parentName ParentName, params *ReplaceAllAclFrontendParams, body ReplaceAllAclFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllAclFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllAclFrontendRequestWithBody generates requests for ReplaceAllAclFrontend with any type of body
func NewReplaceAllAclFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllAclFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAclFrontendRequest generates requests for DeleteAclFrontend
func NewDeleteAclFrontendRequest(server string, parentName ParentName, index int, params *DeleteAclFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAclFrontendRequest generates requests for GetAclFrontend
func NewGetAclFrontendRequest(server string, parentName ParentName, index int, params *GetAclFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAclFrontendRequest calls the generic CreateAclFrontend builder with application/json body
func NewCreateAclFrontendRequest(server string, parentName ParentName, index int, params *CreateAclFrontendParams, body CreateAclFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAclFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateAclFrontendRequestWithBody generates requests for CreateAclFrontend with any type of body
func NewCreateAclFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateAclFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceAclFrontendRequest calls the generic ReplaceAclFrontend builder with application/json body
func NewReplaceAclFrontendRequest(server string, parentName ParentName, index int, params *ReplaceAclFrontendParams, body ReplaceAclFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAclFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceAclFrontendRequestWithBody generates requests for ReplaceAclFrontend with any type of body
func NewReplaceAclFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceAclFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/acls/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBackendSwitchingRulesRequest generates requests for GetBackendSwitchingRules
func NewGetBackendSwitchingRulesRequest(server string, parentName ParentName, params *GetBackendSwitchingRulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/backend_switching_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceBackendSwitchingRulesRequest calls the generic ReplaceBackendSwitchingRules builder with application/json body
func NewReplaceBackendSwitchingRulesRequest(server string, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, body ReplaceBackendSwitchingRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceBackendSwitchingRulesRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceBackendSwitchingRulesRequestWithBody generates requests for ReplaceBackendSwitchingRules with any type of body
func NewReplaceBackendSwitchingRulesRequestWithBody(server string, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/backend_switching_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBackendSwitchingRuleRequest generates requests for DeleteBackendSwitchingRule
func NewDeleteBackendSwitchingRuleRequest(server string, parentName ParentName, index int, params *DeleteBackendSwitchingRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/backend_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackendSwitchingRuleRequest generates requests for GetBackendSwitchingRule
func NewGetBackendSwitchingRuleRequest(server string, parentName ParentName, index int, params *GetBackendSwitchingRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/backend_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBackendSwitchingRuleRequest calls the generic CreateBackendSwitchingRule builder with application/json body
func NewCreateBackendSwitchingRuleRequest(server string, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, body CreateBackendSwitchingRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBackendSwitchingRuleRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateBackendSwitchingRuleRequestWithBody generates requests for CreateBackendSwitchingRule with any type of body
func NewCreateBackendSwitchingRuleRequestWithBody(server string, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/backend_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceBackendSwitchingRuleRequest calls the generic ReplaceBackendSwitchingRule builder with application/json body
func NewReplaceBackendSwitchingRuleRequest(server string, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, body ReplaceBackendSwitchingRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceBackendSwitchingRuleRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceBackendSwitchingRuleRequestWithBody generates requests for ReplaceBackendSwitchingRule with any type of body
func NewReplaceBackendSwitchingRuleRequestWithBody(server string, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/backend_switching_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllBindFrontendRequest generates requests for GetAllBindFrontend
func NewGetAllBindFrontendRequest(server string, parentName ParentName, params *GetAllBindFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBindFrontendRequest calls the generic CreateBindFrontend builder with application/json body
func NewCreateBindFrontendRequest(server string, parentName ParentName, params *CreateBindFrontendParams, body CreateBindFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBindFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateBindFrontendRequestWithBody generates requests for CreateBindFrontend with any type of body
func NewCreateBindFrontendRequestWithBody(server string, parentName ParentName, params *CreateBindFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBindFrontendRequest generates requests for DeleteBindFrontend
func NewDeleteBindFrontendRequest(server string, parentName ParentName, name string, params *DeleteBindFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBindFrontendRequest generates requests for GetBindFrontend
func NewGetBindFrontendRequest(server string, parentName ParentName, name string, params *GetBindFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceBindFrontendRequest calls the generic ReplaceBindFrontend builder with application/json body
func NewReplaceBindFrontendRequest(server string, parentName ParentName, name string, params *ReplaceBindFrontendParams, body ReplaceBindFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceBindFrontendRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceBindFrontendRequestWithBody generates requests for ReplaceBindFrontend with any type of body
func NewReplaceBindFrontendRequestWithBody(server string, parentName ParentName, name string, params *ReplaceBindFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeclareCapturesRequest generates requests for GetDeclareCaptures
func NewGetDeclareCapturesRequest(server string, parentName ParentName, params *GetDeclareCapturesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/captures", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceDeclareCapturesRequest calls the generic ReplaceDeclareCaptures builder with application/json body
func NewReplaceDeclareCapturesRequest(server string, parentName ParentName, params *ReplaceDeclareCapturesParams, body ReplaceDeclareCapturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceDeclareCapturesRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceDeclareCapturesRequestWithBody generates requests for ReplaceDeclareCaptures with any type of body
func NewReplaceDeclareCapturesRequestWithBody(server string, parentName ParentName, params *ReplaceDeclareCapturesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/captures", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeclareCaptureRequest generates requests for DeleteDeclareCapture
func NewDeleteDeclareCaptureRequest(server string, parentName ParentName, index int, params *DeleteDeclareCaptureParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/captures/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeclareCaptureRequest generates requests for GetDeclareCapture
func NewGetDeclareCaptureRequest(server string, parentName ParentName, index int, params *GetDeclareCaptureParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/captures/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeclareCaptureRequest calls the generic CreateDeclareCapture builder with application/json body
func NewCreateDeclareCaptureRequest(server string, parentName ParentName, index int, params *CreateDeclareCaptureParams, body CreateDeclareCaptureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeclareCaptureRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateDeclareCaptureRequestWithBody generates requests for CreateDeclareCapture with any type of body
func NewCreateDeclareCaptureRequestWithBody(server string, parentName ParentName, index int, params *CreateDeclareCaptureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/captures/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceDeclareCaptureRequest calls the generic ReplaceDeclareCapture builder with application/json body
func NewReplaceDeclareCaptureRequest(server string, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, body ReplaceDeclareCaptureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceDeclareCaptureRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceDeclareCaptureRequestWithBody generates requests for ReplaceDeclareCapture with any type of body
func NewReplaceDeclareCaptureRequestWithBody(server string, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/captures/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllFilterFrontendRequest generates requests for GetAllFilterFrontend
func NewGetAllFilterFrontendRequest(server string, parentName ParentName, params *GetAllFilterFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/filters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllFilterFrontendRequest calls the generic ReplaceAllFilterFrontend builder with application/json body
func NewReplaceAllFilterFrontendRequest(server string, parentName ParentName, params *ReplaceAllFilterFrontendParams, body ReplaceAllFilterFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllFilterFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllFilterFrontendRequestWithBody generates requests for ReplaceAllFilterFrontend with any type of body
func NewReplaceAllFilterFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllFilterFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/filters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFilterFrontendRequest generates requests for DeleteFilterFrontend
func NewDeleteFilterFrontendRequest(server string, parentName ParentName, index int, params *DeleteFilterFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFilterFrontendRequest generates requests for GetFilterFrontend
func NewGetFilterFrontendRequest(server string, parentName ParentName, index int, params *GetFilterFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFilterFrontendRequest calls the generic CreateFilterFrontend builder with application/json body
func NewCreateFilterFrontendRequest(server string, parentName ParentName, index int, params *CreateFilterFrontendParams, body CreateFilterFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFilterFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateFilterFrontendRequestWithBody generates requests for CreateFilterFrontend with any type of body
func NewCreateFilterFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateFilterFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceFilterFrontendRequest calls the generic ReplaceFilterFrontend builder with application/json body
func NewReplaceFilterFrontendRequest(server string, parentName ParentName, index int, params *ReplaceFilterFrontendParams, body ReplaceFilterFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceFilterFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceFilterFrontendRequestWithBody generates requests for ReplaceFilterFrontend with any type of body
func NewReplaceFilterFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceFilterFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPAfterResponseRuleFrontendRequest generates requests for GetAllHTTPAfterResponseRuleFrontend
func NewGetAllHTTPAfterResponseRuleFrontendRequest(server string, parentName ParentName, params *GetAllHTTPAfterResponseRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_after_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPAfterResponseRuleFrontendRequest calls the generic ReplaceAllHTTPAfterResponseRuleFrontend builder with application/json body
func NewReplaceAllHTTPAfterResponseRuleFrontendRequest(server string, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, body ReplaceAllHTTPAfterResponseRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPAfterResponseRuleFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPAfterResponseRuleFrontendRequestWithBody generates requests for ReplaceAllHTTPAfterResponseRuleFrontend with any type of body
func NewReplaceAllHTTPAfterResponseRuleFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_after_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPAfterResponseRuleFrontendRequest generates requests for DeleteHTTPAfterResponseRuleFrontend
func NewDeleteHTTPAfterResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPAfterResponseRuleFrontendRequest generates requests for GetHTTPAfterResponseRuleFrontend
func NewGetHTTPAfterResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *GetHTTPAfterResponseRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPAfterResponseRuleFrontendRequest calls the generic CreateHTTPAfterResponseRuleFrontend builder with application/json body
func NewCreateHTTPAfterResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, body CreateHTTPAfterResponseRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPAfterResponseRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPAfterResponseRuleFrontendRequestWithBody generates requests for CreateHTTPAfterResponseRuleFrontend with any type of body
func NewCreateHTTPAfterResponseRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPAfterResponseRuleFrontendRequest calls the generic ReplaceHTTPAfterResponseRuleFrontend builder with application/json body
func NewReplaceHTTPAfterResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, body ReplaceHTTPAfterResponseRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPAfterResponseRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPAfterResponseRuleFrontendRequestWithBody generates requests for ReplaceHTTPAfterResponseRuleFrontend with any type of body
func NewReplaceHTTPAfterResponseRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_after_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPErrorRuleFrontendRequest generates requests for GetAllHTTPErrorRuleFrontend
func NewGetAllHTTPErrorRuleFrontendRequest(server string, parentName ParentName, params *GetAllHTTPErrorRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_error_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPErrorRuleFrontendRequest calls the generic ReplaceAllHTTPErrorRuleFrontend builder with application/json body
func NewReplaceAllHTTPErrorRuleFrontendRequest(server string, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, body ReplaceAllHTTPErrorRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPErrorRuleFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPErrorRuleFrontendRequestWithBody generates requests for ReplaceAllHTTPErrorRuleFrontend with any type of body
func NewReplaceAllHTTPErrorRuleFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_error_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPErrorRuleFrontendRequest generates requests for DeleteHTTPErrorRuleFrontend
func NewDeleteHTTPErrorRuleFrontendRequest(server string, parentName ParentName, index int, params *DeleteHTTPErrorRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPErrorRuleFrontendRequest generates requests for GetHTTPErrorRuleFrontend
func NewGetHTTPErrorRuleFrontendRequest(server string, parentName ParentName, index int, params *GetHTTPErrorRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPErrorRuleFrontendRequest calls the generic CreateHTTPErrorRuleFrontend builder with application/json body
func NewCreateHTTPErrorRuleFrontendRequest(server string, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, body CreateHTTPErrorRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPErrorRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPErrorRuleFrontendRequestWithBody generates requests for CreateHTTPErrorRuleFrontend with any type of body
func NewCreateHTTPErrorRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPErrorRuleFrontendRequest calls the generic ReplaceHTTPErrorRuleFrontend builder with application/json body
func NewReplaceHTTPErrorRuleFrontendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, body ReplaceHTTPErrorRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPErrorRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPErrorRuleFrontendRequestWithBody generates requests for ReplaceHTTPErrorRuleFrontend with any type of body
func NewReplaceHTTPErrorRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_error_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPRequestRuleFrontendRequest generates requests for GetAllHTTPRequestRuleFrontend
func NewGetAllHTTPRequestRuleFrontendRequest(server string, parentName ParentName, params *GetAllHTTPRequestRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPRequestRuleFrontendRequest calls the generic ReplaceAllHTTPRequestRuleFrontend builder with application/json body
func NewReplaceAllHTTPRequestRuleFrontendRequest(server string, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, body ReplaceAllHTTPRequestRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPRequestRuleFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPRequestRuleFrontendRequestWithBody generates requests for ReplaceAllHTTPRequestRuleFrontend with any type of body
func NewReplaceAllHTTPRequestRuleFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPRequestRuleFrontendRequest generates requests for DeleteHTTPRequestRuleFrontend
func NewDeleteHTTPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *DeleteHTTPRequestRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPRequestRuleFrontendRequest generates requests for GetHTTPRequestRuleFrontend
func NewGetHTTPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *GetHTTPRequestRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPRequestRuleFrontendRequest calls the generic CreateHTTPRequestRuleFrontend builder with application/json body
func NewCreateHTTPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, body CreateHTTPRequestRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPRequestRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPRequestRuleFrontendRequestWithBody generates requests for CreateHTTPRequestRuleFrontend with any type of body
func NewCreateHTTPRequestRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPRequestRuleFrontendRequest calls the generic ReplaceHTTPRequestRuleFrontend builder with application/json body
func NewReplaceHTTPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, body ReplaceHTTPRequestRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPRequestRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPRequestRuleFrontendRequestWithBody generates requests for ReplaceHTTPRequestRuleFrontend with any type of body
func NewReplaceHTTPRequestRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllHTTPResponseRuleFrontendRequest generates requests for GetAllHTTPResponseRuleFrontend
func NewGetAllHTTPResponseRuleFrontendRequest(server string, parentName ParentName, params *GetAllHTTPResponseRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllHTTPResponseRuleFrontendRequest calls the generic ReplaceAllHTTPResponseRuleFrontend builder with application/json body
func NewReplaceAllHTTPResponseRuleFrontendRequest(server string, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, body ReplaceAllHTTPResponseRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllHTTPResponseRuleFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllHTTPResponseRuleFrontendRequestWithBody generates requests for ReplaceAllHTTPResponseRuleFrontend with any type of body
func NewReplaceAllHTTPResponseRuleFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_response_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPResponseRuleFrontendRequest generates requests for DeleteHTTPResponseRuleFrontend
func NewDeleteHTTPResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *DeleteHTTPResponseRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPResponseRuleFrontendRequest generates requests for GetHTTPResponseRuleFrontend
func NewGetHTTPResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *GetHTTPResponseRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPResponseRuleFrontendRequest calls the generic CreateHTTPResponseRuleFrontend builder with application/json body
func NewCreateHTTPResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, body CreateHTTPResponseRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPResponseRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateHTTPResponseRuleFrontendRequestWithBody generates requests for CreateHTTPResponseRuleFrontend with any type of body
func NewCreateHTTPResponseRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceHTTPResponseRuleFrontendRequest calls the generic ReplaceHTTPResponseRuleFrontend builder with application/json body
func NewReplaceHTTPResponseRuleFrontendRequest(server string, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, body ReplaceHTTPResponseRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPResponseRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceHTTPResponseRuleFrontendRequestWithBody generates requests for ReplaceHTTPResponseRuleFrontend with any type of body
func NewReplaceHTTPResponseRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/http_response_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLogTargetFrontendRequest generates requests for GetAllLogTargetFrontend
func NewGetAllLogTargetFrontendRequest(server string, parentName ParentName, params *GetAllLogTargetFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllLogTargetFrontendRequest calls the generic ReplaceAllLogTargetFrontend builder with application/json body
func NewReplaceAllLogTargetFrontendRequest(server string, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, body ReplaceAllLogTargetFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllLogTargetFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllLogTargetFrontendRequestWithBody generates requests for ReplaceAllLogTargetFrontend with any type of body
func NewReplaceAllLogTargetFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogTargetFrontendRequest generates requests for DeleteLogTargetFrontend
func NewDeleteLogTargetFrontendRequest(server string, parentName ParentName, index int, params *DeleteLogTargetFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogTargetFrontendRequest generates requests for GetLogTargetFrontend
func NewGetLogTargetFrontendRequest(server string, parentName ParentName, index int, params *GetLogTargetFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogTargetFrontendRequest calls the generic CreateLogTargetFrontend builder with application/json body
func NewCreateLogTargetFrontendRequest(server string, parentName ParentName, index int, params *CreateLogTargetFrontendParams, body CreateLogTargetFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogTargetFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateLogTargetFrontendRequestWithBody generates requests for CreateLogTargetFrontend with any type of body
func NewCreateLogTargetFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateLogTargetFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceLogTargetFrontendRequest calls the generic ReplaceLogTargetFrontend builder with application/json body
func NewReplaceLogTargetFrontendRequest(server string, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, body ReplaceLogTargetFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLogTargetFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceLogTargetFrontendRequestWithBody generates requests for ReplaceLogTargetFrontend with any type of body
func NewReplaceLogTargetFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllQUICInitialRuleFrontendRequest generates requests for GetAllQUICInitialRuleFrontend
func NewGetAllQUICInitialRuleFrontendRequest(server string, parentName ParentName, params *GetAllQUICInitialRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/quic_initial_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllQUICInitialRuleFrontendRequest calls the generic ReplaceAllQUICInitialRuleFrontend builder with application/json body
func NewReplaceAllQUICInitialRuleFrontendRequest(server string, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, body ReplaceAllQUICInitialRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllQUICInitialRuleFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllQUICInitialRuleFrontendRequestWithBody generates requests for ReplaceAllQUICInitialRuleFrontend with any type of body
func NewReplaceAllQUICInitialRuleFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/quic_initial_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteQUICInitialRuleFrontendRequest generates requests for DeleteQUICInitialRuleFrontend
func NewDeleteQUICInitialRuleFrontendRequest(server string, parentName ParentName, index int, params *DeleteQUICInitialRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQUICInitialRuleFrontendRequest generates requests for GetQUICInitialRuleFrontend
func NewGetQUICInitialRuleFrontendRequest(server string, parentName ParentName, index int, params *GetQUICInitialRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateQUICInitialRuleFrontendRequest calls the generic CreateQUICInitialRuleFrontend builder with application/json body
func NewCreateQUICInitialRuleFrontendRequest(server string, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, body CreateQUICInitialRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateQUICInitialRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateQUICInitialRuleFrontendRequestWithBody generates requests for CreateQUICInitialRuleFrontend with any type of body
func NewCreateQUICInitialRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceQUICInitialRuleFrontendRequest calls the generic ReplaceQUICInitialRuleFrontend builder with application/json body
func NewReplaceQUICInitialRuleFrontendRequest(server string, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, body ReplaceQUICInitialRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceQUICInitialRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceQUICInitialRuleFrontendRequestWithBody generates requests for ReplaceQUICInitialRuleFrontend with any type of body
func NewReplaceQUICInitialRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/quic_initial_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllSSLFrontUsesRequest generates requests for GetAllSSLFrontUses
func NewGetAllSSLFrontUsesRequest(server string, parentName ParentName, params *GetAllSSLFrontUsesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/ssl_front_uses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSSLFrontUseRequest calls the generic CreateSSLFrontUse builder with application/json body
func NewCreateSSLFrontUseRequest(server string, parentName ParentName, params *CreateSSLFrontUseParams, body CreateSSLFrontUseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSSLFrontUseRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateSSLFrontUseRequestWithBody generates requests for CreateSSLFrontUse with any type of body
func NewCreateSSLFrontUseRequestWithBody(server string, parentName ParentName, params *CreateSSLFrontUseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/ssl_front_uses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSSLFrontUseRequest generates requests for DeleteSSLFrontUse
func NewDeleteSSLFrontUseRequest(server string, parentName ParentName, index int, params *DeleteSSLFrontUseParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/ssl_front_uses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSSLFrontUseRequest generates requests for GetSSLFrontUse
func NewGetSSLFrontUseRequest(server string, parentName ParentName, index int, params *GetSSLFrontUseParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/ssl_front_uses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceSSLFrontUseRequest calls the generic ReplaceSSLFrontUse builder with application/json body
func NewReplaceSSLFrontUseRequest(server string, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, body ReplaceSSLFrontUseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceSSLFrontUseRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceSSLFrontUseRequestWithBody generates requests for ReplaceSSLFrontUse with any type of body
func NewReplaceSSLFrontUseRequestWithBody(server string, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/ssl_front_uses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTCPRequestRuleFrontendRequest generates requests for GetAllTCPRequestRuleFrontend
func NewGetAllTCPRequestRuleFrontendRequest(server string, parentName ParentName, params *GetAllTCPRequestRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/tcp_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllTCPRequestRuleFrontendRequest calls the generic ReplaceAllTCPRequestRuleFrontend builder with application/json body
func NewReplaceAllTCPRequestRuleFrontendRequest(server string, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, body ReplaceAllTCPRequestRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllTCPRequestRuleFrontendRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllTCPRequestRuleFrontendRequestWithBody generates requests for ReplaceAllTCPRequestRuleFrontend with any type of body
func NewReplaceAllTCPRequestRuleFrontendRequestWithBody(server string, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/tcp_request_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPRequestRuleFrontendRequest generates requests for DeleteTCPRequestRuleFrontend
func NewDeleteTCPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *DeleteTCPRequestRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPRequestRuleFrontendRequest generates requests for GetTCPRequestRuleFrontend
func NewGetTCPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *GetTCPRequestRuleFrontendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPRequestRuleFrontendRequest calls the generic CreateTCPRequestRuleFrontend builder with application/json body
func NewCreateTCPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, body CreateTCPRequestRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPRequestRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateTCPRequestRuleFrontendRequestWithBody generates requests for CreateTCPRequestRuleFrontend with any type of body
func NewCreateTCPRequestRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTCPRequestRuleFrontendRequest calls the generic ReplaceTCPRequestRuleFrontend builder with application/json body
func NewReplaceTCPRequestRuleFrontendRequest(server string, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, body ReplaceTCPRequestRuleFrontendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTCPRequestRuleFrontendRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceTCPRequestRuleFrontendRequestWithBody generates requests for ReplaceTCPRequestRuleFrontend with any type of body
func NewReplaceTCPRequestRuleFrontendRequestWithBody(server string, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/frontends/%s/tcp_request_rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGlobalRequest generates requests for GetGlobal
func NewGetGlobalRequest(server string, params *GetGlobalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceGlobalRequest calls the generic ReplaceGlobal builder with application/json body
func NewReplaceGlobalRequest(server string, params *ReplaceGlobalParams, body ReplaceGlobalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceGlobalRequestWithBody(server, params, "application/json", bodyReader)
}

// NewReplaceGlobalRequestWithBody generates requests for ReplaceGlobal with any type of body
func NewReplaceGlobalRequestWithBody(server string, params *ReplaceGlobalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLogTargetGlobalRequest generates requests for GetAllLogTargetGlobal
func NewGetAllLogTargetGlobalRequest(server string, params *GetAllLogTargetGlobalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global/log_targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllLogTargetGlobalRequest calls the generic ReplaceAllLogTargetGlobal builder with application/json body
func NewReplaceAllLogTargetGlobalRequest(server string, params *ReplaceAllLogTargetGlobalParams, body ReplaceAllLogTargetGlobalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllLogTargetGlobalRequestWithBody(server, params, "application/json", bodyReader)
}

// NewReplaceAllLogTargetGlobalRequestWithBody generates requests for ReplaceAllLogTargetGlobal with any type of body
func NewReplaceAllLogTargetGlobalRequestWithBody(server string, params *ReplaceAllLogTargetGlobalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global/log_targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogTargetGlobalRequest generates requests for DeleteLogTargetGlobal
func NewDeleteLogTargetGlobalRequest(server string, index int, params *DeleteLogTargetGlobalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global/log_targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogTargetGlobalRequest generates requests for GetLogTargetGlobal
func NewGetLogTargetGlobalRequest(server string, index int, params *GetLogTargetGlobalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global/log_targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogTargetGlobalRequest calls the generic CreateLogTargetGlobal builder with application/json body
func NewCreateLogTargetGlobalRequest(server string, index int, params *CreateLogTargetGlobalParams, body CreateLogTargetGlobalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogTargetGlobalRequestWithBody(server, index, params, "application/json", bodyReader)
}

// NewCreateLogTargetGlobalRequestWithBody generates requests for CreateLogTargetGlobal with any type of body
func NewCreateLogTargetGlobalRequestWithBody(server string, index int, params *CreateLogTargetGlobalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global/log_targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceLogTargetGlobalRequest calls the generic ReplaceLogTargetGlobal builder with application/json body
func NewReplaceLogTargetGlobalRequest(server string, index int, params *ReplaceLogTargetGlobalParams, body ReplaceLogTargetGlobalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLogTargetGlobalRequestWithBody(server, index, params, "application/json", bodyReader)
}

// NewReplaceLogTargetGlobalRequestWithBody generates requests for ReplaceLogTargetGlobal with any type of body
func NewReplaceLogTargetGlobalRequestWithBody(server string, index int, params *ReplaceLogTargetGlobalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/global/log_targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupsRequest generates requests for GetGroups
func NewGetGroupsRequest(server string, params *GetGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGroupRequest calls the generic CreateGroup builder with application/json body
func NewCreateGroupRequest(server string, params *CreateGroupParams, body CreateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGroupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateGroupRequestWithBody generates requests for CreateGroup with any type of body
func NewCreateGroupRequestWithBody(server string, params *CreateGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupRequest generates requests for DeleteGroup
func NewDeleteGroupRequest(server string, name string, params *DeleteGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRequest generates requests for GetGroup
func NewGetGroupRequest(server string, name string, params *GetGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceGroupRequest calls the generic ReplaceGroup builder with application/json body
func NewReplaceGroupRequest(server string, name string, params *ReplaceGroupParams, body ReplaceGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceGroupRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceGroupRequestWithBody generates requests for ReplaceGroup with any type of body
func NewReplaceGroupRequestWithBody(server string, name string, params *ReplaceGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHTTPErrorsSectionsRequest generates requests for GetHTTPErrorsSections
func NewGetHTTPErrorsSectionsRequest(server string, params *GetHTTPErrorsSectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/http_errors_sections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPErrorsSectionRequest calls the generic CreateHTTPErrorsSection builder with application/json body
func NewCreateHTTPErrorsSectionRequest(server string, params *CreateHTTPErrorsSectionParams, body CreateHTTPErrorsSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPErrorsSectionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateHTTPErrorsSectionRequestWithBody generates requests for CreateHTTPErrorsSection with any type of body
func NewCreateHTTPErrorsSectionRequestWithBody(server string, params *CreateHTTPErrorsSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/http_errors_sections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPErrorsSectionRequest generates requests for DeleteHTTPErrorsSection
func NewDeleteHTTPErrorsSectionRequest(server string, name string, params *DeleteHTTPErrorsSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/http_errors_sections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPErrorsSectionRequest generates requests for GetHTTPErrorsSection
func NewGetHTTPErrorsSectionRequest(server string, name string, params *GetHTTPErrorsSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/http_errors_sections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceHTTPErrorsSectionRequest calls the generic ReplaceHTTPErrorsSection builder with application/json body
func NewReplaceHTTPErrorsSectionRequest(server string, name string, params *ReplaceHTTPErrorsSectionParams, body ReplaceHTTPErrorsSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceHTTPErrorsSectionRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceHTTPErrorsSectionRequestWithBody generates requests for ReplaceHTTPErrorsSection with any type of body
func NewReplaceHTTPErrorsSectionRequestWithBody(server string, name string, params *ReplaceHTTPErrorsSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/http_errors_sections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogForwardsRequest generates requests for GetLogForwards
func NewGetLogForwardsRequest(server string, params *GetLogForwardsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogForwardRequest calls the generic CreateLogForward builder with application/json body
func NewCreateLogForwardRequest(server string, params *CreateLogForwardParams, body CreateLogForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogForwardRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateLogForwardRequestWithBody generates requests for CreateLogForward with any type of body
func NewCreateLogForwardRequestWithBody(server string, params *CreateLogForwardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogForwardRequest generates requests for DeleteLogForward
func NewDeleteLogForwardRequest(server string, name string, params *DeleteLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogForwardRequest generates requests for GetLogForward
func NewGetLogForwardRequest(server string, name string, params *GetLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceLogForwardRequest calls the generic ReplaceLogForward builder with application/json body
func NewReplaceLogForwardRequest(server string, name string, params *ReplaceLogForwardParams, body ReplaceLogForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLogForwardRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceLogForwardRequestWithBody generates requests for ReplaceLogForward with any type of body
func NewReplaceLogForwardRequestWithBody(server string, name string, params *ReplaceLogForwardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllBindLogForwardRequest generates requests for GetAllBindLogForward
func NewGetAllBindLogForwardRequest(server string, parentName ParentName, params *GetAllBindLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBindLogForwardRequest calls the generic CreateBindLogForward builder with application/json body
func NewCreateBindLogForwardRequest(server string, parentName ParentName, params *CreateBindLogForwardParams, body CreateBindLogForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBindLogForwardRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateBindLogForwardRequestWithBody generates requests for CreateBindLogForward with any type of body
func NewCreateBindLogForwardRequestWithBody(server string, parentName ParentName, params *CreateBindLogForwardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBindLogForwardRequest generates requests for DeleteBindLogForward
func NewDeleteBindLogForwardRequest(server string, parentName ParentName, name string, params *DeleteBindLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBindLogForwardRequest generates requests for GetBindLogForward
func NewGetBindLogForwardRequest(server string, parentName ParentName, name string, params *GetBindLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceBindLogForwardRequest calls the generic ReplaceBindLogForward builder with application/json body
func NewReplaceBindLogForwardRequest(server string, parentName ParentName, name string, params *ReplaceBindLogForwardParams, body ReplaceBindLogForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceBindLogForwardRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceBindLogForwardRequestWithBody generates requests for ReplaceBindLogForward with any type of body
func NewReplaceBindLogForwardRequestWithBody(server string, parentName ParentName, name string, params *ReplaceBindLogForwardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDgramBindsRequest generates requests for GetDgramBinds
func NewGetDgramBindsRequest(server string, parentName ParentName, params *GetDgramBindsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/dgram_binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDgramBindRequest calls the generic CreateDgramBind builder with application/json body
func NewCreateDgramBindRequest(server string, parentName ParentName, params *CreateDgramBindParams, body CreateDgramBindJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDgramBindRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateDgramBindRequestWithBody generates requests for CreateDgramBind with any type of body
func NewCreateDgramBindRequestWithBody(server string, parentName ParentName, params *CreateDgramBindParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/dgram_binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDgramBindRequest generates requests for DeleteDgramBind
func NewDeleteDgramBindRequest(server string, parentName ParentName, name string, params *DeleteDgramBindParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/dgram_binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDgramBindRequest generates requests for GetDgramBind
func NewGetDgramBindRequest(server string, parentName ParentName, name string, params *GetDgramBindParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/dgram_binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceDgramBindRequest calls the generic ReplaceDgramBind builder with application/json body
func NewReplaceDgramBindRequest(server string, parentName ParentName, name string, params *ReplaceDgramBindParams, body ReplaceDgramBindJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceDgramBindRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceDgramBindRequestWithBody generates requests for ReplaceDgramBind with any type of body
func NewReplaceDgramBindRequestWithBody(server string, parentName ParentName, name string, params *ReplaceDgramBindParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/dgram_binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLogTargetLogForwardRequest generates requests for GetAllLogTargetLogForward
func NewGetAllLogTargetLogForwardRequest(server string, parentName ParentName, params *GetAllLogTargetLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllLogTargetLogForwardRequest calls the generic ReplaceAllLogTargetLogForward builder with application/json body
func NewReplaceAllLogTargetLogForwardRequest(server string, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, body ReplaceAllLogTargetLogForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllLogTargetLogForwardRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllLogTargetLogForwardRequestWithBody generates requests for ReplaceAllLogTargetLogForward with any type of body
func NewReplaceAllLogTargetLogForwardRequestWithBody(server string, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogTargetLogForwardRequest generates requests for DeleteLogTargetLogForward
func NewDeleteLogTargetLogForwardRequest(server string, parentName ParentName, index int, params *DeleteLogTargetLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogTargetLogForwardRequest generates requests for GetLogTargetLogForward
func NewGetLogTargetLogForwardRequest(server string, parentName ParentName, index int, params *GetLogTargetLogForwardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogTargetLogForwardRequest calls the generic CreateLogTargetLogForward builder with application/json body
func NewCreateLogTargetLogForwardRequest(server string, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, body CreateLogTargetLogForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogTargetLogForwardRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateLogTargetLogForwardRequestWithBody generates requests for CreateLogTargetLogForward with any type of body
func NewCreateLogTargetLogForwardRequestWithBody(server string, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceLogTargetLogForwardRequest calls the generic ReplaceLogTargetLogForward builder with application/json body
func NewReplaceLogTargetLogForwardRequest(server string, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, body ReplaceLogTargetLogForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLogTargetLogForwardRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceLogTargetLogForwardRequestWithBody generates requests for ReplaceLogTargetLogForward with any type of body
func NewReplaceLogTargetLogForwardRequestWithBody(server string, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_forwards/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogProfilesRequest generates requests for GetLogProfiles
func NewGetLogProfilesRequest(server string, params *GetLogProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogProfileRequest calls the generic CreateLogProfile builder with application/json body
func NewCreateLogProfileRequest(server string, params *CreateLogProfileParams, body CreateLogProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogProfileRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateLogProfileRequestWithBody generates requests for CreateLogProfile with any type of body
func NewCreateLogProfileRequestWithBody(server string, params *CreateLogProfileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogProfileRequest generates requests for DeleteLogProfile
func NewDeleteLogProfileRequest(server string, name string, params *DeleteLogProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogProfileRequest generates requests for GetLogProfile
func NewGetLogProfileRequest(server string, name string, params *GetLogProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditLogProfileRequest calls the generic EditLogProfile builder with application/json body
func NewEditLogProfileRequest(server string, name string, params *EditLogProfileParams, body EditLogProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditLogProfileRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewEditLogProfileRequestWithBody generates requests for EditLogProfile with any type of body
func NewEditLogProfileRequestWithBody(server string, name string, params *EditLogProfileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/log_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMailerEntriesRequest generates requests for GetMailerEntries
func NewGetMailerEntriesRequest(server string, params *GetMailerEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailer_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mailers_section", runtime.ParamLocationQuery, params.MailersSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMailerEntryRequest calls the generic CreateMailerEntry builder with application/json body
func NewCreateMailerEntryRequest(server string, params *CreateMailerEntryParams, body CreateMailerEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMailerEntryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateMailerEntryRequestWithBody generates requests for CreateMailerEntry with any type of body
func NewCreateMailerEntryRequestWithBody(server string, params *CreateMailerEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailer_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mailers_section", runtime.ParamLocationQuery, params.MailersSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMailerEntryRequest generates requests for DeleteMailerEntry
func NewDeleteMailerEntryRequest(server string, name string, params *DeleteMailerEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailer_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mailers_section", runtime.ParamLocationQuery, params.MailersSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMailerEntryRequest generates requests for GetMailerEntry
func NewGetMailerEntryRequest(server string, name string, params *GetMailerEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailer_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mailers_section", runtime.ParamLocationQuery, params.MailersSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceMailerEntryRequest calls the generic ReplaceMailerEntry builder with application/json body
func NewReplaceMailerEntryRequest(server string, name string, params *ReplaceMailerEntryParams, body ReplaceMailerEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceMailerEntryRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceMailerEntryRequestWithBody generates requests for ReplaceMailerEntry with any type of body
func NewReplaceMailerEntryRequestWithBody(server string, name string, params *ReplaceMailerEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailer_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mailers_section", runtime.ParamLocationQuery, params.MailersSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMailersSectionsRequest generates requests for GetMailersSections
func NewGetMailersSectionsRequest(server string, params *GetMailersSectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailers_section")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMailersSectionRequest calls the generic CreateMailersSection builder with application/json body
func NewCreateMailersSectionRequest(server string, params *CreateMailersSectionParams, body CreateMailersSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMailersSectionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateMailersSectionRequestWithBody generates requests for CreateMailersSection with any type of body
func NewCreateMailersSectionRequestWithBody(server string, params *CreateMailersSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailers_section")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMailersSectionRequest generates requests for DeleteMailersSection
func NewDeleteMailersSectionRequest(server string, name string, params *DeleteMailersSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailers_section/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMailersSectionRequest generates requests for GetMailersSection
func NewGetMailersSectionRequest(server string, name string, params *GetMailersSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailers_section/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditMailersSectionRequest calls the generic EditMailersSection builder with application/json body
func NewEditMailersSectionRequest(server string, name string, params *EditMailersSectionParams, body EditMailersSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditMailersSectionRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewEditMailersSectionRequestWithBody generates requests for EditMailersSection with any type of body
func NewEditMailersSectionRequestWithBody(server string, name string, params *EditMailersSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/mailers_section/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNameserversRequest generates requests for GetNameservers
func NewGetNameserversRequest(server string, params *GetNameserversParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/nameservers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver", runtime.ParamLocationQuery, params.Resolver); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNameserverRequest calls the generic CreateNameserver builder with application/json body
func NewCreateNameserverRequest(server string, params *CreateNameserverParams, body CreateNameserverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNameserverRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateNameserverRequestWithBody generates requests for CreateNameserver with any type of body
func NewCreateNameserverRequestWithBody(server string, params *CreateNameserverParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/nameservers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver", runtime.ParamLocationQuery, params.Resolver); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNameserverRequest generates requests for DeleteNameserver
func NewDeleteNameserverRequest(server string, name string, params *DeleteNameserverParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver", runtime.ParamLocationQuery, params.Resolver); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNameserverRequest generates requests for GetNameserver
func NewGetNameserverRequest(server string, name string, params *GetNameserverParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver", runtime.ParamLocationQuery, params.Resolver); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceNameserverRequest calls the generic ReplaceNameserver builder with application/json body
func NewReplaceNameserverRequest(server string, name string, params *ReplaceNameserverParams, body ReplaceNameserverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceNameserverRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceNameserverRequestWithBody generates requests for ReplaceNameserver with any type of body
func NewReplaceNameserverRequestWithBody(server string, name string, params *ReplaceNameserverParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver", runtime.ParamLocationQuery, params.Resolver); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPeerEntriesRequest generates requests for GetPeerEntries
func NewGetPeerEntriesRequest(server string, params *GetPeerEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_section", runtime.ParamLocationQuery, params.PeerSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePeerEntryRequest calls the generic CreatePeerEntry builder with application/json body
func NewCreatePeerEntryRequest(server string, params *CreatePeerEntryParams, body CreatePeerEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePeerEntryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePeerEntryRequestWithBody generates requests for CreatePeerEntry with any type of body
func NewCreatePeerEntryRequestWithBody(server string, params *CreatePeerEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_section", runtime.ParamLocationQuery, params.PeerSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePeerEntryRequest generates requests for DeletePeerEntry
func NewDeletePeerEntryRequest(server string, name string, params *DeletePeerEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_section", runtime.ParamLocationQuery, params.PeerSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeerEntryRequest generates requests for GetPeerEntry
func NewGetPeerEntryRequest(server string, name string, params *GetPeerEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_section", runtime.ParamLocationQuery, params.PeerSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacePeerEntryRequest calls the generic ReplacePeerEntry builder with application/json body
func NewReplacePeerEntryRequest(server string, name string, params *ReplacePeerEntryParams, body ReplacePeerEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacePeerEntryRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplacePeerEntryRequestWithBody generates requests for ReplacePeerEntry with any type of body
func NewReplacePeerEntryRequestWithBody(server string, name string, params *ReplacePeerEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_section", runtime.ParamLocationQuery, params.PeerSection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPeerSectionsRequest generates requests for GetPeerSections
func NewGetPeerSectionsRequest(server string, params *GetPeerSectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_section")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePeerRequest calls the generic CreatePeer builder with application/json body
func NewCreatePeerRequest(server string, params *CreatePeerParams, body CreatePeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePeerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePeerRequestWithBody generates requests for CreatePeer with any type of body
func NewCreatePeerRequestWithBody(server string, params *CreatePeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_section")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePeerRequest generates requests for DeletePeer
func NewDeletePeerRequest(server string, name string, params *DeletePeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_section/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeerSectionRequest generates requests for GetPeerSection
func NewGetPeerSectionRequest(server string, name string, params *GetPeerSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peer_section/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllBindPeerRequest generates requests for GetAllBindPeer
func NewGetAllBindPeerRequest(server string, parentName ParentName, params *GetAllBindPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBindPeerRequest calls the generic CreateBindPeer builder with application/json body
func NewCreateBindPeerRequest(server string, parentName ParentName, params *CreateBindPeerParams, body CreateBindPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBindPeerRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateBindPeerRequestWithBody generates requests for CreateBindPeer with any type of body
func NewCreateBindPeerRequestWithBody(server string, parentName ParentName, params *CreateBindPeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/binds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBindPeerRequest generates requests for DeleteBindPeer
func NewDeleteBindPeerRequest(server string, parentName ParentName, name string, params *DeleteBindPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBindPeerRequest generates requests for GetBindPeer
func NewGetBindPeerRequest(server string, parentName ParentName, name string, params *GetBindPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceBindPeerRequest calls the generic ReplaceBindPeer builder with application/json body
func NewReplaceBindPeerRequest(server string, parentName ParentName, name string, params *ReplaceBindPeerParams, body ReplaceBindPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceBindPeerRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceBindPeerRequestWithBody generates requests for ReplaceBindPeer with any type of body
func NewReplaceBindPeerRequestWithBody(server string, parentName ParentName, name string, params *ReplaceBindPeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/binds/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLogTargetPeerRequest generates requests for GetAllLogTargetPeer
func NewGetAllLogTargetPeerRequest(server string, parentName ParentName, params *GetAllLogTargetPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAllLogTargetPeerRequest calls the generic ReplaceAllLogTargetPeer builder with application/json body
func NewReplaceAllLogTargetPeerRequest(server string, parentName ParentName, params *ReplaceAllLogTargetPeerParams, body ReplaceAllLogTargetPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceAllLogTargetPeerRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewReplaceAllLogTargetPeerRequestWithBody generates requests for ReplaceAllLogTargetPeer with any type of body
func NewReplaceAllLogTargetPeerRequestWithBody(server string, parentName ParentName, params *ReplaceAllLogTargetPeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/log_targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogTargetPeerRequest generates requests for DeleteLogTargetPeer
func NewDeleteLogTargetPeerRequest(server string, parentName ParentName, index int, params *DeleteLogTargetPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogTargetPeerRequest generates requests for GetLogTargetPeer
func NewGetLogTargetPeerRequest(server string, parentName ParentName, index int, params *GetLogTargetPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLogTargetPeerRequest calls the generic CreateLogTargetPeer builder with application/json body
func NewCreateLogTargetPeerRequest(server string, parentName ParentName, index int, params *CreateLogTargetPeerParams, body CreateLogTargetPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogTargetPeerRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewCreateLogTargetPeerRequestWithBody generates requests for CreateLogTargetPeer with any type of body
func NewCreateLogTargetPeerRequestWithBody(server string, parentName ParentName, index int, params *CreateLogTargetPeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceLogTargetPeerRequest calls the generic ReplaceLogTargetPeer builder with application/json body
func NewReplaceLogTargetPeerRequest(server string, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, body ReplaceLogTargetPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLogTargetPeerRequestWithBody(server, parentName, index, params, "application/json", bodyReader)
}

// NewReplaceLogTargetPeerRequestWithBody generates requests for ReplaceLogTargetPeer with any type of body
func NewReplaceLogTargetPeerRequestWithBody(server string, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/log_targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllServerPeerRequest generates requests for GetAllServerPeer
func NewGetAllServerPeerRequest(server string, parentName ParentName, params *GetAllServerPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServerPeerRequest calls the generic CreateServerPeer builder with application/json body
func NewCreateServerPeerRequest(server string, parentName ParentName, params *CreateServerPeerParams, body CreateServerPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServerPeerRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateServerPeerRequestWithBody generates requests for CreateServerPeer with any type of body
func NewCreateServerPeerRequestWithBody(server string, parentName ParentName, params *CreateServerPeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServerPeerRequest generates requests for DeleteServerPeer
func NewDeleteServerPeerRequest(server string, parentName ParentName, name string, params *DeleteServerPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerPeerRequest generates requests for GetServerPeer
func NewGetServerPeerRequest(server string, parentName ParentName, name string, params *GetServerPeerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceServerPeerRequest calls the generic ReplaceServerPeer builder with application/json body
func NewReplaceServerPeerRequest(server string, parentName ParentName, name string, params *ReplaceServerPeerParams, body ReplaceServerPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceServerPeerRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceServerPeerRequestWithBody generates requests for ReplaceServerPeer with any type of body
func NewReplaceServerPeerRequestWithBody(server string, parentName ParentName, name string, params *ReplaceServerPeerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTablesRequest generates requests for GetTables
func NewGetTablesRequest(server string, parentName ParentName, params *GetTablesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/tables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTableRequest calls the generic CreateTable builder with application/json body
func NewCreateTableRequest(server string, parentName ParentName, params *CreateTableParams, body CreateTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTableRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateTableRequestWithBody generates requests for CreateTable with any type of body
func NewCreateTableRequestWithBody(server string, parentName ParentName, params *CreateTableParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/tables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTableRequest generates requests for DeleteTable
func NewDeleteTableRequest(server string, parentName ParentName, name string, params *DeleteTableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/tables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTableRequest generates requests for GetTable
func NewGetTableRequest(server string, parentName ParentName, name string, params *GetTableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/tables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceTableRequest calls the generic ReplaceTable builder with application/json body
func NewReplaceTableRequest(server string, parentName ParentName, name string, params *ReplaceTableParams, body ReplaceTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTableRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceTableRequestWithBody generates requests for ReplaceTable with any type of body
func NewReplaceTableRequestWithBody(server string, parentName ParentName, name string, params *ReplaceTableParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/peers/%s/tables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProgramsRequest generates requests for GetPrograms
func NewGetProgramsRequest(server string, params *GetProgramsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/programs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProgramRequest calls the generic CreateProgram builder with application/json body
func NewCreateProgramRequest(server string, params *CreateProgramParams, body CreateProgramJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProgramRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateProgramRequestWithBody generates requests for CreateProgram with any type of body
func NewCreateProgramRequestWithBody(server string, params *CreateProgramParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/programs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProgramRequest generates requests for DeleteProgram
func NewDeleteProgramRequest(server string, name string, params *DeleteProgramParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/programs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProgramRequest generates requests for GetProgram
func NewGetProgramRequest(server string, name string, params *GetProgramParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/programs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceProgramRequest calls the generic ReplaceProgram builder with application/json body
func NewReplaceProgramRequest(server string, name string, params *ReplaceProgramParams, body ReplaceProgramJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceProgramRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceProgramRequestWithBody generates requests for ReplaceProgram with any type of body
func NewReplaceProgramRequestWithBody(server string, name string, params *ReplaceProgramParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/programs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHAProxyConfigurationRequest generates requests for GetHAProxyConfiguration
func NewGetHAProxyConfigurationRequest(server string, params *GetHAProxyConfigurationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/raw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHAProxyConfigurationRequestWithTextBody calls the generic PostHAProxyConfiguration builder with text/plain body
func NewPostHAProxyConfigurationRequestWithTextBody(server string, params *PostHAProxyConfigurationParams, body PostHAProxyConfigurationTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostHAProxyConfigurationRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPostHAProxyConfigurationRequestWithBody generates requests for PostHAProxyConfiguration with any type of body
func NewPostHAProxyConfigurationRequestWithBody(server string, params *PostHAProxyConfigurationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/raw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_version", runtime.ParamLocationQuery, *params.SkipVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyValidate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_validate", runtime.ParamLocationQuery, *params.OnlyValidate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRuntimeActions != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Runtime-Actions", runtime.ParamLocationHeader, *params.XRuntimeActions)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Runtime-Actions", headerParam0)
		}

	}

	return req, nil
}

// NewGetResolversRequest generates requests for GetResolvers
func NewGetResolversRequest(server string, params *GetResolversParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/resolvers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResolverRequest calls the generic CreateResolver builder with application/json body
func NewCreateResolverRequest(server string, params *CreateResolverParams, body CreateResolverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResolverRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateResolverRequestWithBody generates requests for CreateResolver with any type of body
func NewCreateResolverRequestWithBody(server string, params *CreateResolverParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/resolvers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResolverRequest generates requests for DeleteResolver
func NewDeleteResolverRequest(server string, name string, params *DeleteResolverParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/resolvers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResolverRequest generates requests for GetResolver
func NewGetResolverRequest(server string, name string, params *GetResolverParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/resolvers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceResolverRequest calls the generic ReplaceResolver builder with application/json body
func NewReplaceResolverRequest(server string, name string, params *ReplaceResolverParams, body ReplaceResolverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceResolverRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceResolverRequestWithBody generates requests for ReplaceResolver with any type of body
func NewReplaceResolverRequestWithBody(server string, name string, params *ReplaceResolverParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/resolvers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRingsRequest generates requests for GetRings
func NewGetRingsRequest(server string, params *GetRingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRingRequest calls the generic CreateRing builder with application/json body
func NewCreateRingRequest(server string, params *CreateRingParams, body CreateRingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRingRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateRingRequestWithBody generates requests for CreateRing with any type of body
func NewCreateRingRequestWithBody(server string, params *CreateRingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRingRequest generates requests for DeleteRing
func NewDeleteRingRequest(server string, name string, params *DeleteRingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRingRequest generates requests for GetRing
func NewGetRingRequest(server string, name string, params *GetRingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceRingRequest calls the generic ReplaceRing builder with application/json body
func NewReplaceRingRequest(server string, name string, params *ReplaceRingParams, body ReplaceRingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceRingRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceRingRequestWithBody generates requests for ReplaceRing with any type of body
func NewReplaceRingRequestWithBody(server string, name string, params *ReplaceRingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllServerRingRequest generates requests for GetAllServerRing
func NewGetAllServerRingRequest(server string, parentName ParentName, params *GetAllServerRingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServerRingRequest calls the generic CreateServerRing builder with application/json body
func NewCreateServerRingRequest(server string, parentName ParentName, params *CreateServerRingParams, body CreateServerRingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServerRingRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateServerRingRequestWithBody generates requests for CreateServerRing with any type of body
func NewCreateServerRingRequestWithBody(server string, parentName ParentName, params *CreateServerRingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServerRingRequest generates requests for DeleteServerRing
func NewDeleteServerRingRequest(server string, parentName ParentName, name string, params *DeleteServerRingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerRingRequest generates requests for GetServerRing
func NewGetServerRingRequest(server string, parentName ParentName, name string, params *GetServerRingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceServerRingRequest calls the generic ReplaceServerRing builder with application/json body
func NewReplaceServerRingRequest(server string, parentName ParentName, name string, params *ReplaceServerRingParams, body ReplaceServerRingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceServerRingRequestWithBody(server, parentName, name, params, "application/json", bodyReader)
}

// NewReplaceServerRingRequestWithBody generates requests for ReplaceServerRing with any type of body
func NewReplaceServerRingRequestWithBody(server string, parentName ParentName, name string, params *ReplaceServerRingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/rings/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTracesRequest generates requests for DeleteTraces
func NewDeleteTracesRequest(server string, params *DeleteTracesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracesRequest generates requests for GetTraces
func NewGetTracesRequest(server string, params *GetTracesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTracesRequest calls the generic CreateTraces builder with application/json body
func NewCreateTracesRequest(server string, params *CreateTracesParams, body CreateTracesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTracesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTracesRequestWithBody generates requests for CreateTraces with any type of body
func NewCreateTracesRequestWithBody(server string, params *CreateTracesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceTracesRequest calls the generic ReplaceTraces builder with application/json body
func NewReplaceTracesRequest(server string, params *ReplaceTracesParams, body ReplaceTracesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceTracesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewReplaceTracesRequestWithBody generates requests for ReplaceTraces with any type of body
func NewReplaceTracesRequestWithBody(server string, params *ReplaceTracesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTraceEntryRequest calls the generic DeleteTraceEntry builder with application/json body
func NewDeleteTraceEntryRequest(server string, params *DeleteTraceEntryParams, body DeleteTraceEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTraceEntryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteTraceEntryRequestWithBody generates requests for DeleteTraceEntry with any type of body
func NewDeleteTraceEntryRequestWithBody(server string, params *DeleteTraceEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/traces/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTraceEntryRequest calls the generic CreateTraceEntry builder with application/json body
func NewCreateTraceEntryRequest(server string, params *CreateTraceEntryParams, body CreateTraceEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTraceEntryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTraceEntryRequestWithBody generates requests for CreateTraceEntry with any type of body
func NewCreateTraceEntryRequestWithBody(server string, params *CreateTraceEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/traces/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserlistsRequest generates requests for GetUserlists
func NewGetUserlistsRequest(server string, params *GetUserlistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/userlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserlistRequest calls the generic CreateUserlist builder with application/json body
func NewCreateUserlistRequest(server string, params *CreateUserlistParams, body CreateUserlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserlistRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateUserlistRequestWithBody generates requests for CreateUserlist with any type of body
func NewCreateUserlistRequestWithBody(server string, params *CreateUserlistParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/userlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserlistRequest generates requests for DeleteUserlist
func NewDeleteUserlistRequest(server string, name string, params *DeleteUserlistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/userlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserlistRequest generates requests for GetUserlist
func NewGetUserlistRequest(server string, name string, params *GetUserlistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/userlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullSection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_section", runtime.ParamLocationQuery, *params.FullSection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, params *CreateUserParams, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, params *CreateUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, username string, params *DeleteUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, username string, params *GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceUserRequest calls the generic ReplaceUser builder with application/json body
func NewReplaceUserRequest(server string, username string, params *ReplaceUserParams, body ReplaceUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceUserRequestWithBody(server, username, params, "application/json", bodyReader)
}

// NewReplaceUserRequestWithBody generates requests for ReplaceUser with any type of body
func NewReplaceUserRequestWithBody(server string, username string, params *ReplaceUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userlist", runtime.ParamLocationQuery, params.Userlist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfigurationVersionRequest generates requests for GetConfigurationVersion
func NewGetConfigurationVersionRequest(server string, params *GetConfigurationVersionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/configuration/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReloadsRequest generates requests for GetReloads
func NewGetReloadsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/reloads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReloadRequest generates requests for GetReload
func NewGetReloadRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/reloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRuntimeEndpointsRequest generates requests for GetRuntimeEndpoints
func NewGetRuntimeEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicesHaproxyRuntimeAclsRequest generates requests for GetServicesHaproxyRuntimeAcls
func NewGetServicesHaproxyRuntimeAclsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/acls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicesHaproxyRuntimeAclsIdRequest generates requests for GetServicesHaproxyRuntimeAclsId
func NewGetServicesHaproxyRuntimeAclsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/acls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicesHaproxyRuntimeAclsParentNameEntriesRequest generates requests for GetServicesHaproxyRuntimeAclsParentNameEntries
func NewGetServicesHaproxyRuntimeAclsParentNameEntriesRequest(server string, parentName ParentName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/acls/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServicesHaproxyRuntimeAclsParentNameEntriesRequest calls the generic PostServicesHaproxyRuntimeAclsParentNameEntries builder with application/json body
func NewPostServicesHaproxyRuntimeAclsParentNameEntriesRequest(server string, parentName ParentName, body PostServicesHaproxyRuntimeAclsParentNameEntriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServicesHaproxyRuntimeAclsParentNameEntriesRequestWithBody(server, parentName, "application/json", bodyReader)
}

// NewPostServicesHaproxyRuntimeAclsParentNameEntriesRequestWithBody generates requests for PostServicesHaproxyRuntimeAclsParentNameEntries with any type of body
func NewPostServicesHaproxyRuntimeAclsParentNameEntriesRequestWithBody(server string, parentName ParentName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/acls/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddPayloadRuntimeACLRequest calls the generic AddPayloadRuntimeACL builder with application/json body
func NewAddPayloadRuntimeACLRequest(server string, parentName ParentName, body AddPayloadRuntimeACLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPayloadRuntimeACLRequestWithBody(server, parentName, "application/json", bodyReader)
}

// NewAddPayloadRuntimeACLRequestWithBody generates requests for AddPayloadRuntimeACL with any type of body
func NewAddPayloadRuntimeACLRequestWithBody(server string, parentName ParentName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/acls/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServicesHaproxyRuntimeAclsParentNameEntriesIdRequest generates requests for DeleteServicesHaproxyRuntimeAclsParentNameEntriesId
func NewDeleteServicesHaproxyRuntimeAclsParentNameEntriesIdRequest(server string, parentName ParentName, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/acls/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicesHaproxyRuntimeAclsParentNameEntriesIdRequest generates requests for GetServicesHaproxyRuntimeAclsParentNameEntriesId
func NewGetServicesHaproxyRuntimeAclsParentNameEntriesIdRequest(server string, parentName ParentName, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/acls/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllRuntimeServerRequest generates requests for GetAllRuntimeServer
func NewGetAllRuntimeServerRequest(server string, parentName ParentName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/backends/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRuntimeServerRequest calls the generic AddRuntimeServer builder with application/json body
func NewAddRuntimeServerRequest(server string, parentName ParentName, body AddRuntimeServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRuntimeServerRequestWithBody(server, parentName, "application/json", bodyReader)
}

// NewAddRuntimeServerRequestWithBody generates requests for AddRuntimeServer with any type of body
func NewAddRuntimeServerRequestWithBody(server string, parentName ParentName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/backends/%s/servers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRuntimeServerRequest generates requests for DeleteRuntimeServer
func NewDeleteRuntimeServerRequest(server string, parentName ParentName, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/backends/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRuntimeServerRequest generates requests for GetRuntimeServer
func NewGetRuntimeServerRequest(server string, parentName ParentName, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/backends/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceRuntimeServerRequest calls the generic ReplaceRuntimeServer builder with application/json body
func NewReplaceRuntimeServerRequest(server string, parentName ParentName, name string, body ReplaceRuntimeServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceRuntimeServerRequestWithBody(server, parentName, name, "application/json", bodyReader)
}

// NewReplaceRuntimeServerRequestWithBody generates requests for ReplaceRuntimeServer with any type of body
func NewReplaceRuntimeServerRequestWithBody(server string, parentName ParentName, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/backends/%s/servers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHaproxyProcessInfoRequest generates requests for GetHaproxyProcessInfo
func NewGetHaproxyProcessInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllRuntimeMapFilesRequest generates requests for GetAllRuntimeMapFiles
func NewGetAllRuntimeMapFilesRequest(server string, params *GetAllRuntimeMapFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeUnmanaged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_unmanaged", runtime.ParamLocationQuery, *params.IncludeUnmanaged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClearRuntimeMapRequest generates requests for ClearRuntimeMap
func NewClearRuntimeMapRequest(server string, name string, params *ClearRuntimeMapParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceDelete != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceDelete", runtime.ParamLocationQuery, *params.ForceDelete); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceSync != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_sync", runtime.ParamLocationQuery, *params.ForceSync); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneRuntimeMapRequest generates requests for GetOneRuntimeMap
func NewGetOneRuntimeMapRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPayloadRuntimeMapRequest calls the generic AddPayloadRuntimeMap builder with application/json body
func NewAddPayloadRuntimeMapRequest(server string, name string, params *AddPayloadRuntimeMapParams, body AddPayloadRuntimeMapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPayloadRuntimeMapRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewAddPayloadRuntimeMapRequestWithBody generates requests for AddPayloadRuntimeMap with any type of body
func NewAddPayloadRuntimeMapRequestWithBody(server string, name string, params *AddPayloadRuntimeMapParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSync != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_sync", runtime.ParamLocationQuery, *params.ForceSync); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShowRuntimeMapRequest generates requests for ShowRuntimeMap
func NewShowRuntimeMapRequest(server string, parentName ParentName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMapEntryRequest calls the generic AddMapEntry builder with application/json body
func NewAddMapEntryRequest(server string, parentName ParentName, params *AddMapEntryParams, body AddMapEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMapEntryRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewAddMapEntryRequestWithBody generates requests for AddMapEntry with any type of body
func NewAddMapEntryRequestWithBody(server string, parentName ParentName, params *AddMapEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSync != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_sync", runtime.ParamLocationQuery, *params.ForceSync); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRuntimeMapEntryRequest generates requests for DeleteRuntimeMapEntry
func NewDeleteRuntimeMapEntryRequest(server string, parentName ParentName, id string, params *DeleteRuntimeMapEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSync != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_sync", runtime.ParamLocationQuery, *params.ForceSync); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRuntimeMapEntryRequest generates requests for GetRuntimeMapEntry
func NewGetRuntimeMapEntryRequest(server string, parentName ParentName, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceRuntimeMapEntryRequest calls the generic ReplaceRuntimeMapEntry builder with application/json body
func NewReplaceRuntimeMapEntryRequest(server string, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, body ReplaceRuntimeMapEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceRuntimeMapEntryRequestWithBody(server, parentName, id, params, "application/json", bodyReader)
}

// NewReplaceRuntimeMapEntryRequestWithBody generates requests for ReplaceRuntimeMapEntry with any type of body
func NewReplaceRuntimeMapEntryRequestWithBody(server string, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/maps/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSync != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_sync", runtime.ParamLocationQuery, *params.ForceSync); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllCaFilesRequest generates requests for GetAllCaFiles
func NewGetAllCaFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_ca_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCaFileRequestWithBody generates requests for CreateCaFile with any type of body
func NewCreateCaFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_ca_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCaFileRequest generates requests for DeleteCaFile
func NewDeleteCaFileRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_ca_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCaFileRequest generates requests for GetCaFile
func NewGetCaFileRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_ca_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetCaFileRequestWithBody generates requests for SetCaFile with any type of body
func NewSetCaFileRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_ca_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddCaEntryRequestWithBody generates requests for AddCaEntry with any type of body
func NewAddCaEntryRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_ca_files/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCaEntryRequest generates requests for GetCaEntry
func NewGetCaEntryRequest(server string, name string, index int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_ca_files/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllCertsRequest generates requests for GetAllCerts
func NewGetAllCertsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_certs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCertRequestWithBody generates requests for CreateCert with any type of body
func NewCreateCertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_certs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCertRequest generates requests for DeleteCert
func NewDeleteCertRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_certs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertRequest generates requests for GetCert
func NewGetCertRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_certs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCertRequestWithBody generates requests for ReplaceCert with any type of body
func NewReplaceCertRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_certs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllCrlRequest generates requests for GetAllCrl
func NewGetAllCrlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crl_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCrlRequestWithBody generates requests for CreateCrl with any type of body
func NewCreateCrlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crl_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCrlRequest generates requests for DeleteCrl
func NewDeleteCrlRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crl_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCrlRequest generates requests for GetCrl
func NewGetCrlRequest(server string, name string, params *GetCrlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crl_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCrlRequestWithBody generates requests for ReplaceCrl with any type of body
func NewReplaceCrlRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crl_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllCrtListsRequest generates requests for GetAllCrtLists
func NewGetAllCrtListsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crt_lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCrtListEntryRequest generates requests for DeleteCrtListEntry
func NewDeleteCrtListEntryRequest(server string, params *DeleteCrtListEntryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crt_lists/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cert_file", runtime.ParamLocationQuery, params.CertFile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.LineNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "line_number", runtime.ParamLocationQuery, *params.LineNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllCrtListEntriesRequest generates requests for GetAllCrtListEntries
func NewGetAllCrtListEntriesRequest(server string, params *GetAllCrtListEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crt_lists/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCrtListEntryRequest calls the generic AddCrtListEntry builder with application/json body
func NewAddCrtListEntryRequest(server string, params *AddCrtListEntryParams, body AddCrtListEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCrtListEntryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddCrtListEntryRequestWithBody generates requests for AddCrtListEntry with any type of body
func NewAddCrtListEntryRequestWithBody(server string, params *AddCrtListEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/ssl_crt_lists/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStickTablesRequest generates requests for GetStickTables
func NewGetStickTablesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/stick_tables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStickTableRequest generates requests for GetStickTable
func NewGetStickTableRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/stick_tables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStickTableEntriesRequest generates requests for GetStickTableEntries
func NewGetStickTableEntriesRequest(server string, parentName ParentName, params *GetStickTableEntriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/stick_tables/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetStickTableEntriesRequest calls the generic SetStickTableEntries builder with application/json body
func NewSetStickTableEntriesRequest(server string, parentName ParentName, body SetStickTableEntriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetStickTableEntriesRequestWithBody(server, parentName, "application/json", bodyReader)
}

// NewSetStickTableEntriesRequestWithBody generates requests for SetStickTableEntries with any type of body
func NewSetStickTableEntriesRequestWithBody(server string, parentName ParentName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/runtime/stick_tables/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSitesRequest generates requests for GetSites
func NewGetSitesRequest(server string, params *GetSitesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSiteRequest calls the generic CreateSite builder with application/json body
func NewCreateSiteRequest(server string, params *CreateSiteParams, body CreateSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSiteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateSiteRequestWithBody generates requests for CreateSite with any type of body
func NewCreateSiteRequestWithBody(server string, params *CreateSiteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSiteRequest generates requests for DeleteSite
func NewDeleteSiteRequest(server string, name string, params *DeleteSiteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSiteRequest generates requests for GetSite
func NewGetSiteRequest(server string, name string, params *GetSiteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceSiteRequest calls the generic ReplaceSite builder with application/json body
func NewReplaceSiteRequest(server string, name string, params *ReplaceSiteParams, body ReplaceSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceSiteRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewReplaceSiteRequestWithBody generates requests for ReplaceSite with any type of body
func NewReplaceSiteRequestWithBody(server string, name string, params *ReplaceSiteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpoeEndpointsRequest generates requests for GetSpoeEndpoints
func NewGetSpoeEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSpoeFilesRequest generates requests for GetAllSpoeFiles
func NewGetAllSpoeFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSpoeRequestWithBody generates requests for CreateSpoe with any type of body
func NewCreateSpoeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSpoeFileRequest generates requests for DeleteSpoeFile
func NewDeleteSpoeFileRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneSpoeFileRequest generates requests for GetOneSpoeFile
func NewGetOneSpoeFileRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSpoeScopeRequest generates requests for GetAllSpoeScope
func NewGetAllSpoeScopeRequest(server string, parentName ParentName, params *GetAllSpoeScopeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSpoeScopeRequest calls the generic CreateSpoeScope builder with application/json body
func NewCreateSpoeScopeRequest(server string, parentName ParentName, params *CreateSpoeScopeParams, body CreateSpoeScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpoeScopeRequestWithBody(server, parentName, params, "application/json", bodyReader)
}

// NewCreateSpoeScopeRequestWithBody generates requests for CreateSpoeScope with any type of body
func NewCreateSpoeScopeRequestWithBody(server string, parentName ParentName, params *CreateSpoeScopeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSpoeScopeRequest generates requests for DeleteSpoeScope
func NewDeleteSpoeScopeRequest(server string, parentName ParentName, name string, params *DeleteSpoeScopeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpoeScopeRequest generates requests for GetSpoeScope
func NewGetSpoeScopeRequest(server string, parentName ParentName, name string, params *GetSpoeScopeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSpoeAgentRequest generates requests for GetAllSpoeAgent
func NewGetAllSpoeAgentRequest(server string, parentName ParentName, scopeName string, params *GetAllSpoeAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/agents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSpoeAgentRequest calls the generic CreateSpoeAgent builder with application/json body
func NewCreateSpoeAgentRequest(server string, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, body CreateSpoeAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpoeAgentRequestWithBody(server, parentName, scopeName, params, "application/json", bodyReader)
}

// NewCreateSpoeAgentRequestWithBody generates requests for CreateSpoeAgent with any type of body
func NewCreateSpoeAgentRequestWithBody(server string, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/agents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSpoeAgentRequest generates requests for DeleteSpoeAgent
func NewDeleteSpoeAgentRequest(server string, parentName ParentName, scopeName string, name string, params *DeleteSpoeAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/agents/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpoeAgentRequest generates requests for GetSpoeAgent
func NewGetSpoeAgentRequest(server string, parentName ParentName, scopeName string, name string, params *GetSpoeAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/agents/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceSpoeAgentRequest calls the generic ReplaceSpoeAgent builder with application/json body
func NewReplaceSpoeAgentRequest(server string, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, body ReplaceSpoeAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceSpoeAgentRequestWithBody(server, parentName, scopeName, name, params, "application/json", bodyReader)
}

// NewReplaceSpoeAgentRequestWithBody generates requests for ReplaceSpoeAgent with any type of body
func NewReplaceSpoeAgentRequestWithBody(server string, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/agents/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllSpoeGroupRequest generates requests for GetAllSpoeGroup
func NewGetAllSpoeGroupRequest(server string, parentName ParentName, scopeName string, params *GetAllSpoeGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSpoeGroupRequest calls the generic CreateSpoeGroup builder with application/json body
func NewCreateSpoeGroupRequest(server string, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, body CreateSpoeGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpoeGroupRequestWithBody(server, parentName, scopeName, params, "application/json", bodyReader)
}

// NewCreateSpoeGroupRequestWithBody generates requests for CreateSpoeGroup with any type of body
func NewCreateSpoeGroupRequestWithBody(server string, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSpoeGroupRequest generates requests for DeleteSpoeGroup
func NewDeleteSpoeGroupRequest(server string, parentName ParentName, scopeName string, name string, params *DeleteSpoeGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpoeGroupRequest generates requests for GetSpoeGroup
func NewGetSpoeGroupRequest(server string, parentName ParentName, scopeName string, name string, params *GetSpoeGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceSpoeGroupRequest calls the generic ReplaceSpoeGroup builder with application/json body
func NewReplaceSpoeGroupRequest(server string, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, body ReplaceSpoeGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceSpoeGroupRequestWithBody(server, parentName, scopeName, name, params, "application/json", bodyReader)
}

// NewReplaceSpoeGroupRequestWithBody generates requests for ReplaceSpoeGroup with any type of body
func NewReplaceSpoeGroupRequestWithBody(server string, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllSpoeMessageRequest generates requests for GetAllSpoeMessage
func NewGetAllSpoeMessageRequest(server string, parentName ParentName, scopeName string, params *GetAllSpoeMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/messages", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSpoeMessageRequest calls the generic CreateSpoeMessage builder with application/json body
func NewCreateSpoeMessageRequest(server string, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, body CreateSpoeMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpoeMessageRequestWithBody(server, parentName, scopeName, params, "application/json", bodyReader)
}

// NewCreateSpoeMessageRequestWithBody generates requests for CreateSpoeMessage with any type of body
func NewCreateSpoeMessageRequestWithBody(server string, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/messages", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSpoeMessageRequest generates requests for DeleteSpoeMessage
func NewDeleteSpoeMessageRequest(server string, parentName ParentName, scopeName string, name string, params *DeleteSpoeMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/messages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpoeMessageRequest generates requests for GetSpoeMessage
func NewGetSpoeMessageRequest(server string, parentName ParentName, scopeName string, name string, params *GetSpoeMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/messages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceSpoeMessageRequest calls the generic ReplaceSpoeMessage builder with application/json body
func NewReplaceSpoeMessageRequest(server string, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, body ReplaceSpoeMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceSpoeMessageRequestWithBody(server, parentName, scopeName, name, params, "application/json", bodyReader)
}

// NewReplaceSpoeMessageRequestWithBody generates requests for ReplaceSpoeMessage with any type of body
func NewReplaceSpoeMessageRequestWithBody(server string, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope_name", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/scopes/%s/messages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllSpoeTransactionRequest generates requests for GetAllSpoeTransaction
func NewGetAllSpoeTransactionRequest(server string, parentName ParentName, params *GetAllSpoeTransactionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartSpoeTransactionRequest generates requests for StartSpoeTransaction
func NewStartSpoeTransactionRequest(server string, parentName ParentName, params *StartSpoeTransactionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSpoeTransactionRequest generates requests for DeleteSpoeTransaction
func NewDeleteSpoeTransactionRequest(server string, parentName ParentName, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpoeTransactionRequest generates requests for GetSpoeTransaction
func NewGetSpoeTransactionRequest(server string, parentName ParentName, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitSpoeTransactionRequest generates requests for CommitSpoeTransaction
func NewCommitSpoeTransactionRequest(server string, parentName ParentName, id string, params *CommitSpoeTransactionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/spoe_files/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpoeConfigurationVersionRequest generates requests for GetSpoeConfigurationVersion
func NewGetSpoeConfigurationVersionRequest(server string, parentName ParentName, params *GetSpoeConfigurationVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent_name", runtime.ParamLocationPath, parentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/spoe/%s/version", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TransactionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_id", runtime.ParamLocationQuery, *params.TransactionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatsEndpointsRequest generates requests for GetStatsEndpoints
func NewGetStatsEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatsRequest generates requests for GetStats
func NewGetStatsRequest(server string, params *GetStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/stats/native")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageEndpointsRequest generates requests for GetStorageEndpoints
func NewGetStorageEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllStorageGeneralFilesRequest generates requests for GetAllStorageGeneralFiles
func NewGetAllStorageGeneralFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/general")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStorageGeneralFileRequestWithBody generates requests for CreateStorageGeneralFile with any type of body
func NewCreateStorageGeneralFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/general")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStorageGeneralFileRequest generates requests for DeleteStorageGeneralFile
func NewDeleteStorageGeneralFileRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/general/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneStorageGeneralFileRequest generates requests for GetOneStorageGeneralFile
func NewGetOneStorageGeneralFileRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/general/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceStorageGeneralFileRequestWithBody generates requests for ReplaceStorageGeneralFile with any type of body
func NewReplaceStorageGeneralFileRequestWithBody(server string, name string, params *ReplaceStorageGeneralFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/general/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllStorageMapFilesRequest generates requests for GetAllStorageMapFiles
func NewGetAllStorageMapFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/maps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStorageMapFileRequestWithBody generates requests for CreateStorageMapFile with any type of body
func NewCreateStorageMapFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/maps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStorageMapRequest generates requests for DeleteStorageMap
func NewDeleteStorageMapRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/maps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneStorageMapRequest generates requests for GetOneStorageMap
func NewGetOneStorageMapRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/maps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceStorageMapFileRequestWithTextBody calls the generic ReplaceStorageMapFile builder with text/plain body
func NewReplaceStorageMapFileRequestWithTextBody(server string, name string, params *ReplaceStorageMapFileParams, body ReplaceStorageMapFileTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewReplaceStorageMapFileRequestWithBody(server, name, params, "text/plain", bodyReader)
}

// NewReplaceStorageMapFileRequestWithBody generates requests for ReplaceStorageMapFile with any type of body
func NewReplaceStorageMapFileRequestWithBody(server string, name string, params *ReplaceStorageMapFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/maps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllStorageSSLCertificatesRequest generates requests for GetAllStorageSSLCertificates
func NewGetAllStorageSSLCertificatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStorageSSLCertificateRequestWithBody generates requests for CreateStorageSSLCertificate with any type of body
func NewCreateStorageSSLCertificateRequestWithBody(server string, params *CreateStorageSSLCertificateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStorageSSLCertificateRequest generates requests for DeleteStorageSSLCertificate
func NewDeleteStorageSSLCertificateRequest(server string, name string, params *DeleteStorageSSLCertificateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneStorageSSLCertificateRequest generates requests for GetOneStorageSSLCertificate
func NewGetOneStorageSSLCertificateRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceStorageSSLCertificateRequestWithTextBody calls the generic ReplaceStorageSSLCertificate builder with text/plain body
func NewReplaceStorageSSLCertificateRequestWithTextBody(server string, name string, params *ReplaceStorageSSLCertificateParams, body ReplaceStorageSSLCertificateTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewReplaceStorageSSLCertificateRequestWithBody(server, name, params, "text/plain", bodyReader)
}

// NewReplaceStorageSSLCertificateRequestWithBody generates requests for ReplaceStorageSSLCertificate with any type of body
func NewReplaceStorageSSLCertificateRequestWithBody(server string, name string, params *ReplaceStorageSSLCertificateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllStorageSSLCrtListFilesRequest generates requests for GetAllStorageSSLCrtListFiles
func NewGetAllStorageSSLCrtListFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStorageSSLCrtListFileRequestWithBody generates requests for CreateStorageSSLCrtListFile with any type of body
func NewCreateStorageSSLCrtListFileRequestWithBody(server string, params *CreateStorageSSLCrtListFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStorageSSLCrtListFileRequest generates requests for DeleteStorageSSLCrtListFile
func NewDeleteStorageSSLCrtListFileRequest(server string, name string, params *DeleteStorageSSLCrtListFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneStorageSSLCrtListFileRequest generates requests for GetOneStorageSSLCrtListFile
func NewGetOneStorageSSLCrtListFileRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceStorageSSLCrtListFileRequestWithTextBody calls the generic ReplaceStorageSSLCrtListFile builder with text/plain body
func NewReplaceStorageSSLCrtListFileRequestWithTextBody(server string, name string, params *ReplaceStorageSSLCrtListFileParams, body ReplaceStorageSSLCrtListFileTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewReplaceStorageSSLCrtListFileRequestWithBody(server, name, params, "text/plain", bodyReader)
}

// NewReplaceStorageSSLCrtListFileRequestWithBody generates requests for ReplaceStorageSSLCrtListFile with any type of body
func NewReplaceStorageSSLCrtListFileRequestWithBody(server string, name string, params *ReplaceStorageSSLCrtListFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_reload", runtime.ParamLocationQuery, *params.SkipReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStorageSSLCrtListEntryRequest generates requests for DeleteStorageSSLCrtListEntry
func NewDeleteStorageSSLCrtListEntryRequest(server string, name string, params *DeleteStorageSSLCrtListEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "certificate", runtime.ParamLocationQuery, params.Certificate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "line_number", runtime.ParamLocationQuery, params.LineNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageSSLCrtListEntriesRequest generates requests for GetStorageSSLCrtListEntries
func NewGetStorageSSLCrtListEntriesRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStorageSSLCrtListEntryRequest calls the generic CreateStorageSSLCrtListEntry builder with application/json body
func NewCreateStorageSSLCrtListEntryRequest(server string, name string, params *CreateStorageSSLCrtListEntryParams, body CreateStorageSSLCrtListEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStorageSSLCrtListEntryRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewCreateStorageSSLCrtListEntryRequestWithBody generates requests for CreateStorageSSLCrtListEntry with any type of body
func NewCreateStorageSSLCrtListEntryRequestWithBody(server string, name string, params *CreateStorageSSLCrtListEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/storage/ssl_crt_lists/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransactionsRequest generates requests for GetTransactions
func NewGetTransactionsRequest(server string, params *GetTransactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/transactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartTransactionRequest generates requests for StartTransaction
func NewStartTransactionRequest(server string, params *StartTransactionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/transactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTransactionRequest generates requests for DeleteTransaction
func NewDeleteTransactionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionRequest generates requests for GetTransaction
func NewGetTransactionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitTransactionRequest generates requests for CommitTransaction
func NewCommitTransactionRequest(server string, id string, params *CommitTransactionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/haproxy/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceReload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_reload", runtime.ParamLocationQuery, *params.ForceReload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpecificationRequest generates requests for GetSpecification
func NewGetSpecificationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/specification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenapiv3SpecificationRequest generates requests for GetOpenapiv3Specification
func NewGetOpenapiv3SpecificationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/specification_openapiv3")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAPIEndpointsWithResponse request
	GetAPIEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIEndpointsResponse, error)

	// DeleteClusterWithResponse request
	DeleteClusterWithResponse(ctx context.Context, params *DeleteClusterParams, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error)

	// GetClusterWithResponse request
	GetClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterResponse, error)

	// PostClusterWithBodyWithResponse request with any body
	PostClusterWithBodyWithResponse(ctx context.Context, params *PostClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClusterResponse, error)

	PostClusterWithResponse(ctx context.Context, params *PostClusterParams, body PostClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClusterResponse, error)

	// EditClusterWithBodyWithResponse request with any body
	EditClusterWithBodyWithResponse(ctx context.Context, params *EditClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditClusterResponse, error)

	EditClusterWithResponse(ctx context.Context, params *EditClusterParams, body EditClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*EditClusterResponse, error)

	// InitiateCertificateRefreshWithResponse request
	InitiateCertificateRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InitiateCertificateRefreshResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetInfoWithResponse request
	GetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoResponse, error)

	// GetAWSRegionsWithResponse request
	GetAWSRegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAWSRegionsResponse, error)

	// CreateAWSRegionWithBodyWithResponse request with any body
	CreateAWSRegionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAWSRegionResponse, error)

	CreateAWSRegionWithResponse(ctx context.Context, body CreateAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAWSRegionResponse, error)

	// DeleteAWSRegionWithResponse request
	DeleteAWSRegionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAWSRegionResponse, error)

	// GetAWSRegionWithResponse request
	GetAWSRegionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAWSRegionResponse, error)

	// ReplaceAWSRegionWithBodyWithResponse request with any body
	ReplaceAWSRegionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAWSRegionResponse, error)

	ReplaceAWSRegionWithResponse(ctx context.Context, id string, body ReplaceAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAWSRegionResponse, error)

	// GetConsulsWithResponse request
	GetConsulsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConsulsResponse, error)

	// CreateConsulWithBodyWithResponse request with any body
	CreateConsulWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConsulResponse, error)

	CreateConsulWithResponse(ctx context.Context, body CreateConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConsulResponse, error)

	// DeleteConsulWithResponse request
	DeleteConsulWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConsulResponse, error)

	// GetConsulWithResponse request
	GetConsulWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConsulResponse, error)

	// ReplaceConsulWithBodyWithResponse request with any body
	ReplaceConsulWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceConsulResponse, error)

	ReplaceConsulWithResponse(ctx context.Context, id string, body ReplaceConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceConsulResponse, error)

	// GetServicesEndpointsWithResponse request
	GetServicesEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServicesEndpointsResponse, error)

	// GetHaproxyEndpointsWithResponse request
	GetHaproxyEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHaproxyEndpointsResponse, error)

	// GetConfigurationEndpointsWithResponse request
	GetConfigurationEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationEndpointsResponse, error)

	// GetAcmeProvidersWithResponse request
	GetAcmeProvidersWithResponse(ctx context.Context, params *GetAcmeProvidersParams, reqEditors ...RequestEditorFn) (*GetAcmeProvidersResponse, error)

	// CreateAcmeProviderWithBodyWithResponse request with any body
	CreateAcmeProviderWithBodyWithResponse(ctx context.Context, params *CreateAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAcmeProviderResponse, error)

	CreateAcmeProviderWithResponse(ctx context.Context, params *CreateAcmeProviderParams, body CreateAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAcmeProviderResponse, error)

	// DeleteAcmeProviderWithResponse request
	DeleteAcmeProviderWithResponse(ctx context.Context, name string, params *DeleteAcmeProviderParams, reqEditors ...RequestEditorFn) (*DeleteAcmeProviderResponse, error)

	// GetAcmeProviderWithResponse request
	GetAcmeProviderWithResponse(ctx context.Context, name string, params *GetAcmeProviderParams, reqEditors ...RequestEditorFn) (*GetAcmeProviderResponse, error)

	// EditAcmeProviderWithBodyWithResponse request with any body
	EditAcmeProviderWithBodyWithResponse(ctx context.Context, name string, params *EditAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditAcmeProviderResponse, error)

	EditAcmeProviderWithResponse(ctx context.Context, name string, params *EditAcmeProviderParams, body EditAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*EditAcmeProviderResponse, error)

	// GetBackendsWithResponse request
	GetBackendsWithResponse(ctx context.Context, params *GetBackendsParams, reqEditors ...RequestEditorFn) (*GetBackendsResponse, error)

	// CreateBackendWithBodyWithResponse request with any body
	CreateBackendWithBodyWithResponse(ctx context.Context, params *CreateBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackendResponse, error)

	CreateBackendWithResponse(ctx context.Context, params *CreateBackendParams, body CreateBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackendResponse, error)

	// DeleteBackendWithResponse request
	DeleteBackendWithResponse(ctx context.Context, name string, params *DeleteBackendParams, reqEditors ...RequestEditorFn) (*DeleteBackendResponse, error)

	// GetBackendWithResponse request
	GetBackendWithResponse(ctx context.Context, name string, params *GetBackendParams, reqEditors ...RequestEditorFn) (*GetBackendResponse, error)

	// ReplaceBackendWithBodyWithResponse request with any body
	ReplaceBackendWithBodyWithResponse(ctx context.Context, name string, params *ReplaceBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBackendResponse, error)

	ReplaceBackendWithResponse(ctx context.Context, name string, params *ReplaceBackendParams, body ReplaceBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBackendResponse, error)

	// GetAllAclBackendWithResponse request
	GetAllAclBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclBackendParams, reqEditors ...RequestEditorFn) (*GetAllAclBackendResponse, error)

	// ReplaceAllAclBackendWithBodyWithResponse request with any body
	ReplaceAllAclBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclBackendResponse, error)

	ReplaceAllAclBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, body ReplaceAllAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclBackendResponse, error)

	// DeleteAclBackendWithResponse request
	DeleteAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclBackendParams, reqEditors ...RequestEditorFn) (*DeleteAclBackendResponse, error)

	// GetAclBackendWithResponse request
	GetAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclBackendParams, reqEditors ...RequestEditorFn) (*GetAclBackendResponse, error)

	// CreateAclBackendWithBodyWithResponse request with any body
	CreateAclBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclBackendResponse, error)

	CreateAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, body CreateAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclBackendResponse, error)

	// ReplaceAclBackendWithBodyWithResponse request with any body
	ReplaceAclBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclBackendResponse, error)

	ReplaceAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, body ReplaceAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclBackendResponse, error)

	// GetAllFilterBackendWithResponse request
	GetAllFilterBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllFilterBackendParams, reqEditors ...RequestEditorFn) (*GetAllFilterBackendResponse, error)

	// ReplaceAllFilterBackendWithBodyWithResponse request with any body
	ReplaceAllFilterBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllFilterBackendResponse, error)

	ReplaceAllFilterBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, body ReplaceAllFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllFilterBackendResponse, error)

	// DeleteFilterBackendWithResponse request
	DeleteFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteFilterBackendParams, reqEditors ...RequestEditorFn) (*DeleteFilterBackendResponse, error)

	// GetFilterBackendWithResponse request
	GetFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetFilterBackendParams, reqEditors ...RequestEditorFn) (*GetFilterBackendResponse, error)

	// CreateFilterBackendWithBodyWithResponse request with any body
	CreateFilterBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFilterBackendResponse, error)

	CreateFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, body CreateFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFilterBackendResponse, error)

	// ReplaceFilterBackendWithBodyWithResponse request with any body
	ReplaceFilterBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFilterBackendResponse, error)

	ReplaceFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, body ReplaceFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFilterBackendResponse, error)

	// GetAllHTTPAfterResponseRuleBackendWithResponse request
	GetAllHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPAfterResponseRuleBackendResponse, error)

	// ReplaceAllHTTPAfterResponseRuleBackendWithBodyWithResponse request with any body
	ReplaceAllHTTPAfterResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleBackendResponse, error)

	ReplaceAllHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, body ReplaceAllHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleBackendResponse, error)

	// DeleteHTTPAfterResponseRuleBackendWithResponse request
	DeleteHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPAfterResponseRuleBackendResponse, error)

	// GetHTTPAfterResponseRuleBackendWithResponse request
	GetHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPAfterResponseRuleBackendResponse, error)

	// CreateHTTPAfterResponseRuleBackendWithBodyWithResponse request with any body
	CreateHTTPAfterResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleBackendResponse, error)

	CreateHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, body CreateHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleBackendResponse, error)

	// ReplaceHTTPAfterResponseRuleBackendWithBodyWithResponse request with any body
	ReplaceHTTPAfterResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleBackendResponse, error)

	ReplaceHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, body ReplaceHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleBackendResponse, error)

	// GetAllHTTPCheckBackendWithResponse request
	GetAllHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPCheckBackendResponse, error)

	// ReplaceAllHTTPCheckBackendWithBodyWithResponse request with any body
	ReplaceAllHTTPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckBackendResponse, error)

	ReplaceAllHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, body ReplaceAllHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckBackendResponse, error)

	// DeleteHTTPCheckBackendWithResponse request
	DeleteHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPCheckBackendResponse, error)

	// GetHTTPCheckBackendWithResponse request
	GetHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPCheckBackendResponse, error)

	// CreateHTTPCheckBackendWithBodyWithResponse request with any body
	CreateHTTPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPCheckBackendResponse, error)

	CreateHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, body CreateHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPCheckBackendResponse, error)

	// ReplaceHTTPCheckBackendWithBodyWithResponse request with any body
	ReplaceHTTPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckBackendResponse, error)

	ReplaceHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, body ReplaceHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckBackendResponse, error)

	// GetAllHTTPErrorRuleBackendWithResponse request
	GetAllHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPErrorRuleBackendResponse, error)

	// ReplaceAllHTTPErrorRuleBackendWithBodyWithResponse request with any body
	ReplaceAllHTTPErrorRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleBackendResponse, error)

	ReplaceAllHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, body ReplaceAllHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleBackendResponse, error)

	// DeleteHTTPErrorRuleBackendWithResponse request
	DeleteHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorRuleBackendResponse, error)

	// GetHTTPErrorRuleBackendWithResponse request
	GetHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorRuleBackendResponse, error)

	// CreateHTTPErrorRuleBackendWithBodyWithResponse request with any body
	CreateHTTPErrorRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleBackendResponse, error)

	CreateHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, body CreateHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleBackendResponse, error)

	// ReplaceHTTPErrorRuleBackendWithBodyWithResponse request with any body
	ReplaceHTTPErrorRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleBackendResponse, error)

	ReplaceHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, body ReplaceHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleBackendResponse, error)

	// GetAllHTTPRequestRuleBackendWithResponse request
	GetAllHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPRequestRuleBackendResponse, error)

	// ReplaceAllHTTPRequestRuleBackendWithBodyWithResponse request with any body
	ReplaceAllHTTPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleBackendResponse, error)

	ReplaceAllHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, body ReplaceAllHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleBackendResponse, error)

	// DeleteHTTPRequestRuleBackendWithResponse request
	DeleteHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPRequestRuleBackendResponse, error)

	// GetHTTPRequestRuleBackendWithResponse request
	GetHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPRequestRuleBackendResponse, error)

	// CreateHTTPRequestRuleBackendWithBodyWithResponse request with any body
	CreateHTTPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleBackendResponse, error)

	CreateHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, body CreateHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleBackendResponse, error)

	// ReplaceHTTPRequestRuleBackendWithBodyWithResponse request with any body
	ReplaceHTTPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleBackendResponse, error)

	ReplaceHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, body ReplaceHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleBackendResponse, error)

	// GetAllHTTPResponseRuleBackendWithResponse request
	GetAllHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPResponseRuleBackendResponse, error)

	// ReplaceAllHTTPResponseRuleBackendWithBodyWithResponse request with any body
	ReplaceAllHTTPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleBackendResponse, error)

	ReplaceAllHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, body ReplaceAllHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleBackendResponse, error)

	// DeleteHTTPResponseRuleBackendWithResponse request
	DeleteHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPResponseRuleBackendResponse, error)

	// GetHTTPResponseRuleBackendWithResponse request
	GetHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPResponseRuleBackendResponse, error)

	// CreateHTTPResponseRuleBackendWithBodyWithResponse request with any body
	CreateHTTPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleBackendResponse, error)

	CreateHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, body CreateHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleBackendResponse, error)

	// ReplaceHTTPResponseRuleBackendWithBodyWithResponse request with any body
	ReplaceHTTPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleBackendResponse, error)

	ReplaceHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, body ReplaceHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleBackendResponse, error)

	// GetAllLogTargetBackendWithResponse request
	GetAllLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetBackendParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetBackendResponse, error)

	// ReplaceAllLogTargetBackendWithBodyWithResponse request with any body
	ReplaceAllLogTargetBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetBackendResponse, error)

	ReplaceAllLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, body ReplaceAllLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetBackendResponse, error)

	// DeleteLogTargetBackendWithResponse request
	DeleteLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetBackendParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetBackendResponse, error)

	// GetLogTargetBackendWithResponse request
	GetLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetBackendParams, reqEditors ...RequestEditorFn) (*GetLogTargetBackendResponse, error)

	// CreateLogTargetBackendWithBodyWithResponse request with any body
	CreateLogTargetBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetBackendResponse, error)

	CreateLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, body CreateLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetBackendResponse, error)

	// ReplaceLogTargetBackendWithBodyWithResponse request with any body
	ReplaceLogTargetBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetBackendResponse, error)

	ReplaceLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, body ReplaceLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetBackendResponse, error)

	// GetServerSwitchingRulesWithResponse request
	GetServerSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *GetServerSwitchingRulesParams, reqEditors ...RequestEditorFn) (*GetServerSwitchingRulesResponse, error)

	// ReplaceServerSwitchingRulesWithBodyWithResponse request with any body
	ReplaceServerSwitchingRulesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRulesResponse, error)

	ReplaceServerSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, body ReplaceServerSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRulesResponse, error)

	// DeleteServerSwitchingRuleWithResponse request
	DeleteServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*DeleteServerSwitchingRuleResponse, error)

	// GetServerSwitchingRuleWithResponse request
	GetServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *GetServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*GetServerSwitchingRuleResponse, error)

	// CreateServerSwitchingRuleWithBodyWithResponse request with any body
	CreateServerSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerSwitchingRuleResponse, error)

	CreateServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, body CreateServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerSwitchingRuleResponse, error)

	// ReplaceServerSwitchingRuleWithBodyWithResponse request with any body
	ReplaceServerSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRuleResponse, error)

	ReplaceServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, body ReplaceServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRuleResponse, error)

	// GetServerTemplatesWithResponse request
	GetServerTemplatesWithResponse(ctx context.Context, parentName ParentName, params *GetServerTemplatesParams, reqEditors ...RequestEditorFn) (*GetServerTemplatesResponse, error)

	// CreateServerTemplateWithBodyWithResponse request with any body
	CreateServerTemplateWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerTemplateResponse, error)

	CreateServerTemplateWithResponse(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, body CreateServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerTemplateResponse, error)

	// DeleteServerTemplateWithResponse request
	DeleteServerTemplateWithResponse(ctx context.Context, parentName ParentName, prefix string, params *DeleteServerTemplateParams, reqEditors ...RequestEditorFn) (*DeleteServerTemplateResponse, error)

	// GetServerTemplateWithResponse request
	GetServerTemplateWithResponse(ctx context.Context, parentName ParentName, prefix string, params *GetServerTemplateParams, reqEditors ...RequestEditorFn) (*GetServerTemplateResponse, error)

	// ReplaceServerTemplateWithBodyWithResponse request with any body
	ReplaceServerTemplateWithBodyWithResponse(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerTemplateResponse, error)

	ReplaceServerTemplateWithResponse(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, body ReplaceServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerTemplateResponse, error)

	// GetAllServerBackendWithResponse request
	GetAllServerBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllServerBackendParams, reqEditors ...RequestEditorFn) (*GetAllServerBackendResponse, error)

	// CreateServerBackendWithBodyWithResponse request with any body
	CreateServerBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerBackendResponse, error)

	CreateServerBackendWithResponse(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, body CreateServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerBackendResponse, error)

	// DeleteServerBackendWithResponse request
	DeleteServerBackendWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteServerBackendParams, reqEditors ...RequestEditorFn) (*DeleteServerBackendResponse, error)

	// GetServerBackendWithResponse request
	GetServerBackendWithResponse(ctx context.Context, parentName ParentName, name string, params *GetServerBackendParams, reqEditors ...RequestEditorFn) (*GetServerBackendResponse, error)

	// ReplaceServerBackendWithBodyWithResponse request with any body
	ReplaceServerBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerBackendResponse, error)

	ReplaceServerBackendWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, body ReplaceServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerBackendResponse, error)

	// GetStickRulesWithResponse request
	GetStickRulesWithResponse(ctx context.Context, parentName ParentName, params *GetStickRulesParams, reqEditors ...RequestEditorFn) (*GetStickRulesResponse, error)

	// ReplaceStickRulesWithBodyWithResponse request with any body
	ReplaceStickRulesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStickRulesResponse, error)

	ReplaceStickRulesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, body ReplaceStickRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStickRulesResponse, error)

	// DeleteStickRuleWithResponse request
	DeleteStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteStickRuleParams, reqEditors ...RequestEditorFn) (*DeleteStickRuleResponse, error)

	// GetStickRuleWithResponse request
	GetStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *GetStickRuleParams, reqEditors ...RequestEditorFn) (*GetStickRuleResponse, error)

	// CreateStickRuleWithBodyWithResponse request with any body
	CreateStickRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStickRuleResponse, error)

	CreateStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, body CreateStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStickRuleResponse, error)

	// ReplaceStickRuleWithBodyWithResponse request with any body
	ReplaceStickRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStickRuleResponse, error)

	ReplaceStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, body ReplaceStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStickRuleResponse, error)

	// GetAllTCPCheckBackendWithResponse request
	GetAllTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetAllTCPCheckBackendResponse, error)

	// ReplaceAllTCPCheckBackendWithBodyWithResponse request with any body
	ReplaceAllTCPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckBackendResponse, error)

	ReplaceAllTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, body ReplaceAllTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckBackendResponse, error)

	// DeleteTCPCheckBackendWithResponse request
	DeleteTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*DeleteTCPCheckBackendResponse, error)

	// GetTCPCheckBackendWithResponse request
	GetTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetTCPCheckBackendResponse, error)

	// CreateTCPCheckBackendWithBodyWithResponse request with any body
	CreateTCPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPCheckBackendResponse, error)

	CreateTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, body CreateTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPCheckBackendResponse, error)

	// ReplaceTCPCheckBackendWithBodyWithResponse request with any body
	ReplaceTCPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckBackendResponse, error)

	ReplaceTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, body ReplaceTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckBackendResponse, error)

	// GetAllTCPRequestRuleBackendWithResponse request
	GetAllTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllTCPRequestRuleBackendResponse, error)

	// ReplaceAllTCPRequestRuleBackendWithBodyWithResponse request with any body
	ReplaceAllTCPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleBackendResponse, error)

	ReplaceAllTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, body ReplaceAllTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleBackendResponse, error)

	// DeleteTCPRequestRuleBackendWithResponse request
	DeleteTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteTCPRequestRuleBackendResponse, error)

	// GetTCPRequestRuleBackendWithResponse request
	GetTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetTCPRequestRuleBackendResponse, error)

	// CreateTCPRequestRuleBackendWithBodyWithResponse request with any body
	CreateTCPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleBackendResponse, error)

	CreateTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, body CreateTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleBackendResponse, error)

	// ReplaceTCPRequestRuleBackendWithBodyWithResponse request with any body
	ReplaceTCPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleBackendResponse, error)

	ReplaceTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, body ReplaceTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleBackendResponse, error)

	// GetAllTCPResponseRuleBackendWithResponse request
	GetAllTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllTCPResponseRuleBackendResponse, error)

	// ReplaceAllTCPResponseRuleBackendWithBodyWithResponse request with any body
	ReplaceAllTCPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleBackendResponse, error)

	ReplaceAllTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, body ReplaceAllTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleBackendResponse, error)

	// DeleteTCPResponseRuleBackendWithResponse request
	DeleteTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteTCPResponseRuleBackendResponse, error)

	// GetTCPResponseRuleBackendWithResponse request
	GetTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetTCPResponseRuleBackendResponse, error)

	// CreateTCPResponseRuleBackendWithBodyWithResponse request with any body
	CreateTCPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleBackendResponse, error)

	CreateTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, body CreateTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleBackendResponse, error)

	// ReplaceTCPResponseRuleBackendWithBodyWithResponse request with any body
	ReplaceTCPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleBackendResponse, error)

	ReplaceTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, body ReplaceTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleBackendResponse, error)

	// GetCachesWithResponse request
	GetCachesWithResponse(ctx context.Context, params *GetCachesParams, reqEditors ...RequestEditorFn) (*GetCachesResponse, error)

	// CreateCacheWithBodyWithResponse request with any body
	CreateCacheWithBodyWithResponse(ctx context.Context, params *CreateCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCacheResponse, error)

	CreateCacheWithResponse(ctx context.Context, params *CreateCacheParams, body CreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCacheResponse, error)

	// DeleteCacheWithResponse request
	DeleteCacheWithResponse(ctx context.Context, name string, params *DeleteCacheParams, reqEditors ...RequestEditorFn) (*DeleteCacheResponse, error)

	// GetCacheWithResponse request
	GetCacheWithResponse(ctx context.Context, name string, params *GetCacheParams, reqEditors ...RequestEditorFn) (*GetCacheResponse, error)

	// ReplaceCacheWithBodyWithResponse request with any body
	ReplaceCacheWithBodyWithResponse(ctx context.Context, name string, params *ReplaceCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCacheResponse, error)

	ReplaceCacheWithResponse(ctx context.Context, name string, params *ReplaceCacheParams, body ReplaceCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCacheResponse, error)

	// GetCrtLoadsWithResponse request
	GetCrtLoadsWithResponse(ctx context.Context, params *GetCrtLoadsParams, reqEditors ...RequestEditorFn) (*GetCrtLoadsResponse, error)

	// CreateCrtLoadWithBodyWithResponse request with any body
	CreateCrtLoadWithBodyWithResponse(ctx context.Context, params *CreateCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCrtLoadResponse, error)

	CreateCrtLoadWithResponse(ctx context.Context, params *CreateCrtLoadParams, body CreateCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCrtLoadResponse, error)

	// DeleteCrtLoadWithResponse request
	DeleteCrtLoadWithResponse(ctx context.Context, certificate string, params *DeleteCrtLoadParams, reqEditors ...RequestEditorFn) (*DeleteCrtLoadResponse, error)

	// GetCrtLoadWithResponse request
	GetCrtLoadWithResponse(ctx context.Context, certificate string, params *GetCrtLoadParams, reqEditors ...RequestEditorFn) (*GetCrtLoadResponse, error)

	// ReplaceCrtLoadWithBodyWithResponse request with any body
	ReplaceCrtLoadWithBodyWithResponse(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCrtLoadResponse, error)

	ReplaceCrtLoadWithResponse(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, body ReplaceCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCrtLoadResponse, error)

	// GetCrtStoresWithResponse request
	GetCrtStoresWithResponse(ctx context.Context, params *GetCrtStoresParams, reqEditors ...RequestEditorFn) (*GetCrtStoresResponse, error)

	// CreateCrtStoreWithBodyWithResponse request with any body
	CreateCrtStoreWithBodyWithResponse(ctx context.Context, params *CreateCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCrtStoreResponse, error)

	CreateCrtStoreWithResponse(ctx context.Context, params *CreateCrtStoreParams, body CreateCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCrtStoreResponse, error)

	// DeleteCrtStoreWithResponse request
	DeleteCrtStoreWithResponse(ctx context.Context, name string, params *DeleteCrtStoreParams, reqEditors ...RequestEditorFn) (*DeleteCrtStoreResponse, error)

	// GetCrtStoreWithResponse request
	GetCrtStoreWithResponse(ctx context.Context, name string, params *GetCrtStoreParams, reqEditors ...RequestEditorFn) (*GetCrtStoreResponse, error)

	// EditCrtStoreWithBodyWithResponse request with any body
	EditCrtStoreWithBodyWithResponse(ctx context.Context, name string, params *EditCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCrtStoreResponse, error)

	EditCrtStoreWithResponse(ctx context.Context, name string, params *EditCrtStoreParams, body EditCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCrtStoreResponse, error)

	// GetDefaultsSectionsWithResponse request
	GetDefaultsSectionsWithResponse(ctx context.Context, params *GetDefaultsSectionsParams, reqEditors ...RequestEditorFn) (*GetDefaultsSectionsResponse, error)

	// AddDefaultsSectionWithBodyWithResponse request with any body
	AddDefaultsSectionWithBodyWithResponse(ctx context.Context, params *AddDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultsSectionResponse, error)

	AddDefaultsSectionWithResponse(ctx context.Context, params *AddDefaultsSectionParams, body AddDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultsSectionResponse, error)

	// CreateDefaultsSectionWithBodyWithResponse request with any body
	CreateDefaultsSectionWithBodyWithResponse(ctx context.Context, params *CreateDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDefaultsSectionResponse, error)

	CreateDefaultsSectionWithResponse(ctx context.Context, params *CreateDefaultsSectionParams, body CreateDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDefaultsSectionResponse, error)

	// DeleteDefaultsSectionWithResponse request
	DeleteDefaultsSectionWithResponse(ctx context.Context, name string, params *DeleteDefaultsSectionParams, reqEditors ...RequestEditorFn) (*DeleteDefaultsSectionResponse, error)

	// GetDefaultsSectionWithResponse request
	GetDefaultsSectionWithResponse(ctx context.Context, name string, params *GetDefaultsSectionParams, reqEditors ...RequestEditorFn) (*GetDefaultsSectionResponse, error)

	// ReplaceDefaultsSectionWithBodyWithResponse request with any body
	ReplaceDefaultsSectionWithBodyWithResponse(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDefaultsSectionResponse, error)

	ReplaceDefaultsSectionWithResponse(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, body ReplaceDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDefaultsSectionResponse, error)

	// GetAllAclDefaultsWithResponse request
	GetAllAclDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllAclDefaultsResponse, error)

	// ReplaceAllAclDefaultsWithBodyWithResponse request with any body
	ReplaceAllAclDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclDefaultsResponse, error)

	ReplaceAllAclDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, body ReplaceAllAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclDefaultsResponse, error)

	// DeleteAclDefaultsWithResponse request
	DeleteAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteAclDefaultsResponse, error)

	// GetAclDefaultsWithResponse request
	GetAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclDefaultsParams, reqEditors ...RequestEditorFn) (*GetAclDefaultsResponse, error)

	// CreateAclDefaultsWithBodyWithResponse request with any body
	CreateAclDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclDefaultsResponse, error)

	CreateAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, body CreateAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclDefaultsResponse, error)

	// ReplaceAclDefaultsWithBodyWithResponse request with any body
	ReplaceAclDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclDefaultsResponse, error)

	ReplaceAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, body ReplaceAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclDefaultsResponse, error)

	// GetAllHTTPAfterResponseRuleDefaultsWithResponse request
	GetAllHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPAfterResponseRuleDefaultsResponse, error)

	// ReplaceAllHTTPAfterResponseRuleDefaultsWithBodyWithResponse request with any body
	ReplaceAllHTTPAfterResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleDefaultsResponse, error)

	ReplaceAllHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, body ReplaceAllHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleDefaultsResponse, error)

	// DeleteHTTPAfterResponseRuleDefaultsWithResponse request
	DeleteHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPAfterResponseRuleDefaultsResponse, error)

	// GetHTTPAfterResponseRuleDefaultsWithResponse request
	GetHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPAfterResponseRuleDefaultsResponse, error)

	// CreateHTTPAfterResponseRuleDefaultsWithBodyWithResponse request with any body
	CreateHTTPAfterResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleDefaultsResponse, error)

	CreateHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, body CreateHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleDefaultsResponse, error)

	// ReplaceHTTPAfterResponseRuleDefaultsWithBodyWithResponse request with any body
	ReplaceHTTPAfterResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleDefaultsResponse, error)

	ReplaceHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, body ReplaceHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleDefaultsResponse, error)

	// GetAllHTTPCheckDefaultsWithResponse request
	GetAllHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPCheckDefaultsResponse, error)

	// ReplaceAllHTTPCheckDefaultsWithBodyWithResponse request with any body
	ReplaceAllHTTPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckDefaultsResponse, error)

	ReplaceAllHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, body ReplaceAllHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckDefaultsResponse, error)

	// DeleteHTTPCheckDefaultsWithResponse request
	DeleteHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPCheckDefaultsResponse, error)

	// GetHTTPCheckDefaultsWithResponse request
	GetHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPCheckDefaultsResponse, error)

	// CreateHTTPCheckDefaultsWithBodyWithResponse request with any body
	CreateHTTPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPCheckDefaultsResponse, error)

	CreateHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, body CreateHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPCheckDefaultsResponse, error)

	// ReplaceHTTPCheckDefaultsWithBodyWithResponse request with any body
	ReplaceHTTPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckDefaultsResponse, error)

	ReplaceHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, body ReplaceHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckDefaultsResponse, error)

	// GetAllHTTPErrorRuleDefaultsWithResponse request
	GetAllHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPErrorRuleDefaultsResponse, error)

	// ReplaceAllHTTPErrorRuleDefaultsWithBodyWithResponse request with any body
	ReplaceAllHTTPErrorRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleDefaultsResponse, error)

	ReplaceAllHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, body ReplaceAllHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleDefaultsResponse, error)

	// DeleteHTTPErrorRuleDefaultsWithResponse request
	DeleteHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorRuleDefaultsResponse, error)

	// GetHTTPErrorRuleDefaultsWithResponse request
	GetHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorRuleDefaultsResponse, error)

	// CreateHTTPErrorRuleDefaultsWithBodyWithResponse request with any body
	CreateHTTPErrorRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleDefaultsResponse, error)

	CreateHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, body CreateHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleDefaultsResponse, error)

	// ReplaceHTTPErrorRuleDefaultsWithBodyWithResponse request with any body
	ReplaceHTTPErrorRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleDefaultsResponse, error)

	ReplaceHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, body ReplaceHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleDefaultsResponse, error)

	// GetAllHTTPRequestRuleDefaultsWithResponse request
	GetAllHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPRequestRuleDefaultsResponse, error)

	// ReplaceAllHTTPRequestRuleDefaultsWithBodyWithResponse request with any body
	ReplaceAllHTTPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleDefaultsResponse, error)

	ReplaceAllHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, body ReplaceAllHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleDefaultsResponse, error)

	// DeleteHTTPRequestRuleDefaultsWithResponse request
	DeleteHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPRequestRuleDefaultsResponse, error)

	// GetHTTPRequestRuleDefaultsWithResponse request
	GetHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPRequestRuleDefaultsResponse, error)

	// CreateHTTPRequestRuleDefaultsWithBodyWithResponse request with any body
	CreateHTTPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleDefaultsResponse, error)

	CreateHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, body CreateHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleDefaultsResponse, error)

	// ReplaceHTTPRequestRuleDefaultsWithBodyWithResponse request with any body
	ReplaceHTTPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleDefaultsResponse, error)

	ReplaceHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, body ReplaceHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleDefaultsResponse, error)

	// GetAllHTTPResponseRuleDefaultsWithResponse request
	GetAllHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPResponseRuleDefaultsResponse, error)

	// ReplaceAllHTTPResponseRuleDefaultsWithBodyWithResponse request with any body
	ReplaceAllHTTPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleDefaultsResponse, error)

	ReplaceAllHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, body ReplaceAllHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleDefaultsResponse, error)

	// DeleteHTTPResponseRuleDefaultsWithResponse request
	DeleteHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPResponseRuleDefaultsResponse, error)

	// GetHTTPResponseRuleDefaultsWithResponse request
	GetHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPResponseRuleDefaultsResponse, error)

	// CreateHTTPResponseRuleDefaultsWithBodyWithResponse request with any body
	CreateHTTPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleDefaultsResponse, error)

	CreateHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, body CreateHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleDefaultsResponse, error)

	// ReplaceHTTPResponseRuleDefaultsWithBodyWithResponse request with any body
	ReplaceHTTPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleDefaultsResponse, error)

	ReplaceHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, body ReplaceHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleDefaultsResponse, error)

	// GetAllLogTargetDefaultsWithResponse request
	GetAllLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetDefaultsResponse, error)

	// ReplaceAllLogTargetDefaultsWithBodyWithResponse request with any body
	ReplaceAllLogTargetDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetDefaultsResponse, error)

	ReplaceAllLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, body ReplaceAllLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetDefaultsResponse, error)

	// DeleteLogTargetDefaultsWithResponse request
	DeleteLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetDefaultsResponse, error)

	// GetLogTargetDefaultsWithResponse request
	GetLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*GetLogTargetDefaultsResponse, error)

	// CreateLogTargetDefaultsWithBodyWithResponse request with any body
	CreateLogTargetDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetDefaultsResponse, error)

	CreateLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, body CreateLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetDefaultsResponse, error)

	// ReplaceLogTargetDefaultsWithBodyWithResponse request with any body
	ReplaceLogTargetDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetDefaultsResponse, error)

	ReplaceLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, body ReplaceLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetDefaultsResponse, error)

	// GetAllQUICInitialRuleDefaultsWithResponse request
	GetAllQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllQUICInitialRuleDefaultsResponse, error)

	// ReplaceAllQUICInitialRuleDefaultsWithBodyWithResponse request with any body
	ReplaceAllQUICInitialRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleDefaultsResponse, error)

	ReplaceAllQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, body ReplaceAllQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleDefaultsResponse, error)

	// DeleteQUICInitialRuleDefaultsWithResponse request
	DeleteQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteQUICInitialRuleDefaultsResponse, error)

	// GetQUICInitialRuleDefaultsWithResponse request
	GetQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetQUICInitialRuleDefaultsResponse, error)

	// CreateQUICInitialRuleDefaultsWithBodyWithResponse request with any body
	CreateQUICInitialRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleDefaultsResponse, error)

	CreateQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, body CreateQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleDefaultsResponse, error)

	// ReplaceQUICInitialRuleDefaultsWithBodyWithResponse request with any body
	ReplaceQUICInitialRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleDefaultsResponse, error)

	ReplaceQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, body ReplaceQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleDefaultsResponse, error)

	// GetAllTCPCheckDefaultsWithResponse request
	GetAllTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllTCPCheckDefaultsResponse, error)

	// ReplaceAllTCPCheckDefaultsWithBodyWithResponse request with any body
	ReplaceAllTCPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckDefaultsResponse, error)

	ReplaceAllTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, body ReplaceAllTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckDefaultsResponse, error)

	// DeleteTCPCheckDefaultsWithResponse request
	DeleteTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteTCPCheckDefaultsResponse, error)

	// GetTCPCheckDefaultsWithResponse request
	GetTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetTCPCheckDefaultsResponse, error)

	// CreateTCPCheckDefaultsWithBodyWithResponse request with any body
	CreateTCPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPCheckDefaultsResponse, error)

	CreateTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, body CreateTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPCheckDefaultsResponse, error)

	// ReplaceTCPCheckDefaultsWithBodyWithResponse request with any body
	ReplaceTCPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckDefaultsResponse, error)

	ReplaceTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, body ReplaceTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckDefaultsResponse, error)

	// GetAllTCPRequestRuleDefaultsWithResponse request
	GetAllTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllTCPRequestRuleDefaultsResponse, error)

	// ReplaceAllTCPRequestRuleDefaultsWithBodyWithResponse request with any body
	ReplaceAllTCPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleDefaultsResponse, error)

	ReplaceAllTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, body ReplaceAllTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleDefaultsResponse, error)

	// DeleteTCPRequestRuleDefaultsWithResponse request
	DeleteTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteTCPRequestRuleDefaultsResponse, error)

	// GetTCPRequestRuleDefaultsWithResponse request
	GetTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetTCPRequestRuleDefaultsResponse, error)

	// CreateTCPRequestRuleDefaultsWithBodyWithResponse request with any body
	CreateTCPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleDefaultsResponse, error)

	CreateTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, body CreateTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleDefaultsResponse, error)

	// ReplaceTCPRequestRuleDefaultsWithBodyWithResponse request with any body
	ReplaceTCPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleDefaultsResponse, error)

	ReplaceTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, body ReplaceTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleDefaultsResponse, error)

	// GetAllTCPResponseRuleDefaultsWithResponse request
	GetAllTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllTCPResponseRuleDefaultsResponse, error)

	// ReplaceAllTCPResponseRuleDefaultsWithBodyWithResponse request with any body
	ReplaceAllTCPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleDefaultsResponse, error)

	ReplaceAllTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, body ReplaceAllTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleDefaultsResponse, error)

	// DeleteTCPResponseRuleDefaultsWithResponse request
	DeleteTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteTCPResponseRuleDefaultsResponse, error)

	// GetTCPResponseRuleDefaultsWithResponse request
	GetTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetTCPResponseRuleDefaultsResponse, error)

	// CreateTCPResponseRuleDefaultsWithBodyWithResponse request with any body
	CreateTCPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleDefaultsResponse, error)

	CreateTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, body CreateTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleDefaultsResponse, error)

	// ReplaceTCPResponseRuleDefaultsWithBodyWithResponse request with any body
	ReplaceTCPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleDefaultsResponse, error)

	ReplaceTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, body ReplaceTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleDefaultsResponse, error)

	// GetFCGIAppsWithResponse request
	GetFCGIAppsWithResponse(ctx context.Context, params *GetFCGIAppsParams, reqEditors ...RequestEditorFn) (*GetFCGIAppsResponse, error)

	// CreateFCGIAppWithBodyWithResponse request with any body
	CreateFCGIAppWithBodyWithResponse(ctx context.Context, params *CreateFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFCGIAppResponse, error)

	CreateFCGIAppWithResponse(ctx context.Context, params *CreateFCGIAppParams, body CreateFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFCGIAppResponse, error)

	// DeleteFCGIAppWithResponse request
	DeleteFCGIAppWithResponse(ctx context.Context, name string, params *DeleteFCGIAppParams, reqEditors ...RequestEditorFn) (*DeleteFCGIAppResponse, error)

	// GetFCGIAppWithResponse request
	GetFCGIAppWithResponse(ctx context.Context, name string, params *GetFCGIAppParams, reqEditors ...RequestEditorFn) (*GetFCGIAppResponse, error)

	// ReplaceFCGIAppWithBodyWithResponse request with any body
	ReplaceFCGIAppWithBodyWithResponse(ctx context.Context, name string, params *ReplaceFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFCGIAppResponse, error)

	ReplaceFCGIAppWithResponse(ctx context.Context, name string, params *ReplaceFCGIAppParams, body ReplaceFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFCGIAppResponse, error)

	// GetAllAclFCGIAppWithResponse request
	GetAllAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclFCGIAppParams, reqEditors ...RequestEditorFn) (*GetAllAclFCGIAppResponse, error)

	// ReplaceAllAclFCGIAppWithBodyWithResponse request with any body
	ReplaceAllAclFCGIAppWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclFCGIAppResponse, error)

	ReplaceAllAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, body ReplaceAllAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclFCGIAppResponse, error)

	// DeleteAclFCGIAppWithResponse request
	DeleteAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclFCGIAppParams, reqEditors ...RequestEditorFn) (*DeleteAclFCGIAppResponse, error)

	// GetAclFCGIAppWithResponse request
	GetAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclFCGIAppParams, reqEditors ...RequestEditorFn) (*GetAclFCGIAppResponse, error)

	// CreateAclFCGIAppWithBodyWithResponse request with any body
	CreateAclFCGIAppWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclFCGIAppResponse, error)

	CreateAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, body CreateAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclFCGIAppResponse, error)

	// ReplaceAclFCGIAppWithBodyWithResponse request with any body
	ReplaceAclFCGIAppWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclFCGIAppResponse, error)

	ReplaceAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, body ReplaceAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclFCGIAppResponse, error)

	// GetFrontendsWithResponse request
	GetFrontendsWithResponse(ctx context.Context, params *GetFrontendsParams, reqEditors ...RequestEditorFn) (*GetFrontendsResponse, error)

	// CreateFrontendWithBodyWithResponse request with any body
	CreateFrontendWithBodyWithResponse(ctx context.Context, params *CreateFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFrontendResponse, error)

	CreateFrontendWithResponse(ctx context.Context, params *CreateFrontendParams, body CreateFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFrontendResponse, error)

	// DeleteFrontendWithResponse request
	DeleteFrontendWithResponse(ctx context.Context, name string, params *DeleteFrontendParams, reqEditors ...RequestEditorFn) (*DeleteFrontendResponse, error)

	// GetFrontendWithResponse request
	GetFrontendWithResponse(ctx context.Context, name string, params *GetFrontendParams, reqEditors ...RequestEditorFn) (*GetFrontendResponse, error)

	// ReplaceFrontendWithBodyWithResponse request with any body
	ReplaceFrontendWithBodyWithResponse(ctx context.Context, name string, params *ReplaceFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFrontendResponse, error)

	ReplaceFrontendWithResponse(ctx context.Context, name string, params *ReplaceFrontendParams, body ReplaceFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFrontendResponse, error)

	// GetAllAclFrontendWithResponse request
	GetAllAclFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclFrontendParams, reqEditors ...RequestEditorFn) (*GetAllAclFrontendResponse, error)

	// ReplaceAllAclFrontendWithBodyWithResponse request with any body
	ReplaceAllAclFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclFrontendResponse, error)

	ReplaceAllAclFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, body ReplaceAllAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclFrontendResponse, error)

	// DeleteAclFrontendWithResponse request
	DeleteAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclFrontendParams, reqEditors ...RequestEditorFn) (*DeleteAclFrontendResponse, error)

	// GetAclFrontendWithResponse request
	GetAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclFrontendParams, reqEditors ...RequestEditorFn) (*GetAclFrontendResponse, error)

	// CreateAclFrontendWithBodyWithResponse request with any body
	CreateAclFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclFrontendResponse, error)

	CreateAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, body CreateAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclFrontendResponse, error)

	// ReplaceAclFrontendWithBodyWithResponse request with any body
	ReplaceAclFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclFrontendResponse, error)

	ReplaceAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, body ReplaceAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclFrontendResponse, error)

	// GetBackendSwitchingRulesWithResponse request
	GetBackendSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *GetBackendSwitchingRulesParams, reqEditors ...RequestEditorFn) (*GetBackendSwitchingRulesResponse, error)

	// ReplaceBackendSwitchingRulesWithBodyWithResponse request with any body
	ReplaceBackendSwitchingRulesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRulesResponse, error)

	ReplaceBackendSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, body ReplaceBackendSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRulesResponse, error)

	// DeleteBackendSwitchingRuleWithResponse request
	DeleteBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*DeleteBackendSwitchingRuleResponse, error)

	// GetBackendSwitchingRuleWithResponse request
	GetBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *GetBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*GetBackendSwitchingRuleResponse, error)

	// CreateBackendSwitchingRuleWithBodyWithResponse request with any body
	CreateBackendSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackendSwitchingRuleResponse, error)

	CreateBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, body CreateBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackendSwitchingRuleResponse, error)

	// ReplaceBackendSwitchingRuleWithBodyWithResponse request with any body
	ReplaceBackendSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRuleResponse, error)

	ReplaceBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, body ReplaceBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRuleResponse, error)

	// GetAllBindFrontendWithResponse request
	GetAllBindFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllBindFrontendParams, reqEditors ...RequestEditorFn) (*GetAllBindFrontendResponse, error)

	// CreateBindFrontendWithBodyWithResponse request with any body
	CreateBindFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindFrontendResponse, error)

	CreateBindFrontendWithResponse(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, body CreateBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindFrontendResponse, error)

	// DeleteBindFrontendWithResponse request
	DeleteBindFrontendWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteBindFrontendParams, reqEditors ...RequestEditorFn) (*DeleteBindFrontendResponse, error)

	// GetBindFrontendWithResponse request
	GetBindFrontendWithResponse(ctx context.Context, parentName ParentName, name string, params *GetBindFrontendParams, reqEditors ...RequestEditorFn) (*GetBindFrontendResponse, error)

	// ReplaceBindFrontendWithBodyWithResponse request with any body
	ReplaceBindFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBindFrontendResponse, error)

	ReplaceBindFrontendWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, body ReplaceBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBindFrontendResponse, error)

	// GetDeclareCapturesWithResponse request
	GetDeclareCapturesWithResponse(ctx context.Context, parentName ParentName, params *GetDeclareCapturesParams, reqEditors ...RequestEditorFn) (*GetDeclareCapturesResponse, error)

	// ReplaceDeclareCapturesWithBodyWithResponse request with any body
	ReplaceDeclareCapturesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeclareCapturesResponse, error)

	ReplaceDeclareCapturesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, body ReplaceDeclareCapturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeclareCapturesResponse, error)

	// DeleteDeclareCaptureWithResponse request
	DeleteDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteDeclareCaptureParams, reqEditors ...RequestEditorFn) (*DeleteDeclareCaptureResponse, error)

	// GetDeclareCaptureWithResponse request
	GetDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *GetDeclareCaptureParams, reqEditors ...RequestEditorFn) (*GetDeclareCaptureResponse, error)

	// CreateDeclareCaptureWithBodyWithResponse request with any body
	CreateDeclareCaptureWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeclareCaptureResponse, error)

	CreateDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, body CreateDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeclareCaptureResponse, error)

	// ReplaceDeclareCaptureWithBodyWithResponse request with any body
	ReplaceDeclareCaptureWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeclareCaptureResponse, error)

	ReplaceDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, body ReplaceDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeclareCaptureResponse, error)

	// GetAllFilterFrontendWithResponse request
	GetAllFilterFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllFilterFrontendParams, reqEditors ...RequestEditorFn) (*GetAllFilterFrontendResponse, error)

	// ReplaceAllFilterFrontendWithBodyWithResponse request with any body
	ReplaceAllFilterFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllFilterFrontendResponse, error)

	ReplaceAllFilterFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, body ReplaceAllFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllFilterFrontendResponse, error)

	// DeleteFilterFrontendWithResponse request
	DeleteFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteFilterFrontendParams, reqEditors ...RequestEditorFn) (*DeleteFilterFrontendResponse, error)

	// GetFilterFrontendWithResponse request
	GetFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetFilterFrontendParams, reqEditors ...RequestEditorFn) (*GetFilterFrontendResponse, error)

	// CreateFilterFrontendWithBodyWithResponse request with any body
	CreateFilterFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFilterFrontendResponse, error)

	CreateFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, body CreateFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFilterFrontendResponse, error)

	// ReplaceFilterFrontendWithBodyWithResponse request with any body
	ReplaceFilterFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFilterFrontendResponse, error)

	ReplaceFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, body ReplaceFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFilterFrontendResponse, error)

	// GetAllHTTPAfterResponseRuleFrontendWithResponse request
	GetAllHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPAfterResponseRuleFrontendResponse, error)

	// ReplaceAllHTTPAfterResponseRuleFrontendWithBodyWithResponse request with any body
	ReplaceAllHTTPAfterResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleFrontendResponse, error)

	ReplaceAllHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, body ReplaceAllHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleFrontendResponse, error)

	// DeleteHTTPAfterResponseRuleFrontendWithResponse request
	DeleteHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPAfterResponseRuleFrontendResponse, error)

	// GetHTTPAfterResponseRuleFrontendWithResponse request
	GetHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPAfterResponseRuleFrontendResponse, error)

	// CreateHTTPAfterResponseRuleFrontendWithBodyWithResponse request with any body
	CreateHTTPAfterResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleFrontendResponse, error)

	CreateHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, body CreateHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleFrontendResponse, error)

	// ReplaceHTTPAfterResponseRuleFrontendWithBodyWithResponse request with any body
	ReplaceHTTPAfterResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleFrontendResponse, error)

	ReplaceHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, body ReplaceHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleFrontendResponse, error)

	// GetAllHTTPErrorRuleFrontendWithResponse request
	GetAllHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPErrorRuleFrontendResponse, error)

	// ReplaceAllHTTPErrorRuleFrontendWithBodyWithResponse request with any body
	ReplaceAllHTTPErrorRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleFrontendResponse, error)

	ReplaceAllHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, body ReplaceAllHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleFrontendResponse, error)

	// DeleteHTTPErrorRuleFrontendWithResponse request
	DeleteHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorRuleFrontendResponse, error)

	// GetHTTPErrorRuleFrontendWithResponse request
	GetHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorRuleFrontendResponse, error)

	// CreateHTTPErrorRuleFrontendWithBodyWithResponse request with any body
	CreateHTTPErrorRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleFrontendResponse, error)

	CreateHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, body CreateHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleFrontendResponse, error)

	// ReplaceHTTPErrorRuleFrontendWithBodyWithResponse request with any body
	ReplaceHTTPErrorRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleFrontendResponse, error)

	ReplaceHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, body ReplaceHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleFrontendResponse, error)

	// GetAllHTTPRequestRuleFrontendWithResponse request
	GetAllHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPRequestRuleFrontendResponse, error)

	// ReplaceAllHTTPRequestRuleFrontendWithBodyWithResponse request with any body
	ReplaceAllHTTPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleFrontendResponse, error)

	ReplaceAllHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, body ReplaceAllHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleFrontendResponse, error)

	// DeleteHTTPRequestRuleFrontendWithResponse request
	DeleteHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPRequestRuleFrontendResponse, error)

	// GetHTTPRequestRuleFrontendWithResponse request
	GetHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPRequestRuleFrontendResponse, error)

	// CreateHTTPRequestRuleFrontendWithBodyWithResponse request with any body
	CreateHTTPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleFrontendResponse, error)

	CreateHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, body CreateHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleFrontendResponse, error)

	// ReplaceHTTPRequestRuleFrontendWithBodyWithResponse request with any body
	ReplaceHTTPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleFrontendResponse, error)

	ReplaceHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, body ReplaceHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleFrontendResponse, error)

	// GetAllHTTPResponseRuleFrontendWithResponse request
	GetAllHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPResponseRuleFrontendResponse, error)

	// ReplaceAllHTTPResponseRuleFrontendWithBodyWithResponse request with any body
	ReplaceAllHTTPResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleFrontendResponse, error)

	ReplaceAllHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, body ReplaceAllHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleFrontendResponse, error)

	// DeleteHTTPResponseRuleFrontendWithResponse request
	DeleteHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPResponseRuleFrontendResponse, error)

	// GetHTTPResponseRuleFrontendWithResponse request
	GetHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPResponseRuleFrontendResponse, error)

	// CreateHTTPResponseRuleFrontendWithBodyWithResponse request with any body
	CreateHTTPResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleFrontendResponse, error)

	CreateHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, body CreateHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleFrontendResponse, error)

	// ReplaceHTTPResponseRuleFrontendWithBodyWithResponse request with any body
	ReplaceHTTPResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleFrontendResponse, error)

	ReplaceHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, body ReplaceHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleFrontendResponse, error)

	// GetAllLogTargetFrontendWithResponse request
	GetAllLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetFrontendResponse, error)

	// ReplaceAllLogTargetFrontendWithBodyWithResponse request with any body
	ReplaceAllLogTargetFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetFrontendResponse, error)

	ReplaceAllLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, body ReplaceAllLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetFrontendResponse, error)

	// DeleteLogTargetFrontendWithResponse request
	DeleteLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetFrontendResponse, error)

	// GetLogTargetFrontendWithResponse request
	GetLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*GetLogTargetFrontendResponse, error)

	// CreateLogTargetFrontendWithBodyWithResponse request with any body
	CreateLogTargetFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetFrontendResponse, error)

	CreateLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, body CreateLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetFrontendResponse, error)

	// ReplaceLogTargetFrontendWithBodyWithResponse request with any body
	ReplaceLogTargetFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetFrontendResponse, error)

	ReplaceLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, body ReplaceLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetFrontendResponse, error)

	// GetAllQUICInitialRuleFrontendWithResponse request
	GetAllQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllQUICInitialRuleFrontendResponse, error)

	// ReplaceAllQUICInitialRuleFrontendWithBodyWithResponse request with any body
	ReplaceAllQUICInitialRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleFrontendResponse, error)

	ReplaceAllQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, body ReplaceAllQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleFrontendResponse, error)

	// DeleteQUICInitialRuleFrontendWithResponse request
	DeleteQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteQUICInitialRuleFrontendResponse, error)

	// GetQUICInitialRuleFrontendWithResponse request
	GetQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetQUICInitialRuleFrontendResponse, error)

	// CreateQUICInitialRuleFrontendWithBodyWithResponse request with any body
	CreateQUICInitialRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleFrontendResponse, error)

	CreateQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, body CreateQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleFrontendResponse, error)

	// ReplaceQUICInitialRuleFrontendWithBodyWithResponse request with any body
	ReplaceQUICInitialRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleFrontendResponse, error)

	ReplaceQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, body ReplaceQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleFrontendResponse, error)

	// GetAllSSLFrontUsesWithResponse request
	GetAllSSLFrontUsesWithResponse(ctx context.Context, parentName ParentName, params *GetAllSSLFrontUsesParams, reqEditors ...RequestEditorFn) (*GetAllSSLFrontUsesResponse, error)

	// CreateSSLFrontUseWithBodyWithResponse request with any body
	CreateSSLFrontUseWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSSLFrontUseResponse, error)

	CreateSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, body CreateSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSSLFrontUseResponse, error)

	// DeleteSSLFrontUseWithResponse request
	DeleteSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteSSLFrontUseParams, reqEditors ...RequestEditorFn) (*DeleteSSLFrontUseResponse, error)

	// GetSSLFrontUseWithResponse request
	GetSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, index int, params *GetSSLFrontUseParams, reqEditors ...RequestEditorFn) (*GetSSLFrontUseResponse, error)

	// ReplaceSSLFrontUseWithBodyWithResponse request with any body
	ReplaceSSLFrontUseWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSSLFrontUseResponse, error)

	ReplaceSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, body ReplaceSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSSLFrontUseResponse, error)

	// GetAllTCPRequestRuleFrontendWithResponse request
	GetAllTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllTCPRequestRuleFrontendResponse, error)

	// ReplaceAllTCPRequestRuleFrontendWithBodyWithResponse request with any body
	ReplaceAllTCPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleFrontendResponse, error)

	ReplaceAllTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, body ReplaceAllTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleFrontendResponse, error)

	// DeleteTCPRequestRuleFrontendWithResponse request
	DeleteTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteTCPRequestRuleFrontendResponse, error)

	// GetTCPRequestRuleFrontendWithResponse request
	GetTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetTCPRequestRuleFrontendResponse, error)

	// CreateTCPRequestRuleFrontendWithBodyWithResponse request with any body
	CreateTCPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleFrontendResponse, error)

	CreateTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, body CreateTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleFrontendResponse, error)

	// ReplaceTCPRequestRuleFrontendWithBodyWithResponse request with any body
	ReplaceTCPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleFrontendResponse, error)

	ReplaceTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, body ReplaceTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleFrontendResponse, error)

	// GetGlobalWithResponse request
	GetGlobalWithResponse(ctx context.Context, params *GetGlobalParams, reqEditors ...RequestEditorFn) (*GetGlobalResponse, error)

	// ReplaceGlobalWithBodyWithResponse request with any body
	ReplaceGlobalWithBodyWithResponse(ctx context.Context, params *ReplaceGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceGlobalResponse, error)

	ReplaceGlobalWithResponse(ctx context.Context, params *ReplaceGlobalParams, body ReplaceGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceGlobalResponse, error)

	// GetAllLogTargetGlobalWithResponse request
	GetAllLogTargetGlobalWithResponse(ctx context.Context, params *GetAllLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetGlobalResponse, error)

	// ReplaceAllLogTargetGlobalWithBodyWithResponse request with any body
	ReplaceAllLogTargetGlobalWithBodyWithResponse(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetGlobalResponse, error)

	ReplaceAllLogTargetGlobalWithResponse(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, body ReplaceAllLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetGlobalResponse, error)

	// DeleteLogTargetGlobalWithResponse request
	DeleteLogTargetGlobalWithResponse(ctx context.Context, index int, params *DeleteLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetGlobalResponse, error)

	// GetLogTargetGlobalWithResponse request
	GetLogTargetGlobalWithResponse(ctx context.Context, index int, params *GetLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*GetLogTargetGlobalResponse, error)

	// CreateLogTargetGlobalWithBodyWithResponse request with any body
	CreateLogTargetGlobalWithBodyWithResponse(ctx context.Context, index int, params *CreateLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetGlobalResponse, error)

	CreateLogTargetGlobalWithResponse(ctx context.Context, index int, params *CreateLogTargetGlobalParams, body CreateLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetGlobalResponse, error)

	// ReplaceLogTargetGlobalWithBodyWithResponse request with any body
	ReplaceLogTargetGlobalWithBodyWithResponse(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetGlobalResponse, error)

	ReplaceLogTargetGlobalWithResponse(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, body ReplaceLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetGlobalResponse, error)

	// GetGroupsWithResponse request
	GetGroupsWithResponse(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error)

	// CreateGroupWithBodyWithResponse request with any body
	CreateGroupWithBodyWithResponse(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	CreateGroupWithResponse(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	// DeleteGroupWithResponse request
	DeleteGroupWithResponse(ctx context.Context, name string, params *DeleteGroupParams, reqEditors ...RequestEditorFn) (*DeleteGroupResponse, error)

	// GetGroupWithResponse request
	GetGroupWithResponse(ctx context.Context, name string, params *GetGroupParams, reqEditors ...RequestEditorFn) (*GetGroupResponse, error)

	// ReplaceGroupWithBodyWithResponse request with any body
	ReplaceGroupWithBodyWithResponse(ctx context.Context, name string, params *ReplaceGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceGroupResponse, error)

	ReplaceGroupWithResponse(ctx context.Context, name string, params *ReplaceGroupParams, body ReplaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceGroupResponse, error)

	// GetHTTPErrorsSectionsWithResponse request
	GetHTTPErrorsSectionsWithResponse(ctx context.Context, params *GetHTTPErrorsSectionsParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorsSectionsResponse, error)

	// CreateHTTPErrorsSectionWithBodyWithResponse request with any body
	CreateHTTPErrorsSectionWithBodyWithResponse(ctx context.Context, params *CreateHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorsSectionResponse, error)

	CreateHTTPErrorsSectionWithResponse(ctx context.Context, params *CreateHTTPErrorsSectionParams, body CreateHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorsSectionResponse, error)

	// DeleteHTTPErrorsSectionWithResponse request
	DeleteHTTPErrorsSectionWithResponse(ctx context.Context, name string, params *DeleteHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorsSectionResponse, error)

	// GetHTTPErrorsSectionWithResponse request
	GetHTTPErrorsSectionWithResponse(ctx context.Context, name string, params *GetHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorsSectionResponse, error)

	// ReplaceHTTPErrorsSectionWithBodyWithResponse request with any body
	ReplaceHTTPErrorsSectionWithBodyWithResponse(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorsSectionResponse, error)

	ReplaceHTTPErrorsSectionWithResponse(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, body ReplaceHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorsSectionResponse, error)

	// GetLogForwardsWithResponse request
	GetLogForwardsWithResponse(ctx context.Context, params *GetLogForwardsParams, reqEditors ...RequestEditorFn) (*GetLogForwardsResponse, error)

	// CreateLogForwardWithBodyWithResponse request with any body
	CreateLogForwardWithBodyWithResponse(ctx context.Context, params *CreateLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogForwardResponse, error)

	CreateLogForwardWithResponse(ctx context.Context, params *CreateLogForwardParams, body CreateLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogForwardResponse, error)

	// DeleteLogForwardWithResponse request
	DeleteLogForwardWithResponse(ctx context.Context, name string, params *DeleteLogForwardParams, reqEditors ...RequestEditorFn) (*DeleteLogForwardResponse, error)

	// GetLogForwardWithResponse request
	GetLogForwardWithResponse(ctx context.Context, name string, params *GetLogForwardParams, reqEditors ...RequestEditorFn) (*GetLogForwardResponse, error)

	// ReplaceLogForwardWithBodyWithResponse request with any body
	ReplaceLogForwardWithBodyWithResponse(ctx context.Context, name string, params *ReplaceLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogForwardResponse, error)

	ReplaceLogForwardWithResponse(ctx context.Context, name string, params *ReplaceLogForwardParams, body ReplaceLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogForwardResponse, error)

	// GetAllBindLogForwardWithResponse request
	GetAllBindLogForwardWithResponse(ctx context.Context, parentName ParentName, params *GetAllBindLogForwardParams, reqEditors ...RequestEditorFn) (*GetAllBindLogForwardResponse, error)

	// CreateBindLogForwardWithBodyWithResponse request with any body
	CreateBindLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindLogForwardResponse, error)

	CreateBindLogForwardWithResponse(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, body CreateBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindLogForwardResponse, error)

	// DeleteBindLogForwardWithResponse request
	DeleteBindLogForwardWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteBindLogForwardParams, reqEditors ...RequestEditorFn) (*DeleteBindLogForwardResponse, error)

	// GetBindLogForwardWithResponse request
	GetBindLogForwardWithResponse(ctx context.Context, parentName ParentName, name string, params *GetBindLogForwardParams, reqEditors ...RequestEditorFn) (*GetBindLogForwardResponse, error)

	// ReplaceBindLogForwardWithBodyWithResponse request with any body
	ReplaceBindLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBindLogForwardResponse, error)

	ReplaceBindLogForwardWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, body ReplaceBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBindLogForwardResponse, error)

	// GetDgramBindsWithResponse request
	GetDgramBindsWithResponse(ctx context.Context, parentName ParentName, params *GetDgramBindsParams, reqEditors ...RequestEditorFn) (*GetDgramBindsResponse, error)

	// CreateDgramBindWithBodyWithResponse request with any body
	CreateDgramBindWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDgramBindResponse, error)

	CreateDgramBindWithResponse(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, body CreateDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDgramBindResponse, error)

	// DeleteDgramBindWithResponse request
	DeleteDgramBindWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteDgramBindParams, reqEditors ...RequestEditorFn) (*DeleteDgramBindResponse, error)

	// GetDgramBindWithResponse request
	GetDgramBindWithResponse(ctx context.Context, parentName ParentName, name string, params *GetDgramBindParams, reqEditors ...RequestEditorFn) (*GetDgramBindResponse, error)

	// ReplaceDgramBindWithBodyWithResponse request with any body
	ReplaceDgramBindWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDgramBindResponse, error)

	ReplaceDgramBindWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, body ReplaceDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDgramBindResponse, error)

	// GetAllLogTargetLogForwardWithResponse request
	GetAllLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetLogForwardResponse, error)

	// ReplaceAllLogTargetLogForwardWithBodyWithResponse request with any body
	ReplaceAllLogTargetLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetLogForwardResponse, error)

	ReplaceAllLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, body ReplaceAllLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetLogForwardResponse, error)

	// DeleteLogTargetLogForwardWithResponse request
	DeleteLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetLogForwardResponse, error)

	// GetLogTargetLogForwardWithResponse request
	GetLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*GetLogTargetLogForwardResponse, error)

	// CreateLogTargetLogForwardWithBodyWithResponse request with any body
	CreateLogTargetLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetLogForwardResponse, error)

	CreateLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, body CreateLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetLogForwardResponse, error)

	// ReplaceLogTargetLogForwardWithBodyWithResponse request with any body
	ReplaceLogTargetLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetLogForwardResponse, error)

	ReplaceLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, body ReplaceLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetLogForwardResponse, error)

	// GetLogProfilesWithResponse request
	GetLogProfilesWithResponse(ctx context.Context, params *GetLogProfilesParams, reqEditors ...RequestEditorFn) (*GetLogProfilesResponse, error)

	// CreateLogProfileWithBodyWithResponse request with any body
	CreateLogProfileWithBodyWithResponse(ctx context.Context, params *CreateLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogProfileResponse, error)

	CreateLogProfileWithResponse(ctx context.Context, params *CreateLogProfileParams, body CreateLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogProfileResponse, error)

	// DeleteLogProfileWithResponse request
	DeleteLogProfileWithResponse(ctx context.Context, name string, params *DeleteLogProfileParams, reqEditors ...RequestEditorFn) (*DeleteLogProfileResponse, error)

	// GetLogProfileWithResponse request
	GetLogProfileWithResponse(ctx context.Context, name string, params *GetLogProfileParams, reqEditors ...RequestEditorFn) (*GetLogProfileResponse, error)

	// EditLogProfileWithBodyWithResponse request with any body
	EditLogProfileWithBodyWithResponse(ctx context.Context, name string, params *EditLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditLogProfileResponse, error)

	EditLogProfileWithResponse(ctx context.Context, name string, params *EditLogProfileParams, body EditLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*EditLogProfileResponse, error)

	// GetMailerEntriesWithResponse request
	GetMailerEntriesWithResponse(ctx context.Context, params *GetMailerEntriesParams, reqEditors ...RequestEditorFn) (*GetMailerEntriesResponse, error)

	// CreateMailerEntryWithBodyWithResponse request with any body
	CreateMailerEntryWithBodyWithResponse(ctx context.Context, params *CreateMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMailerEntryResponse, error)

	CreateMailerEntryWithResponse(ctx context.Context, params *CreateMailerEntryParams, body CreateMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMailerEntryResponse, error)

	// DeleteMailerEntryWithResponse request
	DeleteMailerEntryWithResponse(ctx context.Context, name string, params *DeleteMailerEntryParams, reqEditors ...RequestEditorFn) (*DeleteMailerEntryResponse, error)

	// GetMailerEntryWithResponse request
	GetMailerEntryWithResponse(ctx context.Context, name string, params *GetMailerEntryParams, reqEditors ...RequestEditorFn) (*GetMailerEntryResponse, error)

	// ReplaceMailerEntryWithBodyWithResponse request with any body
	ReplaceMailerEntryWithBodyWithResponse(ctx context.Context, name string, params *ReplaceMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceMailerEntryResponse, error)

	ReplaceMailerEntryWithResponse(ctx context.Context, name string, params *ReplaceMailerEntryParams, body ReplaceMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceMailerEntryResponse, error)

	// GetMailersSectionsWithResponse request
	GetMailersSectionsWithResponse(ctx context.Context, params *GetMailersSectionsParams, reqEditors ...RequestEditorFn) (*GetMailersSectionsResponse, error)

	// CreateMailersSectionWithBodyWithResponse request with any body
	CreateMailersSectionWithBodyWithResponse(ctx context.Context, params *CreateMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMailersSectionResponse, error)

	CreateMailersSectionWithResponse(ctx context.Context, params *CreateMailersSectionParams, body CreateMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMailersSectionResponse, error)

	// DeleteMailersSectionWithResponse request
	DeleteMailersSectionWithResponse(ctx context.Context, name string, params *DeleteMailersSectionParams, reqEditors ...RequestEditorFn) (*DeleteMailersSectionResponse, error)

	// GetMailersSectionWithResponse request
	GetMailersSectionWithResponse(ctx context.Context, name string, params *GetMailersSectionParams, reqEditors ...RequestEditorFn) (*GetMailersSectionResponse, error)

	// EditMailersSectionWithBodyWithResponse request with any body
	EditMailersSectionWithBodyWithResponse(ctx context.Context, name string, params *EditMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMailersSectionResponse, error)

	EditMailersSectionWithResponse(ctx context.Context, name string, params *EditMailersSectionParams, body EditMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMailersSectionResponse, error)

	// GetNameserversWithResponse request
	GetNameserversWithResponse(ctx context.Context, params *GetNameserversParams, reqEditors ...RequestEditorFn) (*GetNameserversResponse, error)

	// CreateNameserverWithBodyWithResponse request with any body
	CreateNameserverWithBodyWithResponse(ctx context.Context, params *CreateNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNameserverResponse, error)

	CreateNameserverWithResponse(ctx context.Context, params *CreateNameserverParams, body CreateNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNameserverResponse, error)

	// DeleteNameserverWithResponse request
	DeleteNameserverWithResponse(ctx context.Context, name string, params *DeleteNameserverParams, reqEditors ...RequestEditorFn) (*DeleteNameserverResponse, error)

	// GetNameserverWithResponse request
	GetNameserverWithResponse(ctx context.Context, name string, params *GetNameserverParams, reqEditors ...RequestEditorFn) (*GetNameserverResponse, error)

	// ReplaceNameserverWithBodyWithResponse request with any body
	ReplaceNameserverWithBodyWithResponse(ctx context.Context, name string, params *ReplaceNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceNameserverResponse, error)

	ReplaceNameserverWithResponse(ctx context.Context, name string, params *ReplaceNameserverParams, body ReplaceNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceNameserverResponse, error)

	// GetPeerEntriesWithResponse request
	GetPeerEntriesWithResponse(ctx context.Context, params *GetPeerEntriesParams, reqEditors ...RequestEditorFn) (*GetPeerEntriesResponse, error)

	// CreatePeerEntryWithBodyWithResponse request with any body
	CreatePeerEntryWithBodyWithResponse(ctx context.Context, params *CreatePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePeerEntryResponse, error)

	CreatePeerEntryWithResponse(ctx context.Context, params *CreatePeerEntryParams, body CreatePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePeerEntryResponse, error)

	// DeletePeerEntryWithResponse request
	DeletePeerEntryWithResponse(ctx context.Context, name string, params *DeletePeerEntryParams, reqEditors ...RequestEditorFn) (*DeletePeerEntryResponse, error)

	// GetPeerEntryWithResponse request
	GetPeerEntryWithResponse(ctx context.Context, name string, params *GetPeerEntryParams, reqEditors ...RequestEditorFn) (*GetPeerEntryResponse, error)

	// ReplacePeerEntryWithBodyWithResponse request with any body
	ReplacePeerEntryWithBodyWithResponse(ctx context.Context, name string, params *ReplacePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplacePeerEntryResponse, error)

	ReplacePeerEntryWithResponse(ctx context.Context, name string, params *ReplacePeerEntryParams, body ReplacePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplacePeerEntryResponse, error)

	// GetPeerSectionsWithResponse request
	GetPeerSectionsWithResponse(ctx context.Context, params *GetPeerSectionsParams, reqEditors ...RequestEditorFn) (*GetPeerSectionsResponse, error)

	// CreatePeerWithBodyWithResponse request with any body
	CreatePeerWithBodyWithResponse(ctx context.Context, params *CreatePeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePeerResponse, error)

	CreatePeerWithResponse(ctx context.Context, params *CreatePeerParams, body CreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePeerResponse, error)

	// DeletePeerWithResponse request
	DeletePeerWithResponse(ctx context.Context, name string, params *DeletePeerParams, reqEditors ...RequestEditorFn) (*DeletePeerResponse, error)

	// GetPeerSectionWithResponse request
	GetPeerSectionWithResponse(ctx context.Context, name string, params *GetPeerSectionParams, reqEditors ...RequestEditorFn) (*GetPeerSectionResponse, error)

	// GetAllBindPeerWithResponse request
	GetAllBindPeerWithResponse(ctx context.Context, parentName ParentName, params *GetAllBindPeerParams, reqEditors ...RequestEditorFn) (*GetAllBindPeerResponse, error)

	// CreateBindPeerWithBodyWithResponse request with any body
	CreateBindPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindPeerResponse, error)

	CreateBindPeerWithResponse(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, body CreateBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindPeerResponse, error)

	// DeleteBindPeerWithResponse request
	DeleteBindPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteBindPeerParams, reqEditors ...RequestEditorFn) (*DeleteBindPeerResponse, error)

	// GetBindPeerWithResponse request
	GetBindPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *GetBindPeerParams, reqEditors ...RequestEditorFn) (*GetBindPeerResponse, error)

	// ReplaceBindPeerWithBodyWithResponse request with any body
	ReplaceBindPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBindPeerResponse, error)

	ReplaceBindPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, body ReplaceBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBindPeerResponse, error)

	// GetAllLogTargetPeerWithResponse request
	GetAllLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetPeerParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetPeerResponse, error)

	// ReplaceAllLogTargetPeerWithBodyWithResponse request with any body
	ReplaceAllLogTargetPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetPeerResponse, error)

	ReplaceAllLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, body ReplaceAllLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetPeerResponse, error)

	// DeleteLogTargetPeerWithResponse request
	DeleteLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetPeerParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetPeerResponse, error)

	// GetLogTargetPeerWithResponse request
	GetLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetPeerParams, reqEditors ...RequestEditorFn) (*GetLogTargetPeerResponse, error)

	// CreateLogTargetPeerWithBodyWithResponse request with any body
	CreateLogTargetPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetPeerResponse, error)

	CreateLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, body CreateLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetPeerResponse, error)

	// ReplaceLogTargetPeerWithBodyWithResponse request with any body
	ReplaceLogTargetPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetPeerResponse, error)

	ReplaceLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, body ReplaceLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetPeerResponse, error)

	// GetAllServerPeerWithResponse request
	GetAllServerPeerWithResponse(ctx context.Context, parentName ParentName, params *GetAllServerPeerParams, reqEditors ...RequestEditorFn) (*GetAllServerPeerResponse, error)

	// CreateServerPeerWithBodyWithResponse request with any body
	CreateServerPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerPeerResponse, error)

	CreateServerPeerWithResponse(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, body CreateServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerPeerResponse, error)

	// DeleteServerPeerWithResponse request
	DeleteServerPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteServerPeerParams, reqEditors ...RequestEditorFn) (*DeleteServerPeerResponse, error)

	// GetServerPeerWithResponse request
	GetServerPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *GetServerPeerParams, reqEditors ...RequestEditorFn) (*GetServerPeerResponse, error)

	// ReplaceServerPeerWithBodyWithResponse request with any body
	ReplaceServerPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerPeerResponse, error)

	ReplaceServerPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, body ReplaceServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerPeerResponse, error)

	// GetTablesWithResponse request
	GetTablesWithResponse(ctx context.Context, parentName ParentName, params *GetTablesParams, reqEditors ...RequestEditorFn) (*GetTablesResponse, error)

	// CreateTableWithBodyWithResponse request with any body
	CreateTableWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTableResponse, error)

	CreateTableWithResponse(ctx context.Context, parentName ParentName, params *CreateTableParams, body CreateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTableResponse, error)

	// DeleteTableWithResponse request
	DeleteTableWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteTableParams, reqEditors ...RequestEditorFn) (*DeleteTableResponse, error)

	// GetTableWithResponse request
	GetTableWithResponse(ctx context.Context, parentName ParentName, name string, params *GetTableParams, reqEditors ...RequestEditorFn) (*GetTableResponse, error)

	// ReplaceTableWithBodyWithResponse request with any body
	ReplaceTableWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTableResponse, error)

	ReplaceTableWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, body ReplaceTableJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTableResponse, error)

	// GetProgramsWithResponse request
	GetProgramsWithResponse(ctx context.Context, params *GetProgramsParams, reqEditors ...RequestEditorFn) (*GetProgramsResponse, error)

	// CreateProgramWithBodyWithResponse request with any body
	CreateProgramWithBodyWithResponse(ctx context.Context, params *CreateProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProgramResponse, error)

	CreateProgramWithResponse(ctx context.Context, params *CreateProgramParams, body CreateProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProgramResponse, error)

	// DeleteProgramWithResponse request
	DeleteProgramWithResponse(ctx context.Context, name string, params *DeleteProgramParams, reqEditors ...RequestEditorFn) (*DeleteProgramResponse, error)

	// GetProgramWithResponse request
	GetProgramWithResponse(ctx context.Context, name string, params *GetProgramParams, reqEditors ...RequestEditorFn) (*GetProgramResponse, error)

	// ReplaceProgramWithBodyWithResponse request with any body
	ReplaceProgramWithBodyWithResponse(ctx context.Context, name string, params *ReplaceProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceProgramResponse, error)

	ReplaceProgramWithResponse(ctx context.Context, name string, params *ReplaceProgramParams, body ReplaceProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceProgramResponse, error)

	// GetHAProxyConfigurationWithResponse request
	GetHAProxyConfigurationWithResponse(ctx context.Context, params *GetHAProxyConfigurationParams, reqEditors ...RequestEditorFn) (*GetHAProxyConfigurationResponse, error)

	// PostHAProxyConfigurationWithBodyWithResponse request with any body
	PostHAProxyConfigurationWithBodyWithResponse(ctx context.Context, params *PostHAProxyConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHAProxyConfigurationResponse, error)

	PostHAProxyConfigurationWithTextBodyWithResponse(ctx context.Context, params *PostHAProxyConfigurationParams, body PostHAProxyConfigurationTextRequestBody, reqEditors ...RequestEditorFn) (*PostHAProxyConfigurationResponse, error)

	// GetResolversWithResponse request
	GetResolversWithResponse(ctx context.Context, params *GetResolversParams, reqEditors ...RequestEditorFn) (*GetResolversResponse, error)

	// CreateResolverWithBodyWithResponse request with any body
	CreateResolverWithBodyWithResponse(ctx context.Context, params *CreateResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResolverResponse, error)

	CreateResolverWithResponse(ctx context.Context, params *CreateResolverParams, body CreateResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResolverResponse, error)

	// DeleteResolverWithResponse request
	DeleteResolverWithResponse(ctx context.Context, name string, params *DeleteResolverParams, reqEditors ...RequestEditorFn) (*DeleteResolverResponse, error)

	// GetResolverWithResponse request
	GetResolverWithResponse(ctx context.Context, name string, params *GetResolverParams, reqEditors ...RequestEditorFn) (*GetResolverResponse, error)

	// ReplaceResolverWithBodyWithResponse request with any body
	ReplaceResolverWithBodyWithResponse(ctx context.Context, name string, params *ReplaceResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceResolverResponse, error)

	ReplaceResolverWithResponse(ctx context.Context, name string, params *ReplaceResolverParams, body ReplaceResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceResolverResponse, error)

	// GetRingsWithResponse request
	GetRingsWithResponse(ctx context.Context, params *GetRingsParams, reqEditors ...RequestEditorFn) (*GetRingsResponse, error)

	// CreateRingWithBodyWithResponse request with any body
	CreateRingWithBodyWithResponse(ctx context.Context, params *CreateRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRingResponse, error)

	CreateRingWithResponse(ctx context.Context, params *CreateRingParams, body CreateRingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRingResponse, error)

	// DeleteRingWithResponse request
	DeleteRingWithResponse(ctx context.Context, name string, params *DeleteRingParams, reqEditors ...RequestEditorFn) (*DeleteRingResponse, error)

	// GetRingWithResponse request
	GetRingWithResponse(ctx context.Context, name string, params *GetRingParams, reqEditors ...RequestEditorFn) (*GetRingResponse, error)

	// ReplaceRingWithBodyWithResponse request with any body
	ReplaceRingWithBodyWithResponse(ctx context.Context, name string, params *ReplaceRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceRingResponse, error)

	ReplaceRingWithResponse(ctx context.Context, name string, params *ReplaceRingParams, body ReplaceRingJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceRingResponse, error)

	// GetAllServerRingWithResponse request
	GetAllServerRingWithResponse(ctx context.Context, parentName ParentName, params *GetAllServerRingParams, reqEditors ...RequestEditorFn) (*GetAllServerRingResponse, error)

	// CreateServerRingWithBodyWithResponse request with any body
	CreateServerRingWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerRingResponse, error)

	CreateServerRingWithResponse(ctx context.Context, parentName ParentName, params *CreateServerRingParams, body CreateServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerRingResponse, error)

	// DeleteServerRingWithResponse request
	DeleteServerRingWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteServerRingParams, reqEditors ...RequestEditorFn) (*DeleteServerRingResponse, error)

	// GetServerRingWithResponse request
	GetServerRingWithResponse(ctx context.Context, parentName ParentName, name string, params *GetServerRingParams, reqEditors ...RequestEditorFn) (*GetServerRingResponse, error)

	// ReplaceServerRingWithBodyWithResponse request with any body
	ReplaceServerRingWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerRingResponse, error)

	ReplaceServerRingWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, body ReplaceServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerRingResponse, error)

	// DeleteTracesWithResponse request
	DeleteTracesWithResponse(ctx context.Context, params *DeleteTracesParams, reqEditors ...RequestEditorFn) (*DeleteTracesResponse, error)

	// GetTracesWithResponse request
	GetTracesWithResponse(ctx context.Context, params *GetTracesParams, reqEditors ...RequestEditorFn) (*GetTracesResponse, error)

	// CreateTracesWithBodyWithResponse request with any body
	CreateTracesWithBodyWithResponse(ctx context.Context, params *CreateTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTracesResponse, error)

	CreateTracesWithResponse(ctx context.Context, params *CreateTracesParams, body CreateTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTracesResponse, error)

	// ReplaceTracesWithBodyWithResponse request with any body
	ReplaceTracesWithBodyWithResponse(ctx context.Context, params *ReplaceTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTracesResponse, error)

	ReplaceTracesWithResponse(ctx context.Context, params *ReplaceTracesParams, body ReplaceTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTracesResponse, error)

	// DeleteTraceEntryWithBodyWithResponse request with any body
	DeleteTraceEntryWithBodyWithResponse(ctx context.Context, params *DeleteTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTraceEntryResponse, error)

	DeleteTraceEntryWithResponse(ctx context.Context, params *DeleteTraceEntryParams, body DeleteTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTraceEntryResponse, error)

	// CreateTraceEntryWithBodyWithResponse request with any body
	CreateTraceEntryWithBodyWithResponse(ctx context.Context, params *CreateTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTraceEntryResponse, error)

	CreateTraceEntryWithResponse(ctx context.Context, params *CreateTraceEntryParams, body CreateTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTraceEntryResponse, error)

	// GetUserlistsWithResponse request
	GetUserlistsWithResponse(ctx context.Context, params *GetUserlistsParams, reqEditors ...RequestEditorFn) (*GetUserlistsResponse, error)

	// CreateUserlistWithBodyWithResponse request with any body
	CreateUserlistWithBodyWithResponse(ctx context.Context, params *CreateUserlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserlistResponse, error)

	CreateUserlistWithResponse(ctx context.Context, params *CreateUserlistParams, body CreateUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserlistResponse, error)

	// DeleteUserlistWithResponse request
	DeleteUserlistWithResponse(ctx context.Context, name string, params *DeleteUserlistParams, reqEditors ...RequestEditorFn) (*DeleteUserlistResponse, error)

	// GetUserlistWithResponse request
	GetUserlistWithResponse(ctx context.Context, name string, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*GetUserlistResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, params *CreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, params *CreateUserParams, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, username string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, username string, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// ReplaceUserWithBodyWithResponse request with any body
	ReplaceUserWithBodyWithResponse(ctx context.Context, username string, params *ReplaceUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceUserResponse, error)

	ReplaceUserWithResponse(ctx context.Context, username string, params *ReplaceUserParams, body ReplaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceUserResponse, error)

	// GetConfigurationVersionWithResponse request
	GetConfigurationVersionWithResponse(ctx context.Context, params *GetConfigurationVersionParams, reqEditors ...RequestEditorFn) (*GetConfigurationVersionResponse, error)

	// GetReloadsWithResponse request
	GetReloadsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReloadsResponse, error)

	// GetReloadWithResponse request
	GetReloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetReloadResponse, error)

	// GetRuntimeEndpointsWithResponse request
	GetRuntimeEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRuntimeEndpointsResponse, error)

	// GetServicesHaproxyRuntimeAclsWithResponse request
	GetServicesHaproxyRuntimeAclsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsResponse, error)

	// GetServicesHaproxyRuntimeAclsIdWithResponse request
	GetServicesHaproxyRuntimeAclsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsIdResponse, error)

	// GetServicesHaproxyRuntimeAclsParentNameEntriesWithResponse request
	GetServicesHaproxyRuntimeAclsParentNameEntriesWithResponse(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsParentNameEntriesResponse, error)

	// PostServicesHaproxyRuntimeAclsParentNameEntriesWithBodyWithResponse request with any body
	PostServicesHaproxyRuntimeAclsParentNameEntriesWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicesHaproxyRuntimeAclsParentNameEntriesResponse, error)

	PostServicesHaproxyRuntimeAclsParentNameEntriesWithResponse(ctx context.Context, parentName ParentName, body PostServicesHaproxyRuntimeAclsParentNameEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicesHaproxyRuntimeAclsParentNameEntriesResponse, error)

	// AddPayloadRuntimeACLWithBodyWithResponse request with any body
	AddPayloadRuntimeACLWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeACLResponse, error)

	AddPayloadRuntimeACLWithResponse(ctx context.Context, parentName ParentName, body AddPayloadRuntimeACLJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeACLResponse, error)

	// DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse request
	DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse, error)

	// GetServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse request
	GetServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse, error)

	// GetAllRuntimeServerWithResponse request
	GetAllRuntimeServerWithResponse(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*GetAllRuntimeServerResponse, error)

	// AddRuntimeServerWithBodyWithResponse request with any body
	AddRuntimeServerWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRuntimeServerResponse, error)

	AddRuntimeServerWithResponse(ctx context.Context, parentName ParentName, body AddRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRuntimeServerResponse, error)

	// DeleteRuntimeServerWithResponse request
	DeleteRuntimeServerWithResponse(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*DeleteRuntimeServerResponse, error)

	// GetRuntimeServerWithResponse request
	GetRuntimeServerWithResponse(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*GetRuntimeServerResponse, error)

	// ReplaceRuntimeServerWithBodyWithResponse request with any body
	ReplaceRuntimeServerWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceRuntimeServerResponse, error)

	ReplaceRuntimeServerWithResponse(ctx context.Context, parentName ParentName, name string, body ReplaceRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceRuntimeServerResponse, error)

	// GetHaproxyProcessInfoWithResponse request
	GetHaproxyProcessInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHaproxyProcessInfoResponse, error)

	// GetAllRuntimeMapFilesWithResponse request
	GetAllRuntimeMapFilesWithResponse(ctx context.Context, params *GetAllRuntimeMapFilesParams, reqEditors ...RequestEditorFn) (*GetAllRuntimeMapFilesResponse, error)

	// ClearRuntimeMapWithResponse request
	ClearRuntimeMapWithResponse(ctx context.Context, name string, params *ClearRuntimeMapParams, reqEditors ...RequestEditorFn) (*ClearRuntimeMapResponse, error)

	// GetOneRuntimeMapWithResponse request
	GetOneRuntimeMapWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneRuntimeMapResponse, error)

	// AddPayloadRuntimeMapWithBodyWithResponse request with any body
	AddPayloadRuntimeMapWithBodyWithResponse(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeMapResponse, error)

	AddPayloadRuntimeMapWithResponse(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, body AddPayloadRuntimeMapJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeMapResponse, error)

	// ShowRuntimeMapWithResponse request
	ShowRuntimeMapWithResponse(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*ShowRuntimeMapResponse, error)

	// AddMapEntryWithBodyWithResponse request with any body
	AddMapEntryWithBodyWithResponse(ctx context.Context, parentName ParentName, params *AddMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMapEntryResponse, error)

	AddMapEntryWithResponse(ctx context.Context, parentName ParentName, params *AddMapEntryParams, body AddMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMapEntryResponse, error)

	// DeleteRuntimeMapEntryWithResponse request
	DeleteRuntimeMapEntryWithResponse(ctx context.Context, parentName ParentName, id string, params *DeleteRuntimeMapEntryParams, reqEditors ...RequestEditorFn) (*DeleteRuntimeMapEntryResponse, error)

	// GetRuntimeMapEntryWithResponse request
	GetRuntimeMapEntryWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*GetRuntimeMapEntryResponse, error)

	// ReplaceRuntimeMapEntryWithBodyWithResponse request with any body
	ReplaceRuntimeMapEntryWithBodyWithResponse(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceRuntimeMapEntryResponse, error)

	ReplaceRuntimeMapEntryWithResponse(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, body ReplaceRuntimeMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceRuntimeMapEntryResponse, error)

	// GetAllCaFilesWithResponse request
	GetAllCaFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCaFilesResponse, error)

	// CreateCaFileWithBodyWithResponse request with any body
	CreateCaFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCaFileResponse, error)

	// DeleteCaFileWithResponse request
	DeleteCaFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCaFileResponse, error)

	// GetCaFileWithResponse request
	GetCaFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCaFileResponse, error)

	// SetCaFileWithBodyWithResponse request with any body
	SetCaFileWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCaFileResponse, error)

	// AddCaEntryWithBodyWithResponse request with any body
	AddCaEntryWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCaEntryResponse, error)

	// GetCaEntryWithResponse request
	GetCaEntryWithResponse(ctx context.Context, name string, index int, reqEditors ...RequestEditorFn) (*GetCaEntryResponse, error)

	// GetAllCertsWithResponse request
	GetAllCertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCertsResponse, error)

	// CreateCertWithBodyWithResponse request with any body
	CreateCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCertResponse, error)

	// DeleteCertWithResponse request
	DeleteCertWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCertResponse, error)

	// GetCertWithResponse request
	GetCertWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCertResponse, error)

	// ReplaceCertWithBodyWithResponse request with any body
	ReplaceCertWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCertResponse, error)

	// GetAllCrlWithResponse request
	GetAllCrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCrlResponse, error)

	// CreateCrlWithBodyWithResponse request with any body
	CreateCrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCrlResponse, error)

	// DeleteCrlWithResponse request
	DeleteCrlWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCrlResponse, error)

	// GetCrlWithResponse request
	GetCrlWithResponse(ctx context.Context, name string, params *GetCrlParams, reqEditors ...RequestEditorFn) (*GetCrlResponse, error)

	// ReplaceCrlWithBodyWithResponse request with any body
	ReplaceCrlWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCrlResponse, error)

	// GetAllCrtListsWithResponse request
	GetAllCrtListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCrtListsResponse, error)

	// DeleteCrtListEntryWithResponse request
	DeleteCrtListEntryWithResponse(ctx context.Context, params *DeleteCrtListEntryParams, reqEditors ...RequestEditorFn) (*DeleteCrtListEntryResponse, error)

	// GetAllCrtListEntriesWithResponse request
	GetAllCrtListEntriesWithResponse(ctx context.Context, params *GetAllCrtListEntriesParams, reqEditors ...RequestEditorFn) (*GetAllCrtListEntriesResponse, error)

	// AddCrtListEntryWithBodyWithResponse request with any body
	AddCrtListEntryWithBodyWithResponse(ctx context.Context, params *AddCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCrtListEntryResponse, error)

	AddCrtListEntryWithResponse(ctx context.Context, params *AddCrtListEntryParams, body AddCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCrtListEntryResponse, error)

	// GetStickTablesWithResponse request
	GetStickTablesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStickTablesResponse, error)

	// GetStickTableWithResponse request
	GetStickTableWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStickTableResponse, error)

	// GetStickTableEntriesWithResponse request
	GetStickTableEntriesWithResponse(ctx context.Context, parentName ParentName, params *GetStickTableEntriesParams, reqEditors ...RequestEditorFn) (*GetStickTableEntriesResponse, error)

	// SetStickTableEntriesWithBodyWithResponse request with any body
	SetStickTableEntriesWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetStickTableEntriesResponse, error)

	SetStickTableEntriesWithResponse(ctx context.Context, parentName ParentName, body SetStickTableEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*SetStickTableEntriesResponse, error)

	// GetSitesWithResponse request
	GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error)

	// CreateSiteWithBodyWithResponse request with any body
	CreateSiteWithBodyWithResponse(ctx context.Context, params *CreateSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error)

	CreateSiteWithResponse(ctx context.Context, params *CreateSiteParams, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error)

	// DeleteSiteWithResponse request
	DeleteSiteWithResponse(ctx context.Context, name string, params *DeleteSiteParams, reqEditors ...RequestEditorFn) (*DeleteSiteResponse, error)

	// GetSiteWithResponse request
	GetSiteWithResponse(ctx context.Context, name string, params *GetSiteParams, reqEditors ...RequestEditorFn) (*GetSiteResponse, error)

	// ReplaceSiteWithBodyWithResponse request with any body
	ReplaceSiteWithBodyWithResponse(ctx context.Context, name string, params *ReplaceSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSiteResponse, error)

	ReplaceSiteWithResponse(ctx context.Context, name string, params *ReplaceSiteParams, body ReplaceSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSiteResponse, error)

	// GetSpoeEndpointsWithResponse request
	GetSpoeEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpoeEndpointsResponse, error)

	// GetAllSpoeFilesWithResponse request
	GetAllSpoeFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllSpoeFilesResponse, error)

	// CreateSpoeWithBodyWithResponse request with any body
	CreateSpoeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeResponse, error)

	// DeleteSpoeFileWithResponse request
	DeleteSpoeFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteSpoeFileResponse, error)

	// GetOneSpoeFileWithResponse request
	GetOneSpoeFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneSpoeFileResponse, error)

	// GetAllSpoeScopeWithResponse request
	GetAllSpoeScopeWithResponse(ctx context.Context, parentName ParentName, params *GetAllSpoeScopeParams, reqEditors ...RequestEditorFn) (*GetAllSpoeScopeResponse, error)

	// CreateSpoeScopeWithBodyWithResponse request with any body
	CreateSpoeScopeWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeScopeResponse, error)

	CreateSpoeScopeWithResponse(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, body CreateSpoeScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeScopeResponse, error)

	// DeleteSpoeScopeWithResponse request
	DeleteSpoeScopeWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteSpoeScopeParams, reqEditors ...RequestEditorFn) (*DeleteSpoeScopeResponse, error)

	// GetSpoeScopeWithResponse request
	GetSpoeScopeWithResponse(ctx context.Context, parentName ParentName, name string, params *GetSpoeScopeParams, reqEditors ...RequestEditorFn) (*GetSpoeScopeResponse, error)

	// GetAllSpoeAgentWithResponse request
	GetAllSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeAgentParams, reqEditors ...RequestEditorFn) (*GetAllSpoeAgentResponse, error)

	// CreateSpoeAgentWithBodyWithResponse request with any body
	CreateSpoeAgentWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeAgentResponse, error)

	CreateSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, body CreateSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeAgentResponse, error)

	// DeleteSpoeAgentWithResponse request
	DeleteSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeAgentParams, reqEditors ...RequestEditorFn) (*DeleteSpoeAgentResponse, error)

	// GetSpoeAgentWithResponse request
	GetSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeAgentParams, reqEditors ...RequestEditorFn) (*GetSpoeAgentResponse, error)

	// ReplaceSpoeAgentWithBodyWithResponse request with any body
	ReplaceSpoeAgentWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSpoeAgentResponse, error)

	ReplaceSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, body ReplaceSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSpoeAgentResponse, error)

	// GetAllSpoeGroupWithResponse request
	GetAllSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeGroupParams, reqEditors ...RequestEditorFn) (*GetAllSpoeGroupResponse, error)

	// CreateSpoeGroupWithBodyWithResponse request with any body
	CreateSpoeGroupWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeGroupResponse, error)

	CreateSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, body CreateSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeGroupResponse, error)

	// DeleteSpoeGroupWithResponse request
	DeleteSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeGroupParams, reqEditors ...RequestEditorFn) (*DeleteSpoeGroupResponse, error)

	// GetSpoeGroupWithResponse request
	GetSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeGroupParams, reqEditors ...RequestEditorFn) (*GetSpoeGroupResponse, error)

	// ReplaceSpoeGroupWithBodyWithResponse request with any body
	ReplaceSpoeGroupWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSpoeGroupResponse, error)

	ReplaceSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, body ReplaceSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSpoeGroupResponse, error)

	// GetAllSpoeMessageWithResponse request
	GetAllSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeMessageParams, reqEditors ...RequestEditorFn) (*GetAllSpoeMessageResponse, error)

	// CreateSpoeMessageWithBodyWithResponse request with any body
	CreateSpoeMessageWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeMessageResponse, error)

	CreateSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, body CreateSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeMessageResponse, error)

	// DeleteSpoeMessageWithResponse request
	DeleteSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeMessageParams, reqEditors ...RequestEditorFn) (*DeleteSpoeMessageResponse, error)

	// GetSpoeMessageWithResponse request
	GetSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeMessageParams, reqEditors ...RequestEditorFn) (*GetSpoeMessageResponse, error)

	// ReplaceSpoeMessageWithBodyWithResponse request with any body
	ReplaceSpoeMessageWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSpoeMessageResponse, error)

	ReplaceSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, body ReplaceSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSpoeMessageResponse, error)

	// GetAllSpoeTransactionWithResponse request
	GetAllSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, params *GetAllSpoeTransactionParams, reqEditors ...RequestEditorFn) (*GetAllSpoeTransactionResponse, error)

	// StartSpoeTransactionWithResponse request
	StartSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, params *StartSpoeTransactionParams, reqEditors ...RequestEditorFn) (*StartSpoeTransactionResponse, error)

	// DeleteSpoeTransactionWithResponse request
	DeleteSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*DeleteSpoeTransactionResponse, error)

	// GetSpoeTransactionWithResponse request
	GetSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*GetSpoeTransactionResponse, error)

	// CommitSpoeTransactionWithResponse request
	CommitSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, id string, params *CommitSpoeTransactionParams, reqEditors ...RequestEditorFn) (*CommitSpoeTransactionResponse, error)

	// GetSpoeConfigurationVersionWithResponse request
	GetSpoeConfigurationVersionWithResponse(ctx context.Context, parentName ParentName, params *GetSpoeConfigurationVersionParams, reqEditors ...RequestEditorFn) (*GetSpoeConfigurationVersionResponse, error)

	// GetStatsEndpointsWithResponse request
	GetStatsEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsEndpointsResponse, error)

	// GetStatsWithResponse request
	GetStatsWithResponse(ctx context.Context, params *GetStatsParams, reqEditors ...RequestEditorFn) (*GetStatsResponse, error)

	// GetStorageEndpointsWithResponse request
	GetStorageEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageEndpointsResponse, error)

	// GetAllStorageGeneralFilesWithResponse request
	GetAllStorageGeneralFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageGeneralFilesResponse, error)

	// CreateStorageGeneralFileWithBodyWithResponse request with any body
	CreateStorageGeneralFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageGeneralFileResponse, error)

	// DeleteStorageGeneralFileWithResponse request
	DeleteStorageGeneralFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteStorageGeneralFileResponse, error)

	// GetOneStorageGeneralFileWithResponse request
	GetOneStorageGeneralFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageGeneralFileResponse, error)

	// ReplaceStorageGeneralFileWithBodyWithResponse request with any body
	ReplaceStorageGeneralFileWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageGeneralFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageGeneralFileResponse, error)

	// GetAllStorageMapFilesWithResponse request
	GetAllStorageMapFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageMapFilesResponse, error)

	// CreateStorageMapFileWithBodyWithResponse request with any body
	CreateStorageMapFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageMapFileResponse, error)

	// DeleteStorageMapWithResponse request
	DeleteStorageMapWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteStorageMapResponse, error)

	// GetOneStorageMapWithResponse request
	GetOneStorageMapWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageMapResponse, error)

	// ReplaceStorageMapFileWithBodyWithResponse request with any body
	ReplaceStorageMapFileWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageMapFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageMapFileResponse, error)

	ReplaceStorageMapFileWithTextBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageMapFileParams, body ReplaceStorageMapFileTextRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStorageMapFileResponse, error)

	// GetAllStorageSSLCertificatesWithResponse request
	GetAllStorageSSLCertificatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageSSLCertificatesResponse, error)

	// CreateStorageSSLCertificateWithBodyWithResponse request with any body
	CreateStorageSSLCertificateWithBodyWithResponse(ctx context.Context, params *CreateStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageSSLCertificateResponse, error)

	// DeleteStorageSSLCertificateWithResponse request
	DeleteStorageSSLCertificateWithResponse(ctx context.Context, name string, params *DeleteStorageSSLCertificateParams, reqEditors ...RequestEditorFn) (*DeleteStorageSSLCertificateResponse, error)

	// GetOneStorageSSLCertificateWithResponse request
	GetOneStorageSSLCertificateWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageSSLCertificateResponse, error)

	// ReplaceStorageSSLCertificateWithBodyWithResponse request with any body
	ReplaceStorageSSLCertificateWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCertificateResponse, error)

	ReplaceStorageSSLCertificateWithTextBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, body ReplaceStorageSSLCertificateTextRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCertificateResponse, error)

	// GetAllStorageSSLCrtListFilesWithResponse request
	GetAllStorageSSLCrtListFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageSSLCrtListFilesResponse, error)

	// CreateStorageSSLCrtListFileWithBodyWithResponse request with any body
	CreateStorageSSLCrtListFileWithBodyWithResponse(ctx context.Context, params *CreateStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageSSLCrtListFileResponse, error)

	// DeleteStorageSSLCrtListFileWithResponse request
	DeleteStorageSSLCrtListFileWithResponse(ctx context.Context, name string, params *DeleteStorageSSLCrtListFileParams, reqEditors ...RequestEditorFn) (*DeleteStorageSSLCrtListFileResponse, error)

	// GetOneStorageSSLCrtListFileWithResponse request
	GetOneStorageSSLCrtListFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageSSLCrtListFileResponse, error)

	// ReplaceStorageSSLCrtListFileWithBodyWithResponse request with any body
	ReplaceStorageSSLCrtListFileWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCrtListFileResponse, error)

	ReplaceStorageSSLCrtListFileWithTextBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, body ReplaceStorageSSLCrtListFileTextRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCrtListFileResponse, error)

	// DeleteStorageSSLCrtListEntryWithResponse request
	DeleteStorageSSLCrtListEntryWithResponse(ctx context.Context, name string, params *DeleteStorageSSLCrtListEntryParams, reqEditors ...RequestEditorFn) (*DeleteStorageSSLCrtListEntryResponse, error)

	// GetStorageSSLCrtListEntriesWithResponse request
	GetStorageSSLCrtListEntriesWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStorageSSLCrtListEntriesResponse, error)

	// CreateStorageSSLCrtListEntryWithBodyWithResponse request with any body
	CreateStorageSSLCrtListEntryWithBodyWithResponse(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageSSLCrtListEntryResponse, error)

	CreateStorageSSLCrtListEntryWithResponse(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, body CreateStorageSSLCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStorageSSLCrtListEntryResponse, error)

	// GetTransactionsWithResponse request
	GetTransactionsWithResponse(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*GetTransactionsResponse, error)

	// StartTransactionWithResponse request
	StartTransactionWithResponse(ctx context.Context, params *StartTransactionParams, reqEditors ...RequestEditorFn) (*StartTransactionResponse, error)

	// DeleteTransactionWithResponse request
	DeleteTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTransactionResponse, error)

	// GetTransactionWithResponse request
	GetTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTransactionResponse, error)

	// CommitTransactionWithResponse request
	CommitTransactionWithResponse(ctx context.Context, id string, params *CommitTransactionParams, reqEditors ...RequestEditorFn) (*CommitTransactionResponse, error)

	// GetSpecificationWithResponse request
	GetSpecificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecificationResponse, error)

	// GetOpenapiv3SpecificationWithResponse request
	GetOpenapiv3SpecificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiv3SpecificationResponse, error)
}

type GetAPIEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAPIEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterSettings
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterSettings
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterSettings
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r EditClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InitiateCertificateRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r InitiateCertificateRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InitiateCertificateRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Health
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Info
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAWSRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AwsRegions
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAWSRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAWSRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAWSRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AwsRegion
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAWSRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAWSRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAWSRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteAWSRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAWSRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAWSRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AwsRegion
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAWSRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAWSRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAWSRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AwsRegion
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAWSRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAWSRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsulsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Consuls
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetConsulsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsulsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConsulResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Consul
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateConsulResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConsulResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsulResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteConsulResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsulResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsulResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Consul
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetConsulResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsulResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceConsulResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Consul
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceConsulResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceConsulResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicesEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServicesEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHaproxyEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHaproxyEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHaproxyEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigurationEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetConfigurationEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAcmeProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AcmeProviders
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAcmeProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAcmeProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AcmeProvider
	JSON202      *AcmeProvider
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAcmeProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAcmeProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAcmeProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteAcmeProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAcmeProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAcmeProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AcmeProvider
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAcmeProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditAcmeProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AcmeProvider
	JSON202      *AcmeProvider
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r EditAcmeProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditAcmeProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backends
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetBackendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Backend
	JSON202      *Backend
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backend
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backend
	JSON202      *Backend
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAclBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllAclBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAclBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllAclBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSON202      *Acls
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllAclBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllAclBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAclBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteAclBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAclBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAclBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAclBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAclBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAclBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAclBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAclBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAclBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAclBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAclBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllFilterBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filters
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllFilterBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllFilterBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllFilterBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filters
	JSON202      *Filters
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllFilterBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllFilterBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFilterBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteFilterBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFilterBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilterBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filter
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFilterBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilterBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFilterBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Filter
	JSON202      *Filter
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateFilterBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFilterBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceFilterBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filter
	JSON202      *Filter
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceFilterBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceFilterBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPAfterResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPAfterResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPAfterResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPAfterResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRules
	JSON202      *HttpAfterResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPAfterResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPAfterResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPAfterResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPAfterResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPAfterResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPAfterResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPAfterResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPAfterResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPAfterResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpAfterResponseRule
	JSON202      *HttpAfterResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPAfterResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPAfterResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPAfterResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRule
	JSON202      *HttpAfterResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPAfterResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPAfterResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpChecks
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpChecks
	JSON202      *HttpChecks
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpCheck
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpCheck
	JSON202      *HttpCheck
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpCheck
	JSON202      *HttpCheck
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPErrorRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPErrorRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPErrorRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPErrorRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRules
	JSON202      *HttpErrorRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPErrorRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPErrorRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPErrorRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPErrorRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPErrorRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPErrorRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPErrorRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPErrorRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPErrorRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpErrorRule
	JSON202      *HttpErrorRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPErrorRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPErrorRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPErrorRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRule
	JSON202      *HttpErrorRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPErrorRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPErrorRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRules
	JSON202      *HttpRequestRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpRequestRule
	JSON202      *HttpRequestRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRule
	JSON202      *HttpRequestRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRules
	JSON202      *HttpResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpResponseRule
	JSON202      *HttpResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRule
	JSON202      *HttpResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLogTargetBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllLogTargetBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLogTargetBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllLogTargetBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSON202      *LogTargets
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllLogTargetBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllLogTargetBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogTargetBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogTargetBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogTargetBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogTargetBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogTargetBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogTargetBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogTargetBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogTargetBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogTargetBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLogTargetBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceLogTargetBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLogTargetBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerSwitchingRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerSwitchingRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServerSwitchingRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerSwitchingRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceServerSwitchingRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerSwitchingRules
	JSON202      *ServerSwitchingRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceServerSwitchingRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceServerSwitchingRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServerSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteServerSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServerSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerSwitchingRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServerSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServerSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServerSwitchingRule
	JSON202      *ServerSwitchingRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateServerSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServerSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceServerSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerSwitchingRule
	JSON202      *ServerSwitchingRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceServerSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceServerSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerTemplates
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServerTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServerTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServerTemplate
	JSON202      *ServerTemplate
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateServerTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServerTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServerTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteServerTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServerTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerTemplate
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServerTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceServerTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerTemplate
	JSON202      *ServerTemplate
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceServerTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceServerTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllServerBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Servers
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllServerBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllServerBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServerBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Server
	JSON202      *Server
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateServerBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServerBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServerBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteServerBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServerBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServerBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceServerBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
	JSON202      *Server
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceServerBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceServerBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStickRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StickRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStickRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStickRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceStickRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StickRules
	JSON202      *StickRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceStickRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceStickRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStickRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteStickRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStickRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStickRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StickRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStickRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStickRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStickRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StickRule
	JSON202      *StickRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateStickRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStickRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceStickRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StickRule
	JSON202      *StickRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceStickRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceStickRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTCPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpChecks
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllTCPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTCPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllTCPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpChecks
	JSON202      *TcpChecks
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllTCPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllTCPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTCPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpCheck
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTCPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TcpCheck
	JSON202      *TcpCheck
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTCPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTCPCheckBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpCheck
	JSON202      *TcpCheck
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTCPCheckBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTCPCheckBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTCPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllTCPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTCPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllTCPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRules
	JSON202      *TcpRequestRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllTCPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllTCPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTCPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTCPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TcpRequestRule
	JSON202      *TcpRequestRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTCPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTCPRequestRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRule
	JSON202      *TcpRequestRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTCPRequestRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTCPRequestRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTCPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllTCPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTCPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllTCPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRules
	JSON202      *TcpResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllTCPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllTCPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTCPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTCPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TcpResponseRule
	JSON202      *TcpResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTCPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTCPResponseRuleBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRule
	JSON202      *TcpResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTCPResponseRuleBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTCPResponseRuleBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCachesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Caches
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCachesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCachesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Cache
	JSON202      *Cache
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cache
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cache
	JSON202      *Cache
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCrtLoadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrtLoads
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCrtLoadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCrtLoadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCrtLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CrtLoad
	JSON202      *CrtLoad
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateCrtLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCrtLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCrtLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteCrtLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCrtLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCrtLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrtLoad
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCrtLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCrtLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCrtLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrtLoad
	JSON202      *CrtLoad
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceCrtLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCrtLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCrtStoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrtStores
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCrtStoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCrtStoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCrtStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CrtStore
	JSON202      *CrtStore
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateCrtStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCrtStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCrtStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteCrtStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCrtStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCrtStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrtStore
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCrtStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCrtStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditCrtStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrtStore
	JSON202      *CrtStore
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r EditCrtStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditCrtStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultsSectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultsSections
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetDefaultsSectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultsSectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDefaultsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Defaults
	JSON202      *Defaults
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r AddDefaultsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDefaultsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDefaultsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Defaults
	JSON202      *Defaults
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateDefaultsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDefaultsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDefaultsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteDefaultsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDefaultsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Defaults
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetDefaultsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceDefaultsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Defaults
	JSON202      *Defaults
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceDefaultsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceDefaultsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAclDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllAclDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAclDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllAclDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSON202      *Acls
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllAclDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllAclDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAclDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteAclDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAclDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAclDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAclDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAclDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAclDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAclDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAclDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAclDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAclDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAclDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPAfterResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPAfterResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPAfterResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPAfterResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRules
	JSON202      *HttpAfterResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPAfterResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPAfterResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPAfterResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPAfterResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPAfterResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPAfterResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPAfterResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPAfterResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPAfterResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpAfterResponseRule
	JSON202      *HttpAfterResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPAfterResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPAfterResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPAfterResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRule
	JSON202      *HttpAfterResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPAfterResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPAfterResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpChecks
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpChecks
	JSON202      *HttpChecks
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpCheck
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpCheck
	JSON202      *HttpCheck
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpCheck
	JSON202      *HttpCheck
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPErrorRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPErrorRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPErrorRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPErrorRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRules
	JSON202      *HttpErrorRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPErrorRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPErrorRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPErrorRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPErrorRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPErrorRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPErrorRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPErrorRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPErrorRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPErrorRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpErrorRule
	JSON202      *HttpErrorRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPErrorRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPErrorRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPErrorRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRule
	JSON202      *HttpErrorRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPErrorRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPErrorRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRules
	JSON202      *HttpRequestRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpRequestRule
	JSON202      *HttpRequestRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRule
	JSON202      *HttpRequestRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRules
	JSON202      *HttpResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpResponseRule
	JSON202      *HttpResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRule
	JSON202      *HttpResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLogTargetDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllLogTargetDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLogTargetDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllLogTargetDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSON202      *LogTargets
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllLogTargetDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllLogTargetDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogTargetDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogTargetDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogTargetDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogTargetDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogTargetDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogTargetDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogTargetDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogTargetDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogTargetDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLogTargetDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceLogTargetDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLogTargetDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllQUICInitialRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllQUICInitialRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllQUICInitialRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllQUICInitialRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRules
	JSON202      *QUICInitialRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllQUICInitialRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllQUICInitialRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteQUICInitialRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteQUICInitialRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteQUICInitialRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQUICInitialRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetQUICInitialRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQUICInitialRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateQUICInitialRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *QUICInitialRule
	JSON202      *QUICInitialRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateQUICInitialRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateQUICInitialRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceQUICInitialRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRule
	JSON202      *QUICInitialRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceQUICInitialRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceQUICInitialRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTCPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpChecks
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllTCPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTCPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllTCPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpChecks
	JSON202      *TcpChecks
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllTCPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllTCPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTCPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpCheck
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTCPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TcpCheck
	JSON202      *TcpCheck
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTCPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTCPCheckDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpCheck
	JSON202      *TcpCheck
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTCPCheckDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTCPCheckDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTCPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllTCPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTCPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllTCPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRules
	JSON202      *TcpRequestRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllTCPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllTCPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTCPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTCPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TcpRequestRule
	JSON202      *TcpRequestRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTCPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTCPRequestRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRule
	JSON202      *TcpRequestRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTCPRequestRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTCPRequestRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTCPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllTCPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTCPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllTCPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRules
	JSON202      *TcpResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllTCPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllTCPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTCPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTCPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TcpResponseRule
	JSON202      *TcpResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTCPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTCPResponseRuleDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpResponseRule
	JSON202      *TcpResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTCPResponseRuleDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTCPResponseRuleDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFCGIAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FcgiApps
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFCGIAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFCGIAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FCGIApp
	JSON202      *FCGIApp
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FCGIApp
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FCGIApp
	JSON202      *FCGIApp
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAclFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllAclFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAclFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllAclFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSON202      *Acls
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllAclFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllAclFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAclFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteAclFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAclFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAclFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAclFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAclFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAclFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAclFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAclFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAclFCGIAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAclFCGIAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAclFCGIAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFrontendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Frontends
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFrontendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFrontendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Frontend
	JSON202      *Frontend
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Frontend
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Frontend
	JSON202      *Frontend
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAclFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllAclFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAclFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllAclFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acls
	JSON202      *Acls
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllAclFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllAclFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAclFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteAclFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAclFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAclFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAclFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAclFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAclFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAclFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAclFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAclFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
	JSON202      *Acl
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAclFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAclFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackendSwitchingRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackendSwitchingRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetBackendSwitchingRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackendSwitchingRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceBackendSwitchingRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackendSwitchingRules
	JSON202      *BackendSwitchingRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceBackendSwitchingRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceBackendSwitchingRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackendSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteBackendSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackendSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackendSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackendSwitchingRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetBackendSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackendSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBackendSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BackendSwitchingRule
	JSON202      *BackendSwitchingRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateBackendSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBackendSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceBackendSwitchingRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackendSwitchingRule
	JSON202      *BackendSwitchingRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceBackendSwitchingRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceBackendSwitchingRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllBindFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Binds
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllBindFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllBindFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBindFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Bind
	JSON202      *Bind
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateBindFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBindFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBindFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteBindFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBindFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBindFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bind
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetBindFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBindFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceBindFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bind
	JSON202      *Bind
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceBindFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceBindFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeclareCapturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Captures
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetDeclareCapturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeclareCapturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceDeclareCapturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Captures
	JSON202      *Captures
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceDeclareCapturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceDeclareCapturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeclareCaptureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteDeclareCaptureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeclareCaptureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeclareCaptureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Capture
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetDeclareCaptureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeclareCaptureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeclareCaptureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Capture
	JSON202      *Capture
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateDeclareCaptureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeclareCaptureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceDeclareCaptureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Capture
	JSON202      *Capture
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceDeclareCaptureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceDeclareCaptureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllFilterFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filters
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllFilterFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllFilterFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllFilterFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filters
	JSON202      *Filters
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllFilterFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllFilterFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFilterFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteFilterFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFilterFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilterFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filter
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFilterFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilterFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFilterFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Filter
	JSON202      *Filter
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateFilterFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFilterFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceFilterFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filter
	JSON202      *Filter
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceFilterFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceFilterFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPAfterResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPAfterResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPAfterResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPAfterResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRules
	JSON202      *HttpAfterResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPAfterResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPAfterResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPAfterResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPAfterResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPAfterResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPAfterResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPAfterResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPAfterResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPAfterResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpAfterResponseRule
	JSON202      *HttpAfterResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPAfterResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPAfterResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPAfterResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpAfterResponseRule
	JSON202      *HttpAfterResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPAfterResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPAfterResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPErrorRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPErrorRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPErrorRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPErrorRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRules
	JSON202      *HttpErrorRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPErrorRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPErrorRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPErrorRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPErrorRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPErrorRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPErrorRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPErrorRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPErrorRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPErrorRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpErrorRule
	JSON202      *HttpErrorRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPErrorRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPErrorRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPErrorRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorRule
	JSON202      *HttpErrorRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPErrorRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPErrorRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRules
	JSON202      *HttpRequestRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpRequestRule
	JSON202      *HttpRequestRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpRequestRule
	JSON202      *HttpRequestRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHTTPResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllHTTPResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHTTPResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllHTTPResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRules
	JSON202      *HttpResponseRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllHTTPResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllHTTPResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpResponseRule
	JSON202      *HttpResponseRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPResponseRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpResponseRule
	JSON202      *HttpResponseRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPResponseRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPResponseRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLogTargetFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllLogTargetFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLogTargetFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllLogTargetFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSON202      *LogTargets
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllLogTargetFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllLogTargetFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogTargetFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogTargetFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogTargetFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogTargetFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogTargetFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogTargetFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogTargetFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogTargetFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogTargetFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLogTargetFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceLogTargetFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLogTargetFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllQUICInitialRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllQUICInitialRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllQUICInitialRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllQUICInitialRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRules
	JSON202      *QUICInitialRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllQUICInitialRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllQUICInitialRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteQUICInitialRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteQUICInitialRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteQUICInitialRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQUICInitialRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetQUICInitialRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQUICInitialRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateQUICInitialRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *QUICInitialRule
	JSON202      *QUICInitialRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateQUICInitialRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateQUICInitialRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceQUICInitialRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QUICInitialRule
	JSON202      *QUICInitialRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceQUICInitialRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceQUICInitialRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSSLFrontUsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SSLFrontUses
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllSSLFrontUsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSSLFrontUsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSSLFrontUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SSLFrontUse
	JSON202      *SSLFrontUse
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSSLFrontUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSSLFrontUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSSLFrontUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSSLFrontUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSSLFrontUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSSLFrontUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SSLFrontUse
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSSLFrontUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSSLFrontUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceSSLFrontUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SSLFrontUse
	JSON202      *SSLFrontUse
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceSSLFrontUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceSSLFrontUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTCPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRules
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllTCPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTCPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllTCPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRules
	JSON202      *TcpRequestRules
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllTCPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllTCPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTCPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRule
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTCPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TcpRequestRule
	JSON202      *TcpRequestRule
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTCPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTCPRequestRuleFrontendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TcpRequestRule
	JSON202      *TcpRequestRule
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTCPRequestRuleFrontendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTCPRequestRuleFrontendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Global
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Global
	JSON202      *Global
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLogTargetGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllLogTargetGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLogTargetGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllLogTargetGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSON202      *LogTargets
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllLogTargetGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllLogTargetGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogTargetGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogTargetGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogTargetGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogTargetGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogTargetGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogTargetGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogTargetGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogTargetGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogTargetGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLogTargetGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceLogTargetGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLogTargetGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Groups
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
	JSON202      *Group
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
	JSON202      *Group
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPErrorsSectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorsSections
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPErrorsSectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPErrorsSectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPErrorsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HttpErrorsSection
	JSON202      *HttpErrorsSection
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateHTTPErrorsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPErrorsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPErrorsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPErrorsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPErrorsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPErrorsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorsSection
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHTTPErrorsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPErrorsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceHTTPErrorsSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HttpErrorsSection
	JSON202      *HttpErrorsSection
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceHTTPErrorsSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceHTTPErrorsSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogForwardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogForwards
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogForwardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogForwardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogForward
	JSON202      *LogForward
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogForward
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogForward
	JSON202      *LogForward
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllBindLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Binds
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllBindLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllBindLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBindLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Bind
	JSON202      *Bind
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateBindLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBindLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBindLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteBindLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBindLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBindLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bind
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetBindLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBindLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceBindLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bind
	JSON202      *Bind
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceBindLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceBindLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDgramBindsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DgramBinds
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetDgramBindsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDgramBindsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDgramBindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DgramBind
	JSON202      *DgramBind
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateDgramBindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDgramBindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDgramBindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteDgramBindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDgramBindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDgramBindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DgramBind
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetDgramBindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDgramBindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceDgramBindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DgramBind
	JSON202      *DgramBind
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceDgramBindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceDgramBindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLogTargetLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllLogTargetLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLogTargetLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllLogTargetLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSON202      *LogTargets
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllLogTargetLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllLogTargetLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogTargetLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogTargetLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogTargetLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogTargetLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogTargetLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogTargetLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogTargetLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogTargetLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogTargetLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLogTargetLogForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceLogTargetLogForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLogTargetLogForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogProfiles
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogProfile
	JSON202      *LogProfile
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogProfile
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditLogProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogProfile
	JSON202      *LogProfile
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r EditLogProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditLogProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMailerEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailerEntries
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMailerEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMailerEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMailerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MailerEntry
	JSON202      *MailerEntry
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateMailerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMailerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMailerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteMailerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMailerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMailerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailerEntry
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMailerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMailerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceMailerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailerEntry
	JSON202      *MailerEntry
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceMailerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceMailerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMailersSectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailersSections
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMailersSectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMailersSectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMailersSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MailersSection
	JSON202      *MailersSection
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateMailersSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMailersSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMailersSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteMailersSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMailersSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMailersSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailersSection
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMailersSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMailersSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditMailersSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailersSection
	JSON202      *MailersSection
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r EditMailersSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditMailersSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNameserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Nameservers
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetNameserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNameserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNameserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Nameserver
	JSON202      *Nameserver
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateNameserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNameserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNameserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteNameserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNameserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNameserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Nameserver
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetNameserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNameserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceNameserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Nameserver
	JSON202      *Nameserver
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceNameserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceNameserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeerEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeerEntries
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetPeerEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeerEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePeerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PeerEntry
	JSON202      *PeerEntry
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreatePeerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePeerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePeerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeletePeerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePeerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeerEntry
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetPeerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacePeerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeerEntry
	JSON202      *PeerEntry
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplacePeerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacePeerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeerSectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeerSections
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetPeerSectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeerSectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PeerSection
	JSON202      *PeerSection
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreatePeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeletePeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeerSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeerSection
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetPeerSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeerSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllBindPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Binds
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllBindPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllBindPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBindPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Bind
	JSON202      *Bind
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateBindPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBindPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBindPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteBindPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBindPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBindPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bind
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetBindPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBindPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceBindPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bind
	JSON202      *Bind
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceBindPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceBindPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLogTargetPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllLogTargetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLogTargetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAllLogTargetPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTargets
	JSON202      *LogTargets
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceAllLogTargetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAllLogTargetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogTargetPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteLogTargetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogTargetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogTargetPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetLogTargetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogTargetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogTargetPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateLogTargetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogTargetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLogTargetPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogTarget
	JSON202      *LogTarget
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceLogTargetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLogTargetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllServerPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Servers
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllServerPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllServerPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServerPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Server
	JSON202      *Server
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateServerPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServerPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServerPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteServerPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServerPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServerPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceServerPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
	JSON202      *Server
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceServerPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceServerPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tables
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Table
	JSON202      *Table
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Table
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Table
	JSON202      *Table
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProgramsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Programs
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetProgramsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProgramsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProgramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Program
	JSON202      *Program
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateProgramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProgramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProgramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteProgramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProgramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProgramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Program
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetProgramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProgramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceProgramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Program
	JSON202      *Program
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceProgramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceProgramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHAProxyConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHAProxyConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHAProxyConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHAProxyConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostHAProxyConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHAProxyConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResolversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resolvers
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetResolversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResolversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResolverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Resolver
	JSON202      *Resolver
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateResolverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResolverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResolverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteResolverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResolverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResolverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resolver
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetResolverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResolverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceResolverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resolver
	JSON202      *Resolver
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceResolverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceResolverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rings
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetRingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Ring
	JSON202      *Ring
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ring
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ring
	JSON202      *Ring
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllServerRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Servers
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllServerRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllServerRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServerRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Server
	JSON202      *Server
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateServerRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServerRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServerRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteServerRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServerRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServerRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceServerRingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
	JSON202      *Server
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceServerRingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceServerRingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTracesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTracesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTracesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Traces
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTracesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTracesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Traces
	JSON202      *Traces
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTracesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTracesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceTracesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Traces
	JSON202      *Traces
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceTracesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceTracesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTraceEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTraceEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTraceEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTraceEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TraceEntry
	JSON202      *TraceEntry
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateTraceEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTraceEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserlistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Userlists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUserlistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserlistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Userlist
	JSON202      *Userlist
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateUserlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteUserlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Userlist
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUserlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Users
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSON202      *User
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON404      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON202      *User
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigurationVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetConfigurationVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reloads
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetReloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reload
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetReloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuntimeEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetRuntimeEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuntimeEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicesHaproxyRuntimeAclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AclFiles
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServicesHaproxyRuntimeAclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesHaproxyRuntimeAclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicesHaproxyRuntimeAclsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AclFile
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServicesHaproxyRuntimeAclsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesHaproxyRuntimeAclsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicesHaproxyRuntimeAclsParentNameEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AclFilesEntries
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServicesHaproxyRuntimeAclsParentNameEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesHaproxyRuntimeAclsParentNameEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServicesHaproxyRuntimeAclsParentNameEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AclFileEntry
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostServicesHaproxyRuntimeAclsParentNameEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServicesHaproxyRuntimeAclsParentNameEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPayloadRuntimeACLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AclFilesEntries
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r AddPayloadRuntimeACLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPayloadRuntimeACLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AclFileEntry
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRuntimeServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeServers
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllRuntimeServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRuntimeServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRuntimeServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RuntimeAddServer
	JSON400      *BadRequest
	JSON404      *NotFound
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r AddRuntimeServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRuntimeServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRuntimeServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteRuntimeServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRuntimeServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuntimeServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeServer
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetRuntimeServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuntimeServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceRuntimeServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeServer
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceRuntimeServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceRuntimeServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHaproxyProcessInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessInfo
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetHaproxyProcessInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHaproxyProcessInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRuntimeMapFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Maps
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllRuntimeMapFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRuntimeMapFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClearRuntimeMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ClearRuntimeMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClearRuntimeMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneRuntimeMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Map
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetOneRuntimeMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneRuntimeMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPayloadRuntimeMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MapEntries
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r AddPayloadRuntimeMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPayloadRuntimeMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowRuntimeMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapEntries
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ShowRuntimeMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowRuntimeMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MapEntry
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r AddMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRuntimeMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteRuntimeMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRuntimeMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuntimeMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapEntry
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetRuntimeMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuntimeMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceRuntimeMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapEntry
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceRuntimeMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceRuntimeMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCaFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCaFiles
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllCaFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCaFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCaFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateCaFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCaFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCaFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteCaFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCaFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCaFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCaFile
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCaFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCaFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetCaFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r SetCaFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetCaFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCaEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SslCertificate
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r AddCaEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCaEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCaEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCertificate
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCaEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCaEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCertificates
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllCertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCertificate
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCrls
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllCrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateCrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteCrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCrlEntries
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceCrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCrtListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCrtLists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllCrtListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCrtListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCrtListEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteCrtListEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCrtListEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCrtListEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCrtListEntries
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllCrtListEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCrtListEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCrtListEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r AddCrtListEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCrtListEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStickTablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StickTables
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStickTablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStickTablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStickTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StickTable
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStickTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStickTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStickTableEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StickTableEntries
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStickTableEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStickTableEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetStickTableEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r SetStickTableEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetStickTableEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Sites
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Site
	JSON202      *Site
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON202      *Site
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpoeEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpoeEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpoeEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSpoeFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeFiles
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllSpoeFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSpoeFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpoeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *string
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSpoeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpoeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpoeFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSpoeFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpoeFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneSpoeFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *string `json:"data,omitempty"`
	}
	JSON404     *NotFound
	JSONDefault *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetOneSpoeFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneSpoeFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSpoeScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeScopes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllSpoeScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSpoeScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpoeScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpoeScope
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSpoeScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpoeScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpoeScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSpoeScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpoeScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpoeScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeScope
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpoeScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpoeScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSpoeAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeAgents
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllSpoeAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSpoeAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpoeAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpoeAgent
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSpoeAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpoeAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpoeAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSpoeAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpoeAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpoeAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeAgent
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpoeAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpoeAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceSpoeAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeAgent
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceSpoeAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceSpoeAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSpoeGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeGroups
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllSpoeGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSpoeGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpoeGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpoeGroup
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSpoeGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpoeGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpoeGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSpoeGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpoeGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpoeGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeGroup
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpoeGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpoeGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceSpoeGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeGroup
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceSpoeGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceSpoeGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSpoeMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeMessages
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllSpoeMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSpoeMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpoeMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpoeMessage
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSpoeMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpoeMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpoeMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSpoeMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpoeMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpoeMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeMessage
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpoeMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpoeMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceSpoeMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeMessage
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceSpoeMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceSpoeMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSpoeTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeTransactions
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllSpoeTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSpoeTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartSpoeTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpoeTransaction
	JSON429      *struct {
		Code    *int    `json:"code,omitempty"`
		Message *string `json:"message,omitempty"`
	}
	JSONDefault *DefaultError
}

// Status returns HTTPResponse.Status
func (r StartSpoeTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartSpoeTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpoeTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteSpoeTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpoeTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpoeTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeTransaction
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpoeTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpoeTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitSpoeTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpoeTransaction
	JSON202      *SpoeTransaction
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CommitSpoeTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitSpoeTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpoeConfigurationVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpoeConfigurationVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpoeConfigurationVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStatsEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NativeStats
	JSON500      *NativeStats
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoints
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStorageEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllStorageGeneralFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralFiles
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllStorageGeneralFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStorageGeneralFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStorageGeneralFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GeneralFile
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateStorageGeneralFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStorageGeneralFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStorageGeneralFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteStorageGeneralFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStorageGeneralFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneStorageGeneralFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetOneStorageGeneralFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneStorageGeneralFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceStorageGeneralFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceStorageGeneralFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceStorageGeneralFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllStorageMapFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Maps
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllStorageMapFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStorageMapFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStorageMapFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Map
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateStorageMapFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStorageMapFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStorageMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteStorageMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStorageMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneStorageMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetOneStorageMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneStorageMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceStorageMapFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceStorageMapFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceStorageMapFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllStorageSSLCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCertificates
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllStorageSSLCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStorageSSLCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStorageSSLCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SslCertificate
	JSON202      *SslCertificate
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateStorageSSLCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStorageSSLCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStorageSSLCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteStorageSSLCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStorageSSLCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneStorageSSLCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCertificate
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetOneStorageSSLCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneStorageSSLCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceStorageSSLCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCertificate
	JSON202      *SslCertificate
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceStorageSSLCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceStorageSSLCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllStorageSSLCrtListFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCrtListFiles
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllStorageSSLCrtListFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStorageSSLCrtListFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStorageSSLCrtListFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SslCrtListFile
	JSON202      *SslCrtListFile
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateStorageSSLCrtListFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStorageSSLCrtListFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStorageSSLCrtListFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteStorageSSLCrtListFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStorageSSLCrtListFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneStorageSSLCrtListFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetOneStorageSSLCrtListFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneStorageSSLCrtListFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceStorageSSLCrtListFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCrtListFile
	JSON202      *SslCrtListFile
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ReplaceStorageSSLCrtListFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceStorageSSLCrtListFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStorageSSLCrtListEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteStorageSSLCrtListEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStorageSSLCrtListEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageSSLCrtListEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslCrtListEntries
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetStorageSSLCrtListEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageSSLCrtListEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStorageSSLCrtListEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SslCrtListEntry
	JSON400      *BadRequest
	JSON409      *AlreadyExists
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateStorageSSLCrtListEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStorageSSLCrtListEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transactions
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Transaction
	JSON429      *struct {
		Code    *int    `json:"code,omitempty"`
		Message *string `json:"message,omitempty"`
	}
	JSONDefault *DefaultError
}

// Status returns HTTPResponse.Status
func (r StartTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transaction
	JSON404      *NotFound
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transaction
	JSON202      *Transaction
	JSON400      *BadRequest
	JSON404      *NotFound
	JSON406      *NotAcceptable
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CommitTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetSpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenapiv3SpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetOpenapiv3SpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenapiv3SpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAPIEndpointsWithResponse request returning *GetAPIEndpointsResponse
func (c *ClientWithResponses) GetAPIEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIEndpointsResponse, error) {
	rsp, err := c.GetAPIEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIEndpointsResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, params *DeleteClusterParams, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterResponse, error) {
	rsp, err := c.GetCluster(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterResponse(rsp)
}

// PostClusterWithBodyWithResponse request with arbitrary body returning *PostClusterResponse
func (c *ClientWithResponses) PostClusterWithBodyWithResponse(ctx context.Context, params *PostClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClusterResponse, error) {
	rsp, err := c.PostClusterWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClusterResponse(rsp)
}

func (c *ClientWithResponses) PostClusterWithResponse(ctx context.Context, params *PostClusterParams, body PostClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClusterResponse, error) {
	rsp, err := c.PostCluster(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClusterResponse(rsp)
}

// EditClusterWithBodyWithResponse request with arbitrary body returning *EditClusterResponse
func (c *ClientWithResponses) EditClusterWithBodyWithResponse(ctx context.Context, params *EditClusterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditClusterResponse, error) {
	rsp, err := c.EditClusterWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditClusterResponse(rsp)
}

func (c *ClientWithResponses) EditClusterWithResponse(ctx context.Context, params *EditClusterParams, body EditClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*EditClusterResponse, error) {
	rsp, err := c.EditCluster(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditClusterResponse(rsp)
}

// InitiateCertificateRefreshWithResponse request returning *InitiateCertificateRefreshResponse
func (c *ClientWithResponses) InitiateCertificateRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InitiateCertificateRefreshResponse, error) {
	rsp, err := c.InitiateCertificateRefresh(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitiateCertificateRefreshResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetInfoWithResponse request returning *GetInfoResponse
func (c *ClientWithResponses) GetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoResponse, error) {
	rsp, err := c.GetInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInfoResponse(rsp)
}

// GetAWSRegionsWithResponse request returning *GetAWSRegionsResponse
func (c *ClientWithResponses) GetAWSRegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAWSRegionsResponse, error) {
	rsp, err := c.GetAWSRegions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAWSRegionsResponse(rsp)
}

// CreateAWSRegionWithBodyWithResponse request with arbitrary body returning *CreateAWSRegionResponse
func (c *ClientWithResponses) CreateAWSRegionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAWSRegionResponse, error) {
	rsp, err := c.CreateAWSRegionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAWSRegionResponse(rsp)
}

func (c *ClientWithResponses) CreateAWSRegionWithResponse(ctx context.Context, body CreateAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAWSRegionResponse, error) {
	rsp, err := c.CreateAWSRegion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAWSRegionResponse(rsp)
}

// DeleteAWSRegionWithResponse request returning *DeleteAWSRegionResponse
func (c *ClientWithResponses) DeleteAWSRegionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAWSRegionResponse, error) {
	rsp, err := c.DeleteAWSRegion(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAWSRegionResponse(rsp)
}

// GetAWSRegionWithResponse request returning *GetAWSRegionResponse
func (c *ClientWithResponses) GetAWSRegionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAWSRegionResponse, error) {
	rsp, err := c.GetAWSRegion(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAWSRegionResponse(rsp)
}

// ReplaceAWSRegionWithBodyWithResponse request with arbitrary body returning *ReplaceAWSRegionResponse
func (c *ClientWithResponses) ReplaceAWSRegionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAWSRegionResponse, error) {
	rsp, err := c.ReplaceAWSRegionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAWSRegionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAWSRegionWithResponse(ctx context.Context, id string, body ReplaceAWSRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAWSRegionResponse, error) {
	rsp, err := c.ReplaceAWSRegion(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAWSRegionResponse(rsp)
}

// GetConsulsWithResponse request returning *GetConsulsResponse
func (c *ClientWithResponses) GetConsulsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConsulsResponse, error) {
	rsp, err := c.GetConsuls(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsulsResponse(rsp)
}

// CreateConsulWithBodyWithResponse request with arbitrary body returning *CreateConsulResponse
func (c *ClientWithResponses) CreateConsulWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConsulResponse, error) {
	rsp, err := c.CreateConsulWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConsulResponse(rsp)
}

func (c *ClientWithResponses) CreateConsulWithResponse(ctx context.Context, body CreateConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConsulResponse, error) {
	rsp, err := c.CreateConsul(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConsulResponse(rsp)
}

// DeleteConsulWithResponse request returning *DeleteConsulResponse
func (c *ClientWithResponses) DeleteConsulWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConsulResponse, error) {
	rsp, err := c.DeleteConsul(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsulResponse(rsp)
}

// GetConsulWithResponse request returning *GetConsulResponse
func (c *ClientWithResponses) GetConsulWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConsulResponse, error) {
	rsp, err := c.GetConsul(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsulResponse(rsp)
}

// ReplaceConsulWithBodyWithResponse request with arbitrary body returning *ReplaceConsulResponse
func (c *ClientWithResponses) ReplaceConsulWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceConsulResponse, error) {
	rsp, err := c.ReplaceConsulWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceConsulResponse(rsp)
}

func (c *ClientWithResponses) ReplaceConsulWithResponse(ctx context.Context, id string, body ReplaceConsulJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceConsulResponse, error) {
	rsp, err := c.ReplaceConsul(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceConsulResponse(rsp)
}

// GetServicesEndpointsWithResponse request returning *GetServicesEndpointsResponse
func (c *ClientWithResponses) GetServicesEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServicesEndpointsResponse, error) {
	rsp, err := c.GetServicesEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesEndpointsResponse(rsp)
}

// GetHaproxyEndpointsWithResponse request returning *GetHaproxyEndpointsResponse
func (c *ClientWithResponses) GetHaproxyEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHaproxyEndpointsResponse, error) {
	rsp, err := c.GetHaproxyEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHaproxyEndpointsResponse(rsp)
}

// GetConfigurationEndpointsWithResponse request returning *GetConfigurationEndpointsResponse
func (c *ClientWithResponses) GetConfigurationEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationEndpointsResponse, error) {
	rsp, err := c.GetConfigurationEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationEndpointsResponse(rsp)
}

// GetAcmeProvidersWithResponse request returning *GetAcmeProvidersResponse
func (c *ClientWithResponses) GetAcmeProvidersWithResponse(ctx context.Context, params *GetAcmeProvidersParams, reqEditors ...RequestEditorFn) (*GetAcmeProvidersResponse, error) {
	rsp, err := c.GetAcmeProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeProvidersResponse(rsp)
}

// CreateAcmeProviderWithBodyWithResponse request with arbitrary body returning *CreateAcmeProviderResponse
func (c *ClientWithResponses) CreateAcmeProviderWithBodyWithResponse(ctx context.Context, params *CreateAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAcmeProviderResponse, error) {
	rsp, err := c.CreateAcmeProviderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAcmeProviderResponse(rsp)
}

func (c *ClientWithResponses) CreateAcmeProviderWithResponse(ctx context.Context, params *CreateAcmeProviderParams, body CreateAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAcmeProviderResponse, error) {
	rsp, err := c.CreateAcmeProvider(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAcmeProviderResponse(rsp)
}

// DeleteAcmeProviderWithResponse request returning *DeleteAcmeProviderResponse
func (c *ClientWithResponses) DeleteAcmeProviderWithResponse(ctx context.Context, name string, params *DeleteAcmeProviderParams, reqEditors ...RequestEditorFn) (*DeleteAcmeProviderResponse, error) {
	rsp, err := c.DeleteAcmeProvider(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAcmeProviderResponse(rsp)
}

// GetAcmeProviderWithResponse request returning *GetAcmeProviderResponse
func (c *ClientWithResponses) GetAcmeProviderWithResponse(ctx context.Context, name string, params *GetAcmeProviderParams, reqEditors ...RequestEditorFn) (*GetAcmeProviderResponse, error) {
	rsp, err := c.GetAcmeProvider(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeProviderResponse(rsp)
}

// EditAcmeProviderWithBodyWithResponse request with arbitrary body returning *EditAcmeProviderResponse
func (c *ClientWithResponses) EditAcmeProviderWithBodyWithResponse(ctx context.Context, name string, params *EditAcmeProviderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditAcmeProviderResponse, error) {
	rsp, err := c.EditAcmeProviderWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditAcmeProviderResponse(rsp)
}

func (c *ClientWithResponses) EditAcmeProviderWithResponse(ctx context.Context, name string, params *EditAcmeProviderParams, body EditAcmeProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*EditAcmeProviderResponse, error) {
	rsp, err := c.EditAcmeProvider(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditAcmeProviderResponse(rsp)
}

// GetBackendsWithResponse request returning *GetBackendsResponse
func (c *ClientWithResponses) GetBackendsWithResponse(ctx context.Context, params *GetBackendsParams, reqEditors ...RequestEditorFn) (*GetBackendsResponse, error) {
	rsp, err := c.GetBackends(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackendsResponse(rsp)
}

// CreateBackendWithBodyWithResponse request with arbitrary body returning *CreateBackendResponse
func (c *ClientWithResponses) CreateBackendWithBodyWithResponse(ctx context.Context, params *CreateBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackendResponse, error) {
	rsp, err := c.CreateBackendWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateBackendWithResponse(ctx context.Context, params *CreateBackendParams, body CreateBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackendResponse, error) {
	rsp, err := c.CreateBackend(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackendResponse(rsp)
}

// DeleteBackendWithResponse request returning *DeleteBackendResponse
func (c *ClientWithResponses) DeleteBackendWithResponse(ctx context.Context, name string, params *DeleteBackendParams, reqEditors ...RequestEditorFn) (*DeleteBackendResponse, error) {
	rsp, err := c.DeleteBackend(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackendResponse(rsp)
}

// GetBackendWithResponse request returning *GetBackendResponse
func (c *ClientWithResponses) GetBackendWithResponse(ctx context.Context, name string, params *GetBackendParams, reqEditors ...RequestEditorFn) (*GetBackendResponse, error) {
	rsp, err := c.GetBackend(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackendResponse(rsp)
}

// ReplaceBackendWithBodyWithResponse request with arbitrary body returning *ReplaceBackendResponse
func (c *ClientWithResponses) ReplaceBackendWithBodyWithResponse(ctx context.Context, name string, params *ReplaceBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBackendResponse, error) {
	rsp, err := c.ReplaceBackendWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceBackendWithResponse(ctx context.Context, name string, params *ReplaceBackendParams, body ReplaceBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBackendResponse, error) {
	rsp, err := c.ReplaceBackend(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBackendResponse(rsp)
}

// GetAllAclBackendWithResponse request returning *GetAllAclBackendResponse
func (c *ClientWithResponses) GetAllAclBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclBackendParams, reqEditors ...RequestEditorFn) (*GetAllAclBackendResponse, error) {
	rsp, err := c.GetAllAclBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAclBackendResponse(rsp)
}

// ReplaceAllAclBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllAclBackendResponse
func (c *ClientWithResponses) ReplaceAllAclBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclBackendResponse, error) {
	rsp, err := c.ReplaceAllAclBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllAclBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclBackendParams, body ReplaceAllAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclBackendResponse, error) {
	rsp, err := c.ReplaceAllAclBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclBackendResponse(rsp)
}

// DeleteAclBackendWithResponse request returning *DeleteAclBackendResponse
func (c *ClientWithResponses) DeleteAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclBackendParams, reqEditors ...RequestEditorFn) (*DeleteAclBackendResponse, error) {
	rsp, err := c.DeleteAclBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAclBackendResponse(rsp)
}

// GetAclBackendWithResponse request returning *GetAclBackendResponse
func (c *ClientWithResponses) GetAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclBackendParams, reqEditors ...RequestEditorFn) (*GetAclBackendResponse, error) {
	rsp, err := c.GetAclBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAclBackendResponse(rsp)
}

// CreateAclBackendWithBodyWithResponse request with arbitrary body returning *CreateAclBackendResponse
func (c *ClientWithResponses) CreateAclBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclBackendResponse, error) {
	rsp, err := c.CreateAclBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclBackendParams, body CreateAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclBackendResponse, error) {
	rsp, err := c.CreateAclBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclBackendResponse(rsp)
}

// ReplaceAclBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAclBackendResponse
func (c *ClientWithResponses) ReplaceAclBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclBackendResponse, error) {
	rsp, err := c.ReplaceAclBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAclBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclBackendParams, body ReplaceAclBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclBackendResponse, error) {
	rsp, err := c.ReplaceAclBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclBackendResponse(rsp)
}

// GetAllFilterBackendWithResponse request returning *GetAllFilterBackendResponse
func (c *ClientWithResponses) GetAllFilterBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllFilterBackendParams, reqEditors ...RequestEditorFn) (*GetAllFilterBackendResponse, error) {
	rsp, err := c.GetAllFilterBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllFilterBackendResponse(rsp)
}

// ReplaceAllFilterBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllFilterBackendResponse
func (c *ClientWithResponses) ReplaceAllFilterBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllFilterBackendResponse, error) {
	rsp, err := c.ReplaceAllFilterBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllFilterBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllFilterBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterBackendParams, body ReplaceAllFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllFilterBackendResponse, error) {
	rsp, err := c.ReplaceAllFilterBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllFilterBackendResponse(rsp)
}

// DeleteFilterBackendWithResponse request returning *DeleteFilterBackendResponse
func (c *ClientWithResponses) DeleteFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteFilterBackendParams, reqEditors ...RequestEditorFn) (*DeleteFilterBackendResponse, error) {
	rsp, err := c.DeleteFilterBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFilterBackendResponse(rsp)
}

// GetFilterBackendWithResponse request returning *GetFilterBackendResponse
func (c *ClientWithResponses) GetFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetFilterBackendParams, reqEditors ...RequestEditorFn) (*GetFilterBackendResponse, error) {
	rsp, err := c.GetFilterBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilterBackendResponse(rsp)
}

// CreateFilterBackendWithBodyWithResponse request with arbitrary body returning *CreateFilterBackendResponse
func (c *ClientWithResponses) CreateFilterBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFilterBackendResponse, error) {
	rsp, err := c.CreateFilterBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFilterBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterBackendParams, body CreateFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFilterBackendResponse, error) {
	rsp, err := c.CreateFilterBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFilterBackendResponse(rsp)
}

// ReplaceFilterBackendWithBodyWithResponse request with arbitrary body returning *ReplaceFilterBackendResponse
func (c *ClientWithResponses) ReplaceFilterBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFilterBackendResponse, error) {
	rsp, err := c.ReplaceFilterBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFilterBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceFilterBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterBackendParams, body ReplaceFilterBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFilterBackendResponse, error) {
	rsp, err := c.ReplaceFilterBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFilterBackendResponse(rsp)
}

// GetAllHTTPAfterResponseRuleBackendWithResponse request returning *GetAllHTTPAfterResponseRuleBackendResponse
func (c *ClientWithResponses) GetAllHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.GetAllHTTPAfterResponseRuleBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPAfterResponseRuleBackendResponse(rsp)
}

// ReplaceAllHTTPAfterResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPAfterResponseRuleBackendResponse
func (c *ClientWithResponses) ReplaceAllHTTPAfterResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPAfterResponseRuleBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPAfterResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleBackendParams, body ReplaceAllHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPAfterResponseRuleBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPAfterResponseRuleBackendResponse(rsp)
}

// DeleteHTTPAfterResponseRuleBackendWithResponse request returning *DeleteHTTPAfterResponseRuleBackendResponse
func (c *ClientWithResponses) DeleteHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.DeleteHTTPAfterResponseRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPAfterResponseRuleBackendResponse(rsp)
}

// GetHTTPAfterResponseRuleBackendWithResponse request returning *GetHTTPAfterResponseRuleBackendResponse
func (c *ClientWithResponses) GetHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.GetHTTPAfterResponseRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPAfterResponseRuleBackendResponse(rsp)
}

// CreateHTTPAfterResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *CreateHTTPAfterResponseRuleBackendResponse
func (c *ClientWithResponses) CreateHTTPAfterResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPAfterResponseRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPAfterResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleBackendParams, body CreateHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPAfterResponseRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPAfterResponseRuleBackendResponse(rsp)
}

// ReplaceHTTPAfterResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPAfterResponseRuleBackendResponse
func (c *ClientWithResponses) ReplaceHTTPAfterResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPAfterResponseRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPAfterResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPAfterResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleBackendParams, body ReplaceHTTPAfterResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPAfterResponseRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPAfterResponseRuleBackendResponse(rsp)
}

// GetAllHTTPCheckBackendWithResponse request returning *GetAllHTTPCheckBackendResponse
func (c *ClientWithResponses) GetAllHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPCheckBackendResponse, error) {
	rsp, err := c.GetAllHTTPCheckBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPCheckBackendResponse(rsp)
}

// ReplaceAllHTTPCheckBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPCheckBackendResponse
func (c *ClientWithResponses) ReplaceAllHTTPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPCheckBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPCheckBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckBackendParams, body ReplaceAllHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPCheckBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPCheckBackendResponse(rsp)
}

// DeleteHTTPCheckBackendWithResponse request returning *DeleteHTTPCheckBackendResponse
func (c *ClientWithResponses) DeleteHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPCheckBackendResponse, error) {
	rsp, err := c.DeleteHTTPCheckBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPCheckBackendResponse(rsp)
}

// GetHTTPCheckBackendWithResponse request returning *GetHTTPCheckBackendResponse
func (c *ClientWithResponses) GetHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPCheckBackendResponse, error) {
	rsp, err := c.GetHTTPCheckBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPCheckBackendResponse(rsp)
}

// CreateHTTPCheckBackendWithBodyWithResponse request with arbitrary body returning *CreateHTTPCheckBackendResponse
func (c *ClientWithResponses) CreateHTTPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPCheckBackendResponse, error) {
	rsp, err := c.CreateHTTPCheckBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPCheckBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckBackendParams, body CreateHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPCheckBackendResponse, error) {
	rsp, err := c.CreateHTTPCheckBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPCheckBackendResponse(rsp)
}

// ReplaceHTTPCheckBackendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPCheckBackendResponse
func (c *ClientWithResponses) ReplaceHTTPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckBackendResponse, error) {
	rsp, err := c.ReplaceHTTPCheckBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPCheckBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckBackendParams, body ReplaceHTTPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckBackendResponse, error) {
	rsp, err := c.ReplaceHTTPCheckBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPCheckBackendResponse(rsp)
}

// GetAllHTTPErrorRuleBackendWithResponse request returning *GetAllHTTPErrorRuleBackendResponse
func (c *ClientWithResponses) GetAllHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.GetAllHTTPErrorRuleBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPErrorRuleBackendResponse(rsp)
}

// ReplaceAllHTTPErrorRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPErrorRuleBackendResponse
func (c *ClientWithResponses) ReplaceAllHTTPErrorRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPErrorRuleBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPErrorRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleBackendParams, body ReplaceAllHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPErrorRuleBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPErrorRuleBackendResponse(rsp)
}

// DeleteHTTPErrorRuleBackendWithResponse request returning *DeleteHTTPErrorRuleBackendResponse
func (c *ClientWithResponses) DeleteHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.DeleteHTTPErrorRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPErrorRuleBackendResponse(rsp)
}

// GetHTTPErrorRuleBackendWithResponse request returning *GetHTTPErrorRuleBackendResponse
func (c *ClientWithResponses) GetHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.GetHTTPErrorRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPErrorRuleBackendResponse(rsp)
}

// CreateHTTPErrorRuleBackendWithBodyWithResponse request with arbitrary body returning *CreateHTTPErrorRuleBackendResponse
func (c *ClientWithResponses) CreateHTTPErrorRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPErrorRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleBackendParams, body CreateHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPErrorRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorRuleBackendResponse(rsp)
}

// ReplaceHTTPErrorRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPErrorRuleBackendResponse
func (c *ClientWithResponses) ReplaceHTTPErrorRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPErrorRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPErrorRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleBackendParams, body ReplaceHTTPErrorRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPErrorRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorRuleBackendResponse(rsp)
}

// GetAllHTTPRequestRuleBackendWithResponse request returning *GetAllHTTPRequestRuleBackendResponse
func (c *ClientWithResponses) GetAllHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.GetAllHTTPRequestRuleBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPRequestRuleBackendResponse(rsp)
}

// ReplaceAllHTTPRequestRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPRequestRuleBackendResponse
func (c *ClientWithResponses) ReplaceAllHTTPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPRequestRuleBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPRequestRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleBackendParams, body ReplaceAllHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPRequestRuleBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPRequestRuleBackendResponse(rsp)
}

// DeleteHTTPRequestRuleBackendWithResponse request returning *DeleteHTTPRequestRuleBackendResponse
func (c *ClientWithResponses) DeleteHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.DeleteHTTPRequestRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPRequestRuleBackendResponse(rsp)
}

// GetHTTPRequestRuleBackendWithResponse request returning *GetHTTPRequestRuleBackendResponse
func (c *ClientWithResponses) GetHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.GetHTTPRequestRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPRequestRuleBackendResponse(rsp)
}

// CreateHTTPRequestRuleBackendWithBodyWithResponse request with arbitrary body returning *CreateHTTPRequestRuleBackendResponse
func (c *ClientWithResponses) CreateHTTPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPRequestRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRequestRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleBackendParams, body CreateHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPRequestRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRequestRuleBackendResponse(rsp)
}

// ReplaceHTTPRequestRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPRequestRuleBackendResponse
func (c *ClientWithResponses) ReplaceHTTPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPRequestRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPRequestRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleBackendParams, body ReplaceHTTPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPRequestRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPRequestRuleBackendResponse(rsp)
}

// GetAllHTTPResponseRuleBackendWithResponse request returning *GetAllHTTPResponseRuleBackendResponse
func (c *ClientWithResponses) GetAllHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.GetAllHTTPResponseRuleBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPResponseRuleBackendResponse(rsp)
}

// ReplaceAllHTTPResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPResponseRuleBackendResponse
func (c *ClientWithResponses) ReplaceAllHTTPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPResponseRuleBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleBackendParams, body ReplaceAllHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllHTTPResponseRuleBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPResponseRuleBackendResponse(rsp)
}

// DeleteHTTPResponseRuleBackendWithResponse request returning *DeleteHTTPResponseRuleBackendResponse
func (c *ClientWithResponses) DeleteHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.DeleteHTTPResponseRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPResponseRuleBackendResponse(rsp)
}

// GetHTTPResponseRuleBackendWithResponse request returning *GetHTTPResponseRuleBackendResponse
func (c *ClientWithResponses) GetHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.GetHTTPResponseRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPResponseRuleBackendResponse(rsp)
}

// CreateHTTPResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *CreateHTTPResponseRuleBackendResponse
func (c *ClientWithResponses) CreateHTTPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPResponseRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleBackendParams, body CreateHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.CreateHTTPResponseRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPResponseRuleBackendResponse(rsp)
}

// ReplaceHTTPResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPResponseRuleBackendResponse
func (c *ClientWithResponses) ReplaceHTTPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPResponseRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleBackendParams, body ReplaceHTTPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceHTTPResponseRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPResponseRuleBackendResponse(rsp)
}

// GetAllLogTargetBackendWithResponse request returning *GetAllLogTargetBackendResponse
func (c *ClientWithResponses) GetAllLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetBackendParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetBackendResponse, error) {
	rsp, err := c.GetAllLogTargetBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLogTargetBackendResponse(rsp)
}

// ReplaceAllLogTargetBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllLogTargetBackendResponse
func (c *ClientWithResponses) ReplaceAllLogTargetBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetBackendResponse, error) {
	rsp, err := c.ReplaceAllLogTargetBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetBackendParams, body ReplaceAllLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetBackendResponse, error) {
	rsp, err := c.ReplaceAllLogTargetBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetBackendResponse(rsp)
}

// DeleteLogTargetBackendWithResponse request returning *DeleteLogTargetBackendResponse
func (c *ClientWithResponses) DeleteLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetBackendParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetBackendResponse, error) {
	rsp, err := c.DeleteLogTargetBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogTargetBackendResponse(rsp)
}

// GetLogTargetBackendWithResponse request returning *GetLogTargetBackendResponse
func (c *ClientWithResponses) GetLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetBackendParams, reqEditors ...RequestEditorFn) (*GetLogTargetBackendResponse, error) {
	rsp, err := c.GetLogTargetBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogTargetBackendResponse(rsp)
}

// CreateLogTargetBackendWithBodyWithResponse request with arbitrary body returning *CreateLogTargetBackendResponse
func (c *ClientWithResponses) CreateLogTargetBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetBackendResponse, error) {
	rsp, err := c.CreateLogTargetBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetBackendParams, body CreateLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetBackendResponse, error) {
	rsp, err := c.CreateLogTargetBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetBackendResponse(rsp)
}

// ReplaceLogTargetBackendWithBodyWithResponse request with arbitrary body returning *ReplaceLogTargetBackendResponse
func (c *ClientWithResponses) ReplaceLogTargetBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetBackendResponse, error) {
	rsp, err := c.ReplaceLogTargetBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLogTargetBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetBackendParams, body ReplaceLogTargetBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetBackendResponse, error) {
	rsp, err := c.ReplaceLogTargetBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetBackendResponse(rsp)
}

// GetServerSwitchingRulesWithResponse request returning *GetServerSwitchingRulesResponse
func (c *ClientWithResponses) GetServerSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *GetServerSwitchingRulesParams, reqEditors ...RequestEditorFn) (*GetServerSwitchingRulesResponse, error) {
	rsp, err := c.GetServerSwitchingRules(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerSwitchingRulesResponse(rsp)
}

// ReplaceServerSwitchingRulesWithBodyWithResponse request with arbitrary body returning *ReplaceServerSwitchingRulesResponse
func (c *ClientWithResponses) ReplaceServerSwitchingRulesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRulesResponse, error) {
	rsp, err := c.ReplaceServerSwitchingRulesWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerSwitchingRulesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceServerSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceServerSwitchingRulesParams, body ReplaceServerSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRulesResponse, error) {
	rsp, err := c.ReplaceServerSwitchingRules(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerSwitchingRulesResponse(rsp)
}

// DeleteServerSwitchingRuleWithResponse request returning *DeleteServerSwitchingRuleResponse
func (c *ClientWithResponses) DeleteServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*DeleteServerSwitchingRuleResponse, error) {
	rsp, err := c.DeleteServerSwitchingRule(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServerSwitchingRuleResponse(rsp)
}

// GetServerSwitchingRuleWithResponse request returning *GetServerSwitchingRuleResponse
func (c *ClientWithResponses) GetServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *GetServerSwitchingRuleParams, reqEditors ...RequestEditorFn) (*GetServerSwitchingRuleResponse, error) {
	rsp, err := c.GetServerSwitchingRule(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerSwitchingRuleResponse(rsp)
}

// CreateServerSwitchingRuleWithBodyWithResponse request with arbitrary body returning *CreateServerSwitchingRuleResponse
func (c *ClientWithResponses) CreateServerSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerSwitchingRuleResponse, error) {
	rsp, err := c.CreateServerSwitchingRuleWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerSwitchingRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateServerSwitchingRuleParams, body CreateServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerSwitchingRuleResponse, error) {
	rsp, err := c.CreateServerSwitchingRule(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerSwitchingRuleResponse(rsp)
}

// ReplaceServerSwitchingRuleWithBodyWithResponse request with arbitrary body returning *ReplaceServerSwitchingRuleResponse
func (c *ClientWithResponses) ReplaceServerSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRuleResponse, error) {
	rsp, err := c.ReplaceServerSwitchingRuleWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerSwitchingRuleResponse(rsp)
}

func (c *ClientWithResponses) ReplaceServerSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceServerSwitchingRuleParams, body ReplaceServerSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerSwitchingRuleResponse, error) {
	rsp, err := c.ReplaceServerSwitchingRule(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerSwitchingRuleResponse(rsp)
}

// GetServerTemplatesWithResponse request returning *GetServerTemplatesResponse
func (c *ClientWithResponses) GetServerTemplatesWithResponse(ctx context.Context, parentName ParentName, params *GetServerTemplatesParams, reqEditors ...RequestEditorFn) (*GetServerTemplatesResponse, error) {
	rsp, err := c.GetServerTemplates(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerTemplatesResponse(rsp)
}

// CreateServerTemplateWithBodyWithResponse request with arbitrary body returning *CreateServerTemplateResponse
func (c *ClientWithResponses) CreateServerTemplateWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerTemplateResponse, error) {
	rsp, err := c.CreateServerTemplateWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateServerTemplateWithResponse(ctx context.Context, parentName ParentName, params *CreateServerTemplateParams, body CreateServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerTemplateResponse, error) {
	rsp, err := c.CreateServerTemplate(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerTemplateResponse(rsp)
}

// DeleteServerTemplateWithResponse request returning *DeleteServerTemplateResponse
func (c *ClientWithResponses) DeleteServerTemplateWithResponse(ctx context.Context, parentName ParentName, prefix string, params *DeleteServerTemplateParams, reqEditors ...RequestEditorFn) (*DeleteServerTemplateResponse, error) {
	rsp, err := c.DeleteServerTemplate(ctx, parentName, prefix, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServerTemplateResponse(rsp)
}

// GetServerTemplateWithResponse request returning *GetServerTemplateResponse
func (c *ClientWithResponses) GetServerTemplateWithResponse(ctx context.Context, parentName ParentName, prefix string, params *GetServerTemplateParams, reqEditors ...RequestEditorFn) (*GetServerTemplateResponse, error) {
	rsp, err := c.GetServerTemplate(ctx, parentName, prefix, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerTemplateResponse(rsp)
}

// ReplaceServerTemplateWithBodyWithResponse request with arbitrary body returning *ReplaceServerTemplateResponse
func (c *ClientWithResponses) ReplaceServerTemplateWithBodyWithResponse(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerTemplateResponse, error) {
	rsp, err := c.ReplaceServerTemplateWithBody(ctx, parentName, prefix, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerTemplateResponse(rsp)
}

func (c *ClientWithResponses) ReplaceServerTemplateWithResponse(ctx context.Context, parentName ParentName, prefix string, params *ReplaceServerTemplateParams, body ReplaceServerTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerTemplateResponse, error) {
	rsp, err := c.ReplaceServerTemplate(ctx, parentName, prefix, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerTemplateResponse(rsp)
}

// GetAllServerBackendWithResponse request returning *GetAllServerBackendResponse
func (c *ClientWithResponses) GetAllServerBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllServerBackendParams, reqEditors ...RequestEditorFn) (*GetAllServerBackendResponse, error) {
	rsp, err := c.GetAllServerBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllServerBackendResponse(rsp)
}

// CreateServerBackendWithBodyWithResponse request with arbitrary body returning *CreateServerBackendResponse
func (c *ClientWithResponses) CreateServerBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerBackendResponse, error) {
	rsp, err := c.CreateServerBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateServerBackendWithResponse(ctx context.Context, parentName ParentName, params *CreateServerBackendParams, body CreateServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerBackendResponse, error) {
	rsp, err := c.CreateServerBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerBackendResponse(rsp)
}

// DeleteServerBackendWithResponse request returning *DeleteServerBackendResponse
func (c *ClientWithResponses) DeleteServerBackendWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteServerBackendParams, reqEditors ...RequestEditorFn) (*DeleteServerBackendResponse, error) {
	rsp, err := c.DeleteServerBackend(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServerBackendResponse(rsp)
}

// GetServerBackendWithResponse request returning *GetServerBackendResponse
func (c *ClientWithResponses) GetServerBackendWithResponse(ctx context.Context, parentName ParentName, name string, params *GetServerBackendParams, reqEditors ...RequestEditorFn) (*GetServerBackendResponse, error) {
	rsp, err := c.GetServerBackend(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerBackendResponse(rsp)
}

// ReplaceServerBackendWithBodyWithResponse request with arbitrary body returning *ReplaceServerBackendResponse
func (c *ClientWithResponses) ReplaceServerBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerBackendResponse, error) {
	rsp, err := c.ReplaceServerBackendWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceServerBackendWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerBackendParams, body ReplaceServerBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerBackendResponse, error) {
	rsp, err := c.ReplaceServerBackend(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerBackendResponse(rsp)
}

// GetStickRulesWithResponse request returning *GetStickRulesResponse
func (c *ClientWithResponses) GetStickRulesWithResponse(ctx context.Context, parentName ParentName, params *GetStickRulesParams, reqEditors ...RequestEditorFn) (*GetStickRulesResponse, error) {
	rsp, err := c.GetStickRules(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStickRulesResponse(rsp)
}

// ReplaceStickRulesWithBodyWithResponse request with arbitrary body returning *ReplaceStickRulesResponse
func (c *ClientWithResponses) ReplaceStickRulesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStickRulesResponse, error) {
	rsp, err := c.ReplaceStickRulesWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStickRulesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceStickRulesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceStickRulesParams, body ReplaceStickRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStickRulesResponse, error) {
	rsp, err := c.ReplaceStickRules(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStickRulesResponse(rsp)
}

// DeleteStickRuleWithResponse request returning *DeleteStickRuleResponse
func (c *ClientWithResponses) DeleteStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteStickRuleParams, reqEditors ...RequestEditorFn) (*DeleteStickRuleResponse, error) {
	rsp, err := c.DeleteStickRule(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStickRuleResponse(rsp)
}

// GetStickRuleWithResponse request returning *GetStickRuleResponse
func (c *ClientWithResponses) GetStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *GetStickRuleParams, reqEditors ...RequestEditorFn) (*GetStickRuleResponse, error) {
	rsp, err := c.GetStickRule(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStickRuleResponse(rsp)
}

// CreateStickRuleWithBodyWithResponse request with arbitrary body returning *CreateStickRuleResponse
func (c *ClientWithResponses) CreateStickRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStickRuleResponse, error) {
	rsp, err := c.CreateStickRuleWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStickRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateStickRuleParams, body CreateStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStickRuleResponse, error) {
	rsp, err := c.CreateStickRule(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStickRuleResponse(rsp)
}

// ReplaceStickRuleWithBodyWithResponse request with arbitrary body returning *ReplaceStickRuleResponse
func (c *ClientWithResponses) ReplaceStickRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStickRuleResponse, error) {
	rsp, err := c.ReplaceStickRuleWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStickRuleResponse(rsp)
}

func (c *ClientWithResponses) ReplaceStickRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceStickRuleParams, body ReplaceStickRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStickRuleResponse, error) {
	rsp, err := c.ReplaceStickRule(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStickRuleResponse(rsp)
}

// GetAllTCPCheckBackendWithResponse request returning *GetAllTCPCheckBackendResponse
func (c *ClientWithResponses) GetAllTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetAllTCPCheckBackendResponse, error) {
	rsp, err := c.GetAllTCPCheckBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTCPCheckBackendResponse(rsp)
}

// ReplaceAllTCPCheckBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllTCPCheckBackendResponse
func (c *ClientWithResponses) ReplaceAllTCPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckBackendResponse, error) {
	rsp, err := c.ReplaceAllTCPCheckBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPCheckBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckBackendParams, body ReplaceAllTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckBackendResponse, error) {
	rsp, err := c.ReplaceAllTCPCheckBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPCheckBackendResponse(rsp)
}

// DeleteTCPCheckBackendWithResponse request returning *DeleteTCPCheckBackendResponse
func (c *ClientWithResponses) DeleteTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*DeleteTCPCheckBackendResponse, error) {
	rsp, err := c.DeleteTCPCheckBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPCheckBackendResponse(rsp)
}

// GetTCPCheckBackendWithResponse request returning *GetTCPCheckBackendResponse
func (c *ClientWithResponses) GetTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckBackendParams, reqEditors ...RequestEditorFn) (*GetTCPCheckBackendResponse, error) {
	rsp, err := c.GetTCPCheckBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPCheckBackendResponse(rsp)
}

// CreateTCPCheckBackendWithBodyWithResponse request with arbitrary body returning *CreateTCPCheckBackendResponse
func (c *ClientWithResponses) CreateTCPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPCheckBackendResponse, error) {
	rsp, err := c.CreateTCPCheckBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPCheckBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckBackendParams, body CreateTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPCheckBackendResponse, error) {
	rsp, err := c.CreateTCPCheckBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPCheckBackendResponse(rsp)
}

// ReplaceTCPCheckBackendWithBodyWithResponse request with arbitrary body returning *ReplaceTCPCheckBackendResponse
func (c *ClientWithResponses) ReplaceTCPCheckBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckBackendResponse, error) {
	rsp, err := c.ReplaceTCPCheckBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPCheckBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTCPCheckBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckBackendParams, body ReplaceTCPCheckBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckBackendResponse, error) {
	rsp, err := c.ReplaceTCPCheckBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPCheckBackendResponse(rsp)
}

// GetAllTCPRequestRuleBackendWithResponse request returning *GetAllTCPRequestRuleBackendResponse
func (c *ClientWithResponses) GetAllTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllTCPRequestRuleBackendResponse, error) {
	rsp, err := c.GetAllTCPRequestRuleBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTCPRequestRuleBackendResponse(rsp)
}

// ReplaceAllTCPRequestRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllTCPRequestRuleBackendResponse
func (c *ClientWithResponses) ReplaceAllTCPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllTCPRequestRuleBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPRequestRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleBackendParams, body ReplaceAllTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllTCPRequestRuleBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPRequestRuleBackendResponse(rsp)
}

// DeleteTCPRequestRuleBackendWithResponse request returning *DeleteTCPRequestRuleBackendResponse
func (c *ClientWithResponses) DeleteTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteTCPRequestRuleBackendResponse, error) {
	rsp, err := c.DeleteTCPRequestRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPRequestRuleBackendResponse(rsp)
}

// GetTCPRequestRuleBackendWithResponse request returning *GetTCPRequestRuleBackendResponse
func (c *ClientWithResponses) GetTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleBackendParams, reqEditors ...RequestEditorFn) (*GetTCPRequestRuleBackendResponse, error) {
	rsp, err := c.GetTCPRequestRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPRequestRuleBackendResponse(rsp)
}

// CreateTCPRequestRuleBackendWithBodyWithResponse request with arbitrary body returning *CreateTCPRequestRuleBackendResponse
func (c *ClientWithResponses) CreateTCPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleBackendResponse, error) {
	rsp, err := c.CreateTCPRequestRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRequestRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleBackendParams, body CreateTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleBackendResponse, error) {
	rsp, err := c.CreateTCPRequestRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRequestRuleBackendResponse(rsp)
}

// ReplaceTCPRequestRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceTCPRequestRuleBackendResponse
func (c *ClientWithResponses) ReplaceTCPRequestRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceTCPRequestRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPRequestRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTCPRequestRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleBackendParams, body ReplaceTCPRequestRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleBackendResponse, error) {
	rsp, err := c.ReplaceTCPRequestRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPRequestRuleBackendResponse(rsp)
}

// GetAllTCPResponseRuleBackendWithResponse request returning *GetAllTCPResponseRuleBackendResponse
func (c *ClientWithResponses) GetAllTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetAllTCPResponseRuleBackendResponse, error) {
	rsp, err := c.GetAllTCPResponseRuleBackend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTCPResponseRuleBackendResponse(rsp)
}

// ReplaceAllTCPResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceAllTCPResponseRuleBackendResponse
func (c *ClientWithResponses) ReplaceAllTCPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllTCPResponseRuleBackendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleBackendParams, body ReplaceAllTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceAllTCPResponseRuleBackend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPResponseRuleBackendResponse(rsp)
}

// DeleteTCPResponseRuleBackendWithResponse request returning *DeleteTCPResponseRuleBackendResponse
func (c *ClientWithResponses) DeleteTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*DeleteTCPResponseRuleBackendResponse, error) {
	rsp, err := c.DeleteTCPResponseRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPResponseRuleBackendResponse(rsp)
}

// GetTCPResponseRuleBackendWithResponse request returning *GetTCPResponseRuleBackendResponse
func (c *ClientWithResponses) GetTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleBackendParams, reqEditors ...RequestEditorFn) (*GetTCPResponseRuleBackendResponse, error) {
	rsp, err := c.GetTCPResponseRuleBackend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPResponseRuleBackendResponse(rsp)
}

// CreateTCPResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *CreateTCPResponseRuleBackendResponse
func (c *ClientWithResponses) CreateTCPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleBackendResponse, error) {
	rsp, err := c.CreateTCPResponseRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleBackendParams, body CreateTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleBackendResponse, error) {
	rsp, err := c.CreateTCPResponseRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPResponseRuleBackendResponse(rsp)
}

// ReplaceTCPResponseRuleBackendWithBodyWithResponse request with arbitrary body returning *ReplaceTCPResponseRuleBackendResponse
func (c *ClientWithResponses) ReplaceTCPResponseRuleBackendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceTCPResponseRuleBackendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPResponseRuleBackendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTCPResponseRuleBackendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleBackendParams, body ReplaceTCPResponseRuleBackendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleBackendResponse, error) {
	rsp, err := c.ReplaceTCPResponseRuleBackend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPResponseRuleBackendResponse(rsp)
}

// GetCachesWithResponse request returning *GetCachesResponse
func (c *ClientWithResponses) GetCachesWithResponse(ctx context.Context, params *GetCachesParams, reqEditors ...RequestEditorFn) (*GetCachesResponse, error) {
	rsp, err := c.GetCaches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCachesResponse(rsp)
}

// CreateCacheWithBodyWithResponse request with arbitrary body returning *CreateCacheResponse
func (c *ClientWithResponses) CreateCacheWithBodyWithResponse(ctx context.Context, params *CreateCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCacheResponse, error) {
	rsp, err := c.CreateCacheWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCacheResponse(rsp)
}

func (c *ClientWithResponses) CreateCacheWithResponse(ctx context.Context, params *CreateCacheParams, body CreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCacheResponse, error) {
	rsp, err := c.CreateCache(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCacheResponse(rsp)
}

// DeleteCacheWithResponse request returning *DeleteCacheResponse
func (c *ClientWithResponses) DeleteCacheWithResponse(ctx context.Context, name string, params *DeleteCacheParams, reqEditors ...RequestEditorFn) (*DeleteCacheResponse, error) {
	rsp, err := c.DeleteCache(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCacheResponse(rsp)
}

// GetCacheWithResponse request returning *GetCacheResponse
func (c *ClientWithResponses) GetCacheWithResponse(ctx context.Context, name string, params *GetCacheParams, reqEditors ...RequestEditorFn) (*GetCacheResponse, error) {
	rsp, err := c.GetCache(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCacheResponse(rsp)
}

// ReplaceCacheWithBodyWithResponse request with arbitrary body returning *ReplaceCacheResponse
func (c *ClientWithResponses) ReplaceCacheWithBodyWithResponse(ctx context.Context, name string, params *ReplaceCacheParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCacheResponse, error) {
	rsp, err := c.ReplaceCacheWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCacheResponse(rsp)
}

func (c *ClientWithResponses) ReplaceCacheWithResponse(ctx context.Context, name string, params *ReplaceCacheParams, body ReplaceCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCacheResponse, error) {
	rsp, err := c.ReplaceCache(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCacheResponse(rsp)
}

// GetCrtLoadsWithResponse request returning *GetCrtLoadsResponse
func (c *ClientWithResponses) GetCrtLoadsWithResponse(ctx context.Context, params *GetCrtLoadsParams, reqEditors ...RequestEditorFn) (*GetCrtLoadsResponse, error) {
	rsp, err := c.GetCrtLoads(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCrtLoadsResponse(rsp)
}

// CreateCrtLoadWithBodyWithResponse request with arbitrary body returning *CreateCrtLoadResponse
func (c *ClientWithResponses) CreateCrtLoadWithBodyWithResponse(ctx context.Context, params *CreateCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCrtLoadResponse, error) {
	rsp, err := c.CreateCrtLoadWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCrtLoadResponse(rsp)
}

func (c *ClientWithResponses) CreateCrtLoadWithResponse(ctx context.Context, params *CreateCrtLoadParams, body CreateCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCrtLoadResponse, error) {
	rsp, err := c.CreateCrtLoad(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCrtLoadResponse(rsp)
}

// DeleteCrtLoadWithResponse request returning *DeleteCrtLoadResponse
func (c *ClientWithResponses) DeleteCrtLoadWithResponse(ctx context.Context, certificate string, params *DeleteCrtLoadParams, reqEditors ...RequestEditorFn) (*DeleteCrtLoadResponse, error) {
	rsp, err := c.DeleteCrtLoad(ctx, certificate, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCrtLoadResponse(rsp)
}

// GetCrtLoadWithResponse request returning *GetCrtLoadResponse
func (c *ClientWithResponses) GetCrtLoadWithResponse(ctx context.Context, certificate string, params *GetCrtLoadParams, reqEditors ...RequestEditorFn) (*GetCrtLoadResponse, error) {
	rsp, err := c.GetCrtLoad(ctx, certificate, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCrtLoadResponse(rsp)
}

// ReplaceCrtLoadWithBodyWithResponse request with arbitrary body returning *ReplaceCrtLoadResponse
func (c *ClientWithResponses) ReplaceCrtLoadWithBodyWithResponse(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCrtLoadResponse, error) {
	rsp, err := c.ReplaceCrtLoadWithBody(ctx, certificate, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCrtLoadResponse(rsp)
}

func (c *ClientWithResponses) ReplaceCrtLoadWithResponse(ctx context.Context, certificate string, params *ReplaceCrtLoadParams, body ReplaceCrtLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCrtLoadResponse, error) {
	rsp, err := c.ReplaceCrtLoad(ctx, certificate, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCrtLoadResponse(rsp)
}

// GetCrtStoresWithResponse request returning *GetCrtStoresResponse
func (c *ClientWithResponses) GetCrtStoresWithResponse(ctx context.Context, params *GetCrtStoresParams, reqEditors ...RequestEditorFn) (*GetCrtStoresResponse, error) {
	rsp, err := c.GetCrtStores(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCrtStoresResponse(rsp)
}

// CreateCrtStoreWithBodyWithResponse request with arbitrary body returning *CreateCrtStoreResponse
func (c *ClientWithResponses) CreateCrtStoreWithBodyWithResponse(ctx context.Context, params *CreateCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCrtStoreResponse, error) {
	rsp, err := c.CreateCrtStoreWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCrtStoreResponse(rsp)
}

func (c *ClientWithResponses) CreateCrtStoreWithResponse(ctx context.Context, params *CreateCrtStoreParams, body CreateCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCrtStoreResponse, error) {
	rsp, err := c.CreateCrtStore(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCrtStoreResponse(rsp)
}

// DeleteCrtStoreWithResponse request returning *DeleteCrtStoreResponse
func (c *ClientWithResponses) DeleteCrtStoreWithResponse(ctx context.Context, name string, params *DeleteCrtStoreParams, reqEditors ...RequestEditorFn) (*DeleteCrtStoreResponse, error) {
	rsp, err := c.DeleteCrtStore(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCrtStoreResponse(rsp)
}

// GetCrtStoreWithResponse request returning *GetCrtStoreResponse
func (c *ClientWithResponses) GetCrtStoreWithResponse(ctx context.Context, name string, params *GetCrtStoreParams, reqEditors ...RequestEditorFn) (*GetCrtStoreResponse, error) {
	rsp, err := c.GetCrtStore(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCrtStoreResponse(rsp)
}

// EditCrtStoreWithBodyWithResponse request with arbitrary body returning *EditCrtStoreResponse
func (c *ClientWithResponses) EditCrtStoreWithBodyWithResponse(ctx context.Context, name string, params *EditCrtStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCrtStoreResponse, error) {
	rsp, err := c.EditCrtStoreWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditCrtStoreResponse(rsp)
}

func (c *ClientWithResponses) EditCrtStoreWithResponse(ctx context.Context, name string, params *EditCrtStoreParams, body EditCrtStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCrtStoreResponse, error) {
	rsp, err := c.EditCrtStore(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditCrtStoreResponse(rsp)
}

// GetDefaultsSectionsWithResponse request returning *GetDefaultsSectionsResponse
func (c *ClientWithResponses) GetDefaultsSectionsWithResponse(ctx context.Context, params *GetDefaultsSectionsParams, reqEditors ...RequestEditorFn) (*GetDefaultsSectionsResponse, error) {
	rsp, err := c.GetDefaultsSections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultsSectionsResponse(rsp)
}

// AddDefaultsSectionWithBodyWithResponse request with arbitrary body returning *AddDefaultsSectionResponse
func (c *ClientWithResponses) AddDefaultsSectionWithBodyWithResponse(ctx context.Context, params *AddDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultsSectionResponse, error) {
	rsp, err := c.AddDefaultsSectionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDefaultsSectionResponse(rsp)
}

func (c *ClientWithResponses) AddDefaultsSectionWithResponse(ctx context.Context, params *AddDefaultsSectionParams, body AddDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultsSectionResponse, error) {
	rsp, err := c.AddDefaultsSection(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDefaultsSectionResponse(rsp)
}

// CreateDefaultsSectionWithBodyWithResponse request with arbitrary body returning *CreateDefaultsSectionResponse
func (c *ClientWithResponses) CreateDefaultsSectionWithBodyWithResponse(ctx context.Context, params *CreateDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDefaultsSectionResponse, error) {
	rsp, err := c.CreateDefaultsSectionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDefaultsSectionResponse(rsp)
}

func (c *ClientWithResponses) CreateDefaultsSectionWithResponse(ctx context.Context, params *CreateDefaultsSectionParams, body CreateDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDefaultsSectionResponse, error) {
	rsp, err := c.CreateDefaultsSection(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDefaultsSectionResponse(rsp)
}

// DeleteDefaultsSectionWithResponse request returning *DeleteDefaultsSectionResponse
func (c *ClientWithResponses) DeleteDefaultsSectionWithResponse(ctx context.Context, name string, params *DeleteDefaultsSectionParams, reqEditors ...RequestEditorFn) (*DeleteDefaultsSectionResponse, error) {
	rsp, err := c.DeleteDefaultsSection(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDefaultsSectionResponse(rsp)
}

// GetDefaultsSectionWithResponse request returning *GetDefaultsSectionResponse
func (c *ClientWithResponses) GetDefaultsSectionWithResponse(ctx context.Context, name string, params *GetDefaultsSectionParams, reqEditors ...RequestEditorFn) (*GetDefaultsSectionResponse, error) {
	rsp, err := c.GetDefaultsSection(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultsSectionResponse(rsp)
}

// ReplaceDefaultsSectionWithBodyWithResponse request with arbitrary body returning *ReplaceDefaultsSectionResponse
func (c *ClientWithResponses) ReplaceDefaultsSectionWithBodyWithResponse(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDefaultsSectionResponse, error) {
	rsp, err := c.ReplaceDefaultsSectionWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDefaultsSectionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceDefaultsSectionWithResponse(ctx context.Context, name string, params *ReplaceDefaultsSectionParams, body ReplaceDefaultsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDefaultsSectionResponse, error) {
	rsp, err := c.ReplaceDefaultsSection(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDefaultsSectionResponse(rsp)
}

// GetAllAclDefaultsWithResponse request returning *GetAllAclDefaultsResponse
func (c *ClientWithResponses) GetAllAclDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllAclDefaultsResponse, error) {
	rsp, err := c.GetAllAclDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAclDefaultsResponse(rsp)
}

// ReplaceAllAclDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllAclDefaultsResponse
func (c *ClientWithResponses) ReplaceAllAclDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclDefaultsResponse, error) {
	rsp, err := c.ReplaceAllAclDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllAclDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclDefaultsParams, body ReplaceAllAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclDefaultsResponse, error) {
	rsp, err := c.ReplaceAllAclDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclDefaultsResponse(rsp)
}

// DeleteAclDefaultsWithResponse request returning *DeleteAclDefaultsResponse
func (c *ClientWithResponses) DeleteAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteAclDefaultsResponse, error) {
	rsp, err := c.DeleteAclDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAclDefaultsResponse(rsp)
}

// GetAclDefaultsWithResponse request returning *GetAclDefaultsResponse
func (c *ClientWithResponses) GetAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclDefaultsParams, reqEditors ...RequestEditorFn) (*GetAclDefaultsResponse, error) {
	rsp, err := c.GetAclDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAclDefaultsResponse(rsp)
}

// CreateAclDefaultsWithBodyWithResponse request with arbitrary body returning *CreateAclDefaultsResponse
func (c *ClientWithResponses) CreateAclDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclDefaultsResponse, error) {
	rsp, err := c.CreateAclDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclDefaultsParams, body CreateAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclDefaultsResponse, error) {
	rsp, err := c.CreateAclDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclDefaultsResponse(rsp)
}

// ReplaceAclDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAclDefaultsResponse
func (c *ClientWithResponses) ReplaceAclDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclDefaultsResponse, error) {
	rsp, err := c.ReplaceAclDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAclDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclDefaultsParams, body ReplaceAclDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclDefaultsResponse, error) {
	rsp, err := c.ReplaceAclDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclDefaultsResponse(rsp)
}

// GetAllHTTPAfterResponseRuleDefaultsWithResponse request returning *GetAllHTTPAfterResponseRuleDefaultsResponse
func (c *ClientWithResponses) GetAllHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.GetAllHTTPAfterResponseRuleDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPAfterResponseRuleDefaultsResponse(rsp)
}

// ReplaceAllHTTPAfterResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPAfterResponseRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceAllHTTPAfterResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPAfterResponseRuleDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPAfterResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleDefaultsParams, body ReplaceAllHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPAfterResponseRuleDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPAfterResponseRuleDefaultsResponse(rsp)
}

// DeleteHTTPAfterResponseRuleDefaultsWithResponse request returning *DeleteHTTPAfterResponseRuleDefaultsResponse
func (c *ClientWithResponses) DeleteHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.DeleteHTTPAfterResponseRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPAfterResponseRuleDefaultsResponse(rsp)
}

// GetHTTPAfterResponseRuleDefaultsWithResponse request returning *GetHTTPAfterResponseRuleDefaultsResponse
func (c *ClientWithResponses) GetHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.GetHTTPAfterResponseRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPAfterResponseRuleDefaultsResponse(rsp)
}

// CreateHTTPAfterResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *CreateHTTPAfterResponseRuleDefaultsResponse
func (c *ClientWithResponses) CreateHTTPAfterResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPAfterResponseRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPAfterResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleDefaultsParams, body CreateHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPAfterResponseRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPAfterResponseRuleDefaultsResponse(rsp)
}

// ReplaceHTTPAfterResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPAfterResponseRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceHTTPAfterResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPAfterResponseRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPAfterResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPAfterResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleDefaultsParams, body ReplaceHTTPAfterResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPAfterResponseRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPAfterResponseRuleDefaultsResponse(rsp)
}

// GetAllHTTPCheckDefaultsWithResponse request returning *GetAllHTTPCheckDefaultsResponse
func (c *ClientWithResponses) GetAllHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPCheckDefaultsResponse, error) {
	rsp, err := c.GetAllHTTPCheckDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPCheckDefaultsResponse(rsp)
}

// ReplaceAllHTTPCheckDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPCheckDefaultsResponse
func (c *ClientWithResponses) ReplaceAllHTTPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPCheckDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPCheckDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPCheckDefaultsParams, body ReplaceAllHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPCheckDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPCheckDefaultsResponse(rsp)
}

// DeleteHTTPCheckDefaultsWithResponse request returning *DeleteHTTPCheckDefaultsResponse
func (c *ClientWithResponses) DeleteHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPCheckDefaultsResponse, error) {
	rsp, err := c.DeleteHTTPCheckDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPCheckDefaultsResponse(rsp)
}

// GetHTTPCheckDefaultsWithResponse request returning *GetHTTPCheckDefaultsResponse
func (c *ClientWithResponses) GetHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPCheckDefaultsResponse, error) {
	rsp, err := c.GetHTTPCheckDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPCheckDefaultsResponse(rsp)
}

// CreateHTTPCheckDefaultsWithBodyWithResponse request with arbitrary body returning *CreateHTTPCheckDefaultsResponse
func (c *ClientWithResponses) CreateHTTPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPCheckDefaultsResponse, error) {
	rsp, err := c.CreateHTTPCheckDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPCheckDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPCheckDefaultsParams, body CreateHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPCheckDefaultsResponse, error) {
	rsp, err := c.CreateHTTPCheckDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPCheckDefaultsResponse(rsp)
}

// ReplaceHTTPCheckDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPCheckDefaultsResponse
func (c *ClientWithResponses) ReplaceHTTPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPCheckDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPCheckDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPCheckDefaultsParams, body ReplaceHTTPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPCheckDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPCheckDefaultsResponse(rsp)
}

// GetAllHTTPErrorRuleDefaultsWithResponse request returning *GetAllHTTPErrorRuleDefaultsResponse
func (c *ClientWithResponses) GetAllHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.GetAllHTTPErrorRuleDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPErrorRuleDefaultsResponse(rsp)
}

// ReplaceAllHTTPErrorRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPErrorRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceAllHTTPErrorRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPErrorRuleDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPErrorRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleDefaultsParams, body ReplaceAllHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPErrorRuleDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPErrorRuleDefaultsResponse(rsp)
}

// DeleteHTTPErrorRuleDefaultsWithResponse request returning *DeleteHTTPErrorRuleDefaultsResponse
func (c *ClientWithResponses) DeleteHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.DeleteHTTPErrorRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPErrorRuleDefaultsResponse(rsp)
}

// GetHTTPErrorRuleDefaultsWithResponse request returning *GetHTTPErrorRuleDefaultsResponse
func (c *ClientWithResponses) GetHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.GetHTTPErrorRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPErrorRuleDefaultsResponse(rsp)
}

// CreateHTTPErrorRuleDefaultsWithBodyWithResponse request with arbitrary body returning *CreateHTTPErrorRuleDefaultsResponse
func (c *ClientWithResponses) CreateHTTPErrorRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPErrorRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleDefaultsParams, body CreateHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPErrorRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorRuleDefaultsResponse(rsp)
}

// ReplaceHTTPErrorRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPErrorRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceHTTPErrorRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPErrorRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPErrorRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleDefaultsParams, body ReplaceHTTPErrorRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPErrorRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorRuleDefaultsResponse(rsp)
}

// GetAllHTTPRequestRuleDefaultsWithResponse request returning *GetAllHTTPRequestRuleDefaultsResponse
func (c *ClientWithResponses) GetAllHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.GetAllHTTPRequestRuleDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPRequestRuleDefaultsResponse(rsp)
}

// ReplaceAllHTTPRequestRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPRequestRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceAllHTTPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPRequestRuleDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPRequestRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleDefaultsParams, body ReplaceAllHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPRequestRuleDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPRequestRuleDefaultsResponse(rsp)
}

// DeleteHTTPRequestRuleDefaultsWithResponse request returning *DeleteHTTPRequestRuleDefaultsResponse
func (c *ClientWithResponses) DeleteHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.DeleteHTTPRequestRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPRequestRuleDefaultsResponse(rsp)
}

// GetHTTPRequestRuleDefaultsWithResponse request returning *GetHTTPRequestRuleDefaultsResponse
func (c *ClientWithResponses) GetHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.GetHTTPRequestRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPRequestRuleDefaultsResponse(rsp)
}

// CreateHTTPRequestRuleDefaultsWithBodyWithResponse request with arbitrary body returning *CreateHTTPRequestRuleDefaultsResponse
func (c *ClientWithResponses) CreateHTTPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPRequestRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRequestRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleDefaultsParams, body CreateHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPRequestRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRequestRuleDefaultsResponse(rsp)
}

// ReplaceHTTPRequestRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPRequestRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceHTTPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPRequestRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPRequestRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleDefaultsParams, body ReplaceHTTPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPRequestRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPRequestRuleDefaultsResponse(rsp)
}

// GetAllHTTPResponseRuleDefaultsWithResponse request returning *GetAllHTTPResponseRuleDefaultsResponse
func (c *ClientWithResponses) GetAllHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.GetAllHTTPResponseRuleDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPResponseRuleDefaultsResponse(rsp)
}

// ReplaceAllHTTPResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPResponseRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceAllHTTPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPResponseRuleDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleDefaultsParams, body ReplaceAllHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllHTTPResponseRuleDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPResponseRuleDefaultsResponse(rsp)
}

// DeleteHTTPResponseRuleDefaultsWithResponse request returning *DeleteHTTPResponseRuleDefaultsResponse
func (c *ClientWithResponses) DeleteHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.DeleteHTTPResponseRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPResponseRuleDefaultsResponse(rsp)
}

// GetHTTPResponseRuleDefaultsWithResponse request returning *GetHTTPResponseRuleDefaultsResponse
func (c *ClientWithResponses) GetHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.GetHTTPResponseRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPResponseRuleDefaultsResponse(rsp)
}

// CreateHTTPResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *CreateHTTPResponseRuleDefaultsResponse
func (c *ClientWithResponses) CreateHTTPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPResponseRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleDefaultsParams, body CreateHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.CreateHTTPResponseRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPResponseRuleDefaultsResponse(rsp)
}

// ReplaceHTTPResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPResponseRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceHTTPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPResponseRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleDefaultsParams, body ReplaceHTTPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceHTTPResponseRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPResponseRuleDefaultsResponse(rsp)
}

// GetAllLogTargetDefaultsWithResponse request returning *GetAllLogTargetDefaultsResponse
func (c *ClientWithResponses) GetAllLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetDefaultsResponse, error) {
	rsp, err := c.GetAllLogTargetDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLogTargetDefaultsResponse(rsp)
}

// ReplaceAllLogTargetDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllLogTargetDefaultsResponse
func (c *ClientWithResponses) ReplaceAllLogTargetDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetDefaultsResponse, error) {
	rsp, err := c.ReplaceAllLogTargetDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetDefaultsParams, body ReplaceAllLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetDefaultsResponse, error) {
	rsp, err := c.ReplaceAllLogTargetDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetDefaultsResponse(rsp)
}

// DeleteLogTargetDefaultsWithResponse request returning *DeleteLogTargetDefaultsResponse
func (c *ClientWithResponses) DeleteLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetDefaultsResponse, error) {
	rsp, err := c.DeleteLogTargetDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogTargetDefaultsResponse(rsp)
}

// GetLogTargetDefaultsWithResponse request returning *GetLogTargetDefaultsResponse
func (c *ClientWithResponses) GetLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetDefaultsParams, reqEditors ...RequestEditorFn) (*GetLogTargetDefaultsResponse, error) {
	rsp, err := c.GetLogTargetDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogTargetDefaultsResponse(rsp)
}

// CreateLogTargetDefaultsWithBodyWithResponse request with arbitrary body returning *CreateLogTargetDefaultsResponse
func (c *ClientWithResponses) CreateLogTargetDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetDefaultsResponse, error) {
	rsp, err := c.CreateLogTargetDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetDefaultsParams, body CreateLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetDefaultsResponse, error) {
	rsp, err := c.CreateLogTargetDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetDefaultsResponse(rsp)
}

// ReplaceLogTargetDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceLogTargetDefaultsResponse
func (c *ClientWithResponses) ReplaceLogTargetDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetDefaultsResponse, error) {
	rsp, err := c.ReplaceLogTargetDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLogTargetDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetDefaultsParams, body ReplaceLogTargetDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetDefaultsResponse, error) {
	rsp, err := c.ReplaceLogTargetDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetDefaultsResponse(rsp)
}

// GetAllQUICInitialRuleDefaultsWithResponse request returning *GetAllQUICInitialRuleDefaultsResponse
func (c *ClientWithResponses) GetAllQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.GetAllQUICInitialRuleDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllQUICInitialRuleDefaultsResponse(rsp)
}

// ReplaceAllQUICInitialRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllQUICInitialRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceAllQUICInitialRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllQUICInitialRuleDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllQUICInitialRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleDefaultsParams, body ReplaceAllQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllQUICInitialRuleDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllQUICInitialRuleDefaultsResponse(rsp)
}

// DeleteQUICInitialRuleDefaultsWithResponse request returning *DeleteQUICInitialRuleDefaultsResponse
func (c *ClientWithResponses) DeleteQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.DeleteQUICInitialRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteQUICInitialRuleDefaultsResponse(rsp)
}

// GetQUICInitialRuleDefaultsWithResponse request returning *GetQUICInitialRuleDefaultsResponse
func (c *ClientWithResponses) GetQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.GetQUICInitialRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQUICInitialRuleDefaultsResponse(rsp)
}

// CreateQUICInitialRuleDefaultsWithBodyWithResponse request with arbitrary body returning *CreateQUICInitialRuleDefaultsResponse
func (c *ClientWithResponses) CreateQUICInitialRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.CreateQUICInitialRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateQUICInitialRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleDefaultsParams, body CreateQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.CreateQUICInitialRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateQUICInitialRuleDefaultsResponse(rsp)
}

// ReplaceQUICInitialRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceQUICInitialRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceQUICInitialRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceQUICInitialRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceQUICInitialRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceQUICInitialRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleDefaultsParams, body ReplaceQUICInitialRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceQUICInitialRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceQUICInitialRuleDefaultsResponse(rsp)
}

// GetAllTCPCheckDefaultsWithResponse request returning *GetAllTCPCheckDefaultsResponse
func (c *ClientWithResponses) GetAllTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllTCPCheckDefaultsResponse, error) {
	rsp, err := c.GetAllTCPCheckDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTCPCheckDefaultsResponse(rsp)
}

// ReplaceAllTCPCheckDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllTCPCheckDefaultsResponse
func (c *ClientWithResponses) ReplaceAllTCPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceAllTCPCheckDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPCheckDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPCheckDefaultsParams, body ReplaceAllTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceAllTCPCheckDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPCheckDefaultsResponse(rsp)
}

// DeleteTCPCheckDefaultsWithResponse request returning *DeleteTCPCheckDefaultsResponse
func (c *ClientWithResponses) DeleteTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteTCPCheckDefaultsResponse, error) {
	rsp, err := c.DeleteTCPCheckDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPCheckDefaultsResponse(rsp)
}

// GetTCPCheckDefaultsWithResponse request returning *GetTCPCheckDefaultsResponse
func (c *ClientWithResponses) GetTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPCheckDefaultsParams, reqEditors ...RequestEditorFn) (*GetTCPCheckDefaultsResponse, error) {
	rsp, err := c.GetTCPCheckDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPCheckDefaultsResponse(rsp)
}

// CreateTCPCheckDefaultsWithBodyWithResponse request with arbitrary body returning *CreateTCPCheckDefaultsResponse
func (c *ClientWithResponses) CreateTCPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPCheckDefaultsResponse, error) {
	rsp, err := c.CreateTCPCheckDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPCheckDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPCheckDefaultsParams, body CreateTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPCheckDefaultsResponse, error) {
	rsp, err := c.CreateTCPCheckDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPCheckDefaultsResponse(rsp)
}

// ReplaceTCPCheckDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceTCPCheckDefaultsResponse
func (c *ClientWithResponses) ReplaceTCPCheckDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceTCPCheckDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPCheckDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTCPCheckDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPCheckDefaultsParams, body ReplaceTCPCheckDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPCheckDefaultsResponse, error) {
	rsp, err := c.ReplaceTCPCheckDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPCheckDefaultsResponse(rsp)
}

// GetAllTCPRequestRuleDefaultsWithResponse request returning *GetAllTCPRequestRuleDefaultsResponse
func (c *ClientWithResponses) GetAllTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.GetAllTCPRequestRuleDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTCPRequestRuleDefaultsResponse(rsp)
}

// ReplaceAllTCPRequestRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllTCPRequestRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceAllTCPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllTCPRequestRuleDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPRequestRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleDefaultsParams, body ReplaceAllTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllTCPRequestRuleDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPRequestRuleDefaultsResponse(rsp)
}

// DeleteTCPRequestRuleDefaultsWithResponse request returning *DeleteTCPRequestRuleDefaultsResponse
func (c *ClientWithResponses) DeleteTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.DeleteTCPRequestRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPRequestRuleDefaultsResponse(rsp)
}

// GetTCPRequestRuleDefaultsWithResponse request returning *GetTCPRequestRuleDefaultsResponse
func (c *ClientWithResponses) GetTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.GetTCPRequestRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPRequestRuleDefaultsResponse(rsp)
}

// CreateTCPRequestRuleDefaultsWithBodyWithResponse request with arbitrary body returning *CreateTCPRequestRuleDefaultsResponse
func (c *ClientWithResponses) CreateTCPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.CreateTCPRequestRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRequestRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleDefaultsParams, body CreateTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.CreateTCPRequestRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRequestRuleDefaultsResponse(rsp)
}

// ReplaceTCPRequestRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceTCPRequestRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceTCPRequestRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceTCPRequestRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPRequestRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTCPRequestRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleDefaultsParams, body ReplaceTCPRequestRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceTCPRequestRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPRequestRuleDefaultsResponse(rsp)
}

// GetAllTCPResponseRuleDefaultsWithResponse request returning *GetAllTCPResponseRuleDefaultsResponse
func (c *ClientWithResponses) GetAllTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetAllTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.GetAllTCPResponseRuleDefaults(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTCPResponseRuleDefaultsResponse(rsp)
}

// ReplaceAllTCPResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceAllTCPResponseRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceAllTCPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllTCPResponseRuleDefaultsWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPResponseRuleDefaultsParams, body ReplaceAllTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceAllTCPResponseRuleDefaults(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPResponseRuleDefaultsResponse(rsp)
}

// DeleteTCPResponseRuleDefaultsWithResponse request returning *DeleteTCPResponseRuleDefaultsResponse
func (c *ClientWithResponses) DeleteTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*DeleteTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.DeleteTCPResponseRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPResponseRuleDefaultsResponse(rsp)
}

// GetTCPResponseRuleDefaultsWithResponse request returning *GetTCPResponseRuleDefaultsResponse
func (c *ClientWithResponses) GetTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPResponseRuleDefaultsParams, reqEditors ...RequestEditorFn) (*GetTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.GetTCPResponseRuleDefaults(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPResponseRuleDefaultsResponse(rsp)
}

// CreateTCPResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *CreateTCPResponseRuleDefaultsResponse
func (c *ClientWithResponses) CreateTCPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.CreateTCPResponseRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPResponseRuleDefaultsParams, body CreateTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.CreateTCPResponseRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPResponseRuleDefaultsResponse(rsp)
}

// ReplaceTCPResponseRuleDefaultsWithBodyWithResponse request with arbitrary body returning *ReplaceTCPResponseRuleDefaultsResponse
func (c *ClientWithResponses) ReplaceTCPResponseRuleDefaultsWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceTCPResponseRuleDefaultsWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPResponseRuleDefaultsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTCPResponseRuleDefaultsWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPResponseRuleDefaultsParams, body ReplaceTCPResponseRuleDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPResponseRuleDefaultsResponse, error) {
	rsp, err := c.ReplaceTCPResponseRuleDefaults(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPResponseRuleDefaultsResponse(rsp)
}

// GetFCGIAppsWithResponse request returning *GetFCGIAppsResponse
func (c *ClientWithResponses) GetFCGIAppsWithResponse(ctx context.Context, params *GetFCGIAppsParams, reqEditors ...RequestEditorFn) (*GetFCGIAppsResponse, error) {
	rsp, err := c.GetFCGIApps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFCGIAppsResponse(rsp)
}

// CreateFCGIAppWithBodyWithResponse request with arbitrary body returning *CreateFCGIAppResponse
func (c *ClientWithResponses) CreateFCGIAppWithBodyWithResponse(ctx context.Context, params *CreateFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFCGIAppResponse, error) {
	rsp, err := c.CreateFCGIAppWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFCGIAppResponse(rsp)
}

func (c *ClientWithResponses) CreateFCGIAppWithResponse(ctx context.Context, params *CreateFCGIAppParams, body CreateFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFCGIAppResponse, error) {
	rsp, err := c.CreateFCGIApp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFCGIAppResponse(rsp)
}

// DeleteFCGIAppWithResponse request returning *DeleteFCGIAppResponse
func (c *ClientWithResponses) DeleteFCGIAppWithResponse(ctx context.Context, name string, params *DeleteFCGIAppParams, reqEditors ...RequestEditorFn) (*DeleteFCGIAppResponse, error) {
	rsp, err := c.DeleteFCGIApp(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFCGIAppResponse(rsp)
}

// GetFCGIAppWithResponse request returning *GetFCGIAppResponse
func (c *ClientWithResponses) GetFCGIAppWithResponse(ctx context.Context, name string, params *GetFCGIAppParams, reqEditors ...RequestEditorFn) (*GetFCGIAppResponse, error) {
	rsp, err := c.GetFCGIApp(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFCGIAppResponse(rsp)
}

// ReplaceFCGIAppWithBodyWithResponse request with arbitrary body returning *ReplaceFCGIAppResponse
func (c *ClientWithResponses) ReplaceFCGIAppWithBodyWithResponse(ctx context.Context, name string, params *ReplaceFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFCGIAppResponse, error) {
	rsp, err := c.ReplaceFCGIAppWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFCGIAppResponse(rsp)
}

func (c *ClientWithResponses) ReplaceFCGIAppWithResponse(ctx context.Context, name string, params *ReplaceFCGIAppParams, body ReplaceFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFCGIAppResponse, error) {
	rsp, err := c.ReplaceFCGIApp(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFCGIAppResponse(rsp)
}

// GetAllAclFCGIAppWithResponse request returning *GetAllAclFCGIAppResponse
func (c *ClientWithResponses) GetAllAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclFCGIAppParams, reqEditors ...RequestEditorFn) (*GetAllAclFCGIAppResponse, error) {
	rsp, err := c.GetAllAclFCGIApp(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAclFCGIAppResponse(rsp)
}

// ReplaceAllAclFCGIAppWithBodyWithResponse request with arbitrary body returning *ReplaceAllAclFCGIAppResponse
func (c *ClientWithResponses) ReplaceAllAclFCGIAppWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclFCGIAppResponse, error) {
	rsp, err := c.ReplaceAllAclFCGIAppWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclFCGIAppResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFCGIAppParams, body ReplaceAllAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclFCGIAppResponse, error) {
	rsp, err := c.ReplaceAllAclFCGIApp(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclFCGIAppResponse(rsp)
}

// DeleteAclFCGIAppWithResponse request returning *DeleteAclFCGIAppResponse
func (c *ClientWithResponses) DeleteAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclFCGIAppParams, reqEditors ...RequestEditorFn) (*DeleteAclFCGIAppResponse, error) {
	rsp, err := c.DeleteAclFCGIApp(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAclFCGIAppResponse(rsp)
}

// GetAclFCGIAppWithResponse request returning *GetAclFCGIAppResponse
func (c *ClientWithResponses) GetAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclFCGIAppParams, reqEditors ...RequestEditorFn) (*GetAclFCGIAppResponse, error) {
	rsp, err := c.GetAclFCGIApp(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAclFCGIAppResponse(rsp)
}

// CreateAclFCGIAppWithBodyWithResponse request with arbitrary body returning *CreateAclFCGIAppResponse
func (c *ClientWithResponses) CreateAclFCGIAppWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclFCGIAppResponse, error) {
	rsp, err := c.CreateAclFCGIAppWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclFCGIAppResponse(rsp)
}

func (c *ClientWithResponses) CreateAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFCGIAppParams, body CreateAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclFCGIAppResponse, error) {
	rsp, err := c.CreateAclFCGIApp(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclFCGIAppResponse(rsp)
}

// ReplaceAclFCGIAppWithBodyWithResponse request with arbitrary body returning *ReplaceAclFCGIAppResponse
func (c *ClientWithResponses) ReplaceAclFCGIAppWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclFCGIAppResponse, error) {
	rsp, err := c.ReplaceAclFCGIAppWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclFCGIAppResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAclFCGIAppWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFCGIAppParams, body ReplaceAclFCGIAppJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclFCGIAppResponse, error) {
	rsp, err := c.ReplaceAclFCGIApp(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclFCGIAppResponse(rsp)
}

// GetFrontendsWithResponse request returning *GetFrontendsResponse
func (c *ClientWithResponses) GetFrontendsWithResponse(ctx context.Context, params *GetFrontendsParams, reqEditors ...RequestEditorFn) (*GetFrontendsResponse, error) {
	rsp, err := c.GetFrontends(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFrontendsResponse(rsp)
}

// CreateFrontendWithBodyWithResponse request with arbitrary body returning *CreateFrontendResponse
func (c *ClientWithResponses) CreateFrontendWithBodyWithResponse(ctx context.Context, params *CreateFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFrontendResponse, error) {
	rsp, err := c.CreateFrontendWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateFrontendWithResponse(ctx context.Context, params *CreateFrontendParams, body CreateFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFrontendResponse, error) {
	rsp, err := c.CreateFrontend(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFrontendResponse(rsp)
}

// DeleteFrontendWithResponse request returning *DeleteFrontendResponse
func (c *ClientWithResponses) DeleteFrontendWithResponse(ctx context.Context, name string, params *DeleteFrontendParams, reqEditors ...RequestEditorFn) (*DeleteFrontendResponse, error) {
	rsp, err := c.DeleteFrontend(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFrontendResponse(rsp)
}

// GetFrontendWithResponse request returning *GetFrontendResponse
func (c *ClientWithResponses) GetFrontendWithResponse(ctx context.Context, name string, params *GetFrontendParams, reqEditors ...RequestEditorFn) (*GetFrontendResponse, error) {
	rsp, err := c.GetFrontend(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFrontendResponse(rsp)
}

// ReplaceFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceFrontendResponse
func (c *ClientWithResponses) ReplaceFrontendWithBodyWithResponse(ctx context.Context, name string, params *ReplaceFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFrontendResponse, error) {
	rsp, err := c.ReplaceFrontendWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceFrontendWithResponse(ctx context.Context, name string, params *ReplaceFrontendParams, body ReplaceFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFrontendResponse, error) {
	rsp, err := c.ReplaceFrontend(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFrontendResponse(rsp)
}

// GetAllAclFrontendWithResponse request returning *GetAllAclFrontendResponse
func (c *ClientWithResponses) GetAllAclFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllAclFrontendParams, reqEditors ...RequestEditorFn) (*GetAllAclFrontendResponse, error) {
	rsp, err := c.GetAllAclFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAclFrontendResponse(rsp)
}

// ReplaceAllAclFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllAclFrontendResponse
func (c *ClientWithResponses) ReplaceAllAclFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllAclFrontendResponse, error) {
	rsp, err := c.ReplaceAllAclFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllAclFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllAclFrontendParams, body ReplaceAllAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllAclFrontendResponse, error) {
	rsp, err := c.ReplaceAllAclFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllAclFrontendResponse(rsp)
}

// DeleteAclFrontendWithResponse request returning *DeleteAclFrontendResponse
func (c *ClientWithResponses) DeleteAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteAclFrontendParams, reqEditors ...RequestEditorFn) (*DeleteAclFrontendResponse, error) {
	rsp, err := c.DeleteAclFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAclFrontendResponse(rsp)
}

// GetAclFrontendWithResponse request returning *GetAclFrontendResponse
func (c *ClientWithResponses) GetAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetAclFrontendParams, reqEditors ...RequestEditorFn) (*GetAclFrontendResponse, error) {
	rsp, err := c.GetAclFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAclFrontendResponse(rsp)
}

// CreateAclFrontendWithBodyWithResponse request with arbitrary body returning *CreateAclFrontendResponse
func (c *ClientWithResponses) CreateAclFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAclFrontendResponse, error) {
	rsp, err := c.CreateAclFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateAclFrontendParams, body CreateAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAclFrontendResponse, error) {
	rsp, err := c.CreateAclFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAclFrontendResponse(rsp)
}

// ReplaceAclFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAclFrontendResponse
func (c *ClientWithResponses) ReplaceAclFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAclFrontendResponse, error) {
	rsp, err := c.ReplaceAclFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAclFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceAclFrontendParams, body ReplaceAclFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAclFrontendResponse, error) {
	rsp, err := c.ReplaceAclFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAclFrontendResponse(rsp)
}

// GetBackendSwitchingRulesWithResponse request returning *GetBackendSwitchingRulesResponse
func (c *ClientWithResponses) GetBackendSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *GetBackendSwitchingRulesParams, reqEditors ...RequestEditorFn) (*GetBackendSwitchingRulesResponse, error) {
	rsp, err := c.GetBackendSwitchingRules(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackendSwitchingRulesResponse(rsp)
}

// ReplaceBackendSwitchingRulesWithBodyWithResponse request with arbitrary body returning *ReplaceBackendSwitchingRulesResponse
func (c *ClientWithResponses) ReplaceBackendSwitchingRulesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRulesResponse, error) {
	rsp, err := c.ReplaceBackendSwitchingRulesWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBackendSwitchingRulesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceBackendSwitchingRulesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceBackendSwitchingRulesParams, body ReplaceBackendSwitchingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRulesResponse, error) {
	rsp, err := c.ReplaceBackendSwitchingRules(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBackendSwitchingRulesResponse(rsp)
}

// DeleteBackendSwitchingRuleWithResponse request returning *DeleteBackendSwitchingRuleResponse
func (c *ClientWithResponses) DeleteBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*DeleteBackendSwitchingRuleResponse, error) {
	rsp, err := c.DeleteBackendSwitchingRule(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackendSwitchingRuleResponse(rsp)
}

// GetBackendSwitchingRuleWithResponse request returning *GetBackendSwitchingRuleResponse
func (c *ClientWithResponses) GetBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *GetBackendSwitchingRuleParams, reqEditors ...RequestEditorFn) (*GetBackendSwitchingRuleResponse, error) {
	rsp, err := c.GetBackendSwitchingRule(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackendSwitchingRuleResponse(rsp)
}

// CreateBackendSwitchingRuleWithBodyWithResponse request with arbitrary body returning *CreateBackendSwitchingRuleResponse
func (c *ClientWithResponses) CreateBackendSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackendSwitchingRuleResponse, error) {
	rsp, err := c.CreateBackendSwitchingRuleWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackendSwitchingRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateBackendSwitchingRuleParams, body CreateBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackendSwitchingRuleResponse, error) {
	rsp, err := c.CreateBackendSwitchingRule(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackendSwitchingRuleResponse(rsp)
}

// ReplaceBackendSwitchingRuleWithBodyWithResponse request with arbitrary body returning *ReplaceBackendSwitchingRuleResponse
func (c *ClientWithResponses) ReplaceBackendSwitchingRuleWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRuleResponse, error) {
	rsp, err := c.ReplaceBackendSwitchingRuleWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBackendSwitchingRuleResponse(rsp)
}

func (c *ClientWithResponses) ReplaceBackendSwitchingRuleWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceBackendSwitchingRuleParams, body ReplaceBackendSwitchingRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBackendSwitchingRuleResponse, error) {
	rsp, err := c.ReplaceBackendSwitchingRule(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBackendSwitchingRuleResponse(rsp)
}

// GetAllBindFrontendWithResponse request returning *GetAllBindFrontendResponse
func (c *ClientWithResponses) GetAllBindFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllBindFrontendParams, reqEditors ...RequestEditorFn) (*GetAllBindFrontendResponse, error) {
	rsp, err := c.GetAllBindFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllBindFrontendResponse(rsp)
}

// CreateBindFrontendWithBodyWithResponse request with arbitrary body returning *CreateBindFrontendResponse
func (c *ClientWithResponses) CreateBindFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindFrontendResponse, error) {
	rsp, err := c.CreateBindFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateBindFrontendWithResponse(ctx context.Context, parentName ParentName, params *CreateBindFrontendParams, body CreateBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindFrontendResponse, error) {
	rsp, err := c.CreateBindFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindFrontendResponse(rsp)
}

// DeleteBindFrontendWithResponse request returning *DeleteBindFrontendResponse
func (c *ClientWithResponses) DeleteBindFrontendWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteBindFrontendParams, reqEditors ...RequestEditorFn) (*DeleteBindFrontendResponse, error) {
	rsp, err := c.DeleteBindFrontend(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBindFrontendResponse(rsp)
}

// GetBindFrontendWithResponse request returning *GetBindFrontendResponse
func (c *ClientWithResponses) GetBindFrontendWithResponse(ctx context.Context, parentName ParentName, name string, params *GetBindFrontendParams, reqEditors ...RequestEditorFn) (*GetBindFrontendResponse, error) {
	rsp, err := c.GetBindFrontend(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBindFrontendResponse(rsp)
}

// ReplaceBindFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceBindFrontendResponse
func (c *ClientWithResponses) ReplaceBindFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBindFrontendResponse, error) {
	rsp, err := c.ReplaceBindFrontendWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBindFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceBindFrontendWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindFrontendParams, body ReplaceBindFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBindFrontendResponse, error) {
	rsp, err := c.ReplaceBindFrontend(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBindFrontendResponse(rsp)
}

// GetDeclareCapturesWithResponse request returning *GetDeclareCapturesResponse
func (c *ClientWithResponses) GetDeclareCapturesWithResponse(ctx context.Context, parentName ParentName, params *GetDeclareCapturesParams, reqEditors ...RequestEditorFn) (*GetDeclareCapturesResponse, error) {
	rsp, err := c.GetDeclareCaptures(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeclareCapturesResponse(rsp)
}

// ReplaceDeclareCapturesWithBodyWithResponse request with arbitrary body returning *ReplaceDeclareCapturesResponse
func (c *ClientWithResponses) ReplaceDeclareCapturesWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeclareCapturesResponse, error) {
	rsp, err := c.ReplaceDeclareCapturesWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeclareCapturesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceDeclareCapturesWithResponse(ctx context.Context, parentName ParentName, params *ReplaceDeclareCapturesParams, body ReplaceDeclareCapturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeclareCapturesResponse, error) {
	rsp, err := c.ReplaceDeclareCaptures(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeclareCapturesResponse(rsp)
}

// DeleteDeclareCaptureWithResponse request returning *DeleteDeclareCaptureResponse
func (c *ClientWithResponses) DeleteDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteDeclareCaptureParams, reqEditors ...RequestEditorFn) (*DeleteDeclareCaptureResponse, error) {
	rsp, err := c.DeleteDeclareCapture(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeclareCaptureResponse(rsp)
}

// GetDeclareCaptureWithResponse request returning *GetDeclareCaptureResponse
func (c *ClientWithResponses) GetDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *GetDeclareCaptureParams, reqEditors ...RequestEditorFn) (*GetDeclareCaptureResponse, error) {
	rsp, err := c.GetDeclareCapture(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeclareCaptureResponse(rsp)
}

// CreateDeclareCaptureWithBodyWithResponse request with arbitrary body returning *CreateDeclareCaptureResponse
func (c *ClientWithResponses) CreateDeclareCaptureWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeclareCaptureResponse, error) {
	rsp, err := c.CreateDeclareCaptureWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeclareCaptureResponse(rsp)
}

func (c *ClientWithResponses) CreateDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateDeclareCaptureParams, body CreateDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeclareCaptureResponse, error) {
	rsp, err := c.CreateDeclareCapture(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeclareCaptureResponse(rsp)
}

// ReplaceDeclareCaptureWithBodyWithResponse request with arbitrary body returning *ReplaceDeclareCaptureResponse
func (c *ClientWithResponses) ReplaceDeclareCaptureWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeclareCaptureResponse, error) {
	rsp, err := c.ReplaceDeclareCaptureWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeclareCaptureResponse(rsp)
}

func (c *ClientWithResponses) ReplaceDeclareCaptureWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceDeclareCaptureParams, body ReplaceDeclareCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeclareCaptureResponse, error) {
	rsp, err := c.ReplaceDeclareCapture(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeclareCaptureResponse(rsp)
}

// GetAllFilterFrontendWithResponse request returning *GetAllFilterFrontendResponse
func (c *ClientWithResponses) GetAllFilterFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllFilterFrontendParams, reqEditors ...RequestEditorFn) (*GetAllFilterFrontendResponse, error) {
	rsp, err := c.GetAllFilterFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllFilterFrontendResponse(rsp)
}

// ReplaceAllFilterFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllFilterFrontendResponse
func (c *ClientWithResponses) ReplaceAllFilterFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllFilterFrontendResponse, error) {
	rsp, err := c.ReplaceAllFilterFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllFilterFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllFilterFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllFilterFrontendParams, body ReplaceAllFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllFilterFrontendResponse, error) {
	rsp, err := c.ReplaceAllFilterFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllFilterFrontendResponse(rsp)
}

// DeleteFilterFrontendWithResponse request returning *DeleteFilterFrontendResponse
func (c *ClientWithResponses) DeleteFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteFilterFrontendParams, reqEditors ...RequestEditorFn) (*DeleteFilterFrontendResponse, error) {
	rsp, err := c.DeleteFilterFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFilterFrontendResponse(rsp)
}

// GetFilterFrontendWithResponse request returning *GetFilterFrontendResponse
func (c *ClientWithResponses) GetFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetFilterFrontendParams, reqEditors ...RequestEditorFn) (*GetFilterFrontendResponse, error) {
	rsp, err := c.GetFilterFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilterFrontendResponse(rsp)
}

// CreateFilterFrontendWithBodyWithResponse request with arbitrary body returning *CreateFilterFrontendResponse
func (c *ClientWithResponses) CreateFilterFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFilterFrontendResponse, error) {
	rsp, err := c.CreateFilterFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFilterFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateFilterFrontendParams, body CreateFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFilterFrontendResponse, error) {
	rsp, err := c.CreateFilterFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFilterFrontendResponse(rsp)
}

// ReplaceFilterFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceFilterFrontendResponse
func (c *ClientWithResponses) ReplaceFilterFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFilterFrontendResponse, error) {
	rsp, err := c.ReplaceFilterFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFilterFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceFilterFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceFilterFrontendParams, body ReplaceFilterFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceFilterFrontendResponse, error) {
	rsp, err := c.ReplaceFilterFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFilterFrontendResponse(rsp)
}

// GetAllHTTPAfterResponseRuleFrontendWithResponse request returning *GetAllHTTPAfterResponseRuleFrontendResponse
func (c *ClientWithResponses) GetAllHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.GetAllHTTPAfterResponseRuleFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPAfterResponseRuleFrontendResponse(rsp)
}

// ReplaceAllHTTPAfterResponseRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPAfterResponseRuleFrontendResponse
func (c *ClientWithResponses) ReplaceAllHTTPAfterResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPAfterResponseRuleFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPAfterResponseRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPAfterResponseRuleFrontendParams, body ReplaceAllHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPAfterResponseRuleFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPAfterResponseRuleFrontendResponse(rsp)
}

// DeleteHTTPAfterResponseRuleFrontendWithResponse request returning *DeleteHTTPAfterResponseRuleFrontendResponse
func (c *ClientWithResponses) DeleteHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.DeleteHTTPAfterResponseRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPAfterResponseRuleFrontendResponse(rsp)
}

// GetHTTPAfterResponseRuleFrontendWithResponse request returning *GetHTTPAfterResponseRuleFrontendResponse
func (c *ClientWithResponses) GetHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPAfterResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.GetHTTPAfterResponseRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPAfterResponseRuleFrontendResponse(rsp)
}

// CreateHTTPAfterResponseRuleFrontendWithBodyWithResponse request with arbitrary body returning *CreateHTTPAfterResponseRuleFrontendResponse
func (c *ClientWithResponses) CreateHTTPAfterResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPAfterResponseRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPAfterResponseRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPAfterResponseRuleFrontendParams, body CreateHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPAfterResponseRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPAfterResponseRuleFrontendResponse(rsp)
}

// ReplaceHTTPAfterResponseRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPAfterResponseRuleFrontendResponse
func (c *ClientWithResponses) ReplaceHTTPAfterResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPAfterResponseRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPAfterResponseRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPAfterResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPAfterResponseRuleFrontendParams, body ReplaceHTTPAfterResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPAfterResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPAfterResponseRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPAfterResponseRuleFrontendResponse(rsp)
}

// GetAllHTTPErrorRuleFrontendWithResponse request returning *GetAllHTTPErrorRuleFrontendResponse
func (c *ClientWithResponses) GetAllHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.GetAllHTTPErrorRuleFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPErrorRuleFrontendResponse(rsp)
}

// ReplaceAllHTTPErrorRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPErrorRuleFrontendResponse
func (c *ClientWithResponses) ReplaceAllHTTPErrorRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPErrorRuleFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPErrorRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPErrorRuleFrontendParams, body ReplaceAllHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPErrorRuleFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPErrorRuleFrontendResponse(rsp)
}

// DeleteHTTPErrorRuleFrontendWithResponse request returning *DeleteHTTPErrorRuleFrontendResponse
func (c *ClientWithResponses) DeleteHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.DeleteHTTPErrorRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPErrorRuleFrontendResponse(rsp)
}

// GetHTTPErrorRuleFrontendWithResponse request returning *GetHTTPErrorRuleFrontendResponse
func (c *ClientWithResponses) GetHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPErrorRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.GetHTTPErrorRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPErrorRuleFrontendResponse(rsp)
}

// CreateHTTPErrorRuleFrontendWithBodyWithResponse request with arbitrary body returning *CreateHTTPErrorRuleFrontendResponse
func (c *ClientWithResponses) CreateHTTPErrorRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPErrorRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPErrorRuleFrontendParams, body CreateHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPErrorRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorRuleFrontendResponse(rsp)
}

// ReplaceHTTPErrorRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPErrorRuleFrontendResponse
func (c *ClientWithResponses) ReplaceHTTPErrorRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPErrorRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPErrorRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPErrorRuleFrontendParams, body ReplaceHTTPErrorRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPErrorRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorRuleFrontendResponse(rsp)
}

// GetAllHTTPRequestRuleFrontendWithResponse request returning *GetAllHTTPRequestRuleFrontendResponse
func (c *ClientWithResponses) GetAllHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.GetAllHTTPRequestRuleFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPRequestRuleFrontendResponse(rsp)
}

// ReplaceAllHTTPRequestRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPRequestRuleFrontendResponse
func (c *ClientWithResponses) ReplaceAllHTTPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPRequestRuleFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPRequestRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPRequestRuleFrontendParams, body ReplaceAllHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPRequestRuleFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPRequestRuleFrontendResponse(rsp)
}

// DeleteHTTPRequestRuleFrontendWithResponse request returning *DeleteHTTPRequestRuleFrontendResponse
func (c *ClientWithResponses) DeleteHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.DeleteHTTPRequestRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPRequestRuleFrontendResponse(rsp)
}

// GetHTTPRequestRuleFrontendWithResponse request returning *GetHTTPRequestRuleFrontendResponse
func (c *ClientWithResponses) GetHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.GetHTTPRequestRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPRequestRuleFrontendResponse(rsp)
}

// CreateHTTPRequestRuleFrontendWithBodyWithResponse request with arbitrary body returning *CreateHTTPRequestRuleFrontendResponse
func (c *ClientWithResponses) CreateHTTPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPRequestRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRequestRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPRequestRuleFrontendParams, body CreateHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPRequestRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRequestRuleFrontendResponse(rsp)
}

// ReplaceHTTPRequestRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPRequestRuleFrontendResponse
func (c *ClientWithResponses) ReplaceHTTPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPRequestRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPRequestRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPRequestRuleFrontendParams, body ReplaceHTTPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPRequestRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPRequestRuleFrontendResponse(rsp)
}

// GetAllHTTPResponseRuleFrontendWithResponse request returning *GetAllHTTPResponseRuleFrontendResponse
func (c *ClientWithResponses) GetAllHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.GetAllHTTPResponseRuleFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHTTPResponseRuleFrontendResponse(rsp)
}

// ReplaceAllHTTPResponseRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllHTTPResponseRuleFrontendResponse
func (c *ClientWithResponses) ReplaceAllHTTPResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPResponseRuleFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPResponseRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllHTTPResponseRuleFrontendParams, body ReplaceAllHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllHTTPResponseRuleFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllHTTPResponseRuleFrontendResponse(rsp)
}

// DeleteHTTPResponseRuleFrontendWithResponse request returning *DeleteHTTPResponseRuleFrontendResponse
func (c *ClientWithResponses) DeleteHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.DeleteHTTPResponseRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPResponseRuleFrontendResponse(rsp)
}

// GetHTTPResponseRuleFrontendWithResponse request returning *GetHTTPResponseRuleFrontendResponse
func (c *ClientWithResponses) GetHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetHTTPResponseRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.GetHTTPResponseRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPResponseRuleFrontendResponse(rsp)
}

// CreateHTTPResponseRuleFrontendWithBodyWithResponse request with arbitrary body returning *CreateHTTPResponseRuleFrontendResponse
func (c *ClientWithResponses) CreateHTTPResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPResponseRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPResponseRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateHTTPResponseRuleFrontendParams, body CreateHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.CreateHTTPResponseRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPResponseRuleFrontendResponse(rsp)
}

// ReplaceHTTPResponseRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPResponseRuleFrontendResponse
func (c *ClientWithResponses) ReplaceHTTPResponseRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPResponseRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPResponseRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPResponseRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceHTTPResponseRuleFrontendParams, body ReplaceHTTPResponseRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPResponseRuleFrontendResponse, error) {
	rsp, err := c.ReplaceHTTPResponseRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPResponseRuleFrontendResponse(rsp)
}

// GetAllLogTargetFrontendWithResponse request returning *GetAllLogTargetFrontendResponse
func (c *ClientWithResponses) GetAllLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetFrontendResponse, error) {
	rsp, err := c.GetAllLogTargetFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLogTargetFrontendResponse(rsp)
}

// ReplaceAllLogTargetFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllLogTargetFrontendResponse
func (c *ClientWithResponses) ReplaceAllLogTargetFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetFrontendResponse, error) {
	rsp, err := c.ReplaceAllLogTargetFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetFrontendParams, body ReplaceAllLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetFrontendResponse, error) {
	rsp, err := c.ReplaceAllLogTargetFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetFrontendResponse(rsp)
}

// DeleteLogTargetFrontendWithResponse request returning *DeleteLogTargetFrontendResponse
func (c *ClientWithResponses) DeleteLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetFrontendResponse, error) {
	rsp, err := c.DeleteLogTargetFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogTargetFrontendResponse(rsp)
}

// GetLogTargetFrontendWithResponse request returning *GetLogTargetFrontendResponse
func (c *ClientWithResponses) GetLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetFrontendParams, reqEditors ...RequestEditorFn) (*GetLogTargetFrontendResponse, error) {
	rsp, err := c.GetLogTargetFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogTargetFrontendResponse(rsp)
}

// CreateLogTargetFrontendWithBodyWithResponse request with arbitrary body returning *CreateLogTargetFrontendResponse
func (c *ClientWithResponses) CreateLogTargetFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetFrontendResponse, error) {
	rsp, err := c.CreateLogTargetFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetFrontendParams, body CreateLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetFrontendResponse, error) {
	rsp, err := c.CreateLogTargetFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetFrontendResponse(rsp)
}

// ReplaceLogTargetFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceLogTargetFrontendResponse
func (c *ClientWithResponses) ReplaceLogTargetFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetFrontendResponse, error) {
	rsp, err := c.ReplaceLogTargetFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLogTargetFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetFrontendParams, body ReplaceLogTargetFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetFrontendResponse, error) {
	rsp, err := c.ReplaceLogTargetFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetFrontendResponse(rsp)
}

// GetAllQUICInitialRuleFrontendWithResponse request returning *GetAllQUICInitialRuleFrontendResponse
func (c *ClientWithResponses) GetAllQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.GetAllQUICInitialRuleFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllQUICInitialRuleFrontendResponse(rsp)
}

// ReplaceAllQUICInitialRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllQUICInitialRuleFrontendResponse
func (c *ClientWithResponses) ReplaceAllQUICInitialRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllQUICInitialRuleFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllQUICInitialRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllQUICInitialRuleFrontendParams, body ReplaceAllQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllQUICInitialRuleFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllQUICInitialRuleFrontendResponse(rsp)
}

// DeleteQUICInitialRuleFrontendWithResponse request returning *DeleteQUICInitialRuleFrontendResponse
func (c *ClientWithResponses) DeleteQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.DeleteQUICInitialRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteQUICInitialRuleFrontendResponse(rsp)
}

// GetQUICInitialRuleFrontendWithResponse request returning *GetQUICInitialRuleFrontendResponse
func (c *ClientWithResponses) GetQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetQUICInitialRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.GetQUICInitialRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQUICInitialRuleFrontendResponse(rsp)
}

// CreateQUICInitialRuleFrontendWithBodyWithResponse request with arbitrary body returning *CreateQUICInitialRuleFrontendResponse
func (c *ClientWithResponses) CreateQUICInitialRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.CreateQUICInitialRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateQUICInitialRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateQUICInitialRuleFrontendParams, body CreateQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.CreateQUICInitialRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateQUICInitialRuleFrontendResponse(rsp)
}

// ReplaceQUICInitialRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceQUICInitialRuleFrontendResponse
func (c *ClientWithResponses) ReplaceQUICInitialRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.ReplaceQUICInitialRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceQUICInitialRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceQUICInitialRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceQUICInitialRuleFrontendParams, body ReplaceQUICInitialRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceQUICInitialRuleFrontendResponse, error) {
	rsp, err := c.ReplaceQUICInitialRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceQUICInitialRuleFrontendResponse(rsp)
}

// GetAllSSLFrontUsesWithResponse request returning *GetAllSSLFrontUsesResponse
func (c *ClientWithResponses) GetAllSSLFrontUsesWithResponse(ctx context.Context, parentName ParentName, params *GetAllSSLFrontUsesParams, reqEditors ...RequestEditorFn) (*GetAllSSLFrontUsesResponse, error) {
	rsp, err := c.GetAllSSLFrontUses(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSSLFrontUsesResponse(rsp)
}

// CreateSSLFrontUseWithBodyWithResponse request with arbitrary body returning *CreateSSLFrontUseResponse
func (c *ClientWithResponses) CreateSSLFrontUseWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSSLFrontUseResponse, error) {
	rsp, err := c.CreateSSLFrontUseWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSSLFrontUseResponse(rsp)
}

func (c *ClientWithResponses) CreateSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, params *CreateSSLFrontUseParams, body CreateSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSSLFrontUseResponse, error) {
	rsp, err := c.CreateSSLFrontUse(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSSLFrontUseResponse(rsp)
}

// DeleteSSLFrontUseWithResponse request returning *DeleteSSLFrontUseResponse
func (c *ClientWithResponses) DeleteSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteSSLFrontUseParams, reqEditors ...RequestEditorFn) (*DeleteSSLFrontUseResponse, error) {
	rsp, err := c.DeleteSSLFrontUse(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSSLFrontUseResponse(rsp)
}

// GetSSLFrontUseWithResponse request returning *GetSSLFrontUseResponse
func (c *ClientWithResponses) GetSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, index int, params *GetSSLFrontUseParams, reqEditors ...RequestEditorFn) (*GetSSLFrontUseResponse, error) {
	rsp, err := c.GetSSLFrontUse(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSSLFrontUseResponse(rsp)
}

// ReplaceSSLFrontUseWithBodyWithResponse request with arbitrary body returning *ReplaceSSLFrontUseResponse
func (c *ClientWithResponses) ReplaceSSLFrontUseWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSSLFrontUseResponse, error) {
	rsp, err := c.ReplaceSSLFrontUseWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSSLFrontUseResponse(rsp)
}

func (c *ClientWithResponses) ReplaceSSLFrontUseWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceSSLFrontUseParams, body ReplaceSSLFrontUseJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSSLFrontUseResponse, error) {
	rsp, err := c.ReplaceSSLFrontUse(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSSLFrontUseResponse(rsp)
}

// GetAllTCPRequestRuleFrontendWithResponse request returning *GetAllTCPRequestRuleFrontendResponse
func (c *ClientWithResponses) GetAllTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *GetAllTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetAllTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.GetAllTCPRequestRuleFrontend(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTCPRequestRuleFrontendResponse(rsp)
}

// ReplaceAllTCPRequestRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceAllTCPRequestRuleFrontendResponse
func (c *ClientWithResponses) ReplaceAllTCPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllTCPRequestRuleFrontendWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPRequestRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllTCPRequestRuleFrontendParams, body ReplaceAllTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceAllTCPRequestRuleFrontend(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllTCPRequestRuleFrontendResponse(rsp)
}

// DeleteTCPRequestRuleFrontendWithResponse request returning *DeleteTCPRequestRuleFrontendResponse
func (c *ClientWithResponses) DeleteTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*DeleteTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.DeleteTCPRequestRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPRequestRuleFrontendResponse(rsp)
}

// GetTCPRequestRuleFrontendWithResponse request returning *GetTCPRequestRuleFrontendResponse
func (c *ClientWithResponses) GetTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *GetTCPRequestRuleFrontendParams, reqEditors ...RequestEditorFn) (*GetTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.GetTCPRequestRuleFrontend(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPRequestRuleFrontendResponse(rsp)
}

// CreateTCPRequestRuleFrontendWithBodyWithResponse request with arbitrary body returning *CreateTCPRequestRuleFrontendResponse
func (c *ClientWithResponses) CreateTCPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.CreateTCPRequestRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRequestRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateTCPRequestRuleFrontendParams, body CreateTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.CreateTCPRequestRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRequestRuleFrontendResponse(rsp)
}

// ReplaceTCPRequestRuleFrontendWithBodyWithResponse request with arbitrary body returning *ReplaceTCPRequestRuleFrontendResponse
func (c *ClientWithResponses) ReplaceTCPRequestRuleFrontendWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceTCPRequestRuleFrontendWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPRequestRuleFrontendResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTCPRequestRuleFrontendWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceTCPRequestRuleFrontendParams, body ReplaceTCPRequestRuleFrontendJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTCPRequestRuleFrontendResponse, error) {
	rsp, err := c.ReplaceTCPRequestRuleFrontend(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTCPRequestRuleFrontendResponse(rsp)
}

// GetGlobalWithResponse request returning *GetGlobalResponse
func (c *ClientWithResponses) GetGlobalWithResponse(ctx context.Context, params *GetGlobalParams, reqEditors ...RequestEditorFn) (*GetGlobalResponse, error) {
	rsp, err := c.GetGlobal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalResponse(rsp)
}

// ReplaceGlobalWithBodyWithResponse request with arbitrary body returning *ReplaceGlobalResponse
func (c *ClientWithResponses) ReplaceGlobalWithBodyWithResponse(ctx context.Context, params *ReplaceGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceGlobalResponse, error) {
	rsp, err := c.ReplaceGlobalWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceGlobalResponse(rsp)
}

func (c *ClientWithResponses) ReplaceGlobalWithResponse(ctx context.Context, params *ReplaceGlobalParams, body ReplaceGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceGlobalResponse, error) {
	rsp, err := c.ReplaceGlobal(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceGlobalResponse(rsp)
}

// GetAllLogTargetGlobalWithResponse request returning *GetAllLogTargetGlobalResponse
func (c *ClientWithResponses) GetAllLogTargetGlobalWithResponse(ctx context.Context, params *GetAllLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetGlobalResponse, error) {
	rsp, err := c.GetAllLogTargetGlobal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLogTargetGlobalResponse(rsp)
}

// ReplaceAllLogTargetGlobalWithBodyWithResponse request with arbitrary body returning *ReplaceAllLogTargetGlobalResponse
func (c *ClientWithResponses) ReplaceAllLogTargetGlobalWithBodyWithResponse(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetGlobalResponse, error) {
	rsp, err := c.ReplaceAllLogTargetGlobalWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetGlobalResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllLogTargetGlobalWithResponse(ctx context.Context, params *ReplaceAllLogTargetGlobalParams, body ReplaceAllLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetGlobalResponse, error) {
	rsp, err := c.ReplaceAllLogTargetGlobal(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetGlobalResponse(rsp)
}

// DeleteLogTargetGlobalWithResponse request returning *DeleteLogTargetGlobalResponse
func (c *ClientWithResponses) DeleteLogTargetGlobalWithResponse(ctx context.Context, index int, params *DeleteLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetGlobalResponse, error) {
	rsp, err := c.DeleteLogTargetGlobal(ctx, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogTargetGlobalResponse(rsp)
}

// GetLogTargetGlobalWithResponse request returning *GetLogTargetGlobalResponse
func (c *ClientWithResponses) GetLogTargetGlobalWithResponse(ctx context.Context, index int, params *GetLogTargetGlobalParams, reqEditors ...RequestEditorFn) (*GetLogTargetGlobalResponse, error) {
	rsp, err := c.GetLogTargetGlobal(ctx, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogTargetGlobalResponse(rsp)
}

// CreateLogTargetGlobalWithBodyWithResponse request with arbitrary body returning *CreateLogTargetGlobalResponse
func (c *ClientWithResponses) CreateLogTargetGlobalWithBodyWithResponse(ctx context.Context, index int, params *CreateLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetGlobalResponse, error) {
	rsp, err := c.CreateLogTargetGlobalWithBody(ctx, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetGlobalResponse(rsp)
}

func (c *ClientWithResponses) CreateLogTargetGlobalWithResponse(ctx context.Context, index int, params *CreateLogTargetGlobalParams, body CreateLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetGlobalResponse, error) {
	rsp, err := c.CreateLogTargetGlobal(ctx, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetGlobalResponse(rsp)
}

// ReplaceLogTargetGlobalWithBodyWithResponse request with arbitrary body returning *ReplaceLogTargetGlobalResponse
func (c *ClientWithResponses) ReplaceLogTargetGlobalWithBodyWithResponse(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetGlobalResponse, error) {
	rsp, err := c.ReplaceLogTargetGlobalWithBody(ctx, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetGlobalResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLogTargetGlobalWithResponse(ctx context.Context, index int, params *ReplaceLogTargetGlobalParams, body ReplaceLogTargetGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetGlobalResponse, error) {
	rsp, err := c.ReplaceLogTargetGlobal(ctx, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetGlobalResponse(rsp)
}

// GetGroupsWithResponse request returning *GetGroupsResponse
func (c *ClientWithResponses) GetGroupsWithResponse(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error) {
	rsp, err := c.GetGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsResponse(rsp)
}

// CreateGroupWithBodyWithResponse request with arbitrary body returning *CreateGroupResponse
func (c *ClientWithResponses) CreateGroupWithBodyWithResponse(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateGroupWithResponse(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

// DeleteGroupWithResponse request returning *DeleteGroupResponse
func (c *ClientWithResponses) DeleteGroupWithResponse(ctx context.Context, name string, params *DeleteGroupParams, reqEditors ...RequestEditorFn) (*DeleteGroupResponse, error) {
	rsp, err := c.DeleteGroup(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupResponse(rsp)
}

// GetGroupWithResponse request returning *GetGroupResponse
func (c *ClientWithResponses) GetGroupWithResponse(ctx context.Context, name string, params *GetGroupParams, reqEditors ...RequestEditorFn) (*GetGroupResponse, error) {
	rsp, err := c.GetGroup(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupResponse(rsp)
}

// ReplaceGroupWithBodyWithResponse request with arbitrary body returning *ReplaceGroupResponse
func (c *ClientWithResponses) ReplaceGroupWithBodyWithResponse(ctx context.Context, name string, params *ReplaceGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceGroupResponse, error) {
	rsp, err := c.ReplaceGroupWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceGroupResponse(rsp)
}

func (c *ClientWithResponses) ReplaceGroupWithResponse(ctx context.Context, name string, params *ReplaceGroupParams, body ReplaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceGroupResponse, error) {
	rsp, err := c.ReplaceGroup(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceGroupResponse(rsp)
}

// GetHTTPErrorsSectionsWithResponse request returning *GetHTTPErrorsSectionsResponse
func (c *ClientWithResponses) GetHTTPErrorsSectionsWithResponse(ctx context.Context, params *GetHTTPErrorsSectionsParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorsSectionsResponse, error) {
	rsp, err := c.GetHTTPErrorsSections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPErrorsSectionsResponse(rsp)
}

// CreateHTTPErrorsSectionWithBodyWithResponse request with arbitrary body returning *CreateHTTPErrorsSectionResponse
func (c *ClientWithResponses) CreateHTTPErrorsSectionWithBodyWithResponse(ctx context.Context, params *CreateHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPErrorsSectionResponse, error) {
	rsp, err := c.CreateHTTPErrorsSectionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorsSectionResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPErrorsSectionWithResponse(ctx context.Context, params *CreateHTTPErrorsSectionParams, body CreateHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPErrorsSectionResponse, error) {
	rsp, err := c.CreateHTTPErrorsSection(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPErrorsSectionResponse(rsp)
}

// DeleteHTTPErrorsSectionWithResponse request returning *DeleteHTTPErrorsSectionResponse
func (c *ClientWithResponses) DeleteHTTPErrorsSectionWithResponse(ctx context.Context, name string, params *DeleteHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*DeleteHTTPErrorsSectionResponse, error) {
	rsp, err := c.DeleteHTTPErrorsSection(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPErrorsSectionResponse(rsp)
}

// GetHTTPErrorsSectionWithResponse request returning *GetHTTPErrorsSectionResponse
func (c *ClientWithResponses) GetHTTPErrorsSectionWithResponse(ctx context.Context, name string, params *GetHTTPErrorsSectionParams, reqEditors ...RequestEditorFn) (*GetHTTPErrorsSectionResponse, error) {
	rsp, err := c.GetHTTPErrorsSection(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPErrorsSectionResponse(rsp)
}

// ReplaceHTTPErrorsSectionWithBodyWithResponse request with arbitrary body returning *ReplaceHTTPErrorsSectionResponse
func (c *ClientWithResponses) ReplaceHTTPErrorsSectionWithBodyWithResponse(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorsSectionResponse, error) {
	rsp, err := c.ReplaceHTTPErrorsSectionWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorsSectionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceHTTPErrorsSectionWithResponse(ctx context.Context, name string, params *ReplaceHTTPErrorsSectionParams, body ReplaceHTTPErrorsSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceHTTPErrorsSectionResponse, error) {
	rsp, err := c.ReplaceHTTPErrorsSection(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceHTTPErrorsSectionResponse(rsp)
}

// GetLogForwardsWithResponse request returning *GetLogForwardsResponse
func (c *ClientWithResponses) GetLogForwardsWithResponse(ctx context.Context, params *GetLogForwardsParams, reqEditors ...RequestEditorFn) (*GetLogForwardsResponse, error) {
	rsp, err := c.GetLogForwards(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogForwardsResponse(rsp)
}

// CreateLogForwardWithBodyWithResponse request with arbitrary body returning *CreateLogForwardResponse
func (c *ClientWithResponses) CreateLogForwardWithBodyWithResponse(ctx context.Context, params *CreateLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogForwardResponse, error) {
	rsp, err := c.CreateLogForwardWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogForwardResponse(rsp)
}

func (c *ClientWithResponses) CreateLogForwardWithResponse(ctx context.Context, params *CreateLogForwardParams, body CreateLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogForwardResponse, error) {
	rsp, err := c.CreateLogForward(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogForwardResponse(rsp)
}

// DeleteLogForwardWithResponse request returning *DeleteLogForwardResponse
func (c *ClientWithResponses) DeleteLogForwardWithResponse(ctx context.Context, name string, params *DeleteLogForwardParams, reqEditors ...RequestEditorFn) (*DeleteLogForwardResponse, error) {
	rsp, err := c.DeleteLogForward(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogForwardResponse(rsp)
}

// GetLogForwardWithResponse request returning *GetLogForwardResponse
func (c *ClientWithResponses) GetLogForwardWithResponse(ctx context.Context, name string, params *GetLogForwardParams, reqEditors ...RequestEditorFn) (*GetLogForwardResponse, error) {
	rsp, err := c.GetLogForward(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogForwardResponse(rsp)
}

// ReplaceLogForwardWithBodyWithResponse request with arbitrary body returning *ReplaceLogForwardResponse
func (c *ClientWithResponses) ReplaceLogForwardWithBodyWithResponse(ctx context.Context, name string, params *ReplaceLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogForwardResponse, error) {
	rsp, err := c.ReplaceLogForwardWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogForwardResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLogForwardWithResponse(ctx context.Context, name string, params *ReplaceLogForwardParams, body ReplaceLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogForwardResponse, error) {
	rsp, err := c.ReplaceLogForward(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogForwardResponse(rsp)
}

// GetAllBindLogForwardWithResponse request returning *GetAllBindLogForwardResponse
func (c *ClientWithResponses) GetAllBindLogForwardWithResponse(ctx context.Context, parentName ParentName, params *GetAllBindLogForwardParams, reqEditors ...RequestEditorFn) (*GetAllBindLogForwardResponse, error) {
	rsp, err := c.GetAllBindLogForward(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllBindLogForwardResponse(rsp)
}

// CreateBindLogForwardWithBodyWithResponse request with arbitrary body returning *CreateBindLogForwardResponse
func (c *ClientWithResponses) CreateBindLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindLogForwardResponse, error) {
	rsp, err := c.CreateBindLogForwardWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindLogForwardResponse(rsp)
}

func (c *ClientWithResponses) CreateBindLogForwardWithResponse(ctx context.Context, parentName ParentName, params *CreateBindLogForwardParams, body CreateBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindLogForwardResponse, error) {
	rsp, err := c.CreateBindLogForward(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindLogForwardResponse(rsp)
}

// DeleteBindLogForwardWithResponse request returning *DeleteBindLogForwardResponse
func (c *ClientWithResponses) DeleteBindLogForwardWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteBindLogForwardParams, reqEditors ...RequestEditorFn) (*DeleteBindLogForwardResponse, error) {
	rsp, err := c.DeleteBindLogForward(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBindLogForwardResponse(rsp)
}

// GetBindLogForwardWithResponse request returning *GetBindLogForwardResponse
func (c *ClientWithResponses) GetBindLogForwardWithResponse(ctx context.Context, parentName ParentName, name string, params *GetBindLogForwardParams, reqEditors ...RequestEditorFn) (*GetBindLogForwardResponse, error) {
	rsp, err := c.GetBindLogForward(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBindLogForwardResponse(rsp)
}

// ReplaceBindLogForwardWithBodyWithResponse request with arbitrary body returning *ReplaceBindLogForwardResponse
func (c *ClientWithResponses) ReplaceBindLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBindLogForwardResponse, error) {
	rsp, err := c.ReplaceBindLogForwardWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBindLogForwardResponse(rsp)
}

func (c *ClientWithResponses) ReplaceBindLogForwardWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindLogForwardParams, body ReplaceBindLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBindLogForwardResponse, error) {
	rsp, err := c.ReplaceBindLogForward(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBindLogForwardResponse(rsp)
}

// GetDgramBindsWithResponse request returning *GetDgramBindsResponse
func (c *ClientWithResponses) GetDgramBindsWithResponse(ctx context.Context, parentName ParentName, params *GetDgramBindsParams, reqEditors ...RequestEditorFn) (*GetDgramBindsResponse, error) {
	rsp, err := c.GetDgramBinds(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDgramBindsResponse(rsp)
}

// CreateDgramBindWithBodyWithResponse request with arbitrary body returning *CreateDgramBindResponse
func (c *ClientWithResponses) CreateDgramBindWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDgramBindResponse, error) {
	rsp, err := c.CreateDgramBindWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDgramBindResponse(rsp)
}

func (c *ClientWithResponses) CreateDgramBindWithResponse(ctx context.Context, parentName ParentName, params *CreateDgramBindParams, body CreateDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDgramBindResponse, error) {
	rsp, err := c.CreateDgramBind(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDgramBindResponse(rsp)
}

// DeleteDgramBindWithResponse request returning *DeleteDgramBindResponse
func (c *ClientWithResponses) DeleteDgramBindWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteDgramBindParams, reqEditors ...RequestEditorFn) (*DeleteDgramBindResponse, error) {
	rsp, err := c.DeleteDgramBind(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDgramBindResponse(rsp)
}

// GetDgramBindWithResponse request returning *GetDgramBindResponse
func (c *ClientWithResponses) GetDgramBindWithResponse(ctx context.Context, parentName ParentName, name string, params *GetDgramBindParams, reqEditors ...RequestEditorFn) (*GetDgramBindResponse, error) {
	rsp, err := c.GetDgramBind(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDgramBindResponse(rsp)
}

// ReplaceDgramBindWithBodyWithResponse request with arbitrary body returning *ReplaceDgramBindResponse
func (c *ClientWithResponses) ReplaceDgramBindWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDgramBindResponse, error) {
	rsp, err := c.ReplaceDgramBindWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDgramBindResponse(rsp)
}

func (c *ClientWithResponses) ReplaceDgramBindWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceDgramBindParams, body ReplaceDgramBindJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDgramBindResponse, error) {
	rsp, err := c.ReplaceDgramBind(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDgramBindResponse(rsp)
}

// GetAllLogTargetLogForwardWithResponse request returning *GetAllLogTargetLogForwardResponse
func (c *ClientWithResponses) GetAllLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetLogForwardResponse, error) {
	rsp, err := c.GetAllLogTargetLogForward(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLogTargetLogForwardResponse(rsp)
}

// ReplaceAllLogTargetLogForwardWithBodyWithResponse request with arbitrary body returning *ReplaceAllLogTargetLogForwardResponse
func (c *ClientWithResponses) ReplaceAllLogTargetLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetLogForwardResponse, error) {
	rsp, err := c.ReplaceAllLogTargetLogForwardWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetLogForwardResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetLogForwardParams, body ReplaceAllLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetLogForwardResponse, error) {
	rsp, err := c.ReplaceAllLogTargetLogForward(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetLogForwardResponse(rsp)
}

// DeleteLogTargetLogForwardWithResponse request returning *DeleteLogTargetLogForwardResponse
func (c *ClientWithResponses) DeleteLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetLogForwardResponse, error) {
	rsp, err := c.DeleteLogTargetLogForward(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogTargetLogForwardResponse(rsp)
}

// GetLogTargetLogForwardWithResponse request returning *GetLogTargetLogForwardResponse
func (c *ClientWithResponses) GetLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetLogForwardParams, reqEditors ...RequestEditorFn) (*GetLogTargetLogForwardResponse, error) {
	rsp, err := c.GetLogTargetLogForward(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogTargetLogForwardResponse(rsp)
}

// CreateLogTargetLogForwardWithBodyWithResponse request with arbitrary body returning *CreateLogTargetLogForwardResponse
func (c *ClientWithResponses) CreateLogTargetLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetLogForwardResponse, error) {
	rsp, err := c.CreateLogTargetLogForwardWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetLogForwardResponse(rsp)
}

func (c *ClientWithResponses) CreateLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetLogForwardParams, body CreateLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetLogForwardResponse, error) {
	rsp, err := c.CreateLogTargetLogForward(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetLogForwardResponse(rsp)
}

// ReplaceLogTargetLogForwardWithBodyWithResponse request with arbitrary body returning *ReplaceLogTargetLogForwardResponse
func (c *ClientWithResponses) ReplaceLogTargetLogForwardWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetLogForwardResponse, error) {
	rsp, err := c.ReplaceLogTargetLogForwardWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetLogForwardResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLogTargetLogForwardWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetLogForwardParams, body ReplaceLogTargetLogForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetLogForwardResponse, error) {
	rsp, err := c.ReplaceLogTargetLogForward(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetLogForwardResponse(rsp)
}

// GetLogProfilesWithResponse request returning *GetLogProfilesResponse
func (c *ClientWithResponses) GetLogProfilesWithResponse(ctx context.Context, params *GetLogProfilesParams, reqEditors ...RequestEditorFn) (*GetLogProfilesResponse, error) {
	rsp, err := c.GetLogProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogProfilesResponse(rsp)
}

// CreateLogProfileWithBodyWithResponse request with arbitrary body returning *CreateLogProfileResponse
func (c *ClientWithResponses) CreateLogProfileWithBodyWithResponse(ctx context.Context, params *CreateLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogProfileResponse, error) {
	rsp, err := c.CreateLogProfileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateLogProfileWithResponse(ctx context.Context, params *CreateLogProfileParams, body CreateLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogProfileResponse, error) {
	rsp, err := c.CreateLogProfile(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogProfileResponse(rsp)
}

// DeleteLogProfileWithResponse request returning *DeleteLogProfileResponse
func (c *ClientWithResponses) DeleteLogProfileWithResponse(ctx context.Context, name string, params *DeleteLogProfileParams, reqEditors ...RequestEditorFn) (*DeleteLogProfileResponse, error) {
	rsp, err := c.DeleteLogProfile(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogProfileResponse(rsp)
}

// GetLogProfileWithResponse request returning *GetLogProfileResponse
func (c *ClientWithResponses) GetLogProfileWithResponse(ctx context.Context, name string, params *GetLogProfileParams, reqEditors ...RequestEditorFn) (*GetLogProfileResponse, error) {
	rsp, err := c.GetLogProfile(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogProfileResponse(rsp)
}

// EditLogProfileWithBodyWithResponse request with arbitrary body returning *EditLogProfileResponse
func (c *ClientWithResponses) EditLogProfileWithBodyWithResponse(ctx context.Context, name string, params *EditLogProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditLogProfileResponse, error) {
	rsp, err := c.EditLogProfileWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditLogProfileResponse(rsp)
}

func (c *ClientWithResponses) EditLogProfileWithResponse(ctx context.Context, name string, params *EditLogProfileParams, body EditLogProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*EditLogProfileResponse, error) {
	rsp, err := c.EditLogProfile(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditLogProfileResponse(rsp)
}

// GetMailerEntriesWithResponse request returning *GetMailerEntriesResponse
func (c *ClientWithResponses) GetMailerEntriesWithResponse(ctx context.Context, params *GetMailerEntriesParams, reqEditors ...RequestEditorFn) (*GetMailerEntriesResponse, error) {
	rsp, err := c.GetMailerEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMailerEntriesResponse(rsp)
}

// CreateMailerEntryWithBodyWithResponse request with arbitrary body returning *CreateMailerEntryResponse
func (c *ClientWithResponses) CreateMailerEntryWithBodyWithResponse(ctx context.Context, params *CreateMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMailerEntryResponse, error) {
	rsp, err := c.CreateMailerEntryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMailerEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateMailerEntryWithResponse(ctx context.Context, params *CreateMailerEntryParams, body CreateMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMailerEntryResponse, error) {
	rsp, err := c.CreateMailerEntry(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMailerEntryResponse(rsp)
}

// DeleteMailerEntryWithResponse request returning *DeleteMailerEntryResponse
func (c *ClientWithResponses) DeleteMailerEntryWithResponse(ctx context.Context, name string, params *DeleteMailerEntryParams, reqEditors ...RequestEditorFn) (*DeleteMailerEntryResponse, error) {
	rsp, err := c.DeleteMailerEntry(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMailerEntryResponse(rsp)
}

// GetMailerEntryWithResponse request returning *GetMailerEntryResponse
func (c *ClientWithResponses) GetMailerEntryWithResponse(ctx context.Context, name string, params *GetMailerEntryParams, reqEditors ...RequestEditorFn) (*GetMailerEntryResponse, error) {
	rsp, err := c.GetMailerEntry(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMailerEntryResponse(rsp)
}

// ReplaceMailerEntryWithBodyWithResponse request with arbitrary body returning *ReplaceMailerEntryResponse
func (c *ClientWithResponses) ReplaceMailerEntryWithBodyWithResponse(ctx context.Context, name string, params *ReplaceMailerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceMailerEntryResponse, error) {
	rsp, err := c.ReplaceMailerEntryWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceMailerEntryResponse(rsp)
}

func (c *ClientWithResponses) ReplaceMailerEntryWithResponse(ctx context.Context, name string, params *ReplaceMailerEntryParams, body ReplaceMailerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceMailerEntryResponse, error) {
	rsp, err := c.ReplaceMailerEntry(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceMailerEntryResponse(rsp)
}

// GetMailersSectionsWithResponse request returning *GetMailersSectionsResponse
func (c *ClientWithResponses) GetMailersSectionsWithResponse(ctx context.Context, params *GetMailersSectionsParams, reqEditors ...RequestEditorFn) (*GetMailersSectionsResponse, error) {
	rsp, err := c.GetMailersSections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMailersSectionsResponse(rsp)
}

// CreateMailersSectionWithBodyWithResponse request with arbitrary body returning *CreateMailersSectionResponse
func (c *ClientWithResponses) CreateMailersSectionWithBodyWithResponse(ctx context.Context, params *CreateMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMailersSectionResponse, error) {
	rsp, err := c.CreateMailersSectionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMailersSectionResponse(rsp)
}

func (c *ClientWithResponses) CreateMailersSectionWithResponse(ctx context.Context, params *CreateMailersSectionParams, body CreateMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMailersSectionResponse, error) {
	rsp, err := c.CreateMailersSection(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMailersSectionResponse(rsp)
}

// DeleteMailersSectionWithResponse request returning *DeleteMailersSectionResponse
func (c *ClientWithResponses) DeleteMailersSectionWithResponse(ctx context.Context, name string, params *DeleteMailersSectionParams, reqEditors ...RequestEditorFn) (*DeleteMailersSectionResponse, error) {
	rsp, err := c.DeleteMailersSection(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMailersSectionResponse(rsp)
}

// GetMailersSectionWithResponse request returning *GetMailersSectionResponse
func (c *ClientWithResponses) GetMailersSectionWithResponse(ctx context.Context, name string, params *GetMailersSectionParams, reqEditors ...RequestEditorFn) (*GetMailersSectionResponse, error) {
	rsp, err := c.GetMailersSection(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMailersSectionResponse(rsp)
}

// EditMailersSectionWithBodyWithResponse request with arbitrary body returning *EditMailersSectionResponse
func (c *ClientWithResponses) EditMailersSectionWithBodyWithResponse(ctx context.Context, name string, params *EditMailersSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMailersSectionResponse, error) {
	rsp, err := c.EditMailersSectionWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMailersSectionResponse(rsp)
}

func (c *ClientWithResponses) EditMailersSectionWithResponse(ctx context.Context, name string, params *EditMailersSectionParams, body EditMailersSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMailersSectionResponse, error) {
	rsp, err := c.EditMailersSection(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMailersSectionResponse(rsp)
}

// GetNameserversWithResponse request returning *GetNameserversResponse
func (c *ClientWithResponses) GetNameserversWithResponse(ctx context.Context, params *GetNameserversParams, reqEditors ...RequestEditorFn) (*GetNameserversResponse, error) {
	rsp, err := c.GetNameservers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNameserversResponse(rsp)
}

// CreateNameserverWithBodyWithResponse request with arbitrary body returning *CreateNameserverResponse
func (c *ClientWithResponses) CreateNameserverWithBodyWithResponse(ctx context.Context, params *CreateNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNameserverResponse, error) {
	rsp, err := c.CreateNameserverWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNameserverResponse(rsp)
}

func (c *ClientWithResponses) CreateNameserverWithResponse(ctx context.Context, params *CreateNameserverParams, body CreateNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNameserverResponse, error) {
	rsp, err := c.CreateNameserver(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNameserverResponse(rsp)
}

// DeleteNameserverWithResponse request returning *DeleteNameserverResponse
func (c *ClientWithResponses) DeleteNameserverWithResponse(ctx context.Context, name string, params *DeleteNameserverParams, reqEditors ...RequestEditorFn) (*DeleteNameserverResponse, error) {
	rsp, err := c.DeleteNameserver(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNameserverResponse(rsp)
}

// GetNameserverWithResponse request returning *GetNameserverResponse
func (c *ClientWithResponses) GetNameserverWithResponse(ctx context.Context, name string, params *GetNameserverParams, reqEditors ...RequestEditorFn) (*GetNameserverResponse, error) {
	rsp, err := c.GetNameserver(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNameserverResponse(rsp)
}

// ReplaceNameserverWithBodyWithResponse request with arbitrary body returning *ReplaceNameserverResponse
func (c *ClientWithResponses) ReplaceNameserverWithBodyWithResponse(ctx context.Context, name string, params *ReplaceNameserverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceNameserverResponse, error) {
	rsp, err := c.ReplaceNameserverWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceNameserverResponse(rsp)
}

func (c *ClientWithResponses) ReplaceNameserverWithResponse(ctx context.Context, name string, params *ReplaceNameserverParams, body ReplaceNameserverJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceNameserverResponse, error) {
	rsp, err := c.ReplaceNameserver(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceNameserverResponse(rsp)
}

// GetPeerEntriesWithResponse request returning *GetPeerEntriesResponse
func (c *ClientWithResponses) GetPeerEntriesWithResponse(ctx context.Context, params *GetPeerEntriesParams, reqEditors ...RequestEditorFn) (*GetPeerEntriesResponse, error) {
	rsp, err := c.GetPeerEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeerEntriesResponse(rsp)
}

// CreatePeerEntryWithBodyWithResponse request with arbitrary body returning *CreatePeerEntryResponse
func (c *ClientWithResponses) CreatePeerEntryWithBodyWithResponse(ctx context.Context, params *CreatePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePeerEntryResponse, error) {
	rsp, err := c.CreatePeerEntryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePeerEntryResponse(rsp)
}

func (c *ClientWithResponses) CreatePeerEntryWithResponse(ctx context.Context, params *CreatePeerEntryParams, body CreatePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePeerEntryResponse, error) {
	rsp, err := c.CreatePeerEntry(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePeerEntryResponse(rsp)
}

// DeletePeerEntryWithResponse request returning *DeletePeerEntryResponse
func (c *ClientWithResponses) DeletePeerEntryWithResponse(ctx context.Context, name string, params *DeletePeerEntryParams, reqEditors ...RequestEditorFn) (*DeletePeerEntryResponse, error) {
	rsp, err := c.DeletePeerEntry(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePeerEntryResponse(rsp)
}

// GetPeerEntryWithResponse request returning *GetPeerEntryResponse
func (c *ClientWithResponses) GetPeerEntryWithResponse(ctx context.Context, name string, params *GetPeerEntryParams, reqEditors ...RequestEditorFn) (*GetPeerEntryResponse, error) {
	rsp, err := c.GetPeerEntry(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeerEntryResponse(rsp)
}

// ReplacePeerEntryWithBodyWithResponse request with arbitrary body returning *ReplacePeerEntryResponse
func (c *ClientWithResponses) ReplacePeerEntryWithBodyWithResponse(ctx context.Context, name string, params *ReplacePeerEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplacePeerEntryResponse, error) {
	rsp, err := c.ReplacePeerEntryWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacePeerEntryResponse(rsp)
}

func (c *ClientWithResponses) ReplacePeerEntryWithResponse(ctx context.Context, name string, params *ReplacePeerEntryParams, body ReplacePeerEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplacePeerEntryResponse, error) {
	rsp, err := c.ReplacePeerEntry(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacePeerEntryResponse(rsp)
}

// GetPeerSectionsWithResponse request returning *GetPeerSectionsResponse
func (c *ClientWithResponses) GetPeerSectionsWithResponse(ctx context.Context, params *GetPeerSectionsParams, reqEditors ...RequestEditorFn) (*GetPeerSectionsResponse, error) {
	rsp, err := c.GetPeerSections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeerSectionsResponse(rsp)
}

// CreatePeerWithBodyWithResponse request with arbitrary body returning *CreatePeerResponse
func (c *ClientWithResponses) CreatePeerWithBodyWithResponse(ctx context.Context, params *CreatePeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePeerResponse, error) {
	rsp, err := c.CreatePeerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePeerResponse(rsp)
}

func (c *ClientWithResponses) CreatePeerWithResponse(ctx context.Context, params *CreatePeerParams, body CreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePeerResponse, error) {
	rsp, err := c.CreatePeer(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePeerResponse(rsp)
}

// DeletePeerWithResponse request returning *DeletePeerResponse
func (c *ClientWithResponses) DeletePeerWithResponse(ctx context.Context, name string, params *DeletePeerParams, reqEditors ...RequestEditorFn) (*DeletePeerResponse, error) {
	rsp, err := c.DeletePeer(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePeerResponse(rsp)
}

// GetPeerSectionWithResponse request returning *GetPeerSectionResponse
func (c *ClientWithResponses) GetPeerSectionWithResponse(ctx context.Context, name string, params *GetPeerSectionParams, reqEditors ...RequestEditorFn) (*GetPeerSectionResponse, error) {
	rsp, err := c.GetPeerSection(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeerSectionResponse(rsp)
}

// GetAllBindPeerWithResponse request returning *GetAllBindPeerResponse
func (c *ClientWithResponses) GetAllBindPeerWithResponse(ctx context.Context, parentName ParentName, params *GetAllBindPeerParams, reqEditors ...RequestEditorFn) (*GetAllBindPeerResponse, error) {
	rsp, err := c.GetAllBindPeer(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllBindPeerResponse(rsp)
}

// CreateBindPeerWithBodyWithResponse request with arbitrary body returning *CreateBindPeerResponse
func (c *ClientWithResponses) CreateBindPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindPeerResponse, error) {
	rsp, err := c.CreateBindPeerWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindPeerResponse(rsp)
}

func (c *ClientWithResponses) CreateBindPeerWithResponse(ctx context.Context, parentName ParentName, params *CreateBindPeerParams, body CreateBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindPeerResponse, error) {
	rsp, err := c.CreateBindPeer(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindPeerResponse(rsp)
}

// DeleteBindPeerWithResponse request returning *DeleteBindPeerResponse
func (c *ClientWithResponses) DeleteBindPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteBindPeerParams, reqEditors ...RequestEditorFn) (*DeleteBindPeerResponse, error) {
	rsp, err := c.DeleteBindPeer(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBindPeerResponse(rsp)
}

// GetBindPeerWithResponse request returning *GetBindPeerResponse
func (c *ClientWithResponses) GetBindPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *GetBindPeerParams, reqEditors ...RequestEditorFn) (*GetBindPeerResponse, error) {
	rsp, err := c.GetBindPeer(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBindPeerResponse(rsp)
}

// ReplaceBindPeerWithBodyWithResponse request with arbitrary body returning *ReplaceBindPeerResponse
func (c *ClientWithResponses) ReplaceBindPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceBindPeerResponse, error) {
	rsp, err := c.ReplaceBindPeerWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBindPeerResponse(rsp)
}

func (c *ClientWithResponses) ReplaceBindPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceBindPeerParams, body ReplaceBindPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceBindPeerResponse, error) {
	rsp, err := c.ReplaceBindPeer(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceBindPeerResponse(rsp)
}

// GetAllLogTargetPeerWithResponse request returning *GetAllLogTargetPeerResponse
func (c *ClientWithResponses) GetAllLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, params *GetAllLogTargetPeerParams, reqEditors ...RequestEditorFn) (*GetAllLogTargetPeerResponse, error) {
	rsp, err := c.GetAllLogTargetPeer(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLogTargetPeerResponse(rsp)
}

// ReplaceAllLogTargetPeerWithBodyWithResponse request with arbitrary body returning *ReplaceAllLogTargetPeerResponse
func (c *ClientWithResponses) ReplaceAllLogTargetPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetPeerResponse, error) {
	rsp, err := c.ReplaceAllLogTargetPeerWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetPeerResponse(rsp)
}

func (c *ClientWithResponses) ReplaceAllLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, params *ReplaceAllLogTargetPeerParams, body ReplaceAllLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceAllLogTargetPeerResponse, error) {
	rsp, err := c.ReplaceAllLogTargetPeer(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAllLogTargetPeerResponse(rsp)
}

// DeleteLogTargetPeerWithResponse request returning *DeleteLogTargetPeerResponse
func (c *ClientWithResponses) DeleteLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *DeleteLogTargetPeerParams, reqEditors ...RequestEditorFn) (*DeleteLogTargetPeerResponse, error) {
	rsp, err := c.DeleteLogTargetPeer(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogTargetPeerResponse(rsp)
}

// GetLogTargetPeerWithResponse request returning *GetLogTargetPeerResponse
func (c *ClientWithResponses) GetLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *GetLogTargetPeerParams, reqEditors ...RequestEditorFn) (*GetLogTargetPeerResponse, error) {
	rsp, err := c.GetLogTargetPeer(ctx, parentName, index, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogTargetPeerResponse(rsp)
}

// CreateLogTargetPeerWithBodyWithResponse request with arbitrary body returning *CreateLogTargetPeerResponse
func (c *ClientWithResponses) CreateLogTargetPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogTargetPeerResponse, error) {
	rsp, err := c.CreateLogTargetPeerWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetPeerResponse(rsp)
}

func (c *ClientWithResponses) CreateLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *CreateLogTargetPeerParams, body CreateLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogTargetPeerResponse, error) {
	rsp, err := c.CreateLogTargetPeer(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogTargetPeerResponse(rsp)
}

// ReplaceLogTargetPeerWithBodyWithResponse request with arbitrary body returning *ReplaceLogTargetPeerResponse
func (c *ClientWithResponses) ReplaceLogTargetPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLogTargetPeerResponse, error) {
	rsp, err := c.ReplaceLogTargetPeerWithBody(ctx, parentName, index, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetPeerResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLogTargetPeerWithResponse(ctx context.Context, parentName ParentName, index int, params *ReplaceLogTargetPeerParams, body ReplaceLogTargetPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLogTargetPeerResponse, error) {
	rsp, err := c.ReplaceLogTargetPeer(ctx, parentName, index, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLogTargetPeerResponse(rsp)
}

// GetAllServerPeerWithResponse request returning *GetAllServerPeerResponse
func (c *ClientWithResponses) GetAllServerPeerWithResponse(ctx context.Context, parentName ParentName, params *GetAllServerPeerParams, reqEditors ...RequestEditorFn) (*GetAllServerPeerResponse, error) {
	rsp, err := c.GetAllServerPeer(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllServerPeerResponse(rsp)
}

// CreateServerPeerWithBodyWithResponse request with arbitrary body returning *CreateServerPeerResponse
func (c *ClientWithResponses) CreateServerPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerPeerResponse, error) {
	rsp, err := c.CreateServerPeerWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerPeerResponse(rsp)
}

func (c *ClientWithResponses) CreateServerPeerWithResponse(ctx context.Context, parentName ParentName, params *CreateServerPeerParams, body CreateServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerPeerResponse, error) {
	rsp, err := c.CreateServerPeer(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerPeerResponse(rsp)
}

// DeleteServerPeerWithResponse request returning *DeleteServerPeerResponse
func (c *ClientWithResponses) DeleteServerPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteServerPeerParams, reqEditors ...RequestEditorFn) (*DeleteServerPeerResponse, error) {
	rsp, err := c.DeleteServerPeer(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServerPeerResponse(rsp)
}

// GetServerPeerWithResponse request returning *GetServerPeerResponse
func (c *ClientWithResponses) GetServerPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *GetServerPeerParams, reqEditors ...RequestEditorFn) (*GetServerPeerResponse, error) {
	rsp, err := c.GetServerPeer(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerPeerResponse(rsp)
}

// ReplaceServerPeerWithBodyWithResponse request with arbitrary body returning *ReplaceServerPeerResponse
func (c *ClientWithResponses) ReplaceServerPeerWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerPeerResponse, error) {
	rsp, err := c.ReplaceServerPeerWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerPeerResponse(rsp)
}

func (c *ClientWithResponses) ReplaceServerPeerWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerPeerParams, body ReplaceServerPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerPeerResponse, error) {
	rsp, err := c.ReplaceServerPeer(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerPeerResponse(rsp)
}

// GetTablesWithResponse request returning *GetTablesResponse
func (c *ClientWithResponses) GetTablesWithResponse(ctx context.Context, parentName ParentName, params *GetTablesParams, reqEditors ...RequestEditorFn) (*GetTablesResponse, error) {
	rsp, err := c.GetTables(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTablesResponse(rsp)
}

// CreateTableWithBodyWithResponse request with arbitrary body returning *CreateTableResponse
func (c *ClientWithResponses) CreateTableWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTableResponse, error) {
	rsp, err := c.CreateTableWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTableResponse(rsp)
}

func (c *ClientWithResponses) CreateTableWithResponse(ctx context.Context, parentName ParentName, params *CreateTableParams, body CreateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTableResponse, error) {
	rsp, err := c.CreateTable(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTableResponse(rsp)
}

// DeleteTableWithResponse request returning *DeleteTableResponse
func (c *ClientWithResponses) DeleteTableWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteTableParams, reqEditors ...RequestEditorFn) (*DeleteTableResponse, error) {
	rsp, err := c.DeleteTable(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTableResponse(rsp)
}

// GetTableWithResponse request returning *GetTableResponse
func (c *ClientWithResponses) GetTableWithResponse(ctx context.Context, parentName ParentName, name string, params *GetTableParams, reqEditors ...RequestEditorFn) (*GetTableResponse, error) {
	rsp, err := c.GetTable(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableResponse(rsp)
}

// ReplaceTableWithBodyWithResponse request with arbitrary body returning *ReplaceTableResponse
func (c *ClientWithResponses) ReplaceTableWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTableResponse, error) {
	rsp, err := c.ReplaceTableWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTableResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTableWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceTableParams, body ReplaceTableJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTableResponse, error) {
	rsp, err := c.ReplaceTable(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTableResponse(rsp)
}

// GetProgramsWithResponse request returning *GetProgramsResponse
func (c *ClientWithResponses) GetProgramsWithResponse(ctx context.Context, params *GetProgramsParams, reqEditors ...RequestEditorFn) (*GetProgramsResponse, error) {
	rsp, err := c.GetPrograms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProgramsResponse(rsp)
}

// CreateProgramWithBodyWithResponse request with arbitrary body returning *CreateProgramResponse
func (c *ClientWithResponses) CreateProgramWithBodyWithResponse(ctx context.Context, params *CreateProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProgramResponse, error) {
	rsp, err := c.CreateProgramWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProgramResponse(rsp)
}

func (c *ClientWithResponses) CreateProgramWithResponse(ctx context.Context, params *CreateProgramParams, body CreateProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProgramResponse, error) {
	rsp, err := c.CreateProgram(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProgramResponse(rsp)
}

// DeleteProgramWithResponse request returning *DeleteProgramResponse
func (c *ClientWithResponses) DeleteProgramWithResponse(ctx context.Context, name string, params *DeleteProgramParams, reqEditors ...RequestEditorFn) (*DeleteProgramResponse, error) {
	rsp, err := c.DeleteProgram(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProgramResponse(rsp)
}

// GetProgramWithResponse request returning *GetProgramResponse
func (c *ClientWithResponses) GetProgramWithResponse(ctx context.Context, name string, params *GetProgramParams, reqEditors ...RequestEditorFn) (*GetProgramResponse, error) {
	rsp, err := c.GetProgram(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProgramResponse(rsp)
}

// ReplaceProgramWithBodyWithResponse request with arbitrary body returning *ReplaceProgramResponse
func (c *ClientWithResponses) ReplaceProgramWithBodyWithResponse(ctx context.Context, name string, params *ReplaceProgramParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceProgramResponse, error) {
	rsp, err := c.ReplaceProgramWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceProgramResponse(rsp)
}

func (c *ClientWithResponses) ReplaceProgramWithResponse(ctx context.Context, name string, params *ReplaceProgramParams, body ReplaceProgramJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceProgramResponse, error) {
	rsp, err := c.ReplaceProgram(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceProgramResponse(rsp)
}

// GetHAProxyConfigurationWithResponse request returning *GetHAProxyConfigurationResponse
func (c *ClientWithResponses) GetHAProxyConfigurationWithResponse(ctx context.Context, params *GetHAProxyConfigurationParams, reqEditors ...RequestEditorFn) (*GetHAProxyConfigurationResponse, error) {
	rsp, err := c.GetHAProxyConfiguration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHAProxyConfigurationResponse(rsp)
}

// PostHAProxyConfigurationWithBodyWithResponse request with arbitrary body returning *PostHAProxyConfigurationResponse
func (c *ClientWithResponses) PostHAProxyConfigurationWithBodyWithResponse(ctx context.Context, params *PostHAProxyConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHAProxyConfigurationResponse, error) {
	rsp, err := c.PostHAProxyConfigurationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHAProxyConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PostHAProxyConfigurationWithTextBodyWithResponse(ctx context.Context, params *PostHAProxyConfigurationParams, body PostHAProxyConfigurationTextRequestBody, reqEditors ...RequestEditorFn) (*PostHAProxyConfigurationResponse, error) {
	rsp, err := c.PostHAProxyConfigurationWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHAProxyConfigurationResponse(rsp)
}

// GetResolversWithResponse request returning *GetResolversResponse
func (c *ClientWithResponses) GetResolversWithResponse(ctx context.Context, params *GetResolversParams, reqEditors ...RequestEditorFn) (*GetResolversResponse, error) {
	rsp, err := c.GetResolvers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResolversResponse(rsp)
}

// CreateResolverWithBodyWithResponse request with arbitrary body returning *CreateResolverResponse
func (c *ClientWithResponses) CreateResolverWithBodyWithResponse(ctx context.Context, params *CreateResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResolverResponse, error) {
	rsp, err := c.CreateResolverWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResolverResponse(rsp)
}

func (c *ClientWithResponses) CreateResolverWithResponse(ctx context.Context, params *CreateResolverParams, body CreateResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResolverResponse, error) {
	rsp, err := c.CreateResolver(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResolverResponse(rsp)
}

// DeleteResolverWithResponse request returning *DeleteResolverResponse
func (c *ClientWithResponses) DeleteResolverWithResponse(ctx context.Context, name string, params *DeleteResolverParams, reqEditors ...RequestEditorFn) (*DeleteResolverResponse, error) {
	rsp, err := c.DeleteResolver(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResolverResponse(rsp)
}

// GetResolverWithResponse request returning *GetResolverResponse
func (c *ClientWithResponses) GetResolverWithResponse(ctx context.Context, name string, params *GetResolverParams, reqEditors ...RequestEditorFn) (*GetResolverResponse, error) {
	rsp, err := c.GetResolver(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResolverResponse(rsp)
}

// ReplaceResolverWithBodyWithResponse request with arbitrary body returning *ReplaceResolverResponse
func (c *ClientWithResponses) ReplaceResolverWithBodyWithResponse(ctx context.Context, name string, params *ReplaceResolverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceResolverResponse, error) {
	rsp, err := c.ReplaceResolverWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceResolverResponse(rsp)
}

func (c *ClientWithResponses) ReplaceResolverWithResponse(ctx context.Context, name string, params *ReplaceResolverParams, body ReplaceResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceResolverResponse, error) {
	rsp, err := c.ReplaceResolver(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceResolverResponse(rsp)
}

// GetRingsWithResponse request returning *GetRingsResponse
func (c *ClientWithResponses) GetRingsWithResponse(ctx context.Context, params *GetRingsParams, reqEditors ...RequestEditorFn) (*GetRingsResponse, error) {
	rsp, err := c.GetRings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRingsResponse(rsp)
}

// CreateRingWithBodyWithResponse request with arbitrary body returning *CreateRingResponse
func (c *ClientWithResponses) CreateRingWithBodyWithResponse(ctx context.Context, params *CreateRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRingResponse, error) {
	rsp, err := c.CreateRingWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRingResponse(rsp)
}

func (c *ClientWithResponses) CreateRingWithResponse(ctx context.Context, params *CreateRingParams, body CreateRingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRingResponse, error) {
	rsp, err := c.CreateRing(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRingResponse(rsp)
}

// DeleteRingWithResponse request returning *DeleteRingResponse
func (c *ClientWithResponses) DeleteRingWithResponse(ctx context.Context, name string, params *DeleteRingParams, reqEditors ...RequestEditorFn) (*DeleteRingResponse, error) {
	rsp, err := c.DeleteRing(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRingResponse(rsp)
}

// GetRingWithResponse request returning *GetRingResponse
func (c *ClientWithResponses) GetRingWithResponse(ctx context.Context, name string, params *GetRingParams, reqEditors ...RequestEditorFn) (*GetRingResponse, error) {
	rsp, err := c.GetRing(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRingResponse(rsp)
}

// ReplaceRingWithBodyWithResponse request with arbitrary body returning *ReplaceRingResponse
func (c *ClientWithResponses) ReplaceRingWithBodyWithResponse(ctx context.Context, name string, params *ReplaceRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceRingResponse, error) {
	rsp, err := c.ReplaceRingWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceRingResponse(rsp)
}

func (c *ClientWithResponses) ReplaceRingWithResponse(ctx context.Context, name string, params *ReplaceRingParams, body ReplaceRingJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceRingResponse, error) {
	rsp, err := c.ReplaceRing(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceRingResponse(rsp)
}

// GetAllServerRingWithResponse request returning *GetAllServerRingResponse
func (c *ClientWithResponses) GetAllServerRingWithResponse(ctx context.Context, parentName ParentName, params *GetAllServerRingParams, reqEditors ...RequestEditorFn) (*GetAllServerRingResponse, error) {
	rsp, err := c.GetAllServerRing(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllServerRingResponse(rsp)
}

// CreateServerRingWithBodyWithResponse request with arbitrary body returning *CreateServerRingResponse
func (c *ClientWithResponses) CreateServerRingWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServerRingResponse, error) {
	rsp, err := c.CreateServerRingWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerRingResponse(rsp)
}

func (c *ClientWithResponses) CreateServerRingWithResponse(ctx context.Context, parentName ParentName, params *CreateServerRingParams, body CreateServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServerRingResponse, error) {
	rsp, err := c.CreateServerRing(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServerRingResponse(rsp)
}

// DeleteServerRingWithResponse request returning *DeleteServerRingResponse
func (c *ClientWithResponses) DeleteServerRingWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteServerRingParams, reqEditors ...RequestEditorFn) (*DeleteServerRingResponse, error) {
	rsp, err := c.DeleteServerRing(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServerRingResponse(rsp)
}

// GetServerRingWithResponse request returning *GetServerRingResponse
func (c *ClientWithResponses) GetServerRingWithResponse(ctx context.Context, parentName ParentName, name string, params *GetServerRingParams, reqEditors ...RequestEditorFn) (*GetServerRingResponse, error) {
	rsp, err := c.GetServerRing(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerRingResponse(rsp)
}

// ReplaceServerRingWithBodyWithResponse request with arbitrary body returning *ReplaceServerRingResponse
func (c *ClientWithResponses) ReplaceServerRingWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceServerRingResponse, error) {
	rsp, err := c.ReplaceServerRingWithBody(ctx, parentName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerRingResponse(rsp)
}

func (c *ClientWithResponses) ReplaceServerRingWithResponse(ctx context.Context, parentName ParentName, name string, params *ReplaceServerRingParams, body ReplaceServerRingJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceServerRingResponse, error) {
	rsp, err := c.ReplaceServerRing(ctx, parentName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceServerRingResponse(rsp)
}

// DeleteTracesWithResponse request returning *DeleteTracesResponse
func (c *ClientWithResponses) DeleteTracesWithResponse(ctx context.Context, params *DeleteTracesParams, reqEditors ...RequestEditorFn) (*DeleteTracesResponse, error) {
	rsp, err := c.DeleteTraces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTracesResponse(rsp)
}

// GetTracesWithResponse request returning *GetTracesResponse
func (c *ClientWithResponses) GetTracesWithResponse(ctx context.Context, params *GetTracesParams, reqEditors ...RequestEditorFn) (*GetTracesResponse, error) {
	rsp, err := c.GetTraces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracesResponse(rsp)
}

// CreateTracesWithBodyWithResponse request with arbitrary body returning *CreateTracesResponse
func (c *ClientWithResponses) CreateTracesWithBodyWithResponse(ctx context.Context, params *CreateTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTracesResponse, error) {
	rsp, err := c.CreateTracesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTracesResponse(rsp)
}

func (c *ClientWithResponses) CreateTracesWithResponse(ctx context.Context, params *CreateTracesParams, body CreateTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTracesResponse, error) {
	rsp, err := c.CreateTraces(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTracesResponse(rsp)
}

// ReplaceTracesWithBodyWithResponse request with arbitrary body returning *ReplaceTracesResponse
func (c *ClientWithResponses) ReplaceTracesWithBodyWithResponse(ctx context.Context, params *ReplaceTracesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceTracesResponse, error) {
	rsp, err := c.ReplaceTracesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTracesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceTracesWithResponse(ctx context.Context, params *ReplaceTracesParams, body ReplaceTracesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceTracesResponse, error) {
	rsp, err := c.ReplaceTraces(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceTracesResponse(rsp)
}

// DeleteTraceEntryWithBodyWithResponse request with arbitrary body returning *DeleteTraceEntryResponse
func (c *ClientWithResponses) DeleteTraceEntryWithBodyWithResponse(ctx context.Context, params *DeleteTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTraceEntryResponse, error) {
	rsp, err := c.DeleteTraceEntryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTraceEntryResponse(rsp)
}

func (c *ClientWithResponses) DeleteTraceEntryWithResponse(ctx context.Context, params *DeleteTraceEntryParams, body DeleteTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTraceEntryResponse, error) {
	rsp, err := c.DeleteTraceEntry(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTraceEntryResponse(rsp)
}

// CreateTraceEntryWithBodyWithResponse request with arbitrary body returning *CreateTraceEntryResponse
func (c *ClientWithResponses) CreateTraceEntryWithBodyWithResponse(ctx context.Context, params *CreateTraceEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTraceEntryResponse, error) {
	rsp, err := c.CreateTraceEntryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTraceEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateTraceEntryWithResponse(ctx context.Context, params *CreateTraceEntryParams, body CreateTraceEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTraceEntryResponse, error) {
	rsp, err := c.CreateTraceEntry(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTraceEntryResponse(rsp)
}

// GetUserlistsWithResponse request returning *GetUserlistsResponse
func (c *ClientWithResponses) GetUserlistsWithResponse(ctx context.Context, params *GetUserlistsParams, reqEditors ...RequestEditorFn) (*GetUserlistsResponse, error) {
	rsp, err := c.GetUserlists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserlistsResponse(rsp)
}

// CreateUserlistWithBodyWithResponse request with arbitrary body returning *CreateUserlistResponse
func (c *ClientWithResponses) CreateUserlistWithBodyWithResponse(ctx context.Context, params *CreateUserlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserlistResponse, error) {
	rsp, err := c.CreateUserlistWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserlistResponse(rsp)
}

func (c *ClientWithResponses) CreateUserlistWithResponse(ctx context.Context, params *CreateUserlistParams, body CreateUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserlistResponse, error) {
	rsp, err := c.CreateUserlist(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserlistResponse(rsp)
}

// DeleteUserlistWithResponse request returning *DeleteUserlistResponse
func (c *ClientWithResponses) DeleteUserlistWithResponse(ctx context.Context, name string, params *DeleteUserlistParams, reqEditors ...RequestEditorFn) (*DeleteUserlistResponse, error) {
	rsp, err := c.DeleteUserlist(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserlistResponse(rsp)
}

// GetUserlistWithResponse request returning *GetUserlistResponse
func (c *ClientWithResponses) GetUserlistWithResponse(ctx context.Context, name string, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*GetUserlistResponse, error) {
	rsp, err := c.GetUserlist(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserlistResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, params *CreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, params *CreateUserParams, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, username string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, username string, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// ReplaceUserWithBodyWithResponse request with arbitrary body returning *ReplaceUserResponse
func (c *ClientWithResponses) ReplaceUserWithBodyWithResponse(ctx context.Context, username string, params *ReplaceUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceUserResponse, error) {
	rsp, err := c.ReplaceUserWithBody(ctx, username, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceUserResponse(rsp)
}

func (c *ClientWithResponses) ReplaceUserWithResponse(ctx context.Context, username string, params *ReplaceUserParams, body ReplaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceUserResponse, error) {
	rsp, err := c.ReplaceUser(ctx, username, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceUserResponse(rsp)
}

// GetConfigurationVersionWithResponse request returning *GetConfigurationVersionResponse
func (c *ClientWithResponses) GetConfigurationVersionWithResponse(ctx context.Context, params *GetConfigurationVersionParams, reqEditors ...RequestEditorFn) (*GetConfigurationVersionResponse, error) {
	rsp, err := c.GetConfigurationVersion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationVersionResponse(rsp)
}

// GetReloadsWithResponse request returning *GetReloadsResponse
func (c *ClientWithResponses) GetReloadsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReloadsResponse, error) {
	rsp, err := c.GetReloads(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReloadsResponse(rsp)
}

// GetReloadWithResponse request returning *GetReloadResponse
func (c *ClientWithResponses) GetReloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetReloadResponse, error) {
	rsp, err := c.GetReload(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReloadResponse(rsp)
}

// GetRuntimeEndpointsWithResponse request returning *GetRuntimeEndpointsResponse
func (c *ClientWithResponses) GetRuntimeEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRuntimeEndpointsResponse, error) {
	rsp, err := c.GetRuntimeEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuntimeEndpointsResponse(rsp)
}

// GetServicesHaproxyRuntimeAclsWithResponse request returning *GetServicesHaproxyRuntimeAclsResponse
func (c *ClientWithResponses) GetServicesHaproxyRuntimeAclsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsResponse, error) {
	rsp, err := c.GetServicesHaproxyRuntimeAcls(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesHaproxyRuntimeAclsResponse(rsp)
}

// GetServicesHaproxyRuntimeAclsIdWithResponse request returning *GetServicesHaproxyRuntimeAclsIdResponse
func (c *ClientWithResponses) GetServicesHaproxyRuntimeAclsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsIdResponse, error) {
	rsp, err := c.GetServicesHaproxyRuntimeAclsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesHaproxyRuntimeAclsIdResponse(rsp)
}

// GetServicesHaproxyRuntimeAclsParentNameEntriesWithResponse request returning *GetServicesHaproxyRuntimeAclsParentNameEntriesResponse
func (c *ClientWithResponses) GetServicesHaproxyRuntimeAclsParentNameEntriesWithResponse(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsParentNameEntriesResponse, error) {
	rsp, err := c.GetServicesHaproxyRuntimeAclsParentNameEntries(ctx, parentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesHaproxyRuntimeAclsParentNameEntriesResponse(rsp)
}

// PostServicesHaproxyRuntimeAclsParentNameEntriesWithBodyWithResponse request with arbitrary body returning *PostServicesHaproxyRuntimeAclsParentNameEntriesResponse
func (c *ClientWithResponses) PostServicesHaproxyRuntimeAclsParentNameEntriesWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicesHaproxyRuntimeAclsParentNameEntriesResponse, error) {
	rsp, err := c.PostServicesHaproxyRuntimeAclsParentNameEntriesWithBody(ctx, parentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicesHaproxyRuntimeAclsParentNameEntriesResponse(rsp)
}

func (c *ClientWithResponses) PostServicesHaproxyRuntimeAclsParentNameEntriesWithResponse(ctx context.Context, parentName ParentName, body PostServicesHaproxyRuntimeAclsParentNameEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicesHaproxyRuntimeAclsParentNameEntriesResponse, error) {
	rsp, err := c.PostServicesHaproxyRuntimeAclsParentNameEntries(ctx, parentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicesHaproxyRuntimeAclsParentNameEntriesResponse(rsp)
}

// AddPayloadRuntimeACLWithBodyWithResponse request with arbitrary body returning *AddPayloadRuntimeACLResponse
func (c *ClientWithResponses) AddPayloadRuntimeACLWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeACLResponse, error) {
	rsp, err := c.AddPayloadRuntimeACLWithBody(ctx, parentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPayloadRuntimeACLResponse(rsp)
}

func (c *ClientWithResponses) AddPayloadRuntimeACLWithResponse(ctx context.Context, parentName ParentName, body AddPayloadRuntimeACLJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeACLResponse, error) {
	rsp, err := c.AddPayloadRuntimeACL(ctx, parentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPayloadRuntimeACLResponse(rsp)
}

// DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse request returning *DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse
func (c *ClientWithResponses) DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse, error) {
	rsp, err := c.DeleteServicesHaproxyRuntimeAclsParentNameEntriesId(ctx, parentName, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse(rsp)
}

// GetServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse request returning *GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse
func (c *ClientWithResponses) GetServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse, error) {
	rsp, err := c.GetServicesHaproxyRuntimeAclsParentNameEntriesId(ctx, parentName, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse(rsp)
}

// GetAllRuntimeServerWithResponse request returning *GetAllRuntimeServerResponse
func (c *ClientWithResponses) GetAllRuntimeServerWithResponse(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*GetAllRuntimeServerResponse, error) {
	rsp, err := c.GetAllRuntimeServer(ctx, parentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRuntimeServerResponse(rsp)
}

// AddRuntimeServerWithBodyWithResponse request with arbitrary body returning *AddRuntimeServerResponse
func (c *ClientWithResponses) AddRuntimeServerWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRuntimeServerResponse, error) {
	rsp, err := c.AddRuntimeServerWithBody(ctx, parentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRuntimeServerResponse(rsp)
}

func (c *ClientWithResponses) AddRuntimeServerWithResponse(ctx context.Context, parentName ParentName, body AddRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRuntimeServerResponse, error) {
	rsp, err := c.AddRuntimeServer(ctx, parentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRuntimeServerResponse(rsp)
}

// DeleteRuntimeServerWithResponse request returning *DeleteRuntimeServerResponse
func (c *ClientWithResponses) DeleteRuntimeServerWithResponse(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*DeleteRuntimeServerResponse, error) {
	rsp, err := c.DeleteRuntimeServer(ctx, parentName, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRuntimeServerResponse(rsp)
}

// GetRuntimeServerWithResponse request returning *GetRuntimeServerResponse
func (c *ClientWithResponses) GetRuntimeServerWithResponse(ctx context.Context, parentName ParentName, name string, reqEditors ...RequestEditorFn) (*GetRuntimeServerResponse, error) {
	rsp, err := c.GetRuntimeServer(ctx, parentName, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuntimeServerResponse(rsp)
}

// ReplaceRuntimeServerWithBodyWithResponse request with arbitrary body returning *ReplaceRuntimeServerResponse
func (c *ClientWithResponses) ReplaceRuntimeServerWithBodyWithResponse(ctx context.Context, parentName ParentName, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceRuntimeServerResponse, error) {
	rsp, err := c.ReplaceRuntimeServerWithBody(ctx, parentName, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceRuntimeServerResponse(rsp)
}

func (c *ClientWithResponses) ReplaceRuntimeServerWithResponse(ctx context.Context, parentName ParentName, name string, body ReplaceRuntimeServerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceRuntimeServerResponse, error) {
	rsp, err := c.ReplaceRuntimeServer(ctx, parentName, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceRuntimeServerResponse(rsp)
}

// GetHaproxyProcessInfoWithResponse request returning *GetHaproxyProcessInfoResponse
func (c *ClientWithResponses) GetHaproxyProcessInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHaproxyProcessInfoResponse, error) {
	rsp, err := c.GetHaproxyProcessInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHaproxyProcessInfoResponse(rsp)
}

// GetAllRuntimeMapFilesWithResponse request returning *GetAllRuntimeMapFilesResponse
func (c *ClientWithResponses) GetAllRuntimeMapFilesWithResponse(ctx context.Context, params *GetAllRuntimeMapFilesParams, reqEditors ...RequestEditorFn) (*GetAllRuntimeMapFilesResponse, error) {
	rsp, err := c.GetAllRuntimeMapFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRuntimeMapFilesResponse(rsp)
}

// ClearRuntimeMapWithResponse request returning *ClearRuntimeMapResponse
func (c *ClientWithResponses) ClearRuntimeMapWithResponse(ctx context.Context, name string, params *ClearRuntimeMapParams, reqEditors ...RequestEditorFn) (*ClearRuntimeMapResponse, error) {
	rsp, err := c.ClearRuntimeMap(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClearRuntimeMapResponse(rsp)
}

// GetOneRuntimeMapWithResponse request returning *GetOneRuntimeMapResponse
func (c *ClientWithResponses) GetOneRuntimeMapWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneRuntimeMapResponse, error) {
	rsp, err := c.GetOneRuntimeMap(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneRuntimeMapResponse(rsp)
}

// AddPayloadRuntimeMapWithBodyWithResponse request with arbitrary body returning *AddPayloadRuntimeMapResponse
func (c *ClientWithResponses) AddPayloadRuntimeMapWithBodyWithResponse(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeMapResponse, error) {
	rsp, err := c.AddPayloadRuntimeMapWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPayloadRuntimeMapResponse(rsp)
}

func (c *ClientWithResponses) AddPayloadRuntimeMapWithResponse(ctx context.Context, name string, params *AddPayloadRuntimeMapParams, body AddPayloadRuntimeMapJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPayloadRuntimeMapResponse, error) {
	rsp, err := c.AddPayloadRuntimeMap(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPayloadRuntimeMapResponse(rsp)
}

// ShowRuntimeMapWithResponse request returning *ShowRuntimeMapResponse
func (c *ClientWithResponses) ShowRuntimeMapWithResponse(ctx context.Context, parentName ParentName, reqEditors ...RequestEditorFn) (*ShowRuntimeMapResponse, error) {
	rsp, err := c.ShowRuntimeMap(ctx, parentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShowRuntimeMapResponse(rsp)
}

// AddMapEntryWithBodyWithResponse request with arbitrary body returning *AddMapEntryResponse
func (c *ClientWithResponses) AddMapEntryWithBodyWithResponse(ctx context.Context, parentName ParentName, params *AddMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMapEntryResponse, error) {
	rsp, err := c.AddMapEntryWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMapEntryResponse(rsp)
}

func (c *ClientWithResponses) AddMapEntryWithResponse(ctx context.Context, parentName ParentName, params *AddMapEntryParams, body AddMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMapEntryResponse, error) {
	rsp, err := c.AddMapEntry(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMapEntryResponse(rsp)
}

// DeleteRuntimeMapEntryWithResponse request returning *DeleteRuntimeMapEntryResponse
func (c *ClientWithResponses) DeleteRuntimeMapEntryWithResponse(ctx context.Context, parentName ParentName, id string, params *DeleteRuntimeMapEntryParams, reqEditors ...RequestEditorFn) (*DeleteRuntimeMapEntryResponse, error) {
	rsp, err := c.DeleteRuntimeMapEntry(ctx, parentName, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRuntimeMapEntryResponse(rsp)
}

// GetRuntimeMapEntryWithResponse request returning *GetRuntimeMapEntryResponse
func (c *ClientWithResponses) GetRuntimeMapEntryWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*GetRuntimeMapEntryResponse, error) {
	rsp, err := c.GetRuntimeMapEntry(ctx, parentName, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuntimeMapEntryResponse(rsp)
}

// ReplaceRuntimeMapEntryWithBodyWithResponse request with arbitrary body returning *ReplaceRuntimeMapEntryResponse
func (c *ClientWithResponses) ReplaceRuntimeMapEntryWithBodyWithResponse(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceRuntimeMapEntryResponse, error) {
	rsp, err := c.ReplaceRuntimeMapEntryWithBody(ctx, parentName, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceRuntimeMapEntryResponse(rsp)
}

func (c *ClientWithResponses) ReplaceRuntimeMapEntryWithResponse(ctx context.Context, parentName ParentName, id string, params *ReplaceRuntimeMapEntryParams, body ReplaceRuntimeMapEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceRuntimeMapEntryResponse, error) {
	rsp, err := c.ReplaceRuntimeMapEntry(ctx, parentName, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceRuntimeMapEntryResponse(rsp)
}

// GetAllCaFilesWithResponse request returning *GetAllCaFilesResponse
func (c *ClientWithResponses) GetAllCaFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCaFilesResponse, error) {
	rsp, err := c.GetAllCaFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCaFilesResponse(rsp)
}

// CreateCaFileWithBodyWithResponse request with arbitrary body returning *CreateCaFileResponse
func (c *ClientWithResponses) CreateCaFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCaFileResponse, error) {
	rsp, err := c.CreateCaFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCaFileResponse(rsp)
}

// DeleteCaFileWithResponse request returning *DeleteCaFileResponse
func (c *ClientWithResponses) DeleteCaFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCaFileResponse, error) {
	rsp, err := c.DeleteCaFile(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCaFileResponse(rsp)
}

// GetCaFileWithResponse request returning *GetCaFileResponse
func (c *ClientWithResponses) GetCaFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCaFileResponse, error) {
	rsp, err := c.GetCaFile(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCaFileResponse(rsp)
}

// SetCaFileWithBodyWithResponse request with arbitrary body returning *SetCaFileResponse
func (c *ClientWithResponses) SetCaFileWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCaFileResponse, error) {
	rsp, err := c.SetCaFileWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCaFileResponse(rsp)
}

// AddCaEntryWithBodyWithResponse request with arbitrary body returning *AddCaEntryResponse
func (c *ClientWithResponses) AddCaEntryWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCaEntryResponse, error) {
	rsp, err := c.AddCaEntryWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCaEntryResponse(rsp)
}

// GetCaEntryWithResponse request returning *GetCaEntryResponse
func (c *ClientWithResponses) GetCaEntryWithResponse(ctx context.Context, name string, index int, reqEditors ...RequestEditorFn) (*GetCaEntryResponse, error) {
	rsp, err := c.GetCaEntry(ctx, name, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCaEntryResponse(rsp)
}

// GetAllCertsWithResponse request returning *GetAllCertsResponse
func (c *ClientWithResponses) GetAllCertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCertsResponse, error) {
	rsp, err := c.GetAllCerts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCertsResponse(rsp)
}

// CreateCertWithBodyWithResponse request with arbitrary body returning *CreateCertResponse
func (c *ClientWithResponses) CreateCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCertResponse, error) {
	rsp, err := c.CreateCertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCertResponse(rsp)
}

// DeleteCertWithResponse request returning *DeleteCertResponse
func (c *ClientWithResponses) DeleteCertWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCertResponse, error) {
	rsp, err := c.DeleteCert(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertResponse(rsp)
}

// GetCertWithResponse request returning *GetCertResponse
func (c *ClientWithResponses) GetCertWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCertResponse, error) {
	rsp, err := c.GetCert(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertResponse(rsp)
}

// ReplaceCertWithBodyWithResponse request with arbitrary body returning *ReplaceCertResponse
func (c *ClientWithResponses) ReplaceCertWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCertResponse, error) {
	rsp, err := c.ReplaceCertWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCertResponse(rsp)
}

// GetAllCrlWithResponse request returning *GetAllCrlResponse
func (c *ClientWithResponses) GetAllCrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCrlResponse, error) {
	rsp, err := c.GetAllCrl(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCrlResponse(rsp)
}

// CreateCrlWithBodyWithResponse request with arbitrary body returning *CreateCrlResponse
func (c *ClientWithResponses) CreateCrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCrlResponse, error) {
	rsp, err := c.CreateCrlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCrlResponse(rsp)
}

// DeleteCrlWithResponse request returning *DeleteCrlResponse
func (c *ClientWithResponses) DeleteCrlWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCrlResponse, error) {
	rsp, err := c.DeleteCrl(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCrlResponse(rsp)
}

// GetCrlWithResponse request returning *GetCrlResponse
func (c *ClientWithResponses) GetCrlWithResponse(ctx context.Context, name string, params *GetCrlParams, reqEditors ...RequestEditorFn) (*GetCrlResponse, error) {
	rsp, err := c.GetCrl(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCrlResponse(rsp)
}

// ReplaceCrlWithBodyWithResponse request with arbitrary body returning *ReplaceCrlResponse
func (c *ClientWithResponses) ReplaceCrlWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCrlResponse, error) {
	rsp, err := c.ReplaceCrlWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCrlResponse(rsp)
}

// GetAllCrtListsWithResponse request returning *GetAllCrtListsResponse
func (c *ClientWithResponses) GetAllCrtListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCrtListsResponse, error) {
	rsp, err := c.GetAllCrtLists(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCrtListsResponse(rsp)
}

// DeleteCrtListEntryWithResponse request returning *DeleteCrtListEntryResponse
func (c *ClientWithResponses) DeleteCrtListEntryWithResponse(ctx context.Context, params *DeleteCrtListEntryParams, reqEditors ...RequestEditorFn) (*DeleteCrtListEntryResponse, error) {
	rsp, err := c.DeleteCrtListEntry(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCrtListEntryResponse(rsp)
}

// GetAllCrtListEntriesWithResponse request returning *GetAllCrtListEntriesResponse
func (c *ClientWithResponses) GetAllCrtListEntriesWithResponse(ctx context.Context, params *GetAllCrtListEntriesParams, reqEditors ...RequestEditorFn) (*GetAllCrtListEntriesResponse, error) {
	rsp, err := c.GetAllCrtListEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCrtListEntriesResponse(rsp)
}

// AddCrtListEntryWithBodyWithResponse request with arbitrary body returning *AddCrtListEntryResponse
func (c *ClientWithResponses) AddCrtListEntryWithBodyWithResponse(ctx context.Context, params *AddCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCrtListEntryResponse, error) {
	rsp, err := c.AddCrtListEntryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCrtListEntryResponse(rsp)
}

func (c *ClientWithResponses) AddCrtListEntryWithResponse(ctx context.Context, params *AddCrtListEntryParams, body AddCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCrtListEntryResponse, error) {
	rsp, err := c.AddCrtListEntry(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCrtListEntryResponse(rsp)
}

// GetStickTablesWithResponse request returning *GetStickTablesResponse
func (c *ClientWithResponses) GetStickTablesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStickTablesResponse, error) {
	rsp, err := c.GetStickTables(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStickTablesResponse(rsp)
}

// GetStickTableWithResponse request returning *GetStickTableResponse
func (c *ClientWithResponses) GetStickTableWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStickTableResponse, error) {
	rsp, err := c.GetStickTable(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStickTableResponse(rsp)
}

// GetStickTableEntriesWithResponse request returning *GetStickTableEntriesResponse
func (c *ClientWithResponses) GetStickTableEntriesWithResponse(ctx context.Context, parentName ParentName, params *GetStickTableEntriesParams, reqEditors ...RequestEditorFn) (*GetStickTableEntriesResponse, error) {
	rsp, err := c.GetStickTableEntries(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStickTableEntriesResponse(rsp)
}

// SetStickTableEntriesWithBodyWithResponse request with arbitrary body returning *SetStickTableEntriesResponse
func (c *ClientWithResponses) SetStickTableEntriesWithBodyWithResponse(ctx context.Context, parentName ParentName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetStickTableEntriesResponse, error) {
	rsp, err := c.SetStickTableEntriesWithBody(ctx, parentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetStickTableEntriesResponse(rsp)
}

func (c *ClientWithResponses) SetStickTableEntriesWithResponse(ctx context.Context, parentName ParentName, body SetStickTableEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*SetStickTableEntriesResponse, error) {
	rsp, err := c.SetStickTableEntries(ctx, parentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetStickTableEntriesResponse(rsp)
}

// GetSitesWithResponse request returning *GetSitesResponse
func (c *ClientWithResponses) GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error) {
	rsp, err := c.GetSites(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSitesResponse(rsp)
}

// CreateSiteWithBodyWithResponse request with arbitrary body returning *CreateSiteResponse
func (c *ClientWithResponses) CreateSiteWithBodyWithResponse(ctx context.Context, params *CreateSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error) {
	rsp, err := c.CreateSiteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSiteResponse(rsp)
}

func (c *ClientWithResponses) CreateSiteWithResponse(ctx context.Context, params *CreateSiteParams, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error) {
	rsp, err := c.CreateSite(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSiteResponse(rsp)
}

// DeleteSiteWithResponse request returning *DeleteSiteResponse
func (c *ClientWithResponses) DeleteSiteWithResponse(ctx context.Context, name string, params *DeleteSiteParams, reqEditors ...RequestEditorFn) (*DeleteSiteResponse, error) {
	rsp, err := c.DeleteSite(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSiteResponse(rsp)
}

// GetSiteWithResponse request returning *GetSiteResponse
func (c *ClientWithResponses) GetSiteWithResponse(ctx context.Context, name string, params *GetSiteParams, reqEditors ...RequestEditorFn) (*GetSiteResponse, error) {
	rsp, err := c.GetSite(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiteResponse(rsp)
}

// ReplaceSiteWithBodyWithResponse request with arbitrary body returning *ReplaceSiteResponse
func (c *ClientWithResponses) ReplaceSiteWithBodyWithResponse(ctx context.Context, name string, params *ReplaceSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSiteResponse, error) {
	rsp, err := c.ReplaceSiteWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSiteResponse(rsp)
}

func (c *ClientWithResponses) ReplaceSiteWithResponse(ctx context.Context, name string, params *ReplaceSiteParams, body ReplaceSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSiteResponse, error) {
	rsp, err := c.ReplaceSite(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSiteResponse(rsp)
}

// GetSpoeEndpointsWithResponse request returning *GetSpoeEndpointsResponse
func (c *ClientWithResponses) GetSpoeEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpoeEndpointsResponse, error) {
	rsp, err := c.GetSpoeEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpoeEndpointsResponse(rsp)
}

// GetAllSpoeFilesWithResponse request returning *GetAllSpoeFilesResponse
func (c *ClientWithResponses) GetAllSpoeFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllSpoeFilesResponse, error) {
	rsp, err := c.GetAllSpoeFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSpoeFilesResponse(rsp)
}

// CreateSpoeWithBodyWithResponse request with arbitrary body returning *CreateSpoeResponse
func (c *ClientWithResponses) CreateSpoeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeResponse, error) {
	rsp, err := c.CreateSpoeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeResponse(rsp)
}

// DeleteSpoeFileWithResponse request returning *DeleteSpoeFileResponse
func (c *ClientWithResponses) DeleteSpoeFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteSpoeFileResponse, error) {
	rsp, err := c.DeleteSpoeFile(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpoeFileResponse(rsp)
}

// GetOneSpoeFileWithResponse request returning *GetOneSpoeFileResponse
func (c *ClientWithResponses) GetOneSpoeFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneSpoeFileResponse, error) {
	rsp, err := c.GetOneSpoeFile(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneSpoeFileResponse(rsp)
}

// GetAllSpoeScopeWithResponse request returning *GetAllSpoeScopeResponse
func (c *ClientWithResponses) GetAllSpoeScopeWithResponse(ctx context.Context, parentName ParentName, params *GetAllSpoeScopeParams, reqEditors ...RequestEditorFn) (*GetAllSpoeScopeResponse, error) {
	rsp, err := c.GetAllSpoeScope(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSpoeScopeResponse(rsp)
}

// CreateSpoeScopeWithBodyWithResponse request with arbitrary body returning *CreateSpoeScopeResponse
func (c *ClientWithResponses) CreateSpoeScopeWithBodyWithResponse(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeScopeResponse, error) {
	rsp, err := c.CreateSpoeScopeWithBody(ctx, parentName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateSpoeScopeWithResponse(ctx context.Context, parentName ParentName, params *CreateSpoeScopeParams, body CreateSpoeScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeScopeResponse, error) {
	rsp, err := c.CreateSpoeScope(ctx, parentName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeScopeResponse(rsp)
}

// DeleteSpoeScopeWithResponse request returning *DeleteSpoeScopeResponse
func (c *ClientWithResponses) DeleteSpoeScopeWithResponse(ctx context.Context, parentName ParentName, name string, params *DeleteSpoeScopeParams, reqEditors ...RequestEditorFn) (*DeleteSpoeScopeResponse, error) {
	rsp, err := c.DeleteSpoeScope(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpoeScopeResponse(rsp)
}

// GetSpoeScopeWithResponse request returning *GetSpoeScopeResponse
func (c *ClientWithResponses) GetSpoeScopeWithResponse(ctx context.Context, parentName ParentName, name string, params *GetSpoeScopeParams, reqEditors ...RequestEditorFn) (*GetSpoeScopeResponse, error) {
	rsp, err := c.GetSpoeScope(ctx, parentName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpoeScopeResponse(rsp)
}

// GetAllSpoeAgentWithResponse request returning *GetAllSpoeAgentResponse
func (c *ClientWithResponses) GetAllSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeAgentParams, reqEditors ...RequestEditorFn) (*GetAllSpoeAgentResponse, error) {
	rsp, err := c.GetAllSpoeAgent(ctx, parentName, scopeName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSpoeAgentResponse(rsp)
}

// CreateSpoeAgentWithBodyWithResponse request with arbitrary body returning *CreateSpoeAgentResponse
func (c *ClientWithResponses) CreateSpoeAgentWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeAgentResponse, error) {
	rsp, err := c.CreateSpoeAgentWithBody(ctx, parentName, scopeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeAgentResponse(rsp)
}

func (c *ClientWithResponses) CreateSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeAgentParams, body CreateSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeAgentResponse, error) {
	rsp, err := c.CreateSpoeAgent(ctx, parentName, scopeName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeAgentResponse(rsp)
}

// DeleteSpoeAgentWithResponse request returning *DeleteSpoeAgentResponse
func (c *ClientWithResponses) DeleteSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeAgentParams, reqEditors ...RequestEditorFn) (*DeleteSpoeAgentResponse, error) {
	rsp, err := c.DeleteSpoeAgent(ctx, parentName, scopeName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpoeAgentResponse(rsp)
}

// GetSpoeAgentWithResponse request returning *GetSpoeAgentResponse
func (c *ClientWithResponses) GetSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeAgentParams, reqEditors ...RequestEditorFn) (*GetSpoeAgentResponse, error) {
	rsp, err := c.GetSpoeAgent(ctx, parentName, scopeName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpoeAgentResponse(rsp)
}

// ReplaceSpoeAgentWithBodyWithResponse request with arbitrary body returning *ReplaceSpoeAgentResponse
func (c *ClientWithResponses) ReplaceSpoeAgentWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSpoeAgentResponse, error) {
	rsp, err := c.ReplaceSpoeAgentWithBody(ctx, parentName, scopeName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSpoeAgentResponse(rsp)
}

func (c *ClientWithResponses) ReplaceSpoeAgentWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeAgentParams, body ReplaceSpoeAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSpoeAgentResponse, error) {
	rsp, err := c.ReplaceSpoeAgent(ctx, parentName, scopeName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSpoeAgentResponse(rsp)
}

// GetAllSpoeGroupWithResponse request returning *GetAllSpoeGroupResponse
func (c *ClientWithResponses) GetAllSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeGroupParams, reqEditors ...RequestEditorFn) (*GetAllSpoeGroupResponse, error) {
	rsp, err := c.GetAllSpoeGroup(ctx, parentName, scopeName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSpoeGroupResponse(rsp)
}

// CreateSpoeGroupWithBodyWithResponse request with arbitrary body returning *CreateSpoeGroupResponse
func (c *ClientWithResponses) CreateSpoeGroupWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeGroupResponse, error) {
	rsp, err := c.CreateSpoeGroupWithBody(ctx, parentName, scopeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeGroupParams, body CreateSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeGroupResponse, error) {
	rsp, err := c.CreateSpoeGroup(ctx, parentName, scopeName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeGroupResponse(rsp)
}

// DeleteSpoeGroupWithResponse request returning *DeleteSpoeGroupResponse
func (c *ClientWithResponses) DeleteSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeGroupParams, reqEditors ...RequestEditorFn) (*DeleteSpoeGroupResponse, error) {
	rsp, err := c.DeleteSpoeGroup(ctx, parentName, scopeName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpoeGroupResponse(rsp)
}

// GetSpoeGroupWithResponse request returning *GetSpoeGroupResponse
func (c *ClientWithResponses) GetSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeGroupParams, reqEditors ...RequestEditorFn) (*GetSpoeGroupResponse, error) {
	rsp, err := c.GetSpoeGroup(ctx, parentName, scopeName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpoeGroupResponse(rsp)
}

// ReplaceSpoeGroupWithBodyWithResponse request with arbitrary body returning *ReplaceSpoeGroupResponse
func (c *ClientWithResponses) ReplaceSpoeGroupWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSpoeGroupResponse, error) {
	rsp, err := c.ReplaceSpoeGroupWithBody(ctx, parentName, scopeName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSpoeGroupResponse(rsp)
}

func (c *ClientWithResponses) ReplaceSpoeGroupWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeGroupParams, body ReplaceSpoeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSpoeGroupResponse, error) {
	rsp, err := c.ReplaceSpoeGroup(ctx, parentName, scopeName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSpoeGroupResponse(rsp)
}

// GetAllSpoeMessageWithResponse request returning *GetAllSpoeMessageResponse
func (c *ClientWithResponses) GetAllSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *GetAllSpoeMessageParams, reqEditors ...RequestEditorFn) (*GetAllSpoeMessageResponse, error) {
	rsp, err := c.GetAllSpoeMessage(ctx, parentName, scopeName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSpoeMessageResponse(rsp)
}

// CreateSpoeMessageWithBodyWithResponse request with arbitrary body returning *CreateSpoeMessageResponse
func (c *ClientWithResponses) CreateSpoeMessageWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpoeMessageResponse, error) {
	rsp, err := c.CreateSpoeMessageWithBody(ctx, parentName, scopeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeMessageResponse(rsp)
}

func (c *ClientWithResponses) CreateSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, params *CreateSpoeMessageParams, body CreateSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpoeMessageResponse, error) {
	rsp, err := c.CreateSpoeMessage(ctx, parentName, scopeName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpoeMessageResponse(rsp)
}

// DeleteSpoeMessageWithResponse request returning *DeleteSpoeMessageResponse
func (c *ClientWithResponses) DeleteSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *DeleteSpoeMessageParams, reqEditors ...RequestEditorFn) (*DeleteSpoeMessageResponse, error) {
	rsp, err := c.DeleteSpoeMessage(ctx, parentName, scopeName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpoeMessageResponse(rsp)
}

// GetSpoeMessageWithResponse request returning *GetSpoeMessageResponse
func (c *ClientWithResponses) GetSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *GetSpoeMessageParams, reqEditors ...RequestEditorFn) (*GetSpoeMessageResponse, error) {
	rsp, err := c.GetSpoeMessage(ctx, parentName, scopeName, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpoeMessageResponse(rsp)
}

// ReplaceSpoeMessageWithBodyWithResponse request with arbitrary body returning *ReplaceSpoeMessageResponse
func (c *ClientWithResponses) ReplaceSpoeMessageWithBodyWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceSpoeMessageResponse, error) {
	rsp, err := c.ReplaceSpoeMessageWithBody(ctx, parentName, scopeName, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSpoeMessageResponse(rsp)
}

func (c *ClientWithResponses) ReplaceSpoeMessageWithResponse(ctx context.Context, parentName ParentName, scopeName string, name string, params *ReplaceSpoeMessageParams, body ReplaceSpoeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceSpoeMessageResponse, error) {
	rsp, err := c.ReplaceSpoeMessage(ctx, parentName, scopeName, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceSpoeMessageResponse(rsp)
}

// GetAllSpoeTransactionWithResponse request returning *GetAllSpoeTransactionResponse
func (c *ClientWithResponses) GetAllSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, params *GetAllSpoeTransactionParams, reqEditors ...RequestEditorFn) (*GetAllSpoeTransactionResponse, error) {
	rsp, err := c.GetAllSpoeTransaction(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSpoeTransactionResponse(rsp)
}

// StartSpoeTransactionWithResponse request returning *StartSpoeTransactionResponse
func (c *ClientWithResponses) StartSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, params *StartSpoeTransactionParams, reqEditors ...RequestEditorFn) (*StartSpoeTransactionResponse, error) {
	rsp, err := c.StartSpoeTransaction(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartSpoeTransactionResponse(rsp)
}

// DeleteSpoeTransactionWithResponse request returning *DeleteSpoeTransactionResponse
func (c *ClientWithResponses) DeleteSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*DeleteSpoeTransactionResponse, error) {
	rsp, err := c.DeleteSpoeTransaction(ctx, parentName, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpoeTransactionResponse(rsp)
}

// GetSpoeTransactionWithResponse request returning *GetSpoeTransactionResponse
func (c *ClientWithResponses) GetSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, id string, reqEditors ...RequestEditorFn) (*GetSpoeTransactionResponse, error) {
	rsp, err := c.GetSpoeTransaction(ctx, parentName, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpoeTransactionResponse(rsp)
}

// CommitSpoeTransactionWithResponse request returning *CommitSpoeTransactionResponse
func (c *ClientWithResponses) CommitSpoeTransactionWithResponse(ctx context.Context, parentName ParentName, id string, params *CommitSpoeTransactionParams, reqEditors ...RequestEditorFn) (*CommitSpoeTransactionResponse, error) {
	rsp, err := c.CommitSpoeTransaction(ctx, parentName, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitSpoeTransactionResponse(rsp)
}

// GetSpoeConfigurationVersionWithResponse request returning *GetSpoeConfigurationVersionResponse
func (c *ClientWithResponses) GetSpoeConfigurationVersionWithResponse(ctx context.Context, parentName ParentName, params *GetSpoeConfigurationVersionParams, reqEditors ...RequestEditorFn) (*GetSpoeConfigurationVersionResponse, error) {
	rsp, err := c.GetSpoeConfigurationVersion(ctx, parentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpoeConfigurationVersionResponse(rsp)
}

// GetStatsEndpointsWithResponse request returning *GetStatsEndpointsResponse
func (c *ClientWithResponses) GetStatsEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsEndpointsResponse, error) {
	rsp, err := c.GetStatsEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsEndpointsResponse(rsp)
}

// GetStatsWithResponse request returning *GetStatsResponse
func (c *ClientWithResponses) GetStatsWithResponse(ctx context.Context, params *GetStatsParams, reqEditors ...RequestEditorFn) (*GetStatsResponse, error) {
	rsp, err := c.GetStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsResponse(rsp)
}

// GetStorageEndpointsWithResponse request returning *GetStorageEndpointsResponse
func (c *ClientWithResponses) GetStorageEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageEndpointsResponse, error) {
	rsp, err := c.GetStorageEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageEndpointsResponse(rsp)
}

// GetAllStorageGeneralFilesWithResponse request returning *GetAllStorageGeneralFilesResponse
func (c *ClientWithResponses) GetAllStorageGeneralFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageGeneralFilesResponse, error) {
	rsp, err := c.GetAllStorageGeneralFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllStorageGeneralFilesResponse(rsp)
}

// CreateStorageGeneralFileWithBodyWithResponse request with arbitrary body returning *CreateStorageGeneralFileResponse
func (c *ClientWithResponses) CreateStorageGeneralFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageGeneralFileResponse, error) {
	rsp, err := c.CreateStorageGeneralFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStorageGeneralFileResponse(rsp)
}

// DeleteStorageGeneralFileWithResponse request returning *DeleteStorageGeneralFileResponse
func (c *ClientWithResponses) DeleteStorageGeneralFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteStorageGeneralFileResponse, error) {
	rsp, err := c.DeleteStorageGeneralFile(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStorageGeneralFileResponse(rsp)
}

// GetOneStorageGeneralFileWithResponse request returning *GetOneStorageGeneralFileResponse
func (c *ClientWithResponses) GetOneStorageGeneralFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageGeneralFileResponse, error) {
	rsp, err := c.GetOneStorageGeneralFile(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneStorageGeneralFileResponse(rsp)
}

// ReplaceStorageGeneralFileWithBodyWithResponse request with arbitrary body returning *ReplaceStorageGeneralFileResponse
func (c *ClientWithResponses) ReplaceStorageGeneralFileWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageGeneralFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageGeneralFileResponse, error) {
	rsp, err := c.ReplaceStorageGeneralFileWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStorageGeneralFileResponse(rsp)
}

// GetAllStorageMapFilesWithResponse request returning *GetAllStorageMapFilesResponse
func (c *ClientWithResponses) GetAllStorageMapFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageMapFilesResponse, error) {
	rsp, err := c.GetAllStorageMapFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllStorageMapFilesResponse(rsp)
}

// CreateStorageMapFileWithBodyWithResponse request with arbitrary body returning *CreateStorageMapFileResponse
func (c *ClientWithResponses) CreateStorageMapFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageMapFileResponse, error) {
	rsp, err := c.CreateStorageMapFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStorageMapFileResponse(rsp)
}

// DeleteStorageMapWithResponse request returning *DeleteStorageMapResponse
func (c *ClientWithResponses) DeleteStorageMapWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteStorageMapResponse, error) {
	rsp, err := c.DeleteStorageMap(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStorageMapResponse(rsp)
}

// GetOneStorageMapWithResponse request returning *GetOneStorageMapResponse
func (c *ClientWithResponses) GetOneStorageMapWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageMapResponse, error) {
	rsp, err := c.GetOneStorageMap(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneStorageMapResponse(rsp)
}

// ReplaceStorageMapFileWithBodyWithResponse request with arbitrary body returning *ReplaceStorageMapFileResponse
func (c *ClientWithResponses) ReplaceStorageMapFileWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageMapFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageMapFileResponse, error) {
	rsp, err := c.ReplaceStorageMapFileWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStorageMapFileResponse(rsp)
}

func (c *ClientWithResponses) ReplaceStorageMapFileWithTextBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageMapFileParams, body ReplaceStorageMapFileTextRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStorageMapFileResponse, error) {
	rsp, err := c.ReplaceStorageMapFileWithTextBody(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStorageMapFileResponse(rsp)
}

// GetAllStorageSSLCertificatesWithResponse request returning *GetAllStorageSSLCertificatesResponse
func (c *ClientWithResponses) GetAllStorageSSLCertificatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageSSLCertificatesResponse, error) {
	rsp, err := c.GetAllStorageSSLCertificates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllStorageSSLCertificatesResponse(rsp)
}

// CreateStorageSSLCertificateWithBodyWithResponse request with arbitrary body returning *CreateStorageSSLCertificateResponse
func (c *ClientWithResponses) CreateStorageSSLCertificateWithBodyWithResponse(ctx context.Context, params *CreateStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageSSLCertificateResponse, error) {
	rsp, err := c.CreateStorageSSLCertificateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStorageSSLCertificateResponse(rsp)
}

// DeleteStorageSSLCertificateWithResponse request returning *DeleteStorageSSLCertificateResponse
func (c *ClientWithResponses) DeleteStorageSSLCertificateWithResponse(ctx context.Context, name string, params *DeleteStorageSSLCertificateParams, reqEditors ...RequestEditorFn) (*DeleteStorageSSLCertificateResponse, error) {
	rsp, err := c.DeleteStorageSSLCertificate(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStorageSSLCertificateResponse(rsp)
}

// GetOneStorageSSLCertificateWithResponse request returning *GetOneStorageSSLCertificateResponse
func (c *ClientWithResponses) GetOneStorageSSLCertificateWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageSSLCertificateResponse, error) {
	rsp, err := c.GetOneStorageSSLCertificate(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneStorageSSLCertificateResponse(rsp)
}

// ReplaceStorageSSLCertificateWithBodyWithResponse request with arbitrary body returning *ReplaceStorageSSLCertificateResponse
func (c *ClientWithResponses) ReplaceStorageSSLCertificateWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCertificateResponse, error) {
	rsp, err := c.ReplaceStorageSSLCertificateWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStorageSSLCertificateResponse(rsp)
}

func (c *ClientWithResponses) ReplaceStorageSSLCertificateWithTextBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCertificateParams, body ReplaceStorageSSLCertificateTextRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCertificateResponse, error) {
	rsp, err := c.ReplaceStorageSSLCertificateWithTextBody(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStorageSSLCertificateResponse(rsp)
}

// GetAllStorageSSLCrtListFilesWithResponse request returning *GetAllStorageSSLCrtListFilesResponse
func (c *ClientWithResponses) GetAllStorageSSLCrtListFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStorageSSLCrtListFilesResponse, error) {
	rsp, err := c.GetAllStorageSSLCrtListFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllStorageSSLCrtListFilesResponse(rsp)
}

// CreateStorageSSLCrtListFileWithBodyWithResponse request with arbitrary body returning *CreateStorageSSLCrtListFileResponse
func (c *ClientWithResponses) CreateStorageSSLCrtListFileWithBodyWithResponse(ctx context.Context, params *CreateStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageSSLCrtListFileResponse, error) {
	rsp, err := c.CreateStorageSSLCrtListFileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStorageSSLCrtListFileResponse(rsp)
}

// DeleteStorageSSLCrtListFileWithResponse request returning *DeleteStorageSSLCrtListFileResponse
func (c *ClientWithResponses) DeleteStorageSSLCrtListFileWithResponse(ctx context.Context, name string, params *DeleteStorageSSLCrtListFileParams, reqEditors ...RequestEditorFn) (*DeleteStorageSSLCrtListFileResponse, error) {
	rsp, err := c.DeleteStorageSSLCrtListFile(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStorageSSLCrtListFileResponse(rsp)
}

// GetOneStorageSSLCrtListFileWithResponse request returning *GetOneStorageSSLCrtListFileResponse
func (c *ClientWithResponses) GetOneStorageSSLCrtListFileWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetOneStorageSSLCrtListFileResponse, error) {
	rsp, err := c.GetOneStorageSSLCrtListFile(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneStorageSSLCrtListFileResponse(rsp)
}

// ReplaceStorageSSLCrtListFileWithBodyWithResponse request with arbitrary body returning *ReplaceStorageSSLCrtListFileResponse
func (c *ClientWithResponses) ReplaceStorageSSLCrtListFileWithBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCrtListFileResponse, error) {
	rsp, err := c.ReplaceStorageSSLCrtListFileWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStorageSSLCrtListFileResponse(rsp)
}

func (c *ClientWithResponses) ReplaceStorageSSLCrtListFileWithTextBodyWithResponse(ctx context.Context, name string, params *ReplaceStorageSSLCrtListFileParams, body ReplaceStorageSSLCrtListFileTextRequestBody, reqEditors ...RequestEditorFn) (*ReplaceStorageSSLCrtListFileResponse, error) {
	rsp, err := c.ReplaceStorageSSLCrtListFileWithTextBody(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceStorageSSLCrtListFileResponse(rsp)
}

// DeleteStorageSSLCrtListEntryWithResponse request returning *DeleteStorageSSLCrtListEntryResponse
func (c *ClientWithResponses) DeleteStorageSSLCrtListEntryWithResponse(ctx context.Context, name string, params *DeleteStorageSSLCrtListEntryParams, reqEditors ...RequestEditorFn) (*DeleteStorageSSLCrtListEntryResponse, error) {
	rsp, err := c.DeleteStorageSSLCrtListEntry(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStorageSSLCrtListEntryResponse(rsp)
}

// GetStorageSSLCrtListEntriesWithResponse request returning *GetStorageSSLCrtListEntriesResponse
func (c *ClientWithResponses) GetStorageSSLCrtListEntriesWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStorageSSLCrtListEntriesResponse, error) {
	rsp, err := c.GetStorageSSLCrtListEntries(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageSSLCrtListEntriesResponse(rsp)
}

// CreateStorageSSLCrtListEntryWithBodyWithResponse request with arbitrary body returning *CreateStorageSSLCrtListEntryResponse
func (c *ClientWithResponses) CreateStorageSSLCrtListEntryWithBodyWithResponse(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStorageSSLCrtListEntryResponse, error) {
	rsp, err := c.CreateStorageSSLCrtListEntryWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStorageSSLCrtListEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateStorageSSLCrtListEntryWithResponse(ctx context.Context, name string, params *CreateStorageSSLCrtListEntryParams, body CreateStorageSSLCrtListEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStorageSSLCrtListEntryResponse, error) {
	rsp, err := c.CreateStorageSSLCrtListEntry(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStorageSSLCrtListEntryResponse(rsp)
}

// GetTransactionsWithResponse request returning *GetTransactionsResponse
func (c *ClientWithResponses) GetTransactionsWithResponse(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*GetTransactionsResponse, error) {
	rsp, err := c.GetTransactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionsResponse(rsp)
}

// StartTransactionWithResponse request returning *StartTransactionResponse
func (c *ClientWithResponses) StartTransactionWithResponse(ctx context.Context, params *StartTransactionParams, reqEditors ...RequestEditorFn) (*StartTransactionResponse, error) {
	rsp, err := c.StartTransaction(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartTransactionResponse(rsp)
}

// DeleteTransactionWithResponse request returning *DeleteTransactionResponse
func (c *ClientWithResponses) DeleteTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTransactionResponse, error) {
	rsp, err := c.DeleteTransaction(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTransactionResponse(rsp)
}

// GetTransactionWithResponse request returning *GetTransactionResponse
func (c *ClientWithResponses) GetTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTransactionResponse, error) {
	rsp, err := c.GetTransaction(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionResponse(rsp)
}

// CommitTransactionWithResponse request returning *CommitTransactionResponse
func (c *ClientWithResponses) CommitTransactionWithResponse(ctx context.Context, id string, params *CommitTransactionParams, reqEditors ...RequestEditorFn) (*CommitTransactionResponse, error) {
	rsp, err := c.CommitTransaction(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitTransactionResponse(rsp)
}

// GetSpecificationWithResponse request returning *GetSpecificationResponse
func (c *ClientWithResponses) GetSpecificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecificationResponse, error) {
	rsp, err := c.GetSpecification(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpecificationResponse(rsp)
}

// GetOpenapiv3SpecificationWithResponse request returning *GetOpenapiv3SpecificationResponse
func (c *ClientWithResponses) GetOpenapiv3SpecificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiv3SpecificationResponse, error) {
	rsp, err := c.GetOpenapiv3Specification(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenapiv3SpecificationResponse(rsp)
}

// ParseGetAPIEndpointsResponse parses an HTTP response from a GetAPIEndpointsWithResponse call
func ParseGetAPIEndpointsResponse(rsp *http.Response) (*GetAPIEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetClusterResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterResponse(rsp *http.Response) (*GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostClusterResponse parses an HTTP response from a PostClusterWithResponse call
func ParsePostClusterResponse(rsp *http.Response) (*PostClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditClusterResponse parses an HTTP response from a EditClusterWithResponse call
func ParseEditClusterResponse(rsp *http.Response) (*EditClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInitiateCertificateRefreshResponse parses an HTTP response from a InitiateCertificateRefreshWithResponse call
func ParseInitiateCertificateRefreshResponse(rsp *http.Response) (*InitiateCertificateRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InitiateCertificateRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Health
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInfoResponse parses an HTTP response from a GetInfoWithResponse call
func ParseGetInfoResponse(rsp *http.Response) (*GetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Info
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAWSRegionsResponse parses an HTTP response from a GetAWSRegionsWithResponse call
func ParseGetAWSRegionsResponse(rsp *http.Response) (*GetAWSRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAWSRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AwsRegions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAWSRegionResponse parses an HTTP response from a CreateAWSRegionWithResponse call
func ParseCreateAWSRegionResponse(rsp *http.Response) (*CreateAWSRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAWSRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AwsRegion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAWSRegionResponse parses an HTTP response from a DeleteAWSRegionWithResponse call
func ParseDeleteAWSRegionResponse(rsp *http.Response) (*DeleteAWSRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAWSRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAWSRegionResponse parses an HTTP response from a GetAWSRegionWithResponse call
func ParseGetAWSRegionResponse(rsp *http.Response) (*GetAWSRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAWSRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AwsRegion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAWSRegionResponse parses an HTTP response from a ReplaceAWSRegionWithResponse call
func ParseReplaceAWSRegionResponse(rsp *http.Response) (*ReplaceAWSRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAWSRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AwsRegion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConsulsResponse parses an HTTP response from a GetConsulsWithResponse call
func ParseGetConsulsResponse(rsp *http.Response) (*GetConsulsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsulsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Consuls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateConsulResponse parses an HTTP response from a CreateConsulWithResponse call
func ParseCreateConsulResponse(rsp *http.Response) (*CreateConsulResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConsulResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Consul
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteConsulResponse parses an HTTP response from a DeleteConsulWithResponse call
func ParseDeleteConsulResponse(rsp *http.Response) (*DeleteConsulResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsulResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConsulResponse parses an HTTP response from a GetConsulWithResponse call
func ParseGetConsulResponse(rsp *http.Response) (*GetConsulResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsulResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Consul
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceConsulResponse parses an HTTP response from a ReplaceConsulWithResponse call
func ParseReplaceConsulResponse(rsp *http.Response) (*ReplaceConsulResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceConsulResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Consul
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServicesEndpointsResponse parses an HTTP response from a GetServicesEndpointsWithResponse call
func ParseGetServicesEndpointsResponse(rsp *http.Response) (*GetServicesEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHaproxyEndpointsResponse parses an HTTP response from a GetHaproxyEndpointsWithResponse call
func ParseGetHaproxyEndpointsResponse(rsp *http.Response) (*GetHaproxyEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHaproxyEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConfigurationEndpointsResponse parses an HTTP response from a GetConfigurationEndpointsWithResponse call
func ParseGetConfigurationEndpointsResponse(rsp *http.Response) (*GetConfigurationEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAcmeProvidersResponse parses an HTTP response from a GetAcmeProvidersWithResponse call
func ParseGetAcmeProvidersResponse(rsp *http.Response) (*GetAcmeProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AcmeProviders
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAcmeProviderResponse parses an HTTP response from a CreateAcmeProviderWithResponse call
func ParseCreateAcmeProviderResponse(rsp *http.Response) (*CreateAcmeProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAcmeProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AcmeProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AcmeProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAcmeProviderResponse parses an HTTP response from a DeleteAcmeProviderWithResponse call
func ParseDeleteAcmeProviderResponse(rsp *http.Response) (*DeleteAcmeProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAcmeProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAcmeProviderResponse parses an HTTP response from a GetAcmeProviderWithResponse call
func ParseGetAcmeProviderResponse(rsp *http.Response) (*GetAcmeProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AcmeProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditAcmeProviderResponse parses an HTTP response from a EditAcmeProviderWithResponse call
func ParseEditAcmeProviderResponse(rsp *http.Response) (*EditAcmeProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditAcmeProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AcmeProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AcmeProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBackendsResponse parses an HTTP response from a GetBackendsWithResponse call
func ParseGetBackendsResponse(rsp *http.Response) (*GetBackendsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backends
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateBackendResponse parses an HTTP response from a CreateBackendWithResponse call
func ParseCreateBackendResponse(rsp *http.Response) (*CreateBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Backend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Backend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteBackendResponse parses an HTTP response from a DeleteBackendWithResponse call
func ParseDeleteBackendResponse(rsp *http.Response) (*DeleteBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBackendResponse parses an HTTP response from a GetBackendWithResponse call
func ParseGetBackendResponse(rsp *http.Response) (*GetBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceBackendResponse parses an HTTP response from a ReplaceBackendWithResponse call
func ParseReplaceBackendResponse(rsp *http.Response) (*ReplaceBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Backend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllAclBackendResponse parses an HTTP response from a GetAllAclBackendWithResponse call
func ParseGetAllAclBackendResponse(rsp *http.Response) (*GetAllAclBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAclBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllAclBackendResponse parses an HTTP response from a ReplaceAllAclBackendWithResponse call
func ParseReplaceAllAclBackendResponse(rsp *http.Response) (*ReplaceAllAclBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllAclBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAclBackendResponse parses an HTTP response from a DeleteAclBackendWithResponse call
func ParseDeleteAclBackendResponse(rsp *http.Response) (*DeleteAclBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAclBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAclBackendResponse parses an HTTP response from a GetAclBackendWithResponse call
func ParseGetAclBackendResponse(rsp *http.Response) (*GetAclBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAclBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAclBackendResponse parses an HTTP response from a CreateAclBackendWithResponse call
func ParseCreateAclBackendResponse(rsp *http.Response) (*CreateAclBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAclBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAclBackendResponse parses an HTTP response from a ReplaceAclBackendWithResponse call
func ParseReplaceAclBackendResponse(rsp *http.Response) (*ReplaceAclBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAclBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllFilterBackendResponse parses an HTTP response from a GetAllFilterBackendWithResponse call
func ParseGetAllFilterBackendResponse(rsp *http.Response) (*GetAllFilterBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllFilterBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllFilterBackendResponse parses an HTTP response from a ReplaceAllFilterBackendWithResponse call
func ParseReplaceAllFilterBackendResponse(rsp *http.Response) (*ReplaceAllFilterBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllFilterBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Filters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFilterBackendResponse parses an HTTP response from a DeleteFilterBackendWithResponse call
func ParseDeleteFilterBackendResponse(rsp *http.Response) (*DeleteFilterBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFilterBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFilterBackendResponse parses an HTTP response from a GetFilterBackendWithResponse call
func ParseGetFilterBackendResponse(rsp *http.Response) (*GetFilterBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilterBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateFilterBackendResponse parses an HTTP response from a CreateFilterBackendWithResponse call
func ParseCreateFilterBackendResponse(rsp *http.Response) (*CreateFilterBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFilterBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceFilterBackendResponse parses an HTTP response from a ReplaceFilterBackendWithResponse call
func ParseReplaceFilterBackendResponse(rsp *http.Response) (*ReplaceFilterBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceFilterBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPAfterResponseRuleBackendResponse parses an HTTP response from a GetAllHTTPAfterResponseRuleBackendWithResponse call
func ParseGetAllHTTPAfterResponseRuleBackendResponse(rsp *http.Response) (*GetAllHTTPAfterResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPAfterResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPAfterResponseRuleBackendResponse parses an HTTP response from a ReplaceAllHTTPAfterResponseRuleBackendWithResponse call
func ParseReplaceAllHTTPAfterResponseRuleBackendResponse(rsp *http.Response) (*ReplaceAllHTTPAfterResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPAfterResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPAfterResponseRuleBackendResponse parses an HTTP response from a DeleteHTTPAfterResponseRuleBackendWithResponse call
func ParseDeleteHTTPAfterResponseRuleBackendResponse(rsp *http.Response) (*DeleteHTTPAfterResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPAfterResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPAfterResponseRuleBackendResponse parses an HTTP response from a GetHTTPAfterResponseRuleBackendWithResponse call
func ParseGetHTTPAfterResponseRuleBackendResponse(rsp *http.Response) (*GetHTTPAfterResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPAfterResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPAfterResponseRuleBackendResponse parses an HTTP response from a CreateHTTPAfterResponseRuleBackendWithResponse call
func ParseCreateHTTPAfterResponseRuleBackendResponse(rsp *http.Response) (*CreateHTTPAfterResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPAfterResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPAfterResponseRuleBackendResponse parses an HTTP response from a ReplaceHTTPAfterResponseRuleBackendWithResponse call
func ParseReplaceHTTPAfterResponseRuleBackendResponse(rsp *http.Response) (*ReplaceHTTPAfterResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPAfterResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPCheckBackendResponse parses an HTTP response from a GetAllHTTPCheckBackendWithResponse call
func ParseGetAllHTTPCheckBackendResponse(rsp *http.Response) (*GetAllHTTPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPCheckBackendResponse parses an HTTP response from a ReplaceAllHTTPCheckBackendWithResponse call
func ParseReplaceAllHTTPCheckBackendResponse(rsp *http.Response) (*ReplaceAllHTTPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPCheckBackendResponse parses an HTTP response from a DeleteHTTPCheckBackendWithResponse call
func ParseDeleteHTTPCheckBackendResponse(rsp *http.Response) (*DeleteHTTPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPCheckBackendResponse parses an HTTP response from a GetHTTPCheckBackendWithResponse call
func ParseGetHTTPCheckBackendResponse(rsp *http.Response) (*GetHTTPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPCheckBackendResponse parses an HTTP response from a CreateHTTPCheckBackendWithResponse call
func ParseCreateHTTPCheckBackendResponse(rsp *http.Response) (*CreateHTTPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPCheckBackendResponse parses an HTTP response from a ReplaceHTTPCheckBackendWithResponse call
func ParseReplaceHTTPCheckBackendResponse(rsp *http.Response) (*ReplaceHTTPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPErrorRuleBackendResponse parses an HTTP response from a GetAllHTTPErrorRuleBackendWithResponse call
func ParseGetAllHTTPErrorRuleBackendResponse(rsp *http.Response) (*GetAllHTTPErrorRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPErrorRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPErrorRuleBackendResponse parses an HTTP response from a ReplaceAllHTTPErrorRuleBackendWithResponse call
func ParseReplaceAllHTTPErrorRuleBackendResponse(rsp *http.Response) (*ReplaceAllHTTPErrorRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPErrorRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPErrorRuleBackendResponse parses an HTTP response from a DeleteHTTPErrorRuleBackendWithResponse call
func ParseDeleteHTTPErrorRuleBackendResponse(rsp *http.Response) (*DeleteHTTPErrorRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPErrorRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPErrorRuleBackendResponse parses an HTTP response from a GetHTTPErrorRuleBackendWithResponse call
func ParseGetHTTPErrorRuleBackendResponse(rsp *http.Response) (*GetHTTPErrorRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPErrorRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPErrorRuleBackendResponse parses an HTTP response from a CreateHTTPErrorRuleBackendWithResponse call
func ParseCreateHTTPErrorRuleBackendResponse(rsp *http.Response) (*CreateHTTPErrorRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPErrorRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPErrorRuleBackendResponse parses an HTTP response from a ReplaceHTTPErrorRuleBackendWithResponse call
func ParseReplaceHTTPErrorRuleBackendResponse(rsp *http.Response) (*ReplaceHTTPErrorRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPErrorRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPRequestRuleBackendResponse parses an HTTP response from a GetAllHTTPRequestRuleBackendWithResponse call
func ParseGetAllHTTPRequestRuleBackendResponse(rsp *http.Response) (*GetAllHTTPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPRequestRuleBackendResponse parses an HTTP response from a ReplaceAllHTTPRequestRuleBackendWithResponse call
func ParseReplaceAllHTTPRequestRuleBackendResponse(rsp *http.Response) (*ReplaceAllHTTPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPRequestRuleBackendResponse parses an HTTP response from a DeleteHTTPRequestRuleBackendWithResponse call
func ParseDeleteHTTPRequestRuleBackendResponse(rsp *http.Response) (*DeleteHTTPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPRequestRuleBackendResponse parses an HTTP response from a GetHTTPRequestRuleBackendWithResponse call
func ParseGetHTTPRequestRuleBackendResponse(rsp *http.Response) (*GetHTTPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPRequestRuleBackendResponse parses an HTTP response from a CreateHTTPRequestRuleBackendWithResponse call
func ParseCreateHTTPRequestRuleBackendResponse(rsp *http.Response) (*CreateHTTPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPRequestRuleBackendResponse parses an HTTP response from a ReplaceHTTPRequestRuleBackendWithResponse call
func ParseReplaceHTTPRequestRuleBackendResponse(rsp *http.Response) (*ReplaceHTTPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPResponseRuleBackendResponse parses an HTTP response from a GetAllHTTPResponseRuleBackendWithResponse call
func ParseGetAllHTTPResponseRuleBackendResponse(rsp *http.Response) (*GetAllHTTPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPResponseRuleBackendResponse parses an HTTP response from a ReplaceAllHTTPResponseRuleBackendWithResponse call
func ParseReplaceAllHTTPResponseRuleBackendResponse(rsp *http.Response) (*ReplaceAllHTTPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPResponseRuleBackendResponse parses an HTTP response from a DeleteHTTPResponseRuleBackendWithResponse call
func ParseDeleteHTTPResponseRuleBackendResponse(rsp *http.Response) (*DeleteHTTPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPResponseRuleBackendResponse parses an HTTP response from a GetHTTPResponseRuleBackendWithResponse call
func ParseGetHTTPResponseRuleBackendResponse(rsp *http.Response) (*GetHTTPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPResponseRuleBackendResponse parses an HTTP response from a CreateHTTPResponseRuleBackendWithResponse call
func ParseCreateHTTPResponseRuleBackendResponse(rsp *http.Response) (*CreateHTTPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPResponseRuleBackendResponse parses an HTTP response from a ReplaceHTTPResponseRuleBackendWithResponse call
func ParseReplaceHTTPResponseRuleBackendResponse(rsp *http.Response) (*ReplaceHTTPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllLogTargetBackendResponse parses an HTTP response from a GetAllLogTargetBackendWithResponse call
func ParseGetAllLogTargetBackendResponse(rsp *http.Response) (*GetAllLogTargetBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLogTargetBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllLogTargetBackendResponse parses an HTTP response from a ReplaceAllLogTargetBackendWithResponse call
func ParseReplaceAllLogTargetBackendResponse(rsp *http.Response) (*ReplaceAllLogTargetBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllLogTargetBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogTargetBackendResponse parses an HTTP response from a DeleteLogTargetBackendWithResponse call
func ParseDeleteLogTargetBackendResponse(rsp *http.Response) (*DeleteLogTargetBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogTargetBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogTargetBackendResponse parses an HTTP response from a GetLogTargetBackendWithResponse call
func ParseGetLogTargetBackendResponse(rsp *http.Response) (*GetLogTargetBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogTargetBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogTargetBackendResponse parses an HTTP response from a CreateLogTargetBackendWithResponse call
func ParseCreateLogTargetBackendResponse(rsp *http.Response) (*CreateLogTargetBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogTargetBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceLogTargetBackendResponse parses an HTTP response from a ReplaceLogTargetBackendWithResponse call
func ParseReplaceLogTargetBackendResponse(rsp *http.Response) (*ReplaceLogTargetBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLogTargetBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServerSwitchingRulesResponse parses an HTTP response from a GetServerSwitchingRulesWithResponse call
func ParseGetServerSwitchingRulesResponse(rsp *http.Response) (*GetServerSwitchingRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerSwitchingRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerSwitchingRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceServerSwitchingRulesResponse parses an HTTP response from a ReplaceServerSwitchingRulesWithResponse call
func ParseReplaceServerSwitchingRulesResponse(rsp *http.Response) (*ReplaceServerSwitchingRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceServerSwitchingRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerSwitchingRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ServerSwitchingRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteServerSwitchingRuleResponse parses an HTTP response from a DeleteServerSwitchingRuleWithResponse call
func ParseDeleteServerSwitchingRuleResponse(rsp *http.Response) (*DeleteServerSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServerSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServerSwitchingRuleResponse parses an HTTP response from a GetServerSwitchingRuleWithResponse call
func ParseGetServerSwitchingRuleResponse(rsp *http.Response) (*GetServerSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateServerSwitchingRuleResponse parses an HTTP response from a CreateServerSwitchingRuleWithResponse call
func ParseCreateServerSwitchingRuleResponse(rsp *http.Response) (*CreateServerSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServerSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServerSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ServerSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceServerSwitchingRuleResponse parses an HTTP response from a ReplaceServerSwitchingRuleWithResponse call
func ParseReplaceServerSwitchingRuleResponse(rsp *http.Response) (*ReplaceServerSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceServerSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ServerSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServerTemplatesResponse parses an HTTP response from a GetServerTemplatesWithResponse call
func ParseGetServerTemplatesResponse(rsp *http.Response) (*GetServerTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerTemplates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateServerTemplateResponse parses an HTTP response from a CreateServerTemplateWithResponse call
func ParseCreateServerTemplateResponse(rsp *http.Response) (*CreateServerTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServerTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServerTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ServerTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteServerTemplateResponse parses an HTTP response from a DeleteServerTemplateWithResponse call
func ParseDeleteServerTemplateResponse(rsp *http.Response) (*DeleteServerTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServerTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServerTemplateResponse parses an HTTP response from a GetServerTemplateWithResponse call
func ParseGetServerTemplateResponse(rsp *http.Response) (*GetServerTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceServerTemplateResponse parses an HTTP response from a ReplaceServerTemplateWithResponse call
func ParseReplaceServerTemplateResponse(rsp *http.Response) (*ReplaceServerTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceServerTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ServerTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllServerBackendResponse parses an HTTP response from a GetAllServerBackendWithResponse call
func ParseGetAllServerBackendResponse(rsp *http.Response) (*GetAllServerBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllServerBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Servers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateServerBackendResponse parses an HTTP response from a CreateServerBackendWithResponse call
func ParseCreateServerBackendResponse(rsp *http.Response) (*CreateServerBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServerBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteServerBackendResponse parses an HTTP response from a DeleteServerBackendWithResponse call
func ParseDeleteServerBackendResponse(rsp *http.Response) (*DeleteServerBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServerBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServerBackendResponse parses an HTTP response from a GetServerBackendWithResponse call
func ParseGetServerBackendResponse(rsp *http.Response) (*GetServerBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceServerBackendResponse parses an HTTP response from a ReplaceServerBackendWithResponse call
func ParseReplaceServerBackendResponse(rsp *http.Response) (*ReplaceServerBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceServerBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStickRulesResponse parses an HTTP response from a GetStickRulesWithResponse call
func ParseGetStickRulesResponse(rsp *http.Response) (*GetStickRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStickRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StickRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceStickRulesResponse parses an HTTP response from a ReplaceStickRulesWithResponse call
func ParseReplaceStickRulesResponse(rsp *http.Response) (*ReplaceStickRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceStickRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StickRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest StickRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteStickRuleResponse parses an HTTP response from a DeleteStickRuleWithResponse call
func ParseDeleteStickRuleResponse(rsp *http.Response) (*DeleteStickRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStickRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStickRuleResponse parses an HTTP response from a GetStickRuleWithResponse call
func ParseGetStickRuleResponse(rsp *http.Response) (*GetStickRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStickRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StickRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStickRuleResponse parses an HTTP response from a CreateStickRuleWithResponse call
func ParseCreateStickRuleResponse(rsp *http.Response) (*CreateStickRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStickRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StickRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest StickRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceStickRuleResponse parses an HTTP response from a ReplaceStickRuleWithResponse call
func ParseReplaceStickRuleResponse(rsp *http.Response) (*ReplaceStickRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceStickRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StickRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest StickRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllTCPCheckBackendResponse parses an HTTP response from a GetAllTCPCheckBackendWithResponse call
func ParseGetAllTCPCheckBackendResponse(rsp *http.Response) (*GetAllTCPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTCPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllTCPCheckBackendResponse parses an HTTP response from a ReplaceAllTCPCheckBackendWithResponse call
func ParseReplaceAllTCPCheckBackendResponse(rsp *http.Response) (*ReplaceAllTCPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllTCPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPCheckBackendResponse parses an HTTP response from a DeleteTCPCheckBackendWithResponse call
func ParseDeleteTCPCheckBackendResponse(rsp *http.Response) (*DeleteTCPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPCheckBackendResponse parses an HTTP response from a GetTCPCheckBackendWithResponse call
func ParseGetTCPCheckBackendResponse(rsp *http.Response) (*GetTCPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPCheckBackendResponse parses an HTTP response from a CreateTCPCheckBackendWithResponse call
func ParseCreateTCPCheckBackendResponse(rsp *http.Response) (*CreateTCPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTCPCheckBackendResponse parses an HTTP response from a ReplaceTCPCheckBackendWithResponse call
func ParseReplaceTCPCheckBackendResponse(rsp *http.Response) (*ReplaceTCPCheckBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTCPCheckBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllTCPRequestRuleBackendResponse parses an HTTP response from a GetAllTCPRequestRuleBackendWithResponse call
func ParseGetAllTCPRequestRuleBackendResponse(rsp *http.Response) (*GetAllTCPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTCPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllTCPRequestRuleBackendResponse parses an HTTP response from a ReplaceAllTCPRequestRuleBackendWithResponse call
func ParseReplaceAllTCPRequestRuleBackendResponse(rsp *http.Response) (*ReplaceAllTCPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllTCPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPRequestRuleBackendResponse parses an HTTP response from a DeleteTCPRequestRuleBackendWithResponse call
func ParseDeleteTCPRequestRuleBackendResponse(rsp *http.Response) (*DeleteTCPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPRequestRuleBackendResponse parses an HTTP response from a GetTCPRequestRuleBackendWithResponse call
func ParseGetTCPRequestRuleBackendResponse(rsp *http.Response) (*GetTCPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPRequestRuleBackendResponse parses an HTTP response from a CreateTCPRequestRuleBackendWithResponse call
func ParseCreateTCPRequestRuleBackendResponse(rsp *http.Response) (*CreateTCPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTCPRequestRuleBackendResponse parses an HTTP response from a ReplaceTCPRequestRuleBackendWithResponse call
func ParseReplaceTCPRequestRuleBackendResponse(rsp *http.Response) (*ReplaceTCPRequestRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTCPRequestRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllTCPResponseRuleBackendResponse parses an HTTP response from a GetAllTCPResponseRuleBackendWithResponse call
func ParseGetAllTCPResponseRuleBackendResponse(rsp *http.Response) (*GetAllTCPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTCPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllTCPResponseRuleBackendResponse parses an HTTP response from a ReplaceAllTCPResponseRuleBackendWithResponse call
func ParseReplaceAllTCPResponseRuleBackendResponse(rsp *http.Response) (*ReplaceAllTCPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllTCPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPResponseRuleBackendResponse parses an HTTP response from a DeleteTCPResponseRuleBackendWithResponse call
func ParseDeleteTCPResponseRuleBackendResponse(rsp *http.Response) (*DeleteTCPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPResponseRuleBackendResponse parses an HTTP response from a GetTCPResponseRuleBackendWithResponse call
func ParseGetTCPResponseRuleBackendResponse(rsp *http.Response) (*GetTCPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPResponseRuleBackendResponse parses an HTTP response from a CreateTCPResponseRuleBackendWithResponse call
func ParseCreateTCPResponseRuleBackendResponse(rsp *http.Response) (*CreateTCPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTCPResponseRuleBackendResponse parses an HTTP response from a ReplaceTCPResponseRuleBackendWithResponse call
func ParseReplaceTCPResponseRuleBackendResponse(rsp *http.Response) (*ReplaceTCPResponseRuleBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTCPResponseRuleBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCachesResponse parses an HTTP response from a GetCachesWithResponse call
func ParseGetCachesResponse(rsp *http.Response) (*GetCachesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCachesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Caches
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCacheResponse parses an HTTP response from a CreateCacheWithResponse call
func ParseCreateCacheResponse(rsp *http.Response) (*CreateCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Cache
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Cache
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCacheResponse parses an HTTP response from a DeleteCacheWithResponse call
func ParseDeleteCacheResponse(rsp *http.Response) (*DeleteCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCacheResponse parses an HTTP response from a GetCacheWithResponse call
func ParseGetCacheResponse(rsp *http.Response) (*GetCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cache
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceCacheResponse parses an HTTP response from a ReplaceCacheWithResponse call
func ParseReplaceCacheResponse(rsp *http.Response) (*ReplaceCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cache
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Cache
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCrtLoadsResponse parses an HTTP response from a GetCrtLoadsWithResponse call
func ParseGetCrtLoadsResponse(rsp *http.Response) (*GetCrtLoadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCrtLoadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrtLoads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCrtLoadResponse parses an HTTP response from a CreateCrtLoadWithResponse call
func ParseCreateCrtLoadResponse(rsp *http.Response) (*CreateCrtLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCrtLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CrtLoad
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CrtLoad
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCrtLoadResponse parses an HTTP response from a DeleteCrtLoadWithResponse call
func ParseDeleteCrtLoadResponse(rsp *http.Response) (*DeleteCrtLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCrtLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCrtLoadResponse parses an HTTP response from a GetCrtLoadWithResponse call
func ParseGetCrtLoadResponse(rsp *http.Response) (*GetCrtLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCrtLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrtLoad
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceCrtLoadResponse parses an HTTP response from a ReplaceCrtLoadWithResponse call
func ParseReplaceCrtLoadResponse(rsp *http.Response) (*ReplaceCrtLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCrtLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrtLoad
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CrtLoad
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCrtStoresResponse parses an HTTP response from a GetCrtStoresWithResponse call
func ParseGetCrtStoresResponse(rsp *http.Response) (*GetCrtStoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCrtStoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrtStores
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCrtStoreResponse parses an HTTP response from a CreateCrtStoreWithResponse call
func ParseCreateCrtStoreResponse(rsp *http.Response) (*CreateCrtStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCrtStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CrtStore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CrtStore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCrtStoreResponse parses an HTTP response from a DeleteCrtStoreWithResponse call
func ParseDeleteCrtStoreResponse(rsp *http.Response) (*DeleteCrtStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCrtStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCrtStoreResponse parses an HTTP response from a GetCrtStoreWithResponse call
func ParseGetCrtStoreResponse(rsp *http.Response) (*GetCrtStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCrtStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrtStore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditCrtStoreResponse parses an HTTP response from a EditCrtStoreWithResponse call
func ParseEditCrtStoreResponse(rsp *http.Response) (*EditCrtStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditCrtStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrtStore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CrtStore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDefaultsSectionsResponse parses an HTTP response from a GetDefaultsSectionsWithResponse call
func ParseGetDefaultsSectionsResponse(rsp *http.Response) (*GetDefaultsSectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultsSectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultsSections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddDefaultsSectionResponse parses an HTTP response from a AddDefaultsSectionWithResponse call
func ParseAddDefaultsSectionResponse(rsp *http.Response) (*AddDefaultsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDefaultsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Defaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Defaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateDefaultsSectionResponse parses an HTTP response from a CreateDefaultsSectionWithResponse call
func ParseCreateDefaultsSectionResponse(rsp *http.Response) (*CreateDefaultsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDefaultsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Defaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Defaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDefaultsSectionResponse parses an HTTP response from a DeleteDefaultsSectionWithResponse call
func ParseDeleteDefaultsSectionResponse(rsp *http.Response) (*DeleteDefaultsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDefaultsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDefaultsSectionResponse parses an HTTP response from a GetDefaultsSectionWithResponse call
func ParseGetDefaultsSectionResponse(rsp *http.Response) (*GetDefaultsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Defaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceDefaultsSectionResponse parses an HTTP response from a ReplaceDefaultsSectionWithResponse call
func ParseReplaceDefaultsSectionResponse(rsp *http.Response) (*ReplaceDefaultsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceDefaultsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Defaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Defaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllAclDefaultsResponse parses an HTTP response from a GetAllAclDefaultsWithResponse call
func ParseGetAllAclDefaultsResponse(rsp *http.Response) (*GetAllAclDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAclDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllAclDefaultsResponse parses an HTTP response from a ReplaceAllAclDefaultsWithResponse call
func ParseReplaceAllAclDefaultsResponse(rsp *http.Response) (*ReplaceAllAclDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllAclDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAclDefaultsResponse parses an HTTP response from a DeleteAclDefaultsWithResponse call
func ParseDeleteAclDefaultsResponse(rsp *http.Response) (*DeleteAclDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAclDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAclDefaultsResponse parses an HTTP response from a GetAclDefaultsWithResponse call
func ParseGetAclDefaultsResponse(rsp *http.Response) (*GetAclDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAclDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAclDefaultsResponse parses an HTTP response from a CreateAclDefaultsWithResponse call
func ParseCreateAclDefaultsResponse(rsp *http.Response) (*CreateAclDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAclDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAclDefaultsResponse parses an HTTP response from a ReplaceAclDefaultsWithResponse call
func ParseReplaceAclDefaultsResponse(rsp *http.Response) (*ReplaceAclDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAclDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPAfterResponseRuleDefaultsResponse parses an HTTP response from a GetAllHTTPAfterResponseRuleDefaultsWithResponse call
func ParseGetAllHTTPAfterResponseRuleDefaultsResponse(rsp *http.Response) (*GetAllHTTPAfterResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPAfterResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPAfterResponseRuleDefaultsResponse parses an HTTP response from a ReplaceAllHTTPAfterResponseRuleDefaultsWithResponse call
func ParseReplaceAllHTTPAfterResponseRuleDefaultsResponse(rsp *http.Response) (*ReplaceAllHTTPAfterResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPAfterResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPAfterResponseRuleDefaultsResponse parses an HTTP response from a DeleteHTTPAfterResponseRuleDefaultsWithResponse call
func ParseDeleteHTTPAfterResponseRuleDefaultsResponse(rsp *http.Response) (*DeleteHTTPAfterResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPAfterResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPAfterResponseRuleDefaultsResponse parses an HTTP response from a GetHTTPAfterResponseRuleDefaultsWithResponse call
func ParseGetHTTPAfterResponseRuleDefaultsResponse(rsp *http.Response) (*GetHTTPAfterResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPAfterResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPAfterResponseRuleDefaultsResponse parses an HTTP response from a CreateHTTPAfterResponseRuleDefaultsWithResponse call
func ParseCreateHTTPAfterResponseRuleDefaultsResponse(rsp *http.Response) (*CreateHTTPAfterResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPAfterResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPAfterResponseRuleDefaultsResponse parses an HTTP response from a ReplaceHTTPAfterResponseRuleDefaultsWithResponse call
func ParseReplaceHTTPAfterResponseRuleDefaultsResponse(rsp *http.Response) (*ReplaceHTTPAfterResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPAfterResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPCheckDefaultsResponse parses an HTTP response from a GetAllHTTPCheckDefaultsWithResponse call
func ParseGetAllHTTPCheckDefaultsResponse(rsp *http.Response) (*GetAllHTTPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPCheckDefaultsResponse parses an HTTP response from a ReplaceAllHTTPCheckDefaultsWithResponse call
func ParseReplaceAllHTTPCheckDefaultsResponse(rsp *http.Response) (*ReplaceAllHTTPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPCheckDefaultsResponse parses an HTTP response from a DeleteHTTPCheckDefaultsWithResponse call
func ParseDeleteHTTPCheckDefaultsResponse(rsp *http.Response) (*DeleteHTTPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPCheckDefaultsResponse parses an HTTP response from a GetHTTPCheckDefaultsWithResponse call
func ParseGetHTTPCheckDefaultsResponse(rsp *http.Response) (*GetHTTPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPCheckDefaultsResponse parses an HTTP response from a CreateHTTPCheckDefaultsWithResponse call
func ParseCreateHTTPCheckDefaultsResponse(rsp *http.Response) (*CreateHTTPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPCheckDefaultsResponse parses an HTTP response from a ReplaceHTTPCheckDefaultsWithResponse call
func ParseReplaceHTTPCheckDefaultsResponse(rsp *http.Response) (*ReplaceHTTPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPErrorRuleDefaultsResponse parses an HTTP response from a GetAllHTTPErrorRuleDefaultsWithResponse call
func ParseGetAllHTTPErrorRuleDefaultsResponse(rsp *http.Response) (*GetAllHTTPErrorRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPErrorRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPErrorRuleDefaultsResponse parses an HTTP response from a ReplaceAllHTTPErrorRuleDefaultsWithResponse call
func ParseReplaceAllHTTPErrorRuleDefaultsResponse(rsp *http.Response) (*ReplaceAllHTTPErrorRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPErrorRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPErrorRuleDefaultsResponse parses an HTTP response from a DeleteHTTPErrorRuleDefaultsWithResponse call
func ParseDeleteHTTPErrorRuleDefaultsResponse(rsp *http.Response) (*DeleteHTTPErrorRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPErrorRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPErrorRuleDefaultsResponse parses an HTTP response from a GetHTTPErrorRuleDefaultsWithResponse call
func ParseGetHTTPErrorRuleDefaultsResponse(rsp *http.Response) (*GetHTTPErrorRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPErrorRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPErrorRuleDefaultsResponse parses an HTTP response from a CreateHTTPErrorRuleDefaultsWithResponse call
func ParseCreateHTTPErrorRuleDefaultsResponse(rsp *http.Response) (*CreateHTTPErrorRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPErrorRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPErrorRuleDefaultsResponse parses an HTTP response from a ReplaceHTTPErrorRuleDefaultsWithResponse call
func ParseReplaceHTTPErrorRuleDefaultsResponse(rsp *http.Response) (*ReplaceHTTPErrorRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPErrorRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPRequestRuleDefaultsResponse parses an HTTP response from a GetAllHTTPRequestRuleDefaultsWithResponse call
func ParseGetAllHTTPRequestRuleDefaultsResponse(rsp *http.Response) (*GetAllHTTPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPRequestRuleDefaultsResponse parses an HTTP response from a ReplaceAllHTTPRequestRuleDefaultsWithResponse call
func ParseReplaceAllHTTPRequestRuleDefaultsResponse(rsp *http.Response) (*ReplaceAllHTTPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPRequestRuleDefaultsResponse parses an HTTP response from a DeleteHTTPRequestRuleDefaultsWithResponse call
func ParseDeleteHTTPRequestRuleDefaultsResponse(rsp *http.Response) (*DeleteHTTPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPRequestRuleDefaultsResponse parses an HTTP response from a GetHTTPRequestRuleDefaultsWithResponse call
func ParseGetHTTPRequestRuleDefaultsResponse(rsp *http.Response) (*GetHTTPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPRequestRuleDefaultsResponse parses an HTTP response from a CreateHTTPRequestRuleDefaultsWithResponse call
func ParseCreateHTTPRequestRuleDefaultsResponse(rsp *http.Response) (*CreateHTTPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPRequestRuleDefaultsResponse parses an HTTP response from a ReplaceHTTPRequestRuleDefaultsWithResponse call
func ParseReplaceHTTPRequestRuleDefaultsResponse(rsp *http.Response) (*ReplaceHTTPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPResponseRuleDefaultsResponse parses an HTTP response from a GetAllHTTPResponseRuleDefaultsWithResponse call
func ParseGetAllHTTPResponseRuleDefaultsResponse(rsp *http.Response) (*GetAllHTTPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPResponseRuleDefaultsResponse parses an HTTP response from a ReplaceAllHTTPResponseRuleDefaultsWithResponse call
func ParseReplaceAllHTTPResponseRuleDefaultsResponse(rsp *http.Response) (*ReplaceAllHTTPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPResponseRuleDefaultsResponse parses an HTTP response from a DeleteHTTPResponseRuleDefaultsWithResponse call
func ParseDeleteHTTPResponseRuleDefaultsResponse(rsp *http.Response) (*DeleteHTTPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPResponseRuleDefaultsResponse parses an HTTP response from a GetHTTPResponseRuleDefaultsWithResponse call
func ParseGetHTTPResponseRuleDefaultsResponse(rsp *http.Response) (*GetHTTPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPResponseRuleDefaultsResponse parses an HTTP response from a CreateHTTPResponseRuleDefaultsWithResponse call
func ParseCreateHTTPResponseRuleDefaultsResponse(rsp *http.Response) (*CreateHTTPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPResponseRuleDefaultsResponse parses an HTTP response from a ReplaceHTTPResponseRuleDefaultsWithResponse call
func ParseReplaceHTTPResponseRuleDefaultsResponse(rsp *http.Response) (*ReplaceHTTPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllLogTargetDefaultsResponse parses an HTTP response from a GetAllLogTargetDefaultsWithResponse call
func ParseGetAllLogTargetDefaultsResponse(rsp *http.Response) (*GetAllLogTargetDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLogTargetDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllLogTargetDefaultsResponse parses an HTTP response from a ReplaceAllLogTargetDefaultsWithResponse call
func ParseReplaceAllLogTargetDefaultsResponse(rsp *http.Response) (*ReplaceAllLogTargetDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllLogTargetDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogTargetDefaultsResponse parses an HTTP response from a DeleteLogTargetDefaultsWithResponse call
func ParseDeleteLogTargetDefaultsResponse(rsp *http.Response) (*DeleteLogTargetDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogTargetDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogTargetDefaultsResponse parses an HTTP response from a GetLogTargetDefaultsWithResponse call
func ParseGetLogTargetDefaultsResponse(rsp *http.Response) (*GetLogTargetDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogTargetDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogTargetDefaultsResponse parses an HTTP response from a CreateLogTargetDefaultsWithResponse call
func ParseCreateLogTargetDefaultsResponse(rsp *http.Response) (*CreateLogTargetDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogTargetDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceLogTargetDefaultsResponse parses an HTTP response from a ReplaceLogTargetDefaultsWithResponse call
func ParseReplaceLogTargetDefaultsResponse(rsp *http.Response) (*ReplaceLogTargetDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLogTargetDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllQUICInitialRuleDefaultsResponse parses an HTTP response from a GetAllQUICInitialRuleDefaultsWithResponse call
func ParseGetAllQUICInitialRuleDefaultsResponse(rsp *http.Response) (*GetAllQUICInitialRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllQUICInitialRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllQUICInitialRuleDefaultsResponse parses an HTTP response from a ReplaceAllQUICInitialRuleDefaultsWithResponse call
func ParseReplaceAllQUICInitialRuleDefaultsResponse(rsp *http.Response) (*ReplaceAllQUICInitialRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllQUICInitialRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest QUICInitialRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteQUICInitialRuleDefaultsResponse parses an HTTP response from a DeleteQUICInitialRuleDefaultsWithResponse call
func ParseDeleteQUICInitialRuleDefaultsResponse(rsp *http.Response) (*DeleteQUICInitialRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteQUICInitialRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetQUICInitialRuleDefaultsResponse parses an HTTP response from a GetQUICInitialRuleDefaultsWithResponse call
func ParseGetQUICInitialRuleDefaultsResponse(rsp *http.Response) (*GetQUICInitialRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQUICInitialRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateQUICInitialRuleDefaultsResponse parses an HTTP response from a CreateQUICInitialRuleDefaultsWithResponse call
func ParseCreateQUICInitialRuleDefaultsResponse(rsp *http.Response) (*CreateQUICInitialRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateQUICInitialRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceQUICInitialRuleDefaultsResponse parses an HTTP response from a ReplaceQUICInitialRuleDefaultsWithResponse call
func ParseReplaceQUICInitialRuleDefaultsResponse(rsp *http.Response) (*ReplaceQUICInitialRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceQUICInitialRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllTCPCheckDefaultsResponse parses an HTTP response from a GetAllTCPCheckDefaultsWithResponse call
func ParseGetAllTCPCheckDefaultsResponse(rsp *http.Response) (*GetAllTCPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTCPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllTCPCheckDefaultsResponse parses an HTTP response from a ReplaceAllTCPCheckDefaultsWithResponse call
func ParseReplaceAllTCPCheckDefaultsResponse(rsp *http.Response) (*ReplaceAllTCPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllTCPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpChecks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPCheckDefaultsResponse parses an HTTP response from a DeleteTCPCheckDefaultsWithResponse call
func ParseDeleteTCPCheckDefaultsResponse(rsp *http.Response) (*DeleteTCPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPCheckDefaultsResponse parses an HTTP response from a GetTCPCheckDefaultsWithResponse call
func ParseGetTCPCheckDefaultsResponse(rsp *http.Response) (*GetTCPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPCheckDefaultsResponse parses an HTTP response from a CreateTCPCheckDefaultsWithResponse call
func ParseCreateTCPCheckDefaultsResponse(rsp *http.Response) (*CreateTCPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTCPCheckDefaultsResponse parses an HTTP response from a ReplaceTCPCheckDefaultsWithResponse call
func ParseReplaceTCPCheckDefaultsResponse(rsp *http.Response) (*ReplaceTCPCheckDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTCPCheckDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllTCPRequestRuleDefaultsResponse parses an HTTP response from a GetAllTCPRequestRuleDefaultsWithResponse call
func ParseGetAllTCPRequestRuleDefaultsResponse(rsp *http.Response) (*GetAllTCPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTCPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllTCPRequestRuleDefaultsResponse parses an HTTP response from a ReplaceAllTCPRequestRuleDefaultsWithResponse call
func ParseReplaceAllTCPRequestRuleDefaultsResponse(rsp *http.Response) (*ReplaceAllTCPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllTCPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPRequestRuleDefaultsResponse parses an HTTP response from a DeleteTCPRequestRuleDefaultsWithResponse call
func ParseDeleteTCPRequestRuleDefaultsResponse(rsp *http.Response) (*DeleteTCPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPRequestRuleDefaultsResponse parses an HTTP response from a GetTCPRequestRuleDefaultsWithResponse call
func ParseGetTCPRequestRuleDefaultsResponse(rsp *http.Response) (*GetTCPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPRequestRuleDefaultsResponse parses an HTTP response from a CreateTCPRequestRuleDefaultsWithResponse call
func ParseCreateTCPRequestRuleDefaultsResponse(rsp *http.Response) (*CreateTCPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTCPRequestRuleDefaultsResponse parses an HTTP response from a ReplaceTCPRequestRuleDefaultsWithResponse call
func ParseReplaceTCPRequestRuleDefaultsResponse(rsp *http.Response) (*ReplaceTCPRequestRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTCPRequestRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllTCPResponseRuleDefaultsResponse parses an HTTP response from a GetAllTCPResponseRuleDefaultsWithResponse call
func ParseGetAllTCPResponseRuleDefaultsResponse(rsp *http.Response) (*GetAllTCPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTCPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllTCPResponseRuleDefaultsResponse parses an HTTP response from a ReplaceAllTCPResponseRuleDefaultsWithResponse call
func ParseReplaceAllTCPResponseRuleDefaultsResponse(rsp *http.Response) (*ReplaceAllTCPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllTCPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPResponseRuleDefaultsResponse parses an HTTP response from a DeleteTCPResponseRuleDefaultsWithResponse call
func ParseDeleteTCPResponseRuleDefaultsResponse(rsp *http.Response) (*DeleteTCPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPResponseRuleDefaultsResponse parses an HTTP response from a GetTCPResponseRuleDefaultsWithResponse call
func ParseGetTCPResponseRuleDefaultsResponse(rsp *http.Response) (*GetTCPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPResponseRuleDefaultsResponse parses an HTTP response from a CreateTCPResponseRuleDefaultsWithResponse call
func ParseCreateTCPResponseRuleDefaultsResponse(rsp *http.Response) (*CreateTCPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTCPResponseRuleDefaultsResponse parses an HTTP response from a ReplaceTCPResponseRuleDefaultsWithResponse call
func ParseReplaceTCPResponseRuleDefaultsResponse(rsp *http.Response) (*ReplaceTCPResponseRuleDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTCPResponseRuleDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFCGIAppsResponse parses an HTTP response from a GetFCGIAppsWithResponse call
func ParseGetFCGIAppsResponse(rsp *http.Response) (*GetFCGIAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFCGIAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FcgiApps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateFCGIAppResponse parses an HTTP response from a CreateFCGIAppWithResponse call
func ParseCreateFCGIAppResponse(rsp *http.Response) (*CreateFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FCGIApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest FCGIApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFCGIAppResponse parses an HTTP response from a DeleteFCGIAppWithResponse call
func ParseDeleteFCGIAppResponse(rsp *http.Response) (*DeleteFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFCGIAppResponse parses an HTTP response from a GetFCGIAppWithResponse call
func ParseGetFCGIAppResponse(rsp *http.Response) (*GetFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FCGIApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceFCGIAppResponse parses an HTTP response from a ReplaceFCGIAppWithResponse call
func ParseReplaceFCGIAppResponse(rsp *http.Response) (*ReplaceFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FCGIApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest FCGIApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllAclFCGIAppResponse parses an HTTP response from a GetAllAclFCGIAppWithResponse call
func ParseGetAllAclFCGIAppResponse(rsp *http.Response) (*GetAllAclFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAclFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllAclFCGIAppResponse parses an HTTP response from a ReplaceAllAclFCGIAppWithResponse call
func ParseReplaceAllAclFCGIAppResponse(rsp *http.Response) (*ReplaceAllAclFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllAclFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAclFCGIAppResponse parses an HTTP response from a DeleteAclFCGIAppWithResponse call
func ParseDeleteAclFCGIAppResponse(rsp *http.Response) (*DeleteAclFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAclFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAclFCGIAppResponse parses an HTTP response from a GetAclFCGIAppWithResponse call
func ParseGetAclFCGIAppResponse(rsp *http.Response) (*GetAclFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAclFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAclFCGIAppResponse parses an HTTP response from a CreateAclFCGIAppWithResponse call
func ParseCreateAclFCGIAppResponse(rsp *http.Response) (*CreateAclFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAclFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAclFCGIAppResponse parses an HTTP response from a ReplaceAclFCGIAppWithResponse call
func ParseReplaceAclFCGIAppResponse(rsp *http.Response) (*ReplaceAclFCGIAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAclFCGIAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFrontendsResponse parses an HTTP response from a GetFrontendsWithResponse call
func ParseGetFrontendsResponse(rsp *http.Response) (*GetFrontendsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFrontendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Frontends
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateFrontendResponse parses an HTTP response from a CreateFrontendWithResponse call
func ParseCreateFrontendResponse(rsp *http.Response) (*CreateFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Frontend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Frontend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFrontendResponse parses an HTTP response from a DeleteFrontendWithResponse call
func ParseDeleteFrontendResponse(rsp *http.Response) (*DeleteFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFrontendResponse parses an HTTP response from a GetFrontendWithResponse call
func ParseGetFrontendResponse(rsp *http.Response) (*GetFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Frontend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceFrontendResponse parses an HTTP response from a ReplaceFrontendWithResponse call
func ParseReplaceFrontendResponse(rsp *http.Response) (*ReplaceFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Frontend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Frontend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllAclFrontendResponse parses an HTTP response from a GetAllAclFrontendWithResponse call
func ParseGetAllAclFrontendResponse(rsp *http.Response) (*GetAllAclFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAclFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllAclFrontendResponse parses an HTTP response from a ReplaceAllAclFrontendWithResponse call
func ParseReplaceAllAclFrontendResponse(rsp *http.Response) (*ReplaceAllAclFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllAclFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAclFrontendResponse parses an HTTP response from a DeleteAclFrontendWithResponse call
func ParseDeleteAclFrontendResponse(rsp *http.Response) (*DeleteAclFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAclFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAclFrontendResponse parses an HTTP response from a GetAclFrontendWithResponse call
func ParseGetAclFrontendResponse(rsp *http.Response) (*GetAclFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAclFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAclFrontendResponse parses an HTTP response from a CreateAclFrontendWithResponse call
func ParseCreateAclFrontendResponse(rsp *http.Response) (*CreateAclFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAclFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAclFrontendResponse parses an HTTP response from a ReplaceAclFrontendWithResponse call
func ParseReplaceAclFrontendResponse(rsp *http.Response) (*ReplaceAclFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAclFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBackendSwitchingRulesResponse parses an HTTP response from a GetBackendSwitchingRulesWithResponse call
func ParseGetBackendSwitchingRulesResponse(rsp *http.Response) (*GetBackendSwitchingRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackendSwitchingRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackendSwitchingRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceBackendSwitchingRulesResponse parses an HTTP response from a ReplaceBackendSwitchingRulesWithResponse call
func ParseReplaceBackendSwitchingRulesResponse(rsp *http.Response) (*ReplaceBackendSwitchingRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceBackendSwitchingRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackendSwitchingRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest BackendSwitchingRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteBackendSwitchingRuleResponse parses an HTTP response from a DeleteBackendSwitchingRuleWithResponse call
func ParseDeleteBackendSwitchingRuleResponse(rsp *http.Response) (*DeleteBackendSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackendSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBackendSwitchingRuleResponse parses an HTTP response from a GetBackendSwitchingRuleWithResponse call
func ParseGetBackendSwitchingRuleResponse(rsp *http.Response) (*GetBackendSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackendSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackendSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateBackendSwitchingRuleResponse parses an HTTP response from a CreateBackendSwitchingRuleWithResponse call
func ParseCreateBackendSwitchingRuleResponse(rsp *http.Response) (*CreateBackendSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBackendSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BackendSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest BackendSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceBackendSwitchingRuleResponse parses an HTTP response from a ReplaceBackendSwitchingRuleWithResponse call
func ParseReplaceBackendSwitchingRuleResponse(rsp *http.Response) (*ReplaceBackendSwitchingRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceBackendSwitchingRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackendSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest BackendSwitchingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllBindFrontendResponse parses an HTTP response from a GetAllBindFrontendWithResponse call
func ParseGetAllBindFrontendResponse(rsp *http.Response) (*GetAllBindFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllBindFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Binds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateBindFrontendResponse parses an HTTP response from a CreateBindFrontendWithResponse call
func ParseCreateBindFrontendResponse(rsp *http.Response) (*CreateBindFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBindFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteBindFrontendResponse parses an HTTP response from a DeleteBindFrontendWithResponse call
func ParseDeleteBindFrontendResponse(rsp *http.Response) (*DeleteBindFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBindFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBindFrontendResponse parses an HTTP response from a GetBindFrontendWithResponse call
func ParseGetBindFrontendResponse(rsp *http.Response) (*GetBindFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBindFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceBindFrontendResponse parses an HTTP response from a ReplaceBindFrontendWithResponse call
func ParseReplaceBindFrontendResponse(rsp *http.Response) (*ReplaceBindFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceBindFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDeclareCapturesResponse parses an HTTP response from a GetDeclareCapturesWithResponse call
func ParseGetDeclareCapturesResponse(rsp *http.Response) (*GetDeclareCapturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeclareCapturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Captures
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceDeclareCapturesResponse parses an HTTP response from a ReplaceDeclareCapturesWithResponse call
func ParseReplaceDeclareCapturesResponse(rsp *http.Response) (*ReplaceDeclareCapturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceDeclareCapturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Captures
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Captures
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDeclareCaptureResponse parses an HTTP response from a DeleteDeclareCaptureWithResponse call
func ParseDeleteDeclareCaptureResponse(rsp *http.Response) (*DeleteDeclareCaptureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeclareCaptureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDeclareCaptureResponse parses an HTTP response from a GetDeclareCaptureWithResponse call
func ParseGetDeclareCaptureResponse(rsp *http.Response) (*GetDeclareCaptureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeclareCaptureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Capture
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateDeclareCaptureResponse parses an HTTP response from a CreateDeclareCaptureWithResponse call
func ParseCreateDeclareCaptureResponse(rsp *http.Response) (*CreateDeclareCaptureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeclareCaptureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Capture
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Capture
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceDeclareCaptureResponse parses an HTTP response from a ReplaceDeclareCaptureWithResponse call
func ParseReplaceDeclareCaptureResponse(rsp *http.Response) (*ReplaceDeclareCaptureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceDeclareCaptureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Capture
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Capture
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllFilterFrontendResponse parses an HTTP response from a GetAllFilterFrontendWithResponse call
func ParseGetAllFilterFrontendResponse(rsp *http.Response) (*GetAllFilterFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllFilterFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllFilterFrontendResponse parses an HTTP response from a ReplaceAllFilterFrontendWithResponse call
func ParseReplaceAllFilterFrontendResponse(rsp *http.Response) (*ReplaceAllFilterFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllFilterFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Filters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFilterFrontendResponse parses an HTTP response from a DeleteFilterFrontendWithResponse call
func ParseDeleteFilterFrontendResponse(rsp *http.Response) (*DeleteFilterFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFilterFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFilterFrontendResponse parses an HTTP response from a GetFilterFrontendWithResponse call
func ParseGetFilterFrontendResponse(rsp *http.Response) (*GetFilterFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilterFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateFilterFrontendResponse parses an HTTP response from a CreateFilterFrontendWithResponse call
func ParseCreateFilterFrontendResponse(rsp *http.Response) (*CreateFilterFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFilterFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceFilterFrontendResponse parses an HTTP response from a ReplaceFilterFrontendWithResponse call
func ParseReplaceFilterFrontendResponse(rsp *http.Response) (*ReplaceFilterFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceFilterFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Filter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPAfterResponseRuleFrontendResponse parses an HTTP response from a GetAllHTTPAfterResponseRuleFrontendWithResponse call
func ParseGetAllHTTPAfterResponseRuleFrontendResponse(rsp *http.Response) (*GetAllHTTPAfterResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPAfterResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPAfterResponseRuleFrontendResponse parses an HTTP response from a ReplaceAllHTTPAfterResponseRuleFrontendWithResponse call
func ParseReplaceAllHTTPAfterResponseRuleFrontendResponse(rsp *http.Response) (*ReplaceAllHTTPAfterResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPAfterResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPAfterResponseRuleFrontendResponse parses an HTTP response from a DeleteHTTPAfterResponseRuleFrontendWithResponse call
func ParseDeleteHTTPAfterResponseRuleFrontendResponse(rsp *http.Response) (*DeleteHTTPAfterResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPAfterResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPAfterResponseRuleFrontendResponse parses an HTTP response from a GetHTTPAfterResponseRuleFrontendWithResponse call
func ParseGetHTTPAfterResponseRuleFrontendResponse(rsp *http.Response) (*GetHTTPAfterResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPAfterResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPAfterResponseRuleFrontendResponse parses an HTTP response from a CreateHTTPAfterResponseRuleFrontendWithResponse call
func ParseCreateHTTPAfterResponseRuleFrontendResponse(rsp *http.Response) (*CreateHTTPAfterResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPAfterResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPAfterResponseRuleFrontendResponse parses an HTTP response from a ReplaceHTTPAfterResponseRuleFrontendWithResponse call
func ParseReplaceHTTPAfterResponseRuleFrontendResponse(rsp *http.Response) (*ReplaceHTTPAfterResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPAfterResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpAfterResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPErrorRuleFrontendResponse parses an HTTP response from a GetAllHTTPErrorRuleFrontendWithResponse call
func ParseGetAllHTTPErrorRuleFrontendResponse(rsp *http.Response) (*GetAllHTTPErrorRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPErrorRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPErrorRuleFrontendResponse parses an HTTP response from a ReplaceAllHTTPErrorRuleFrontendWithResponse call
func ParseReplaceAllHTTPErrorRuleFrontendResponse(rsp *http.Response) (*ReplaceAllHTTPErrorRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPErrorRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPErrorRuleFrontendResponse parses an HTTP response from a DeleteHTTPErrorRuleFrontendWithResponse call
func ParseDeleteHTTPErrorRuleFrontendResponse(rsp *http.Response) (*DeleteHTTPErrorRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPErrorRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPErrorRuleFrontendResponse parses an HTTP response from a GetHTTPErrorRuleFrontendWithResponse call
func ParseGetHTTPErrorRuleFrontendResponse(rsp *http.Response) (*GetHTTPErrorRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPErrorRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPErrorRuleFrontendResponse parses an HTTP response from a CreateHTTPErrorRuleFrontendWithResponse call
func ParseCreateHTTPErrorRuleFrontendResponse(rsp *http.Response) (*CreateHTTPErrorRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPErrorRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPErrorRuleFrontendResponse parses an HTTP response from a ReplaceHTTPErrorRuleFrontendWithResponse call
func ParseReplaceHTTPErrorRuleFrontendResponse(rsp *http.Response) (*ReplaceHTTPErrorRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPErrorRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPRequestRuleFrontendResponse parses an HTTP response from a GetAllHTTPRequestRuleFrontendWithResponse call
func ParseGetAllHTTPRequestRuleFrontendResponse(rsp *http.Response) (*GetAllHTTPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPRequestRuleFrontendResponse parses an HTTP response from a ReplaceAllHTTPRequestRuleFrontendWithResponse call
func ParseReplaceAllHTTPRequestRuleFrontendResponse(rsp *http.Response) (*ReplaceAllHTTPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPRequestRuleFrontendResponse parses an HTTP response from a DeleteHTTPRequestRuleFrontendWithResponse call
func ParseDeleteHTTPRequestRuleFrontendResponse(rsp *http.Response) (*DeleteHTTPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPRequestRuleFrontendResponse parses an HTTP response from a GetHTTPRequestRuleFrontendWithResponse call
func ParseGetHTTPRequestRuleFrontendResponse(rsp *http.Response) (*GetHTTPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPRequestRuleFrontendResponse parses an HTTP response from a CreateHTTPRequestRuleFrontendWithResponse call
func ParseCreateHTTPRequestRuleFrontendResponse(rsp *http.Response) (*CreateHTTPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPRequestRuleFrontendResponse parses an HTTP response from a ReplaceHTTPRequestRuleFrontendWithResponse call
func ParseReplaceHTTPRequestRuleFrontendResponse(rsp *http.Response) (*ReplaceHTTPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllHTTPResponseRuleFrontendResponse parses an HTTP response from a GetAllHTTPResponseRuleFrontendWithResponse call
func ParseGetAllHTTPResponseRuleFrontendResponse(rsp *http.Response) (*GetAllHTTPResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHTTPResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllHTTPResponseRuleFrontendResponse parses an HTTP response from a ReplaceAllHTTPResponseRuleFrontendWithResponse call
func ParseReplaceAllHTTPResponseRuleFrontendResponse(rsp *http.Response) (*ReplaceAllHTTPResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllHTTPResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPResponseRuleFrontendResponse parses an HTTP response from a DeleteHTTPResponseRuleFrontendWithResponse call
func ParseDeleteHTTPResponseRuleFrontendResponse(rsp *http.Response) (*DeleteHTTPResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPResponseRuleFrontendResponse parses an HTTP response from a GetHTTPResponseRuleFrontendWithResponse call
func ParseGetHTTPResponseRuleFrontendResponse(rsp *http.Response) (*GetHTTPResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPResponseRuleFrontendResponse parses an HTTP response from a CreateHTTPResponseRuleFrontendWithResponse call
func ParseCreateHTTPResponseRuleFrontendResponse(rsp *http.Response) (*CreateHTTPResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPResponseRuleFrontendResponse parses an HTTP response from a ReplaceHTTPResponseRuleFrontendWithResponse call
func ParseReplaceHTTPResponseRuleFrontendResponse(rsp *http.Response) (*ReplaceHTTPResponseRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPResponseRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpResponseRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllLogTargetFrontendResponse parses an HTTP response from a GetAllLogTargetFrontendWithResponse call
func ParseGetAllLogTargetFrontendResponse(rsp *http.Response) (*GetAllLogTargetFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLogTargetFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllLogTargetFrontendResponse parses an HTTP response from a ReplaceAllLogTargetFrontendWithResponse call
func ParseReplaceAllLogTargetFrontendResponse(rsp *http.Response) (*ReplaceAllLogTargetFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllLogTargetFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogTargetFrontendResponse parses an HTTP response from a DeleteLogTargetFrontendWithResponse call
func ParseDeleteLogTargetFrontendResponse(rsp *http.Response) (*DeleteLogTargetFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogTargetFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogTargetFrontendResponse parses an HTTP response from a GetLogTargetFrontendWithResponse call
func ParseGetLogTargetFrontendResponse(rsp *http.Response) (*GetLogTargetFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogTargetFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogTargetFrontendResponse parses an HTTP response from a CreateLogTargetFrontendWithResponse call
func ParseCreateLogTargetFrontendResponse(rsp *http.Response) (*CreateLogTargetFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogTargetFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceLogTargetFrontendResponse parses an HTTP response from a ReplaceLogTargetFrontendWithResponse call
func ParseReplaceLogTargetFrontendResponse(rsp *http.Response) (*ReplaceLogTargetFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLogTargetFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllQUICInitialRuleFrontendResponse parses an HTTP response from a GetAllQUICInitialRuleFrontendWithResponse call
func ParseGetAllQUICInitialRuleFrontendResponse(rsp *http.Response) (*GetAllQUICInitialRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllQUICInitialRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllQUICInitialRuleFrontendResponse parses an HTTP response from a ReplaceAllQUICInitialRuleFrontendWithResponse call
func ParseReplaceAllQUICInitialRuleFrontendResponse(rsp *http.Response) (*ReplaceAllQUICInitialRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllQUICInitialRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest QUICInitialRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteQUICInitialRuleFrontendResponse parses an HTTP response from a DeleteQUICInitialRuleFrontendWithResponse call
func ParseDeleteQUICInitialRuleFrontendResponse(rsp *http.Response) (*DeleteQUICInitialRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteQUICInitialRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetQUICInitialRuleFrontendResponse parses an HTTP response from a GetQUICInitialRuleFrontendWithResponse call
func ParseGetQUICInitialRuleFrontendResponse(rsp *http.Response) (*GetQUICInitialRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQUICInitialRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateQUICInitialRuleFrontendResponse parses an HTTP response from a CreateQUICInitialRuleFrontendWithResponse call
func ParseCreateQUICInitialRuleFrontendResponse(rsp *http.Response) (*CreateQUICInitialRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateQUICInitialRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceQUICInitialRuleFrontendResponse parses an HTTP response from a ReplaceQUICInitialRuleFrontendWithResponse call
func ParseReplaceQUICInitialRuleFrontendResponse(rsp *http.Response) (*ReplaceQUICInitialRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceQUICInitialRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest QUICInitialRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllSSLFrontUsesResponse parses an HTTP response from a GetAllSSLFrontUsesWithResponse call
func ParseGetAllSSLFrontUsesResponse(rsp *http.Response) (*GetAllSSLFrontUsesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSSLFrontUsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SSLFrontUses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSSLFrontUseResponse parses an HTTP response from a CreateSSLFrontUseWithResponse call
func ParseCreateSSLFrontUseResponse(rsp *http.Response) (*CreateSSLFrontUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSSLFrontUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SSLFrontUse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SSLFrontUse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSSLFrontUseResponse parses an HTTP response from a DeleteSSLFrontUseWithResponse call
func ParseDeleteSSLFrontUseResponse(rsp *http.Response) (*DeleteSSLFrontUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSSLFrontUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSSLFrontUseResponse parses an HTTP response from a GetSSLFrontUseWithResponse call
func ParseGetSSLFrontUseResponse(rsp *http.Response) (*GetSSLFrontUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSSLFrontUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SSLFrontUse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceSSLFrontUseResponse parses an HTTP response from a ReplaceSSLFrontUseWithResponse call
func ParseReplaceSSLFrontUseResponse(rsp *http.Response) (*ReplaceSSLFrontUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceSSLFrontUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SSLFrontUse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SSLFrontUse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllTCPRequestRuleFrontendResponse parses an HTTP response from a GetAllTCPRequestRuleFrontendWithResponse call
func ParseGetAllTCPRequestRuleFrontendResponse(rsp *http.Response) (*GetAllTCPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTCPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllTCPRequestRuleFrontendResponse parses an HTTP response from a ReplaceAllTCPRequestRuleFrontendWithResponse call
func ParseReplaceAllTCPRequestRuleFrontendResponse(rsp *http.Response) (*ReplaceAllTCPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllTCPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPRequestRuleFrontendResponse parses an HTTP response from a DeleteTCPRequestRuleFrontendWithResponse call
func ParseDeleteTCPRequestRuleFrontendResponse(rsp *http.Response) (*DeleteTCPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPRequestRuleFrontendResponse parses an HTTP response from a GetTCPRequestRuleFrontendWithResponse call
func ParseGetTCPRequestRuleFrontendResponse(rsp *http.Response) (*GetTCPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPRequestRuleFrontendResponse parses an HTTP response from a CreateTCPRequestRuleFrontendWithResponse call
func ParseCreateTCPRequestRuleFrontendResponse(rsp *http.Response) (*CreateTCPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTCPRequestRuleFrontendResponse parses an HTTP response from a ReplaceTCPRequestRuleFrontendWithResponse call
func ParseReplaceTCPRequestRuleFrontendResponse(rsp *http.Response) (*ReplaceTCPRequestRuleFrontendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTCPRequestRuleFrontendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TcpRequestRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGlobalResponse parses an HTTP response from a GetGlobalWithResponse call
func ParseGetGlobalResponse(rsp *http.Response) (*GetGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Global
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceGlobalResponse parses an HTTP response from a ReplaceGlobalWithResponse call
func ParseReplaceGlobalResponse(rsp *http.Response) (*ReplaceGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Global
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Global
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllLogTargetGlobalResponse parses an HTTP response from a GetAllLogTargetGlobalWithResponse call
func ParseGetAllLogTargetGlobalResponse(rsp *http.Response) (*GetAllLogTargetGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLogTargetGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllLogTargetGlobalResponse parses an HTTP response from a ReplaceAllLogTargetGlobalWithResponse call
func ParseReplaceAllLogTargetGlobalResponse(rsp *http.Response) (*ReplaceAllLogTargetGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllLogTargetGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogTargetGlobalResponse parses an HTTP response from a DeleteLogTargetGlobalWithResponse call
func ParseDeleteLogTargetGlobalResponse(rsp *http.Response) (*DeleteLogTargetGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogTargetGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogTargetGlobalResponse parses an HTTP response from a GetLogTargetGlobalWithResponse call
func ParseGetLogTargetGlobalResponse(rsp *http.Response) (*GetLogTargetGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogTargetGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogTargetGlobalResponse parses an HTTP response from a CreateLogTargetGlobalWithResponse call
func ParseCreateLogTargetGlobalResponse(rsp *http.Response) (*CreateLogTargetGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogTargetGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceLogTargetGlobalResponse parses an HTTP response from a ReplaceLogTargetGlobalWithResponse call
func ParseReplaceLogTargetGlobalResponse(rsp *http.Response) (*ReplaceLogTargetGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLogTargetGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGroupsResponse parses an HTTP response from a GetGroupsWithResponse call
func ParseGetGroupsResponse(rsp *http.Response) (*GetGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Groups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGroupResponse parses an HTTP response from a CreateGroupWithResponse call
func ParseCreateGroupResponse(rsp *http.Response) (*CreateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGroupResponse parses an HTTP response from a DeleteGroupWithResponse call
func ParseDeleteGroupResponse(rsp *http.Response) (*DeleteGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGroupResponse parses an HTTP response from a GetGroupWithResponse call
func ParseGetGroupResponse(rsp *http.Response) (*GetGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceGroupResponse parses an HTTP response from a ReplaceGroupWithResponse call
func ParseReplaceGroupResponse(rsp *http.Response) (*ReplaceGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPErrorsSectionsResponse parses an HTTP response from a GetHTTPErrorsSectionsWithResponse call
func ParseGetHTTPErrorsSectionsResponse(rsp *http.Response) (*GetHTTPErrorsSectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPErrorsSectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorsSections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPErrorsSectionResponse parses an HTTP response from a CreateHTTPErrorsSectionWithResponse call
func ParseCreateHTTPErrorsSectionResponse(rsp *http.Response) (*CreateHTTPErrorsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPErrorsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HttpErrorsSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorsSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPErrorsSectionResponse parses an HTTP response from a DeleteHTTPErrorsSectionWithResponse call
func ParseDeleteHTTPErrorsSectionResponse(rsp *http.Response) (*DeleteHTTPErrorsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPErrorsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPErrorsSectionResponse parses an HTTP response from a GetHTTPErrorsSectionWithResponse call
func ParseGetHTTPErrorsSectionResponse(rsp *http.Response) (*GetHTTPErrorsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPErrorsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorsSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceHTTPErrorsSectionResponse parses an HTTP response from a ReplaceHTTPErrorsSectionWithResponse call
func ParseReplaceHTTPErrorsSectionResponse(rsp *http.Response) (*ReplaceHTTPErrorsSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceHTTPErrorsSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HttpErrorsSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest HttpErrorsSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogForwardsResponse parses an HTTP response from a GetLogForwardsWithResponse call
func ParseGetLogForwardsResponse(rsp *http.Response) (*GetLogForwardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogForwardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogForwards
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogForwardResponse parses an HTTP response from a CreateLogForwardWithResponse call
func ParseCreateLogForwardResponse(rsp *http.Response) (*CreateLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogForward
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogForward
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogForwardResponse parses an HTTP response from a DeleteLogForwardWithResponse call
func ParseDeleteLogForwardResponse(rsp *http.Response) (*DeleteLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogForwardResponse parses an HTTP response from a GetLogForwardWithResponse call
func ParseGetLogForwardResponse(rsp *http.Response) (*GetLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogForward
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceLogForwardResponse parses an HTTP response from a ReplaceLogForwardWithResponse call
func ParseReplaceLogForwardResponse(rsp *http.Response) (*ReplaceLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogForward
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogForward
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllBindLogForwardResponse parses an HTTP response from a GetAllBindLogForwardWithResponse call
func ParseGetAllBindLogForwardResponse(rsp *http.Response) (*GetAllBindLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllBindLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Binds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateBindLogForwardResponse parses an HTTP response from a CreateBindLogForwardWithResponse call
func ParseCreateBindLogForwardResponse(rsp *http.Response) (*CreateBindLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBindLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteBindLogForwardResponse parses an HTTP response from a DeleteBindLogForwardWithResponse call
func ParseDeleteBindLogForwardResponse(rsp *http.Response) (*DeleteBindLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBindLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBindLogForwardResponse parses an HTTP response from a GetBindLogForwardWithResponse call
func ParseGetBindLogForwardResponse(rsp *http.Response) (*GetBindLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBindLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceBindLogForwardResponse parses an HTTP response from a ReplaceBindLogForwardWithResponse call
func ParseReplaceBindLogForwardResponse(rsp *http.Response) (*ReplaceBindLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceBindLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDgramBindsResponse parses an HTTP response from a GetDgramBindsWithResponse call
func ParseGetDgramBindsResponse(rsp *http.Response) (*GetDgramBindsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDgramBindsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DgramBinds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateDgramBindResponse parses an HTTP response from a CreateDgramBindWithResponse call
func ParseCreateDgramBindResponse(rsp *http.Response) (*CreateDgramBindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDgramBindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DgramBind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DgramBind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDgramBindResponse parses an HTTP response from a DeleteDgramBindWithResponse call
func ParseDeleteDgramBindResponse(rsp *http.Response) (*DeleteDgramBindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDgramBindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDgramBindResponse parses an HTTP response from a GetDgramBindWithResponse call
func ParseGetDgramBindResponse(rsp *http.Response) (*GetDgramBindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDgramBindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DgramBind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceDgramBindResponse parses an HTTP response from a ReplaceDgramBindWithResponse call
func ParseReplaceDgramBindResponse(rsp *http.Response) (*ReplaceDgramBindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceDgramBindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DgramBind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DgramBind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllLogTargetLogForwardResponse parses an HTTP response from a GetAllLogTargetLogForwardWithResponse call
func ParseGetAllLogTargetLogForwardResponse(rsp *http.Response) (*GetAllLogTargetLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLogTargetLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllLogTargetLogForwardResponse parses an HTTP response from a ReplaceAllLogTargetLogForwardWithResponse call
func ParseReplaceAllLogTargetLogForwardResponse(rsp *http.Response) (*ReplaceAllLogTargetLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllLogTargetLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogTargetLogForwardResponse parses an HTTP response from a DeleteLogTargetLogForwardWithResponse call
func ParseDeleteLogTargetLogForwardResponse(rsp *http.Response) (*DeleteLogTargetLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogTargetLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogTargetLogForwardResponse parses an HTTP response from a GetLogTargetLogForwardWithResponse call
func ParseGetLogTargetLogForwardResponse(rsp *http.Response) (*GetLogTargetLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogTargetLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogTargetLogForwardResponse parses an HTTP response from a CreateLogTargetLogForwardWithResponse call
func ParseCreateLogTargetLogForwardResponse(rsp *http.Response) (*CreateLogTargetLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogTargetLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceLogTargetLogForwardResponse parses an HTTP response from a ReplaceLogTargetLogForwardWithResponse call
func ParseReplaceLogTargetLogForwardResponse(rsp *http.Response) (*ReplaceLogTargetLogForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLogTargetLogForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogProfilesResponse parses an HTTP response from a GetLogProfilesWithResponse call
func ParseGetLogProfilesResponse(rsp *http.Response) (*GetLogProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogProfileResponse parses an HTTP response from a CreateLogProfileWithResponse call
func ParseCreateLogProfileResponse(rsp *http.Response) (*CreateLogProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogProfileResponse parses an HTTP response from a DeleteLogProfileWithResponse call
func ParseDeleteLogProfileResponse(rsp *http.Response) (*DeleteLogProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogProfileResponse parses an HTTP response from a GetLogProfileWithResponse call
func ParseGetLogProfileResponse(rsp *http.Response) (*GetLogProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditLogProfileResponse parses an HTTP response from a EditLogProfileWithResponse call
func ParseEditLogProfileResponse(rsp *http.Response) (*EditLogProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditLogProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMailerEntriesResponse parses an HTTP response from a GetMailerEntriesWithResponse call
func ParseGetMailerEntriesResponse(rsp *http.Response) (*GetMailerEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMailerEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailerEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMailerEntryResponse parses an HTTP response from a CreateMailerEntryWithResponse call
func ParseCreateMailerEntryResponse(rsp *http.Response) (*CreateMailerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMailerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MailerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest MailerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMailerEntryResponse parses an HTTP response from a DeleteMailerEntryWithResponse call
func ParseDeleteMailerEntryResponse(rsp *http.Response) (*DeleteMailerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMailerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMailerEntryResponse parses an HTTP response from a GetMailerEntryWithResponse call
func ParseGetMailerEntryResponse(rsp *http.Response) (*GetMailerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMailerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceMailerEntryResponse parses an HTTP response from a ReplaceMailerEntryWithResponse call
func ParseReplaceMailerEntryResponse(rsp *http.Response) (*ReplaceMailerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceMailerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest MailerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMailersSectionsResponse parses an HTTP response from a GetMailersSectionsWithResponse call
func ParseGetMailersSectionsResponse(rsp *http.Response) (*GetMailersSectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMailersSectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailersSections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMailersSectionResponse parses an HTTP response from a CreateMailersSectionWithResponse call
func ParseCreateMailersSectionResponse(rsp *http.Response) (*CreateMailersSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMailersSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MailersSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest MailersSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMailersSectionResponse parses an HTTP response from a DeleteMailersSectionWithResponse call
func ParseDeleteMailersSectionResponse(rsp *http.Response) (*DeleteMailersSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMailersSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMailersSectionResponse parses an HTTP response from a GetMailersSectionWithResponse call
func ParseGetMailersSectionResponse(rsp *http.Response) (*GetMailersSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMailersSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailersSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditMailersSectionResponse parses an HTTP response from a EditMailersSectionWithResponse call
func ParseEditMailersSectionResponse(rsp *http.Response) (*EditMailersSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditMailersSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailersSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest MailersSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNameserversResponse parses an HTTP response from a GetNameserversWithResponse call
func ParseGetNameserversResponse(rsp *http.Response) (*GetNameserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNameserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nameservers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNameserverResponse parses an HTTP response from a CreateNameserverWithResponse call
func ParseCreateNameserverResponse(rsp *http.Response) (*CreateNameserverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNameserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Nameserver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Nameserver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNameserverResponse parses an HTTP response from a DeleteNameserverWithResponse call
func ParseDeleteNameserverResponse(rsp *http.Response) (*DeleteNameserverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNameserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNameserverResponse parses an HTTP response from a GetNameserverWithResponse call
func ParseGetNameserverResponse(rsp *http.Response) (*GetNameserverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNameserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nameserver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceNameserverResponse parses an HTTP response from a ReplaceNameserverWithResponse call
func ParseReplaceNameserverResponse(rsp *http.Response) (*ReplaceNameserverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceNameserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nameserver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Nameserver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeerEntriesResponse parses an HTTP response from a GetPeerEntriesWithResponse call
func ParseGetPeerEntriesResponse(rsp *http.Response) (*GetPeerEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeerEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeerEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePeerEntryResponse parses an HTTP response from a CreatePeerEntryWithResponse call
func ParseCreatePeerEntryResponse(rsp *http.Response) (*CreatePeerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePeerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PeerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PeerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePeerEntryResponse parses an HTTP response from a DeletePeerEntryWithResponse call
func ParseDeletePeerEntryResponse(rsp *http.Response) (*DeletePeerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePeerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeerEntryResponse parses an HTTP response from a GetPeerEntryWithResponse call
func ParseGetPeerEntryResponse(rsp *http.Response) (*GetPeerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplacePeerEntryResponse parses an HTTP response from a ReplacePeerEntryWithResponse call
func ParseReplacePeerEntryResponse(rsp *http.Response) (*ReplacePeerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplacePeerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PeerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeerSectionsResponse parses an HTTP response from a GetPeerSectionsWithResponse call
func ParseGetPeerSectionsResponse(rsp *http.Response) (*GetPeerSectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeerSectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeerSections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePeerResponse parses an HTTP response from a CreatePeerWithResponse call
func ParseCreatePeerResponse(rsp *http.Response) (*CreatePeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PeerSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PeerSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePeerResponse parses an HTTP response from a DeletePeerWithResponse call
func ParseDeletePeerResponse(rsp *http.Response) (*DeletePeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeerSectionResponse parses an HTTP response from a GetPeerSectionWithResponse call
func ParseGetPeerSectionResponse(rsp *http.Response) (*GetPeerSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeerSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeerSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllBindPeerResponse parses an HTTP response from a GetAllBindPeerWithResponse call
func ParseGetAllBindPeerResponse(rsp *http.Response) (*GetAllBindPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllBindPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Binds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateBindPeerResponse parses an HTTP response from a CreateBindPeerWithResponse call
func ParseCreateBindPeerResponse(rsp *http.Response) (*CreateBindPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBindPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteBindPeerResponse parses an HTTP response from a DeleteBindPeerWithResponse call
func ParseDeleteBindPeerResponse(rsp *http.Response) (*DeleteBindPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBindPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBindPeerResponse parses an HTTP response from a GetBindPeerWithResponse call
func ParseGetBindPeerResponse(rsp *http.Response) (*GetBindPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBindPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceBindPeerResponse parses an HTTP response from a ReplaceBindPeerWithResponse call
func ParseReplaceBindPeerResponse(rsp *http.Response) (*ReplaceBindPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceBindPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Bind
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllLogTargetPeerResponse parses an HTTP response from a GetAllLogTargetPeerWithResponse call
func ParseGetAllLogTargetPeerResponse(rsp *http.Response) (*GetAllLogTargetPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLogTargetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceAllLogTargetPeerResponse parses an HTTP response from a ReplaceAllLogTargetPeerWithResponse call
func ParseReplaceAllLogTargetPeerResponse(rsp *http.Response) (*ReplaceAllLogTargetPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAllLogTargetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogTargetPeerResponse parses an HTTP response from a DeleteLogTargetPeerWithResponse call
func ParseDeleteLogTargetPeerResponse(rsp *http.Response) (*DeleteLogTargetPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogTargetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogTargetPeerResponse parses an HTTP response from a GetLogTargetPeerWithResponse call
func ParseGetLogTargetPeerResponse(rsp *http.Response) (*GetLogTargetPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogTargetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateLogTargetPeerResponse parses an HTTP response from a CreateLogTargetPeerWithResponse call
func ParseCreateLogTargetPeerResponse(rsp *http.Response) (*CreateLogTargetPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLogTargetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceLogTargetPeerResponse parses an HTTP response from a ReplaceLogTargetPeerWithResponse call
func ParseReplaceLogTargetPeerResponse(rsp *http.Response) (*ReplaceLogTargetPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLogTargetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest LogTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllServerPeerResponse parses an HTTP response from a GetAllServerPeerWithResponse call
func ParseGetAllServerPeerResponse(rsp *http.Response) (*GetAllServerPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllServerPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Servers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateServerPeerResponse parses an HTTP response from a CreateServerPeerWithResponse call
func ParseCreateServerPeerResponse(rsp *http.Response) (*CreateServerPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServerPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteServerPeerResponse parses an HTTP response from a DeleteServerPeerWithResponse call
func ParseDeleteServerPeerResponse(rsp *http.Response) (*DeleteServerPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServerPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServerPeerResponse parses an HTTP response from a GetServerPeerWithResponse call
func ParseGetServerPeerResponse(rsp *http.Response) (*GetServerPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceServerPeerResponse parses an HTTP response from a ReplaceServerPeerWithResponse call
func ParseReplaceServerPeerResponse(rsp *http.Response) (*ReplaceServerPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceServerPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTablesResponse parses an HTTP response from a GetTablesWithResponse call
func ParseGetTablesResponse(rsp *http.Response) (*GetTablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTableResponse parses an HTTP response from a CreateTableWithResponse call
func ParseCreateTableResponse(rsp *http.Response) (*CreateTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTableResponse parses an HTTP response from a DeleteTableWithResponse call
func ParseDeleteTableResponse(rsp *http.Response) (*DeleteTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTableResponse parses an HTTP response from a GetTableWithResponse call
func ParseGetTableResponse(rsp *http.Response) (*GetTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTableResponse parses an HTTP response from a ReplaceTableWithResponse call
func ParseReplaceTableResponse(rsp *http.Response) (*ReplaceTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProgramsResponse parses an HTTP response from a GetProgramsWithResponse call
func ParseGetProgramsResponse(rsp *http.Response) (*GetProgramsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProgramsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Programs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateProgramResponse parses an HTTP response from a CreateProgramWithResponse call
func ParseCreateProgramResponse(rsp *http.Response) (*CreateProgramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProgramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Program
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Program
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteProgramResponse parses an HTTP response from a DeleteProgramWithResponse call
func ParseDeleteProgramResponse(rsp *http.Response) (*DeleteProgramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProgramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProgramResponse parses an HTTP response from a GetProgramWithResponse call
func ParseGetProgramResponse(rsp *http.Response) (*GetProgramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProgramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Program
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceProgramResponse parses an HTTP response from a ReplaceProgramWithResponse call
func ParseReplaceProgramResponse(rsp *http.Response) (*ReplaceProgramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceProgramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Program
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Program
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHAProxyConfigurationResponse parses an HTTP response from a GetHAProxyConfigurationWithResponse call
func ParseGetHAProxyConfigurationResponse(rsp *http.Response) (*GetHAProxyConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHAProxyConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostHAProxyConfigurationResponse parses an HTTP response from a PostHAProxyConfigurationWithResponse call
func ParsePostHAProxyConfigurationResponse(rsp *http.Response) (*PostHAProxyConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHAProxyConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResolversResponse parses an HTTP response from a GetResolversWithResponse call
func ParseGetResolversResponse(rsp *http.Response) (*GetResolversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResolversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resolvers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateResolverResponse parses an HTTP response from a CreateResolverWithResponse call
func ParseCreateResolverResponse(rsp *http.Response) (*CreateResolverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResolverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Resolver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Resolver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteResolverResponse parses an HTTP response from a DeleteResolverWithResponse call
func ParseDeleteResolverResponse(rsp *http.Response) (*DeleteResolverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResolverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetResolverResponse parses an HTTP response from a GetResolverWithResponse call
func ParseGetResolverResponse(rsp *http.Response) (*GetResolverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResolverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resolver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceResolverResponse parses an HTTP response from a ReplaceResolverWithResponse call
func ParseReplaceResolverResponse(rsp *http.Response) (*ReplaceResolverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceResolverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resolver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Resolver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRingsResponse parses an HTTP response from a GetRingsWithResponse call
func ParseGetRingsResponse(rsp *http.Response) (*GetRingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateRingResponse parses an HTTP response from a CreateRingWithResponse call
func ParseCreateRingResponse(rsp *http.Response) (*CreateRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Ring
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Ring
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteRingResponse parses an HTTP response from a DeleteRingWithResponse call
func ParseDeleteRingResponse(rsp *http.Response) (*DeleteRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRingResponse parses an HTTP response from a GetRingWithResponse call
func ParseGetRingResponse(rsp *http.Response) (*GetRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ring
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceRingResponse parses an HTTP response from a ReplaceRingWithResponse call
func ParseReplaceRingResponse(rsp *http.Response) (*ReplaceRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ring
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Ring
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllServerRingResponse parses an HTTP response from a GetAllServerRingWithResponse call
func ParseGetAllServerRingResponse(rsp *http.Response) (*GetAllServerRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllServerRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Servers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateServerRingResponse parses an HTTP response from a CreateServerRingWithResponse call
func ParseCreateServerRingResponse(rsp *http.Response) (*CreateServerRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServerRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteServerRingResponse parses an HTTP response from a DeleteServerRingWithResponse call
func ParseDeleteServerRingResponse(rsp *http.Response) (*DeleteServerRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServerRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServerRingResponse parses an HTTP response from a GetServerRingWithResponse call
func ParseGetServerRingResponse(rsp *http.Response) (*GetServerRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceServerRingResponse parses an HTTP response from a ReplaceServerRingWithResponse call
func ParseReplaceServerRingResponse(rsp *http.Response) (*ReplaceServerRingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceServerRingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTracesResponse parses an HTTP response from a DeleteTracesWithResponse call
func ParseDeleteTracesResponse(rsp *http.Response) (*DeleteTracesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTracesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTracesResponse parses an HTTP response from a GetTracesWithResponse call
func ParseGetTracesResponse(rsp *http.Response) (*GetTracesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Traces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTracesResponse parses an HTTP response from a CreateTracesWithResponse call
func ParseCreateTracesResponse(rsp *http.Response) (*CreateTracesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTracesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Traces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Traces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceTracesResponse parses an HTTP response from a ReplaceTracesWithResponse call
func ParseReplaceTracesResponse(rsp *http.Response) (*ReplaceTracesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceTracesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Traces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Traces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTraceEntryResponse parses an HTTP response from a DeleteTraceEntryWithResponse call
func ParseDeleteTraceEntryResponse(rsp *http.Response) (*DeleteTraceEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTraceEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTraceEntryResponse parses an HTTP response from a CreateTraceEntryWithResponse call
func ParseCreateTraceEntryResponse(rsp *http.Response) (*CreateTraceEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTraceEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TraceEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TraceEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserlistsResponse parses an HTTP response from a GetUserlistsWithResponse call
func ParseGetUserlistsResponse(rsp *http.Response) (*GetUserlistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserlistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Userlists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateUserlistResponse parses an HTTP response from a CreateUserlistWithResponse call
func ParseCreateUserlistResponse(rsp *http.Response) (*CreateUserlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Userlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Userlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUserlistResponse parses an HTTP response from a DeleteUserlistWithResponse call
func ParseDeleteUserlistResponse(rsp *http.Response) (*DeleteUserlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserlistResponse parses an HTTP response from a GetUserlistWithResponse call
func ParseGetUserlistResponse(rsp *http.Response) (*GetUserlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Userlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Users
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceUserResponse parses an HTTP response from a ReplaceUserWithResponse call
func ParseReplaceUserResponse(rsp *http.Response) (*ReplaceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConfigurationVersionResponse parses an HTTP response from a GetConfigurationVersionWithResponse call
func ParseGetConfigurationVersionResponse(rsp *http.Response) (*GetConfigurationVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetReloadsResponse parses an HTTP response from a GetReloadsWithResponse call
func ParseGetReloadsResponse(rsp *http.Response) (*GetReloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetReloadResponse parses an HTTP response from a GetReloadWithResponse call
func ParseGetReloadResponse(rsp *http.Response) (*GetReloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRuntimeEndpointsResponse parses an HTTP response from a GetRuntimeEndpointsWithResponse call
func ParseGetRuntimeEndpointsResponse(rsp *http.Response) (*GetRuntimeEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuntimeEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServicesHaproxyRuntimeAclsResponse parses an HTTP response from a GetServicesHaproxyRuntimeAclsWithResponse call
func ParseGetServicesHaproxyRuntimeAclsResponse(rsp *http.Response) (*GetServicesHaproxyRuntimeAclsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesHaproxyRuntimeAclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AclFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServicesHaproxyRuntimeAclsIdResponse parses an HTTP response from a GetServicesHaproxyRuntimeAclsIdWithResponse call
func ParseGetServicesHaproxyRuntimeAclsIdResponse(rsp *http.Response) (*GetServicesHaproxyRuntimeAclsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesHaproxyRuntimeAclsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AclFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServicesHaproxyRuntimeAclsParentNameEntriesResponse parses an HTTP response from a GetServicesHaproxyRuntimeAclsParentNameEntriesWithResponse call
func ParseGetServicesHaproxyRuntimeAclsParentNameEntriesResponse(rsp *http.Response) (*GetServicesHaproxyRuntimeAclsParentNameEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesHaproxyRuntimeAclsParentNameEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AclFilesEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostServicesHaproxyRuntimeAclsParentNameEntriesResponse parses an HTTP response from a PostServicesHaproxyRuntimeAclsParentNameEntriesWithResponse call
func ParsePostServicesHaproxyRuntimeAclsParentNameEntriesResponse(rsp *http.Response) (*PostServicesHaproxyRuntimeAclsParentNameEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServicesHaproxyRuntimeAclsParentNameEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AclFileEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddPayloadRuntimeACLResponse parses an HTTP response from a AddPayloadRuntimeACLWithResponse call
func ParseAddPayloadRuntimeACLResponse(rsp *http.Response) (*AddPayloadRuntimeACLResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPayloadRuntimeACLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AclFilesEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse parses an HTTP response from a DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse call
func ParseDeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse(rsp *http.Response) (*DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServicesHaproxyRuntimeAclsParentNameEntriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse parses an HTTP response from a GetServicesHaproxyRuntimeAclsParentNameEntriesIdWithResponse call
func ParseGetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse(rsp *http.Response) (*GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesHaproxyRuntimeAclsParentNameEntriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AclFileEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllRuntimeServerResponse parses an HTTP response from a GetAllRuntimeServerWithResponse call
func ParseGetAllRuntimeServerResponse(rsp *http.Response) (*GetAllRuntimeServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRuntimeServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeServers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddRuntimeServerResponse parses an HTTP response from a AddRuntimeServerWithResponse call
func ParseAddRuntimeServerResponse(rsp *http.Response) (*AddRuntimeServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRuntimeServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RuntimeAddServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteRuntimeServerResponse parses an HTTP response from a DeleteRuntimeServerWithResponse call
func ParseDeleteRuntimeServerResponse(rsp *http.Response) (*DeleteRuntimeServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRuntimeServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRuntimeServerResponse parses an HTTP response from a GetRuntimeServerWithResponse call
func ParseGetRuntimeServerResponse(rsp *http.Response) (*GetRuntimeServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuntimeServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceRuntimeServerResponse parses an HTTP response from a ReplaceRuntimeServerWithResponse call
func ParseReplaceRuntimeServerResponse(rsp *http.Response) (*ReplaceRuntimeServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceRuntimeServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHaproxyProcessInfoResponse parses an HTTP response from a GetHaproxyProcessInfoWithResponse call
func ParseGetHaproxyProcessInfoResponse(rsp *http.Response) (*GetHaproxyProcessInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHaproxyProcessInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllRuntimeMapFilesResponse parses an HTTP response from a GetAllRuntimeMapFilesWithResponse call
func ParseGetAllRuntimeMapFilesResponse(rsp *http.Response) (*GetAllRuntimeMapFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRuntimeMapFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Maps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClearRuntimeMapResponse parses an HTTP response from a ClearRuntimeMapWithResponse call
func ParseClearRuntimeMapResponse(rsp *http.Response) (*ClearRuntimeMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClearRuntimeMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOneRuntimeMapResponse parses an HTTP response from a GetOneRuntimeMapWithResponse call
func ParseGetOneRuntimeMapResponse(rsp *http.Response) (*GetOneRuntimeMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneRuntimeMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Map
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddPayloadRuntimeMapResponse parses an HTTP response from a AddPayloadRuntimeMapWithResponse call
func ParseAddPayloadRuntimeMapResponse(rsp *http.Response) (*AddPayloadRuntimeMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPayloadRuntimeMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MapEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseShowRuntimeMapResponse parses an HTTP response from a ShowRuntimeMapWithResponse call
func ParseShowRuntimeMapResponse(rsp *http.Response) (*ShowRuntimeMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShowRuntimeMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddMapEntryResponse parses an HTTP response from a AddMapEntryWithResponse call
func ParseAddMapEntryResponse(rsp *http.Response) (*AddMapEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MapEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteRuntimeMapEntryResponse parses an HTTP response from a DeleteRuntimeMapEntryWithResponse call
func ParseDeleteRuntimeMapEntryResponse(rsp *http.Response) (*DeleteRuntimeMapEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRuntimeMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRuntimeMapEntryResponse parses an HTTP response from a GetRuntimeMapEntryWithResponse call
func ParseGetRuntimeMapEntryResponse(rsp *http.Response) (*GetRuntimeMapEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuntimeMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceRuntimeMapEntryResponse parses an HTTP response from a ReplaceRuntimeMapEntryWithResponse call
func ParseReplaceRuntimeMapEntryResponse(rsp *http.Response) (*ReplaceRuntimeMapEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceRuntimeMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllCaFilesResponse parses an HTTP response from a GetAllCaFilesWithResponse call
func ParseGetAllCaFilesResponse(rsp *http.Response) (*GetAllCaFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCaFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCaFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCaFileResponse parses an HTTP response from a CreateCaFileWithResponse call
func ParseCreateCaFileResponse(rsp *http.Response) (*CreateCaFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCaFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCaFileResponse parses an HTTP response from a DeleteCaFileWithResponse call
func ParseDeleteCaFileResponse(rsp *http.Response) (*DeleteCaFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCaFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCaFileResponse parses an HTTP response from a GetCaFileWithResponse call
func ParseGetCaFileResponse(rsp *http.Response) (*GetCaFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCaFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCaFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSetCaFileResponse parses an HTTP response from a SetCaFileWithResponse call
func ParseSetCaFileResponse(rsp *http.Response) (*SetCaFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetCaFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddCaEntryResponse parses an HTTP response from a AddCaEntryWithResponse call
func ParseAddCaEntryResponse(rsp *http.Response) (*AddCaEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCaEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCaEntryResponse parses an HTTP response from a GetCaEntryWithResponse call
func ParseGetCaEntryResponse(rsp *http.Response) (*GetCaEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCaEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllCertsResponse parses an HTTP response from a GetAllCertsWithResponse call
func ParseGetAllCertsResponse(rsp *http.Response) (*GetAllCertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCertificates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCertResponse parses an HTTP response from a CreateCertWithResponse call
func ParseCreateCertResponse(rsp *http.Response) (*CreateCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCertResponse parses an HTTP response from a DeleteCertWithResponse call
func ParseDeleteCertResponse(rsp *http.Response) (*DeleteCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCertResponse parses an HTTP response from a GetCertWithResponse call
func ParseGetCertResponse(rsp *http.Response) (*GetCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceCertResponse parses an HTTP response from a ReplaceCertWithResponse call
func ParseReplaceCertResponse(rsp *http.Response) (*ReplaceCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllCrlResponse parses an HTTP response from a GetAllCrlWithResponse call
func ParseGetAllCrlResponse(rsp *http.Response) (*GetAllCrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCrls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCrlResponse parses an HTTP response from a CreateCrlWithResponse call
func ParseCreateCrlResponse(rsp *http.Response) (*CreateCrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCrlResponse parses an HTTP response from a DeleteCrlWithResponse call
func ParseDeleteCrlResponse(rsp *http.Response) (*DeleteCrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCrlResponse parses an HTTP response from a GetCrlWithResponse call
func ParseGetCrlResponse(rsp *http.Response) (*GetCrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCrlEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceCrlResponse parses an HTTP response from a ReplaceCrlWithResponse call
func ParseReplaceCrlResponse(rsp *http.Response) (*ReplaceCrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllCrtListsResponse parses an HTTP response from a GetAllCrtListsWithResponse call
func ParseGetAllCrtListsResponse(rsp *http.Response) (*GetAllCrtListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCrtListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCrtLists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCrtListEntryResponse parses an HTTP response from a DeleteCrtListEntryWithResponse call
func ParseDeleteCrtListEntryResponse(rsp *http.Response) (*DeleteCrtListEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCrtListEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllCrtListEntriesResponse parses an HTTP response from a GetAllCrtListEntriesWithResponse call
func ParseGetAllCrtListEntriesResponse(rsp *http.Response) (*GetAllCrtListEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCrtListEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCrtListEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddCrtListEntryResponse parses an HTTP response from a AddCrtListEntryWithResponse call
func ParseAddCrtListEntryResponse(rsp *http.Response) (*AddCrtListEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCrtListEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStickTablesResponse parses an HTTP response from a GetStickTablesWithResponse call
func ParseGetStickTablesResponse(rsp *http.Response) (*GetStickTablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStickTablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StickTables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStickTableResponse parses an HTTP response from a GetStickTableWithResponse call
func ParseGetStickTableResponse(rsp *http.Response) (*GetStickTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStickTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StickTable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStickTableEntriesResponse parses an HTTP response from a GetStickTableEntriesWithResponse call
func ParseGetStickTableEntriesResponse(rsp *http.Response) (*GetStickTableEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStickTableEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StickTableEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSetStickTableEntriesResponse parses an HTTP response from a SetStickTableEntriesWithResponse call
func ParseSetStickTableEntriesResponse(rsp *http.Response) (*SetStickTableEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetStickTableEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSitesResponse parses an HTTP response from a GetSitesWithResponse call
func ParseGetSitesResponse(rsp *http.Response) (*GetSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Sites
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSiteResponse parses an HTTP response from a CreateSiteWithResponse call
func ParseCreateSiteResponse(rsp *http.Response) (*CreateSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSiteResponse parses an HTTP response from a DeleteSiteWithResponse call
func ParseDeleteSiteResponse(rsp *http.Response) (*DeleteSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSiteResponse parses an HTTP response from a GetSiteWithResponse call
func ParseGetSiteResponse(rsp *http.Response) (*GetSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceSiteResponse parses an HTTP response from a ReplaceSiteWithResponse call
func ParseReplaceSiteResponse(rsp *http.Response) (*ReplaceSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpoeEndpointsResponse parses an HTTP response from a GetSpoeEndpointsWithResponse call
func ParseGetSpoeEndpointsResponse(rsp *http.Response) (*GetSpoeEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpoeEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllSpoeFilesResponse parses an HTTP response from a GetAllSpoeFilesWithResponse call
func ParseGetAllSpoeFilesResponse(rsp *http.Response) (*GetAllSpoeFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSpoeFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSpoeResponse parses an HTTP response from a CreateSpoeWithResponse call
func ParseCreateSpoeResponse(rsp *http.Response) (*CreateSpoeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpoeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSpoeFileResponse parses an HTTP response from a DeleteSpoeFileWithResponse call
func ParseDeleteSpoeFileResponse(rsp *http.Response) (*DeleteSpoeFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpoeFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOneSpoeFileResponse parses an HTTP response from a GetOneSpoeFileWithResponse call
func ParseGetOneSpoeFileResponse(rsp *http.Response) (*GetOneSpoeFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneSpoeFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *string `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllSpoeScopeResponse parses an HTTP response from a GetAllSpoeScopeWithResponse call
func ParseGetAllSpoeScopeResponse(rsp *http.Response) (*GetAllSpoeScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSpoeScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeScopes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSpoeScopeResponse parses an HTTP response from a CreateSpoeScopeWithResponse call
func ParseCreateSpoeScopeResponse(rsp *http.Response) (*CreateSpoeScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpoeScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpoeScope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSpoeScopeResponse parses an HTTP response from a DeleteSpoeScopeWithResponse call
func ParseDeleteSpoeScopeResponse(rsp *http.Response) (*DeleteSpoeScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpoeScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpoeScopeResponse parses an HTTP response from a GetSpoeScopeWithResponse call
func ParseGetSpoeScopeResponse(rsp *http.Response) (*GetSpoeScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpoeScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeScope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllSpoeAgentResponse parses an HTTP response from a GetAllSpoeAgentWithResponse call
func ParseGetAllSpoeAgentResponse(rsp *http.Response) (*GetAllSpoeAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSpoeAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeAgents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSpoeAgentResponse parses an HTTP response from a CreateSpoeAgentWithResponse call
func ParseCreateSpoeAgentResponse(rsp *http.Response) (*CreateSpoeAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpoeAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpoeAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSpoeAgentResponse parses an HTTP response from a DeleteSpoeAgentWithResponse call
func ParseDeleteSpoeAgentResponse(rsp *http.Response) (*DeleteSpoeAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpoeAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpoeAgentResponse parses an HTTP response from a GetSpoeAgentWithResponse call
func ParseGetSpoeAgentResponse(rsp *http.Response) (*GetSpoeAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpoeAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceSpoeAgentResponse parses an HTTP response from a ReplaceSpoeAgentWithResponse call
func ParseReplaceSpoeAgentResponse(rsp *http.Response) (*ReplaceSpoeAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceSpoeAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllSpoeGroupResponse parses an HTTP response from a GetAllSpoeGroupWithResponse call
func ParseGetAllSpoeGroupResponse(rsp *http.Response) (*GetAllSpoeGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSpoeGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSpoeGroupResponse parses an HTTP response from a CreateSpoeGroupWithResponse call
func ParseCreateSpoeGroupResponse(rsp *http.Response) (*CreateSpoeGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpoeGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpoeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSpoeGroupResponse parses an HTTP response from a DeleteSpoeGroupWithResponse call
func ParseDeleteSpoeGroupResponse(rsp *http.Response) (*DeleteSpoeGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpoeGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpoeGroupResponse parses an HTTP response from a GetSpoeGroupWithResponse call
func ParseGetSpoeGroupResponse(rsp *http.Response) (*GetSpoeGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpoeGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceSpoeGroupResponse parses an HTTP response from a ReplaceSpoeGroupWithResponse call
func ParseReplaceSpoeGroupResponse(rsp *http.Response) (*ReplaceSpoeGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceSpoeGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllSpoeMessageResponse parses an HTTP response from a GetAllSpoeMessageWithResponse call
func ParseGetAllSpoeMessageResponse(rsp *http.Response) (*GetAllSpoeMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSpoeMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeMessages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSpoeMessageResponse parses an HTTP response from a CreateSpoeMessageWithResponse call
func ParseCreateSpoeMessageResponse(rsp *http.Response) (*CreateSpoeMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpoeMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpoeMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSpoeMessageResponse parses an HTTP response from a DeleteSpoeMessageWithResponse call
func ParseDeleteSpoeMessageResponse(rsp *http.Response) (*DeleteSpoeMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpoeMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpoeMessageResponse parses an HTTP response from a GetSpoeMessageWithResponse call
func ParseGetSpoeMessageResponse(rsp *http.Response) (*GetSpoeMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpoeMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceSpoeMessageResponse parses an HTTP response from a ReplaceSpoeMessageWithResponse call
func ParseReplaceSpoeMessageResponse(rsp *http.Response) (*ReplaceSpoeMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceSpoeMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllSpoeTransactionResponse parses an HTTP response from a GetAllSpoeTransactionWithResponse call
func ParseGetAllSpoeTransactionResponse(rsp *http.Response) (*GetAllSpoeTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSpoeTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeTransactions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStartSpoeTransactionResponse parses an HTTP response from a StartSpoeTransactionWithResponse call
func ParseStartSpoeTransactionResponse(rsp *http.Response) (*StartSpoeTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartSpoeTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpoeTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Code    *int    `json:"code,omitempty"`
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSpoeTransactionResponse parses an HTTP response from a DeleteSpoeTransactionWithResponse call
func ParseDeleteSpoeTransactionResponse(rsp *http.Response) (*DeleteSpoeTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpoeTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpoeTransactionResponse parses an HTTP response from a GetSpoeTransactionWithResponse call
func ParseGetSpoeTransactionResponse(rsp *http.Response) (*GetSpoeTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpoeTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCommitSpoeTransactionResponse parses an HTTP response from a CommitSpoeTransactionWithResponse call
func ParseCommitSpoeTransactionResponse(rsp *http.Response) (*CommitSpoeTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitSpoeTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpoeTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SpoeTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpoeConfigurationVersionResponse parses an HTTP response from a GetSpoeConfigurationVersionWithResponse call
func ParseGetSpoeConfigurationVersionResponse(rsp *http.Response) (*GetSpoeConfigurationVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpoeConfigurationVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStatsEndpointsResponse parses an HTTP response from a GetStatsEndpointsWithResponse call
func ParseGetStatsEndpointsResponse(rsp *http.Response) (*GetStatsEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStatsResponse parses an HTTP response from a GetStatsWithResponse call
func ParseGetStatsResponse(rsp *http.Response) (*GetStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NativeStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest NativeStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStorageEndpointsResponse parses an HTTP response from a GetStorageEndpointsWithResponse call
func ParseGetStorageEndpointsResponse(rsp *http.Response) (*GetStorageEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllStorageGeneralFilesResponse parses an HTTP response from a GetAllStorageGeneralFilesWithResponse call
func ParseGetAllStorageGeneralFilesResponse(rsp *http.Response) (*GetAllStorageGeneralFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllStorageGeneralFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStorageGeneralFileResponse parses an HTTP response from a CreateStorageGeneralFileWithResponse call
func ParseCreateStorageGeneralFileResponse(rsp *http.Response) (*CreateStorageGeneralFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStorageGeneralFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GeneralFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteStorageGeneralFileResponse parses an HTTP response from a DeleteStorageGeneralFileWithResponse call
func ParseDeleteStorageGeneralFileResponse(rsp *http.Response) (*DeleteStorageGeneralFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStorageGeneralFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOneStorageGeneralFileResponse parses an HTTP response from a GetOneStorageGeneralFileWithResponse call
func ParseGetOneStorageGeneralFileResponse(rsp *http.Response) (*GetOneStorageGeneralFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneStorageGeneralFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceStorageGeneralFileResponse parses an HTTP response from a ReplaceStorageGeneralFileWithResponse call
func ParseReplaceStorageGeneralFileResponse(rsp *http.Response) (*ReplaceStorageGeneralFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceStorageGeneralFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllStorageMapFilesResponse parses an HTTP response from a GetAllStorageMapFilesWithResponse call
func ParseGetAllStorageMapFilesResponse(rsp *http.Response) (*GetAllStorageMapFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllStorageMapFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Maps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStorageMapFileResponse parses an HTTP response from a CreateStorageMapFileWithResponse call
func ParseCreateStorageMapFileResponse(rsp *http.Response) (*CreateStorageMapFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStorageMapFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Map
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteStorageMapResponse parses an HTTP response from a DeleteStorageMapWithResponse call
func ParseDeleteStorageMapResponse(rsp *http.Response) (*DeleteStorageMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStorageMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOneStorageMapResponse parses an HTTP response from a GetOneStorageMapWithResponse call
func ParseGetOneStorageMapResponse(rsp *http.Response) (*GetOneStorageMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneStorageMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceStorageMapFileResponse parses an HTTP response from a ReplaceStorageMapFileWithResponse call
func ParseReplaceStorageMapFileResponse(rsp *http.Response) (*ReplaceStorageMapFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceStorageMapFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllStorageSSLCertificatesResponse parses an HTTP response from a GetAllStorageSSLCertificatesWithResponse call
func ParseGetAllStorageSSLCertificatesResponse(rsp *http.Response) (*GetAllStorageSSLCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllStorageSSLCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCertificates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStorageSSLCertificateResponse parses an HTTP response from a CreateStorageSSLCertificateWithResponse call
func ParseCreateStorageSSLCertificateResponse(rsp *http.Response) (*CreateStorageSSLCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStorageSSLCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteStorageSSLCertificateResponse parses an HTTP response from a DeleteStorageSSLCertificateWithResponse call
func ParseDeleteStorageSSLCertificateResponse(rsp *http.Response) (*DeleteStorageSSLCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStorageSSLCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOneStorageSSLCertificateResponse parses an HTTP response from a GetOneStorageSSLCertificateWithResponse call
func ParseGetOneStorageSSLCertificateResponse(rsp *http.Response) (*GetOneStorageSSLCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneStorageSSLCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceStorageSSLCertificateResponse parses an HTTP response from a ReplaceStorageSSLCertificateWithResponse call
func ParseReplaceStorageSSLCertificateResponse(rsp *http.Response) (*ReplaceStorageSSLCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceStorageSSLCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SslCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllStorageSSLCrtListFilesResponse parses an HTTP response from a GetAllStorageSSLCrtListFilesWithResponse call
func ParseGetAllStorageSSLCrtListFilesResponse(rsp *http.Response) (*GetAllStorageSSLCrtListFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllStorageSSLCrtListFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCrtListFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStorageSSLCrtListFileResponse parses an HTTP response from a CreateStorageSSLCrtListFileWithResponse call
func ParseCreateStorageSSLCrtListFileResponse(rsp *http.Response) (*CreateStorageSSLCrtListFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStorageSSLCrtListFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SslCrtListFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SslCrtListFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteStorageSSLCrtListFileResponse parses an HTTP response from a DeleteStorageSSLCrtListFileWithResponse call
func ParseDeleteStorageSSLCrtListFileResponse(rsp *http.Response) (*DeleteStorageSSLCrtListFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStorageSSLCrtListFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOneStorageSSLCrtListFileResponse parses an HTTP response from a GetOneStorageSSLCrtListFileWithResponse call
func ParseGetOneStorageSSLCrtListFileResponse(rsp *http.Response) (*GetOneStorageSSLCrtListFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneStorageSSLCrtListFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceStorageSSLCrtListFileResponse parses an HTTP response from a ReplaceStorageSSLCrtListFileWithResponse call
func ParseReplaceStorageSSLCrtListFileResponse(rsp *http.Response) (*ReplaceStorageSSLCrtListFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceStorageSSLCrtListFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCrtListFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SslCrtListFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteStorageSSLCrtListEntryResponse parses an HTTP response from a DeleteStorageSSLCrtListEntryWithResponse call
func ParseDeleteStorageSSLCrtListEntryResponse(rsp *http.Response) (*DeleteStorageSSLCrtListEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStorageSSLCrtListEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStorageSSLCrtListEntriesResponse parses an HTTP response from a GetStorageSSLCrtListEntriesWithResponse call
func ParseGetStorageSSLCrtListEntriesResponse(rsp *http.Response) (*GetStorageSSLCrtListEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageSSLCrtListEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslCrtListEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStorageSSLCrtListEntryResponse parses an HTTP response from a CreateStorageSSLCrtListEntryWithResponse call
func ParseCreateStorageSSLCrtListEntryResponse(rsp *http.Response) (*CreateStorageSSLCrtListEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStorageSSLCrtListEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SslCrtListEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AlreadyExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTransactionsResponse parses an HTTP response from a GetTransactionsWithResponse call
func ParseGetTransactionsResponse(rsp *http.Response) (*GetTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transactions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStartTransactionResponse parses an HTTP response from a StartTransactionWithResponse call
func ParseStartTransactionResponse(rsp *http.Response) (*StartTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Code    *int    `json:"code,omitempty"`
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTransactionResponse parses an HTTP response from a DeleteTransactionWithResponse call
func ParseDeleteTransactionResponse(rsp *http.Response) (*DeleteTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTransactionResponse parses an HTTP response from a GetTransactionWithResponse call
func ParseGetTransactionResponse(rsp *http.Response) (*GetTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCommitTransactionResponse parses an HTTP response from a CommitTransactionWithResponse call
func ParseCommitTransactionResponse(rsp *http.Response) (*CommitTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpecificationResponse parses an HTTP response from a GetSpecificationWithResponse call
func ParseGetSpecificationResponse(rsp *http.Response) (*GetSpecificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOpenapiv3SpecificationResponse parses an HTTP response from a GetOpenapiv3SpecificationWithResponse call
func ParseGetOpenapiv3SpecificationResponse(rsp *http.Response) (*GetOpenapiv3SpecificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenapiv3SpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9DXMbt7IgDP8V1Oy+lWQPKVOyZCeueutZRbYTP5FtrSmfe+tG3iloBiRxNATGAEYS",
	"k6v//hQawHxihkNyaDs5urdOTJFAd+Or0ejPP4OIL1POCFMyePFnkGKBl0QRAX/NuIhIKEjCcaz/jomM",
	"BE0V5Sx4EbyZIUnUCMUcYQRNkWkKXzGu0B2mSv+C1IKgiLMZnWeCxLbZOCYJXh2gM8x042uCMklidLcg",
	"DCmBmcSRxoSoRDIlEZ1REo8QlihaYDYnEtFqOywIYMVpmlASo5gKEqlkhRTPkWPd8iAYBVSP4HNGxCoY",
	"BQwvSfCiOtxRIKMFWWIz7hnOEhW8mOFEklGgVqluf815QjALHh5GwSxLklCSyMxNY6pYTCOsNM0zmAxH",
	"8mxGIiXhq3yMKFrQRE+S5JmIiNRDviNJ0kZ1GfOGVKdYEKZCA6lO9AX8iOBHizrFalFgLvceBYJ8zqgg",
	"cfBCiYyUCbGIpRKUzQGvvKHp2n3FuN0o6I4mid4flFFFsSIxwjNFBMrSGCvSMi9lHBtOS2lXhdRH4UvE",
	"zTqW99/dggiC7gi6w0zpTYfjGBrxlNiN593rt0TI+j5v26I1yjpmeRTcj1mWJPg6IXasD6PA4moO6Z+W",
	"CCBLH9loQaIbyubVo+OI3fTUln9ZYImo+k4iflfAaxmvo9czUMoUmRPhH+mD2Y9Eqp95TAlwMxwl+p+I",
	"M0WYgm80p4hgYE/+Jc20FHj+pyCz4EXwP54ULPKJ+VU+0bAeHJZi1z+MNBY5JBrZimdJwlTwWxoTMSDC",
	"MtQWzHfyA5nbXTQM1hyiH+M1jm4IiwfD5+B1YgvlHVXRgrJ5KLKEDI28Dr6FFjrksGnrmCMcLYYbooHW",
	"hilVmRgSl4HXgi3JpCIilEQpyubDncwG4Bb8nMlsOLZjwbXgEgQrMlVc4Dn5hTAicPKaNnbuMksUTbFQ",
	"T2ZcLMcxVrhKQCr0haUs15zRhIRZ6r+qLRZ9BSDdEDk8Iy1MLbHSFytlGFh69YLSXHtJl8R+W54THimi",
	"xlIJgpfmPjZt+PW/SKT06GG0KnREDTO3DmDb7KpQKj7kzs0h+jFaQWW4PZsDbME3F3gZDspxSiD9OGfR",
	"nJ6m6WAIHbwWbDRRA16WFlwXLjkwsra1mwnAMdzK5QD9+OaCZ8OtmoHmx7RQKg1B3A8FkSlnkgx7H7ci",
	"2IweuXeCZBdFIK4PS4IBuQ6n3APSzpESIbjYwxYowe2FXe4L/frRy7KmYWASCtgdVNi31R5WoQK5JwVy",
	"fyTIbhr2xo96c6J98qBe3Cfh83DGxR0Ww10+ZZjtWFPBZ3TAiS/DbMeqsJgTNShSC3IdTrkHpG2rusQ0",
	"ISIkTInVYGgrQLvwDs/f6nD92BleEknE7YAyYgmkH2dKBp/nEsgWnFyqX08vBL9fnZW1ey/tW7BEhSL3",
	"6kmaYFrDX9fpetEIruX/4cZl4fmxfc5oFBoNcTIsR25C7kmB3B8JbQdXEMmTITdwDrAFn17+wXC176WB",
	"j2XnkTQ/7kv/54feSYkiyzTBanAacrht2NUZHlyDtKFiqMSAqkT+XgH8yaMl8g2JDjmLtH3qUk5CPLco",
	"hsFWgOzAOezDvASyA+eSSInnZFisDmgLXpmEoKIIMzkg4grUFsyKRjcDc4QCpB+nMqatgdAZaC2YoqFV",
	"CQXENRjl8ChlB869PGEbgPvhl3sjoHsG9vF8bULuSYHcHwmtsyBwRAYWvsswO7DKYRG2jTCTAwpNAMyH",
	"x8idMN8wrtNEEByvXt1TOeCrFdRTBn/VCnVZ8Z5xfjMIGyoQMWSMggXBsVXJV54943+2eUVUmhkLV4dH",
	"QvEYehgFP+P4gzmI+5+An7EetkH2hYf50tiUXgFpex+oszcadF94qO+4Oo0ikg57G2+6q6Pc72aBWZyQ",
	"+CtMw2ueDWhq2nQG7rAEP78ZUPFFR//gfi47FOE4phoQTi5K7x7rXdYcUSYJ4jOkt5KU6IwzJXiCzjWP",
	"Qt+fnp3/gKz/jUQYzRJyT68TgiRPMqBWcZQSoR9RV8xOP8rfkgizGM3NITGOjwrfEBSTiOrRSXSNJYkR",
	"Z85Qj8i9vj8Uia/YTPAl+KtZVjKyfxjGjrhAmK0QYbdUcLYkTOEESYVVJg+u9MRVX304SnK/whQrRYSe",
	"gP/7+/+9upKf/vE/G88+MLFTRYRdsZ59lkRh9wD1L8SfjYfhKLjFSUb8ronlB2Y+hjJt+qVJleYAwenZ",
	"OTqnjMig8foER7DQ6aeru0B3g2d1fc4qzTwefcYXsfG1NC4f+XQ3B1Um2GJupbeQh6pUv2cEuf7oFbSp",
	"02/o07fue5asnCNog96O2XeEepG1kiw9cywEXulzJjKm6JIgHCXItB0FVJGl7OF7Z9bPM38SAfyCJgx/",
	"lkmCaaSdpNkW+iNnpEHppoQ6odNH7itLjJdgD41WOwxrkOgdjqAD+j7iwnCEWIKLa5RYP2t6S+QPG5Bc",
	"pxPOUce01rwdq+S+JDPKCMIMnZ69feUYqNAUGm6oCIr0Pp1ZN2ycKb7EikaaT3p4V8QzpsIbsvK5RauF",
	"9fUFD+AFMUhtJ3RDVuD8qriAy7mx/a+p8sz4u2x5TYTeC/r3CuWYoQ/T0/IAglGwpIwus2Xw4nBydDwK",
	"CgfYyqFzTrKj4H7Ml3ptUrUqfJoWOEkIm3t51NtXKP8daXAHSJ9q9Ovl5cV4cghXzct3U/goCJJZmnKh",
	"jOsyYZqy3wPbNhgFpmVJTVdi+5wpHCnvNa1/QGSJaZLHEZQn23uLZOLWd+zO4HvrrUzVAoC9Ons5PYUl",
	"AzgecGZ3cx9H/PjhHK5YR5Tbdt9JlPc6QK+5QOQeL9OEvLhiC6VS+eIJONqOpcJzyubj28nRAU7pQUKU",
	"JCwSq1QdcDF/kkMx92txIzooXTfjDVmZ7+pkX65SkEBg1MU2Ky3bh+lpMApgbrwrtsSpB+yCoCVO0d2C",
	"RovcZR+mW3FzHIqpUvyGMPT9DVn9ABtJLbLldSqof0m3u+T9UQ31lbL3e7cgYBsVe6EiBLx9hS4ca/Le",
	"UiXe5dmYWvQDiVADsgZKedCflVY8tj2s806+LnzRqozOy+B+M/tCy6lYIuN3NkKZ1PKlXkCjwC9J5lgh",
	"tyFjHskDfCcP8BL/wdlBxJdPooQ+STTXVU8EmRFBWESekOjoiUF7TcaUSYVZROTBQi2T/8GBEhl0iQ61",
	"6AX9tYvJMBTbIaxdWj0FDu4n3+qVvd1rW+k/pkjAb9UgCX2SzIG3lwmRUt8lEEsS/K/a/50//+UyGAU4",
	"SfhdQqUKXvxuFyZQeD4u0/cieGNn6sWv+Jay+YvLBZUvLvE8ePik3xps1YTw4lUhsZcgxeSWJDyFb3Vn",
	"wvT1kUfvAKkTvQnT2+MQx7EgUgYvglTQW8MsXPiRdRQcSyJuaWQigcx8BZkcEyzV+BC+VGIVagGHZyp4",
	"cTgKJIkEUWExP57JkfwcJIXG/VyeUt+62OeV3stvXh74tlJpwusAprC1V4Zd/cfU7iiZMzO3w+ACOUL5",
	"9rVBP72PbnEy6+fWf18XCzwkxXTOuCB7JLr7UZNvvD8boVjuxVNb3qx0a8V2eevyj//5uPZpUt3tjVkm",
	"CYmUveHeXNweI9sUJnZqDgB6SWXEb4lYQaST5aROerHRH8hYYBGxTxt38xbHK82uExp5r9+Wd15x8Lw/",
	"VY5fQ4B2yhDK9BUE4j1l42ui7ghhSF++KM2SRN8BVj0gc9knZ4MVsXTkCdTyHHnf4Z1Cs9IZ9h5gZ0hP",
	"uJLhNZakEt13OPETUOozF/xOLULKIkGWzt+lV5dCsLLYAnJvDgrFSWk59dMJC7gPip8/9ZQ28jl1J6S+",
	"irXtWpZJykvSfqXJrjvNPvk24AsuhqtCh+cxVwrnwknyfgb3VZ+QKVjkh9GfHlWTY4vro+mca36vLrOC",
	"1bW5ZfeC0+HTXXam7g/L2Tcbbsn9QVQ8jj1utf0h1SyOPtfUTYDV56dwV+wFpeLd2OLN0wuQt2cZpvOf",
	"kV0Pk838cBzsHUEaSLlfQb/h5s3N1e6s6P0hlA3vTSt3bxCN7dQw6G4AqmYGbrDDT01jmrmhQUeAk8TE",
	"KkNMviCsCMtvcFYt/sz52MrFP7sY0yKg1N1RGxgMnB7OiQ1d74z41rluwPmLFjeBxp1oQc/w2jkXVC2W",
	"wYtA8IzFgl9TYNfW13pmTHi5QJZ/sic6WtyEkCACNuGSqAXXrX55pd8vmaDBi+CJoaAUaA46oCeHB4fw",
	"kOcxseSVYtr1Wl8X01Vj7tdcKM6ihJvJc1drcSnGVJqPPlkJg8UupOwWJzQOKxxmU3B6gWMq0wSv3Cob",
	"gyB6Y8CDbgx9cOAL9BmTeEbCW8oTWDkZUrYvWj4CLvTPHJeW6ZqEFbulQFxsmyTG6dit5XIlPyf5X+m8",
	"/JcgMZX5X3LpAEiZjBckSfjY/K0iB6/XUOJbvWtjdGY8h+C1prdIlsohZipJ0M8W2kPljHRLIaYZKE41",
	"XyxJ0z3Ur1ZWHGeMaoFxKc237iwXOlkS3eTh2DsO9KwABorWZaolRftG6A40LpoaFS0jkSqPOBf0J6Mh",
	"R8/5DSXrqYNWRYxsWLgH9wiAda3XPU49E/qy1P6htBjex2u8YnhJo9CQ6547fQybZsZSwmLCIuubpGEc",
	"WJD6G6vIMQ44+h29xDQJcULE2pux3HTdC9xIibmVrddbAPrktrO6iqC4I8GN47U1yvl0BzkgGc4EX4al",
	"MLXNiZG9qXkt+FJzzFcGUwdtCY+eTo56kZDwKKh0e7pRt3u9aXDSZNpbsoZXFmDBYqsowogvl9i80npv",
	"2S4U6MwCbKKCtEKD4bnQ0IxUE5Ew1YKIT2V2uaASzShJYkQlikkqSAQKJcrQDN9ysMVVYIDUOQJ7hTNv",
	"CLLkt6YPRrNMZQKSYBEsm9b9iJvZdAtHZ1psYol7u69l5pwZudFy5DhU1rtsPfNg1jJfd9trR4IuNfC6",
	"agIglbF/8knBxWS6G8EjGb/WU3thV6e+XLmAnx/xf9e5LOatPmEdrKzc9JxK1cLCqnJ/px6kaGmyDSzr",
	"5/V0/F94/Mdk/NM4PHjRYpKcZUmiRYkeEtPDKJhnNN4Gy+IwjLAkIY7/lemXBZ9nsiQgbMw3K8tvXjD5",
	"7WueMt7V//UQnQIF6GdNAaiHzcAWWC5CK02GMxwpM//rZwQ6arlMgwrxbEYZVavyoHByh1f6xlrie5hp",
	"+PQ5IxXrVmmuNESnzexUzeQN7WNwfJ3NZkSMReHk+sVmVj9mDHqH3REVC546ksZKmKjPAW7Ll4Kn7hEF",
	"wNGlA+5QM24SGn7xmUj4HdKbRGDwwkFARUFXJsl4oe7Xk7WdYNpCbK7WNC8HylnoWlZem/Cst5SaMzqu",
	"fHdDSDrGCb0lO8ycI0YDCwHY8C+Z3itYf/IAZakgirAYKDSj3dcuKjDy+y+/VwErgk51lfM3tiKC6DFH",
	"StMXLmIB3pUVVuIYsZ4xkhBlbDZwcfdhKR8sgipb+RWcmdE7QFbQklU1RHg+h9c5IM95PiO3MCMSz4Y4",
	"LVJvSE1saDysO+6o9lFeLggy3ZFp5AyiiiONwKQ+NcZQ6OLVNa4zGpRa50bj9depMXzv+EKoAnl8Igz5",
	"RHgDc1sSeT2T/fhIqMxcY8o6XgmVth3PBMrc6FRosvINIVK9KaCiqYUKxj4ch87yprAiRvPjPOkd0nnC",
	"r8HUnvAI/mWc+UXchM81A0vUohRnuiPt53yuOXWiFkbnUDJTzjcJXsD3ZZnEiOk9tclVgt7ie31jIg0N",
	"ATRkoG3tPemT1oweHyZ97ncMXcnPhVKnD/f29Ch5uGz69GM8oWy+5TuvOqPvHKiHUcAFnVOGE8XXDafU",
	"EnK75DfLjtSUDrRjfi5qtzsTTKntg7XdbLQ+nh5goiMzIsIES7XLy7o2RgCKzrFUpccybOP9Gx7AjpVi",
	"FS3WJ0TJW1q/KnuG1gscxn2np6nhg26MzOVj+eGMsv3PRJX30qQtrshDslk1CAoz+WDLvhJ7p3u5idRY",
	"a637g1l/bT/TClJfJDQiIc4MV9hx808BGjrNDOewwHdRrnjhfyj0JTmKwQzQOY7CzCxTng5mspimPC3M",
	"FVLcqii9wcO/YfUd55XV7P6+PLtAv+mL9hRe6iVawoip7S7wqYWAzpiqQKRxQrazMMtOPG9iiDDzHaQc",
	"NVO3yV5wA2A/coWVDF0EwFqPpXLj3OMpD9Bek0p7RudhuQdkWhEp/QJ2bhWloVxioZyCbIDjcRmlaKph",
	"ojML0yD6okekeTag9IMpFTLEIEvQNPCMMZLsf70yScJZNKchNsmq19L5Gkt19ssbVAqL9/v5lrx2nefZ",
	"z1h6I3TbCxPs4FFWxI5rYLVqH/VwTz0NrmMe9vlD1Q/NvH3NY7v0aA7+RIJ8DqVMQskoGlN0d3d3YPsd",
	"RHyJHgLz1Lw3a9fHOeyv+MKHFsaNY2zo/jOYCUJe27xoZqvmNWOCF8GcqNOzc1loi1b6Qe9i0x92DpDb",
	"0uzutus7467eHFVtDLZ9bRx2DD2PxjTfrR+yZIND0hHi7D8IbQHP3hPQP/C5rfjHupG2R0Zfu1ldN8AN",
	"/flLZ65GmvRSkbvQ1dw3C6fT4pjOqDCZarBc6H9izYsTgqWyNkuBWcyX+kOcjq2316jstJqL60ZioNFY",
	"COuEqv+bGLm+3eRJ7suecOsOe2UQubZcE++3dGC5QK/uyw50zoCwMbZ6Va0ceyxakBcGBIdY79mYLzFl",
	"IYfgp4afV98hr0H6URL0EhBBqDg8eWElw1jgO+mJr+mJ2O4HL+4P8Bt6CRgeYMs4j7uNGVwPSooN6acm",
	"TtEZ/J4vQSZoGJPUuDhtN369r73oPgqKXgJsiyghbE9ozglzSFKsFjtupU5UkGLB7SCN8G7BE7InZP8B",
	"sB/KbGOYLdN2dAs8LTQl6ML8XKLJqeC4VLusbz/MzpGOG01BQcQS34d3mH4JEt7ie/QfhM4XTZtIAdgX",
	"sO0K2PQMLaMsLpRAayTp2tVWhInm4m9wePT8YHIwOTgMRvtNYZRy4+ebo/5xAgYF8/h5dnLy9KQajble",
	"PalBjgVmczK24XkF8MPdgPeIu3HiigsoR3ppGgEvuSxCbWxNaf1ebLZ8JjSDESUjnBARRjT1R4DalrnH",
	"RNNJGmLJw4lQqu33lO0gaZ+eX7xDF4IrHvFEOqkv4XNvqG+EQ2snJUL0ETikTHwO5REOJZ2z3PS2I5gU",
	"S7ktGJ+1AEuZLoSJCNVIbomgs1VvaiOcN21QTNOFdRvbdswGQkYV2QlMQsHmSuc4me8ESCQ7L6NQA20r",
	"URjutwWRp/jZEoALBCnTUjgR9GPbvVIfzIgIDftoia6I4sUuq0LuUy5JOIthGIRVt20JkfGuljK5fbql",
	"owv03cS1xS+rVbw+CsKMr5VkdHddZctUGUQqkbeHky2nwHTe1xwA9MNdSDvcK2lHu5B2tFfSnu5C2h42",
	"tctOEpaTzvV6v7Rs3nkl9WOHHekXwbMUvXkZlIv0rRUwTC/nfzfPaBymgszo/TZOGL4slT5rEI9uiLKk",
	"0jghYWpriexHhQ8u0jMc+VOnJOSWJGXeA8munR4Wkg3jeEkh/Wch7dtGPsceF+eQNz48enrsk7qdaaUJ",
	"xCcvbai2dUWNUjvugnScpt7W147w9XutSFlYeHkDDFpD5s0Fw3joxOJtTwXjYYQLx9wdwHwDF2MfEbjJ",
	"aTTtlbtzYOAqkaGi+qTK7Xmsg/AVJ+mbuPd3o/5riwa7Uf+1pYfdqP/aAsaW1Kf+ZGDWfc8+L5vP3dK7",
	"IRXc+Df1cN8z+olcjPic0WgcRWOczCseUlF2TSMIV7gThPFgFFxfC/Dgjfz5zgAQSHtj8KDzUwqtJAgV",
	"FWzF1TQK3COpFU0YRaGmN7zOhNQv7z/gJstVXybZ7sYCSmn9HuqYQKdKWczvKpiOD386fjo5riT63UYc",
	"uvGQoL8xQ8t9/m6JoGoV8kylWWX+wK9aI9Z3PZjbYL4qYpBts94pwpi4oQ7XrioN+3VzH0iZhBF22o7t",
	"9Pg9dVDT6Tk6OzUZ1R3mUpLmQdFb+Hq31Nxtp9Pz26fBKLg8n94eHkzyT4f5p6P801PvzgfAlO0FsBGr",
	"9vKi35/go6I01LL9BiledK8Z929JtRAE+3P3F9JReENWck0bube5LOSj/YE/3C/4o/2C398+rnnINfdP",
	"1lL4wVV3aqZJPr595gd1+6zFbvsAObvobOVh/sbDEsJscjtczwugY/xFerEHj33ImHY63FoqdqI2dx2w",
	"IW3jp0Nrri/U7/eSJ2pq0PhB03imf3Y5vRvRfpqX27qJvT1qc60G2LRsDJGZs1xa8QAzP5X7mCyvWKzK",
	"hSo82onBPMv6qI5SwSEz7C02Ul4Lzy2zVq6wuRUbstrx5KeT7oS0a5zOYPV8Pmaw6h1b0/y+mb9VnqWr",
	"gh1NbT54795L9duh6XOVEDb3eptsvZ4uQ4TjC0WxsTx8YG1WW1tgwRJXmuaXJEqwIOjMjsc74fBT/6RP",
	"bm4emmjsT/nqNKY1yaQiIpREKcrm3jTQ5hf9aoMXn+III9vvoHHMrzlXUgmcugxgTYut6erxnitcDLZM",
	"aI1TCnkn8xxLa3u48bfcObWMaWvB1erXt4TqlgbqheCKBvses9YRoss9wePrYF+r5V1tYhuzOF2/mR29",
	"Fn0J3pr43DMzu+d8fmmr/neG6NabtyUjcwx37XL0ma06120BWnHucEzL0AvlxQRPEiIQZWbxWpJR1+NM",
	"JWVz8Ox1h8L7roCyY5WMCHDBg/e3IDhaAP2j4A5TfVRDnKaC35rk22vmyDMad+C9rKmaVLHp/ToW5HPF",
	"Rz0mTFGlV3r+B00he8QsMUnfBb4bu7+88mRz5XNnqOrx2hlbPwu3xi7Hdc78hZBbuc5MfMfVNAquub1y",
	"ekzokjItSoR22XrEXpujg6b0D5Pn3wbZyaChZylgy61huzqrDeB8NnM11j1y0iqtLdI2Mw5Q3IYeBNKu",
	"ND14j2QjtKtxMsl9So3stB9r4w1ZWVfczWMBfyMrdG7EpO0lcJ5mYt7qM1uPdUcX0BrCy12loH7mRUGi",
	"205f4HpUc0ToLcm9e3OpfbNVqGovxa2VrPLbIIaQAifQd2etsRUUyca+PyVGl5piDM+CUYnMnM1cU4Zt",
	"0ag6pDtBFQmNir1fDRPPdeU5ADLbtDbpGXRyuXg6E427YkBlZ9e2+kFG4Php0qwANHkYbSrueqRROI2+",
	"enp4mVeEcq3cSxw0A7Y2GWVFgEwkCMjz1yukFlSioqTROjF4s6o25XQkYcoTGq2q1USsPsVX5NDUmjEQ",
	"EEDQa2VWWSIno8JdoeUgxHhM7Hj1tqAx0T+bdOWuKI0d58EVQ0ijfgF573VPCbX96h11O8xWLxA24Kls",
	"wqYzKBfLWY1YKtF3KZZazPsO4CTJWjhJUoFhiKpAWVK2DooeKMs9FvLeDiSVaA7LL5Ceus8ZTlyBm+88",
	"6xUuKfsOgSYLpg2hNxaFJmGBJUqIlDWy3aEikPaKdQCmqjYMm8C+XFzRbhLMVqZ8mKm+44958uPp5cbf",
	"slmdEk+DAf3dwKWamu4w9qFQnBKbkqaWoQZK0W1WN6niIjPQA3OPBZeiMqfuUXPp71ImySCBpBvl2m17",
	"cNx1eMoF1/aIBpLsCTIn9566mh/IPEuwQEXIYr2qmwUj9b2lQXmrZUHFzd7kr1N3tJWkKmtPa7u0RUqR",
	"3rqv+ocN9adG5nmoE+DVnOZVBmryh1KiQ0mVF5/cTjCranZONa5u5Y9u0qbwMfGcX4pYE9S5hlzTqJXg",
	"onKBRyBSKm23S1FmXvr+XzVbjhPSou7G9wmdtfy4qSMlz609Hj8ZLlX7CPJUoX6PBRJZPb7/3V5Vb8CL",
	"Ad4ZkljVI3jq9isr54uYgygIqzmolablOJYIl0tPo5ngS4RtQV8oklTUa61HWLUW4HWCuKaptVKrlmoo",
	"9jGIEjmmiU+PXfXEaIcwownxVwF2x6yjaK9tkLPkvGg3XNQlLDBTeuxlhrb+0uh7vKiUma8y+vuz6QUy",
	"P3YO1F/q3FSjhErRXZ23U1HwSKYtBDvVXSdW3T/M0ti7wKeuwDuqArTtR5vWkZKRSjyWIDpnJEbl3XRJ",
	"l0QqvEwRbJH2AdQTfZa2a/kWLYHWZxThqE2T7o5xx26t1MBX3EC0B7qMaao2qAibs49+Qo9unutbNtBP",
	"aJrwnKAliRaYUbnMB4BZbNlRZXzueW9F5oo6o5ZGRqiSZFx7c2vJtajnDmIXUdECTafnVXxQFcF/tLaD",
	"nhbHrx16vuJ9lkjuzaTfR4ps2Nc9O867q2FxO7Z1A5DcZO+azeipnB6T62xezkVWu94YZ5ZtFj4HRz8d",
	"//Ts+VHF82DSJ/j6c0ZJi4QjlRa+wzxEJcf206ZI/iCCh3dYMBtpU8flUya6WMnd4uprni9bbMENQsgt",
	"yd0R5O7wuUjyZimxfiO1D1831k9NDNNSubFCXdkPuusxVO3bxyq2f80qtuAyThlVFCf9SWn0+reu7PrS",
	"mQF2LO3q4JRP9C7FXXPzRLeUspdKqEPll/UXQs2TzX77ZVgHnoiuKqz1WXmsDvttV4fNU61sbsr/2Xb+",
	"d6oym8yqmWk6vAHOzl+jc27dDiEY7YukOLe4vgSe7fPv1mYKSPaknnY4tk89fWYhuNTTOcSBU0/neNpT",
	"TxeoB049XeBuTz39lyiPzBQkvfbtqJ4JbxVlGc8kmiqsqFQ0ksEOhZddmtBNnf13zRc7QOlnc/zCxVGY",
	"pXOB4yFY4UvTGG7UJ0foowW8vlQ0Z0pL/IyLJU6GIMQARO8MwAKF3ozDwP9Oad6N3mmAO1W7/jsXrw7X",
	"eK8/Vrh+rHC9S4Xrb7h+r7cOrxG9BljdenldIyDto/7vY1nf3Sbsm6zWa1GbJ+++cFubYwN575K8/Sb3",
	"o9QCx38GX6LmrsPhKjEKfk3kUAMxBQnRhQH6Jar2eku/Mh5uX8nZM6x3HL0EeINV+9177dx/j5K4g1a6",
	"PY0bxWxNYGiN60E6fsglXMI2FBswCmUzY0OU0tXf9NbmABVWnQNeuLbnroNzoFyeQGBWIWdDqkffxAlB",
	"Zxowes8qutC/fvXTjudH8XMo+6Vt1E8+k8cHTV9+8fqqkui9qUjpibQh3wQoiqT+iEWbq3dUCiN0Bboq",
	"AYXuvgQyrBN+ryjG4jF2zudToMP/+Nq8mmzC51jidKDpP52eXuynRq1lkAAJSRfYuMSUKUwZZXNUCCCl",
	"zJKyllhzKwJcabQc3iC1cU3guI0/aK2NyxlVXISZoGuL4paaPlbVfayq+1hVd7CqutOURHS2QncLAmGA",
	"+igsUwUfncsoTpIVAqgIo5l+u8VlIe4rFOP9CxTPhRRmrbaJTSu9mtzQUwD3WJt3T7V5dymg+1gY9y9V",
	"GPfL17Utql4MVtbWuLAEf43yuWvL4kb9H9a6t31X/z2q6TL6OSMhjVufpr7SYNAJvXmJZnka2QJQoUrZ",
	"AJDt9PDQ8NmVrUV4c4c/6Z4RrWng6mkHNoxojEtuhg3yOvLCxcTEyKoEy3bv9X9J3lnaqTpn/+/0/bu8",
	"or9+mubO6L0ek+fQupLvISw8Dvqklra9bG1FI4aBKoD3W/Rp3trv5D4XeJm7uPuXM+FzZO1oCNr7/ct3",
	"TWnRXadi/5V+B4mH36bY3G7w1iRRLZ8hWDtw++/cCV0nu1j+zY50sc3WEJSf5ppnRD0TIYsRtJCgRKFL",
	"Pa2YKdisSyIlnhPZTEnoMQBfXU3/8b/1f/y6pXp5FLIkYg6adhOEGgmqjD4Msq6ZCJNRwLgyCVQom/HA",
	"htT41SOFBW5jT6G3pm+JJ/ochrbU9awWXKrW1BHmgdFzHmvxUDaky40cgJXCR17pH9CpneDGRiUsTjll",
	"nl3xyv6iLyBw/vfwpVr+mlYAxdc+7aahtLW7+d3TMROeYEqo+mpTXOSD60rP96rRqDk73vQCSWLDj/kM",
	"FQ17nuGcNA8l7WW6CbulgrMlYar9TgbzmSLstiOuv6OKdE3VZssw5IkA1vb4J7T0Ru05MGuyW17AAF6x",
	"W6/uu6mZkkSh0sygWyyoZvOyDW6btrw8cT3MjEt+SyAAxIsckXvwldcbkTMikQSlESWxkTv+yis07b08",
	"055rM+1cmIxtvDCyZVXyVYDKKWKe6d+lX54zdpn1jL4loVdwevEGvbK2nVqssNX9r5dI7PW73pjcCAXX",
	"KIr+5SvBkuQfb17zwkuwvbmPJpPRMfzvcHQ8eTo6nhyPjicno+PJ89Hx5MfR8eFkdHz4dHR8dDI6Pvpp",
	"dDKZjE4mh6OTydHoZPJ0dDI5/uQbrf8p4U8sUvdu08TnVTRK3ozesXgNd/saVY949t0k8h7Z/HInya+1",
	"tNuN0N7x3VtdNxqZcfgyk8yiOT1N0/7hsrbDz0MEy/aIKDxN012DCV+f/fJGD7EY7c/eXAHu6fEaS3X2",
	"yxuE0zShkckh1v0EjXkkOFfe9AN5QsGYR8BPkW6KuMmaIMiSK4K0AHyALhcEgcKfuJxTJofEdUaTuJxm",
	"0WTF07KVozXvJtH07MObi8vw9ZvzV+9O376C3A0Xp5e/hpcfTt9Nz08vX708QG8g+x1GS8xiDHkRbDJ2",
	"b2arOVEhoJQ+UdTcHVwgqxiTdmRKUHKLE01mccWUEroXhmdNBp5D6rODzROHUBaT++65N98XHkNpqp91",
	"EGeNMPr44Q1SC6wv49iFriKZYLlA318FT66CH3QnLUk118AleGwshFsHvQb5fDPkCn10zjd4AzgrfK0m",
	"GkkSWcFY3qZ3C6IWJr8i42By06Bcfg432zwlzA6eKiRh1DhP4HKA3szcUsajVlTgnyHroA1UWx+Esrl5",
	"bVDprHtbLK9xJ4mJ2MBfX59z8P7Q3freMvg+FOSzrCbv60oRatUppZyXEWdRJgSc8jyloB5+ZeYwQ0Z3",
	"f+BSWvom2B4gi8udIKS5Wfj29D/DD6/+zxTFmZ6m8goQqfB1QuVCn6aRXmCNj98SIWhMDDVmEx6g15nQ",
	"22XJBRm5BJ5lEmJOJGykmKNlliiaJuSesjmAhWJ7xkm1AnVtusQttQTpvYQzsQEPklmacqGq9VMrI9l+",
	"BS7+cxqevX/3bsc12Pw8OLmmvi+h9oY+yJ6hBL1zgKZYSqvq3+y4XWApC6/IHuctxZDy0lT08h8yzZQa",
	"qRkVR+ReCRypEmuHux6uOgWXqFqMNWiTeUl/9fHDm4MrdrnI5AhdZZPJ0wiyQcJHgpaZVGiBbwlSd9zV",
	"L5EvoOeMCgms1JU1qV0ooxytyTJabwrEQI2Ggyv2ZmbOEwwwhq2RH7KUiBkXS7TEKlroHWVlhI8f3hgc",
	"ecuZPnreW0eaq/7Nu9fvvRd/4E35qUpeCb0XfErUhe7VN4m85z3t5KbS++t1/RBet1iJrCi3Gc1WDKyr",
	"jqrXRSt7Sfh8DusyQ9PLl68+fMj1v0Z8aOcjmgtJvfytYgD6ObdmjZCTRF8xRUQqqCSW0co64oMuc0gz",
	"ughHNLGBL/mEu+980UiF7dC1Nt/4ZETjMFtq+4tzoW1GDdrE/a6lTcXvuywKK1jeVn+xvhJaeazF1ssr",
	"wi0pa4B2pSCSYVDIPJ97dYXAJCPLiD/ob7xH09Ubsw2n+u+1VbYsAtu9dLimhqJRa/2p2vkq8fSmYcTq",
	"iszlyGwu+NwX31p+NTPUV4rTOnuOx8EVe29PQ7IaoRXP4Lac8SThd0bQ0AI5Q6dn52PNDeIiHfsIUS30",
	"0miBIixJ6wnU75AMUshR/fRKVk7aySHpc6lX7uCKveVS1YZh8qHjRBAcrxC+xRSUTR2jMlQD/4fkoegK",
	"nPevgvwW0gMFUhiBbOVUFmX08mlz6IG/aBrSTKRcklmWJCukuawi8cEVOzNSp55Am7weul0Fp5lacEH/",
	"AKKughG6CoC3jBs/6OtiwdPx9Wq84Gll4AWedxwSb1pmV6A5g0qBaqy30VUAsIovTUGyqwBBrMi6/YCu",
	"SYQzs5iryrxHnN0SYQpAwwS5S+/Ao0M0Fs+8fMQMChclmjP2jOI3+8ImH4hDZT3R1jEFh7nOELqQoEvr",
	"lbaBzqpyBfsKqJVFweJVWjmP1YcJ3E/SvGtHTkRB1ysrL5nLwApM+oQqfEMQtr4ielUMuWYHSpDHDHNI",
	"+LzY2t/Ycf+77JyOCJRNNhWdqVXIGQljMheEdHi3QDaaroKYdZJNsUXd/mEU6Pdff9+Yl1jhXHvtDM8m",
	"nMwpG3uZgiBhbAXGZi4u9o26Qmt8XUzW+C1zlZnOsloRRr93TBZ7Z28f2e+EyQIpId9kxfYBvwfNEjBp",
	"GvrfkOWCLpq9jHGaFgVdTDF+SIcPT/9MmtOzVf1tFzld3eu5oS5w6E1WymvM4jsaq0WY0CVVLeS/NsQZ",
	"JZ++ooBMV4XmeoW+k0SNc1hjgPWdTfcLHBEc+QmLNFuztrAI5R0QdDAcxq7wnob/e3B9l9DlmOqHu/kI",
	"qf9hMszB28TfaPPpt6mmyklgYPAefaTRg5V0YNcr5R5EmrFfE+fSRWJQgRihiAjKY5CFiNWkwhv8mpSM",
	"kDMudMOxiQk0SYgXWOjFbF8T+8wy94m5f9zJcpFQSy1LsVjfAVavYKsUacoPgtH6ii1br1+jspabXjMh",
	"/vl1GmdFl27m8mzo7qqDgXqnRWBFzJzY5Wid4K5ZhWu0fWqBtI6pXdIkobYKS+sMez1bK/Pe2Iy1u3K0",
	"28r4asx5Ep8j87IrK6VElthJNm2viUR3YFJIwKwhc2aEGU5Wf5B45LRY+mPEl9dGIaQnz62tJAmJlBV4",
	"oMoeIkyZHNYmy7oVajJWbHz/MepxbswK92Aee5h8/dB/5C/74C9bKtspy0W75nrkyiur528sTrEgeiYM",
	"c7heQUkLmGlyHyWZMQ/p5wGWCqUY4pFgWZd4BQu1xElCBCwite+StTzsb7mIMuUkNCbo/d35Gom58gEd",
	"YXPKBhAxmuDzeqE1tlrSiiqnXSlqCEpFcFwrN4g4IyPLH6k1+Sga3YxN/9jYRIoSBdY0B6khOq7Eb59Z",
	"GtF/Qe7jbJm2Rbh0Lod9HBTAhhEoW8HrZ4plC/7M+P1h+qNsIoI+YBbzJXpdoHnwvpL2iPvC4vDUFfIu",
	"pxXng2puzFHx/jGn0b321pcggl/L9hT3UGl5pHa44LutDmYS9H3EhbXry1JltFyv80Nf7177dHqo09ju",
	"2VtNwlarMlwkJ1ybrROSxrmYuZ720CLqqW9wyQwyhfgDJMor1SSz3X/PbunXeXI5psgmtSJcj6FqHNic",
	"pKG8o8ZW2T+zvL+rgepCQtoElXXlMALzPgbbay9inKW3OA+9urmjs/9qD4/1Gr5IvQYpkxDOCKSO6gOn",
	"0mPQkg09nCJf2+O8s2ekYyQlprJLmQUHo6u2dSOtcaD04N2fbQn2GnnzSplqjiaTiUsZ43LE2BEC7Flp",
	"mHW+9/UrNnxrJROGysbfnaW+Im25bD9O2oI19Bs+HtPZty5555SqqG1GH9Pef9Np7/eUjf5byC7fUd/f",
	"ZwQstf97JZf/AqnjH7O//9tnf//SqcznGY236ffVkpp/pdzcf70E2VvKbl88k3ZvYv9mKbd7r8/Xyc29",
	"t5Tau437W8q9/aUTWA//UPsimar7RYn//TNaf4kE1P/2eaH7yC57SxD9DaZktoo2FaWdyZhnmCZ9szFD",
	"250SOf9NEjDvO9nrY/LWHslbd0oHCn4IYe7q0K3zYTOqWWPR42+ZT/SLqjU3TQe6PRYr5HyDGTcbEZdl",
	"vwBnqmnLwumMJl0OAq7JZin6yuaYOjm+bJtzwojASR4uUCXmF/MryiQx6TPX5GFrBjn60+o4+bI1Jq/h",
	"fG5LLZR9xNYLp1JxgeeF+017LjbPQBuLVp4qz8KBgwXiMzSvweqdmq2yFh7iQPnV6shRxIj2c1sw7duc",
	"FnYxH39BI6sNg82Hv4uB1UBYk40mWrhkNFvWQjwzAB6ssB3KVBAcw1W0T9NXJhURoSSRIP2455npgqam",
	"iwaSZuES114YtdlJs1D2RXDxEU2JixiKvGHV/jAh3fbJ5ULPm4FQY8cO3CinZ01WubOLj29x2iernCb6",
	"LU6lF0Dbm0dTkfKERhW1D3gyjQIym9GIwuWo2aWQapzBlT1mJo/aXPAMAkePxlF0X/vCLJIsf/u03uyp",
	"t9lxvdmxa1b+stamaGHzKUCtd3hCmuIFvcxmFx/RhZmOh1F5y7RsqtwLrjx7kDFRyzeCp+MozYJRwFmy",
	"sh/hWzt/8LX9bFrngzA98j/Nr1zkvexn+F7BfnO/2L8++TM+rE8cVoxp/da0h6TP1pwSf/+2nRljsqzc",
	"3GWzG7nO5n1F9GrjcuiNqxxbzRS6aT3ZTv9R87yzDrE1x1DrlmwUHjM6h6gy+43t19/tc+1FZPObuwK3",
	"m1phL8m99dIvAl3UgoCDNpy0jvTo3avj6aNhMWkfJuEML2my2uFee/luahMvIQurPW1sd37aZhfwLU31",
	"bRmTVJAIKxKH+RGSLeZT04Pcp0RQDQ4nPfrUizivr27QrNPcGejb7frY1tGYGCMSRrM5+FoTEabY1pAc",
	"RmaoXbMuS0BVHkIGNwRQ0WWWYEVQwtkcCZJwHLeIH/OKtN+hT/vlDahE58Imb9/HyIr8R2CJQddE3RHC",
	"0PTNLx+nHw4hLkUQnCDJZ2osFU9bBqUvxR0OzC/Q39hk7SFM8QoqKGqhOMRsFS6JWvAW94CqKbfj/nQ2",
	"5pbk372SfNvU3h0M8NfDMyyJMf+uURGXm7bdTDVDdes7cnEYxjxkXBVGCMokiTJBQsipPyMiJCziLZER",
	"GsRReMfFDRY8Y7E1id+Ra6smNMbxFn6xwCIO9RYxjsb72rK/YhGjqeIpOp0p17FhZ8MiNpl/ahlxwIgW",
	"poLe0oTMSRxCwqRmw88ZjbawPKhoY5W8P61u/TL9FQb0Aci/yKm/AOI3gVCYw42jYU9m7OtS8hwPm8l8",
	"10ODLj1kuQ8kTXBERkiQOIsI4gLpq8mmQtMPcsRnSCqsMokAqhMbNG9DmCFnwfGeLU3LDNPkmx4DlK7L",
	"BGkZRH7KZ1zchHeYqTY/qrylJCqjcWdbiCgjcejOgqcFj3CSkv5hK177U4STXKr7TiIND3IrHBQWQRaH",
	"5dINvSNz1hzX1OW06RVys0NYzTmfIyjw8asbhe+InvO5bpS30cPPcN8zWm4Ktjz9khtrbl5R7XZIb2+h",
	"C/oP6ILecuOQuKURzyAOTbJTIw9tcSPU3gQLUgoBVnQJoovBBBGWMhO39JZAdjCNEyxu1/aB2kvqepeD",
	"N0oVU22Vtx2CDtdOfbK13GgjSf/PxzdnKBVc8YgnBmjsv8ZZtsShVTCl9qbecGPzSKahidzvu318XR4q",
	"uo2+kHxdNCQa987Dc/HmZZGGJz0KIZ+X4QOmTLaXHaVaVE14FM7ifkt1YTug1yBqi4zpPRXilFYvgn5K",
	"5GtqYj+Nt8SfO1aPqnEb1/2TT59cZiUfzCBOL970uphMa3R68aauxysAtcmlkqgwzpapsz02V0RCPm/R",
	"IZCT+7Sf4enVfdlffcPCHP6soIB7fZGNf2LRt8hGR2GNf2LRNY+3WISzZefTpb+173Vu4xtknizmXjP1",
	"eqk2nSxrkpRt8DqmLcK7vDrfT9EZTvE1TShMcgsamfQ2zpea5ob91uea+XknnxtwtEAORA5z/zWGjQMj",
	"SIgtz0Fz6YagGQgTykiXrSTXH/TXFLBsGXIRQgrSfjvc3uwCmSyo9c1uaKgBXrPnjYyQ07Ru11s7DbSX",
	"7aDOYbb8u7E8rXI7kcbhN1VCSWicxvvucV8XB2kDabXR3sHYpH+9L8TcbgKg0sFB2eDAN9o7GLdYyI2A",
	"VDo4KH8k9HojKJUOD6Mg66ts/GiUjZlNe+fppH+VO730PkoD5g4LFl4nPLohcagEns1o5NEZHQ6p5kzw",
	"ypaMMElcMJIqi26QwvIGKUHnc0hAgYpyhx6ud5eJWe+tUW1c8a8wtvU2f5icF/ot83oRQGHg+FWVkw5X",
	"VLSPN6MmRq5XnNZ9gn6xpPvHLvsOfkN3oHnOpstk+ByBFlguQmc9q0lhGYucDcs9ymR8vdQvsn9dHwWj",
	"4E49gyKa0dMjqJrJiN9tNVdnOzBLnJo8tMZAJ6lUhKkWn9eYzmjVixTf4gSzaEH66BhNwpHEZ49cYAgI",
	"KIOGxYr5HYMMtTdMf+qJpCXxxJZuKeDsXy79IglkxKsZZuopZCCAB7rlYVBFPhn5QzVvgMmO6zLxVlLr",
	"Bn8iKSJ0+NPRweGzHw8mB5Mnh8/QQzAKFrHI3fGCJb4f4zn5/z89PHn6bDKZ2N9zmU3LTmNTr5sLNZ6S",
	"KBPVxPhEjRd53EQzg0peHW4/OUFjkoxxlNgUUBrhDVnZx8n+UfqyCpz9hn4jK1S8a1zulV6hGeut5hZc",
	"S+C6rbExTbgy12Se+YWwtut1wyyoPdCfG+29w11K+l8syff/zwvLtz/94+rq+6vge/snrNQPV8HV1Q//",
	"nbf4YQv/gn4zZWizean/akmufRHnM0GI3X127Wox6Kdn57X4c31u8hj0Mn/4c/fjIow9wTGJUf6FaTEq",
	"c5CRZrTuD//5sqFhxfHS5EJ1mC9BbSdNb4EKR1LdBNx32xoG02cOAB96axA9lBn3ABNRWohRc1ZKJNYW",
	"cIP5coVoK4X9B6n0PQokTbwCyRYpIIkaJ3w+NhSaOik43fe9prEucWqnWn/6lKPe+w3nRe41wqS1u06T",
	"B2D2SWBOXytRULC4TNZWLw0ZhR0q3w2nNBrrEzVPI705o7EewjxVk5aZnUZTolChR0a2BDMQ1f5Q3o0m",
	"yqLGH5PKX4cV4psjcfTdfwECHREF2v4peb7A2r0x+EoLBxZzePeaEonBi59++qlcF3Ay2Z1aOBsWlZkY",
	"+BwKgmWrN2N3jtoGQNCn1iMfweeez2aDsFzz7AAUXu/QyuWEk4TfBbm0abmWltBr95RjZqMeMsmwR6N2",
	"R1avlFGJ35Ym2/xxi0Xxaay56qgyPbbUuW0Xcw3X+wy/xWIobpYT5t3+/8QCVQ1gYC8aSqCszEUrAQXr",
	"18j3Whfi99Z1KlbG8ChNiox4+vVpWZMft6S6yJOlfMj80VXt6TpbNWNtmpG2rLrrVSL93aB8+p2H2shP",
	"myNvD98yzlXO7bhpRx/OXd5F/htNR5KyfYD2aTTOL96hC+sNYnLS8ni13VUC6WgthM4sVZsAg9kPI75c",
	"2nRIG7+4XN9yegVyn5oPgOhTue7LVtmyK8tn0nQVIoG72M6fv//tLBgF588/TC/g3+nlVP/7zP59fPb+",
	"3SZXrMNuR2OQ30cJXmKTXwiLm62GkwP0+z+QSIuvOR70VuPJU0f3910URGWChYv2Irq9dkktuEZvmF8t",
	"JS35LvLMB7stdK6ZyBXw7nYX+adFrPn1zPyTr6iwnz7tq5xUjxXMNRpbOtY17Aa/vjp9GYyCi4+X+r/v",
	"p/qfX17p/15+OD17pb88vTz7NRgFL1+dv7rUX5y9f/fu1Zlu8v7i8s37d9Nttn/BLJaUhYJEt4PoYsun",
	"it+0nGc4xvZYPzN/Hr//bddDzJlJOrMN66zBkVnUEcbZG1K+S/8cbmtqsNykZ8xfTc9OTp6ejDY3vvY+",
	"sxpjaGnfYk6qsPS9uTMU8CbMTV27cSTJ6O70yGQAQuC0jCOvb+lmW0/xTHlP3+V74DTnz9yHY/iw49lr",
	"BCt6xAfr8zrmbHw8OW7IE+YfeOuRjqdeSWz3mbQF3U1yygQdTAob8IFZPGM+fY0n5u+VRfj0+MjcmhYi",
	"JN1W65TvK4pDyaMbebwry+nz6jXBoG3vXHhpbBp448JLm3jWvSobcU/1CDHJEz3HYTkR8xApEW3+8w8O",
	"AXrpQDyMSmhpv9R5fpDGPF0AS6HQaMUAm95qxknT22c7kH5h4AIuJaqyaoeXWRWY6Wg9bKMNqvSWwUyn",
	"5+jsNA8W0KBuiaCziv+K88Mp7dVPrQJOf7z/NIhgG4LDrUsyu7fYxxIBNtUeurS+vh6PtVaHnDzUrbr3",
	"7fGusjg8/uN0/F+T8U/oH1dX41FPXz+roa9xB2u/XBM8e3l5ceYC62p1ZnZxGwIovb2FTOtWJyHKYnIP",
	"a+skpOOjk9K8GNX+MM559rkemSL3fRh/tUfpEm+9ffRwba6nUhJym7NqFCSzsf2U40xmY/eYfmhSWcLp",
	"DqHb4RX4RY72bRBv8WYtGV1qFLumPdhCPxTeOFCNElmUCLoWlCziPSpxWtcn3wM917oWJQRgu/U+jUfE",
	"0WQyOob/HY6OJ09Hx5Pj0fHkZHQ8eT46nvw4Oj6cjI4Pn470mTo++ml0MpmMTiaHo5PJ0ehk8nR0Mjn+",
	"NIRZr7QZ6s8P+1u/fCijcvOyRAJZ+bvV/OUiWt3a/YKBdSr1fZyrv2RV4rUPrYNZI2OZxL2hLei+Ic8+",
	"tbnHklVRVhM8dxGfleahVra+Uh/i9z8D8wDWe8wVaHpCVPTE+raWCi08kVSRwyfHk8mByTE9Kjof9+58",
	"bDt/ynvckWv94/iweQt8oVoWW2sY1ziD94lWdAF2pZGWjkaxTaWr+t99PPK9JL3VXLHLNuiOS+kc5B03",
	"PgTFBn7oJF22HYNyubVdBBcLp7fo4trv0cP5/3dZ9Wn+z/Gv5nCMz0yOqfFLo4Mp5CQ3RYWXwddwbdbo",
	"Cy+GLo/j8/xN8UUcoDchrOoehjO1CAXByXI426WG2WK4zNSCMEUjswE/AF4o5mZrGJugwKJw/jauMTmw",
	"sQHjdwlSmMVYxPmpJxXtVZ2gTZ04N6bn52oVZ+RSONQJMRXjv+bUQCXg/erWDI5xJls9xaMFyZ1VH735",
	"H735/0re/DFhq9Dje3hS8T08mkx2t6L9DsgCl6bdPrYHswnEfGy1hZAMMpPOcHIdjcGNIf9Lcec+F0tV",
	"fBqDKdH8Oav0mZX7pIJyQdVqHCVYNr7ks5nJYAqueiIqPpXBO1Xjp2143mMAxmMAxhcNwFjQipZlT+4m",
	"WCSrsUbVUhyJMlXeVZqm/d77vSj6ywapJBkOca7V2M8MJhkukNl0QlsIizmYx8Cav1pgDRY3oc8W8/3k",
	"/vfJ+KfT8Ws8nn36x3/rPz7944fhiBQ3bVSKmyLoYhe/tXD/U21vDtBk0YgUM5mLaYeTo+OSnDY2fw8S",
	"JaIx+ufwHY1IMYemfi/9o2qcnQk8XxKmxpCkFVIvuW/0nEC2B6wWY80hyVgmWC7AWAJfQotxzFXjC/sd",
	"EZGGFBMNe5wxW2QwLv2m+DhL9R8mN8XnjIjVWHKhxtd2IAPw1XzsY6il9VCZjnBmKxOvdUqoTqED3hx5",
	"SbnfjwITCrI9Db9vPtWf+hGpBxfun5tCRvpR/vFzSQCyP5X//GyZPRCXy6zfHnku9eJGzhBrqLPKW7dk",
	"pdeUlwdclNI/mrNlF3MIxgcAnWUzpiYpb2m0TyeHo6eTo9HTydPR08nz0dPJj58G8PIEXK0+zx/sr+jM",
	"ZhM1pPGuOgBDoHufl283COvmvYRHRU0bMqP3EFy2IMNwuJ5EXubmX02i1/tiuLuxJ035DZU7EQ2xP9cd",
	"jNyzKHj0dxjS36GuPXJk+8cwkAdEF9JHnwjrE2FR20hix6r3qUl0q9C1CMbEn/NqqUKlkoHizuFdDrXo",
	"2zbC9BJdXp4Hj1kCHrMEDJslgAio+TOQGjHIJBlbmDbqIuUkJGxOGdnn45bFY41pbBPZeWfg4v0r9MpQ",
	"4gjbvDjLnujK86R+lXQHRU7cIaRtB64MuyFlwqNPb3yVMQZZCYz7+VDaySoRXH4NrZHiLb6Ol1wWR1AJ",
	"HN2EMgpvyGp/WxGwjGXkJ8j9in4jqwpNpiByxDNmc5DufNX2JGSqEZ9ZvGWK8nLOw7hz9CTnMi8J7UkN",
	"YpxTvElCwFtkVDL5b5Q3xAqLLrYreQ6GvpXJvFEYJ0uGBVCNB6OahqSwX+ZPnZEt+NOVncSrMij+NpDr",
	"1j0rSu0lp0mVm+7FGtszaUqpu9Wqjgol56hNF7OhudeoLdaYflUe5OBYjvlkVqc1p0tJ5KxneMnfJvnZ",
	"qGZ9Kd/xo+AOUzWecTGGLA2lvxeYxXKBb3Kzec09p2q57kwmkwk6kDro99LclPfxJxefOB7KtFwBP3TE",
	"4mNKnH4RghU2+S2HLupTE2IVJgRLNcg9Wz2XZplM2XSXslujHLae9Ea7yEdgM0prbQTlB+vS2xlJUPY3",
	"XhdLUPYp7owm8DsT93elrjhBP3QMa01MwWDZozfOG/0lMkb/vfypvz2f6Xr66Edv5Udv5aa3slRcfEl/",
	"5Z0ciJv+y14f4kEn6dFZ+Nt2FjZv6WE9hMtOwd4n5aM77qM77mM+9EdX00dX00dX02/D1fTbdfv8Gzpm",
	"7ehv9Oiotbuj1qO71NDuUl/SS+rROerROerROerROeprOUd9Hd+lr+ac9Fg15tGN6tGN6tGN6ttzoyob",
	"IbbxoDJOUV4nqDXa0S/tzjSoa1LJG6lS5anNZ2hjTyG/g1DdJcjv/fNYPOoxr/ejc8y+nWP6lNPaqJBW",
	"/xJaOxfP6i6btUHBrGhxU9Lh12q6c5/l9AtWkykKK1SOGfr0vzzJJDuS3DdzWremyXYp4sFo01juXwgj",
	"Aifo9OLNCL2fIsxitMAivsOCIN1FLJ3eseTpg1MYw3VGkziMsdLYjiaHP40nP46PDi8Pn794evji5Nl/",
	"BaUhBLeHB0cHh+j4BD89+vHHg5jcwrtrJRUBA3OUZqEjUt85SfAi0M+05PsPP6AzLsj3l29/QPT5+PnJ",
	"ZPIRnV18RP8bHR08n/zy6x+BPqzLMEohBbXeCVwqJ5AYi/aSLHPwMVY4TTAjOKXhkiy5WAUvjo+fn5yc",
	"PH02AlN3/vXJ858mz46PDp8/00Kxwkn+y+GzZz8enhw+n5w8exgFXOZ1XYJzyrJ7dHxweHIwGZ/8OJ7r",
	"WaYR+h/PjscfrzOmMjR9e4EuM4JOszl6hg4PXxwevTg+RB8vz5CeycA8A4IXhyfPnh1PDk+OTkZBlprv",
	"fnz+9Hjy0PRzMqtS/bK8Rm1n/aWbDr0NEPRAsXG0yl2z9N8gS6zZp30w2OYov03Wbe7KPqmOr7xralnG",
	"zR7ynPZiq9TpfZctr4lAfIYSPqcRTvQ2K2U2dazfn1M+33ONabC/oLsFEQSpBcn9AahEImPMOw/VTVsd",
	"nXcLN7Q6D7XN7GtQ3dR/9hpqabPXx/p+2rqubk/Xu1jnPqR/RZShJU0SKkkEN4ykLCLoVcqjxYFnIYpT",
	"UYc6hR2D7M9rb3PPOEu30JsKK2zMhy10c4cFXCI4Sd7PIAFz171X6hReY0kg6XLt9FIWyy6rXxd83dm4",
	"3swFXoY7wSpAAERNusJiTlSYUHOnrhupaS598/yp7ql6zuevzcSgO6oWCCcJouo7iaIFTWJBmJZMeCYi",
	"IoPuKgoFpNoymRnfzoE24XNkwVQ9Z4MGS5YyW5KxmEXPTn58PmZq1pZPpeaqCf3Qh9dnY90RveNsfCkw",
	"kymGk/Ja4KU9Utc4utFvq/Wist4JnKlxioUkY9tnPS0vOftOoQvdCZ1zw5bwfcQZ64dzL9m3D15482+X",
	"SpAY1VhZuXl0ePz8+Menz46fjwYS8zuF9DxPkGUh53yO3F7sZiEdYnlp61l5vK+UXWZRD16qfBm8da/U",
	"Gj0bRL0kM8r0u0CTNadsjmxTTSLijCAu0JILgqQiqTxoHA/DF3yXyC0RgsYEyZXUQ9b/U3iOJFHoeoW4",
	"WhCBrnT/scLzq6D07Djw36O77MGajKAvcj6DW7w2bo17Sdk5YXO1gOqBDUpgJvqslQUZmg59NtdFbpz2",
	"bq4ywPa1vFtgpV91dqMhjOb0ljBYweYCgqaoAevNDNkKUSPEDCi50Dz8miCypEqRGGDrGaxC36TA1EMh",
	"nbZuH7NFTLOrQG/HK2NAH1e+NxAlMu92vaCcAXWOroE2lIw7aNX4yvSOZZyT5qXBv5DndkvqX8GdvTyv",
	"OIoIqCcxqEqjhJsw1aIyMdT9NHvNvJvcwzwwz+uxIJ+Lj9J9zEtoQ7o0Go0pM2GFEfQYw3VR+bP8q/Q6",
	"Q9f3PIzXv+fRVP/WY+N7WOs5lUqfZ/jZSegc8fK62HN+sAmzrZw3n5+BpzJw0a2DULfCF67l5kQ16KnI",
	"dBuKRRdEjCmTCmtB3XFEPkPkVqMHlYISeDajUZOB4DgWtj7sdopHUyWlQ70GJENmOyvxdLbTe26GI5pQ",
	"VSmddkPAMJBJEAiWmIIdApMlCH028ttcVsEoSFLdipE7vTZZFqXgVJs3PdIPa6W/ZPBfnMVwWAr/W850",
	"m4RHOJm4D4fuQ/7TU/fh2H04cR+euQ/P+1gH9zGJDc8mIEczlFn09PDZsfl0cnx0DJvCxETrSVyYeGct",
	"yOkLgEqum+K7zQbSRniD0KJLTRTWR8Je5D28JbbAPKwf9n5mZ8skp5R9O4PLKanlK+wcd/5Lc1OUxOHm",
	"lQwq0lBgNu8VGrDFilgUxoIx/MZsjqEePvRQez1cmjuj5fJ1z/7OF41p1GJf0A22sCqUrjMvwa1GhCTD",
	"7XVRE47jMCUiVAtBcOzdBLpN1R+xCmOT0IC6DAR911SOPM/wOcdxT5kjFbBdQkhh0U60+7kX0U2bv02Q",
	"EcG/ayW9Wqu2UV4Y0i906z6D9Wky9VVOREhYXr/Vv01NO+Ta9dyEJeir8jZ8a6C9yqHVN2GlY4OotwUx",
	"UPALI/NNuY5YHznr6mrqX74vVzGtXxF+j67WU2fNDdLC/OSd71XQuguqtfp66XBrHdv0uM1dto0Strqb",
	"+ihS7baYGup2VaZWoXnmbRul6ilK7Ltm+vbyAhknN4kySWJ0vcrtJIojSViMiEbpUSV9yR1bcv7bR3lj",
	"W8o4HzJmZtR108gWOkjHJtyG+NkkOF93HtbyxbzlZjrJ+rF7aKXUzyNTH2tMTcW6hqqq3Mxza7fKdNR/",
	"yzsBrIpeo0b6J71Y1ytl9JHrleRScYHnbbkZHyoTkw/Qs2xp+01mLxt90jgjSGQM7G3GmazncqW+qyyV",
	"nRdZ2naLvWcE6dE4rlxdL2pj13H8niUrf3TJwyiwHqAetzLru9o+k3X8vun0Vdp0ZTZLM4g2UsRAbGJz",
	"Rdv9WpacUcVFOMM08ZjA/4IZBuqMCiCVsX/yrYedButC05RaVvJzEkYLErW7ABm7UFjyWMhFVEHGx4cg",
	"PEilP3m9dyQRHWe0TrFuat22vXYE85u57ChDH+yOevlu2jAslt1vnDAXHE4O9P9rqu08M3no5J8XJ08f",
	"dtS3fXHzXR9hsIchv0M4LN2GxQoEnWsnuxZvQzNcaUc8+Cjx8VCG9dMX4sDanSf0r7IwvMEwmmLSNY5u",
	"9Gtvs9wFLvSgvLIecwRWPYafDyU0HTyPRUtkMCpCHmYC4u9i/9vRTeMUIHrXso5WoytO1DVlwYvjp0fP",
	"Tp7/OAquQbj78ceffpocHv000WxpmYbXqxTEPPhDt3efobX7Q0jXirFQgNvV4VHpz3CJ74MXxyfP7HeK",
	"K/jzx6NREEfcgI0F+Ry8OIYPGt7hKIilXsDJKCDw28nxKFgImYaH9yYPFvxxpP84fHZi/3wKfx7Zv471",
	"Xyeu6Yn+ywEBeyqAofra1f8yRUREUqXP0NPjZ6MgwVKF0eJGP72P3/+m2dUE5FcTdwNmIL3dNICnR5Pj",
	"UWBG/8x+ChNqohQnE/uFmQnzN/lsJ+v4p+Iv0+LpT3pA+jvwVNIjOjl+/uOzUSCjTOg/fxoFMoc+CiR0",
	"s59tjFPw8QI82vVs6zU98mQJ28XduBSd43YvhJ9prrPdOcNzfU+5oM8tyWoC1MxjF4KK98aARM2wKXY0",
	"GMAFwYnRVw0GUlA57EoU4XeO731891swCt68exOMgun7s99effgQjOC0wT+X78EZ+fz47P07/e9z8/3z",
	"6eW0fwhYhY5kzjfYC25j667X0c0eTguw4T4+Rdf2+b2+pZEGBzxGBuD2x8j2H/YYGaADHiMDcNBjZEAO",
	"eIwMwJ2P0TPz/TP3/bMP04vy8Xr/2xn8635/7n7f+txFi5uY37E9HKBocePeiENMcEJDfC32cS8WEtUO",
	"oHOh0Aecsv3B7sd9tgQOEuRegOcS6fa7IwdegWgEtSGhgqA2GEB+Qzd47bTuWednPvBZMGL/QIPVjGVH",
	"OssswLxE9rAb7cuml9OyNBL6IPNDdpvstjUku81Tjcaec7MpkQvMsLseNr+1iudmn0Ur3qO9Wz/dqPXx",
	"Rq1PNmpt38N92tNeyW8fai/qPRwoeJ/judo+J1N5sYvX/lDQosV8D1taQ5ZWoTk06OvdLqE2uPU8JQrc",
	"A636xErcoyBjN0zLiD4ldNp3z30GBcngI/ic5wkfGvBuckQr2D1d3D2FqYeyAmygK2IDqeuhrF4bCn1F",
	"Qzcg0F2PXBt3FHvaArLfCQN7cTyQTCb7baQHpwnt1VLc7uup53mg6/fzy/f/oZ/f796f/xyMgrenb95d",
	"gvsngme9l+/JfrvjYRSoheBKJUNJwZD7hMTbyU1qT1vvjtD5Yh8LdidITOV+AKvh76OHbntPh++KMZk5",
	"813VHGACYXx2Lmv2P714020G62kOLEx7fV0Yy8auustAyW+r6erJI5mGWRprxt3q4WoDrsysgbdS7rjV",
	"smxdsaMGGHp/Nr1AHwGzy9MBdV2a6EsG6tw+FxwePc/t3D3N1s6QnAP5cTLa1aq8NuNGaZgmgQrss5bV",
	"WOL7mCTY4xgzJUpC2JGlF8Hb4RYn6JqoO0IYUncc4UzxJVY0QmZJpQtKlHhpZ9zFbh1cLqi04fXSlSAw",
	"LgeFL9nm7mty3Ry8tfS/hHFW3dWcu/mSsrXTYJZp92lAX2se7AA656H2LOgTArkOrUlX6MvfIOicMpwo",
	"T2YJh9hDi+9SJvcQUtjfocSmNtvSAb5JSsdxtKO85MARSB8/b93KeXlv5tmRw6+4x12Qitd43bWj1KlB",
	"EnQF5zQ0E3wJpElkkvn9O/r1jAK5sAk2dvUHL6bW5y0Ci7KxK3i5137zeeySfaN5DrYhpbzXH5ybztbQ",
	"ysKy3gBbAzJno5dnPOyAgfziNaySU3xzI2yXZqQMZ02eEXshmQQt61K5lNtCYSbzd+Gn2Kd34cOWX0/e",
	"aLnSbdL88cvyIOAeHtb/hiHJl7UiiHIEfnR3PEtilNAbiAmPqYZ2nSliswPQ6GYMm86lppdXTHEDzrBr",
	"yhAkGYUIc5tcQO+0tv4aDcHRArpfsZhECRZGRDEJAgDsVeAifQ6QJj+LFijCksgRurLj1E1SEtGZvsjU",
	"glwxlie3gkuOslue3DrQVPrJyYescQX9nC3rjHZdtEF5o6+5mreLM6gw9NrlHE7zkKnm5SwgjJlFHe+l",
	"60yuwpQnic2G5dnl+D6UqSA4Nr7JcrjAkWrwh03Ms0yjNMsknrcGiNZrzRgp3c3z2cVHZLoXEJ32sD+0",
	"lIhxKnhEpD4EaaYQwLEJ84V9CZYyCfUCjc5MqgpYi6L/buQVByPiLLL+tFEDUUrTCkvaGosBZIBKIuVQ",
	"1EszuVL/bB80FssfCb1emvR5/ZHgJc8YRGZ9OH0LwUdkjiGmBRA4/Jl54l+vgEFpTKCB4UQfip4ppqya",
	"QAPIZJ5d5yoAGFeBSSWB7ClDJhcg4gxBokWL7lYLeXInhA6NULIV5TRj76fu75gIqlkoyOdTnmBBJTqc",
	"QM6LBNs83IzP9T0XC5fJbyv6SjDAyxvyCZqC1y6tIb/5nJFK1Ms2c26AdEz6z9OXBt0AC9yxvgaHIJkk",
	"7vWwFaLp+/DDq4/TVxfvP1wamDJNaLT9NN0QwUiCVJQigKRJdhoJyaMbomRlb5qEAZTNS0kWd3zlv4Ju",
	"iAtku8GRHM8yZm5HgwjlmKtkKCxvKgp5nCkejAYmRmOBu6RChZEbQeFJcuG4d+qXWikPEz0z1bCMcFFH",
	"sHEVvg4Er23enMZVvp6jnsaxkQkFZjFfMnMnwp4CMLlmy9ouNHwtxIV9Da1eJU9KhKSu5nhDbhFxGhrP",
	"qIHSkOclhOJ0bF2u/CV84hSdwe95Vcp6AEgJxNpcAXku7Mbw5+ujwTYM57JXXtidSzmXV3Ppp5w7tK+Z",
	"weHolGtL9ITU8sxO+0Q5sbYlsyu1aVvKiDraphofsnWE8Fjp6dJdk6N79NCiSMgzFfY3xDsZNLxOZdjX",
	"27zSqb/nebnXBg4AG7pqVvwwe/OLPOcbiTdZpChbhrrjBs37OcbZxlImm8EXYuP2G+KIBU9TEocJn/fs",
	"McM0IXEIslmWvxp7uJ5pjq8fi/1zq9I4IWEa9Vzyf/HrnqQkVCrNzXo234xo13qDHa675M+vfs31Y2hD",
	"DFp426D1ZvvIddmMJP2c0mJjmL/n+yTcXcI2Wl73a8+ui2RGbenQTYu+5rFa7dccyqWFAlJ47A8jtc5t",
	"NW2tu0pj93QQJE1WWvK+4+KmeI1uReDFm5cGc0pkOBOk5zyb9pkkPb3xUs6TECcJj3ovDXQx/GSDDpqk",
	"/ijsZW7L/Pvn3egYtptcC8LsghJG0pl/X6b4jpEYFY1323oFHJAfE4IlWVMWwZUpsK29JRF8emaRsTB/",
	"iPcwam3GqPLmm1z2mvG40O8bstoEXamnZiqb94Z6XmHC+U2Wyk27LamUZINezv9vCzrzrtsNM+9utXAh",
	"aC76998M28YbQPE07S1Z5wqCHk2hekQuivfrlAHlYU95IWNAvfNK6tGhpSKEO9jmd/D66JWcZ215k3UF",
	"TUbB5vd4y/tzLvCyw0RiGnQlD4n4colZrKlLOR4vKZTzHY9dNpsJGtsvx5lIoLrTiydPFJHqwGVwtcVK",
	"g+UKPllru2W5pi8E22OhxpyNBUm4li5K+iXIo6sB5A/wRjx+Tmd9rJcLguyPSHF0DamMRsaGO0vw3GQc",
	"tvYab+LsvNhqEzD8pMGKzOpnLCYsR4jOUExnM2KKlSwwq1Ryga4HX9/VojHv7e6PPDWTJUgkCPhOge3b",
	"bSOJsEIGyhbJ2c0a+yZZ/7LdHOueB2t9hOyGdDuobI60B6j9bPV33XSH0ZNK+3NGo5AyqihOcvXbBh4A",
	"/+fjmzP0xvTvOssWryClQfzFE0NBixXDSxqNiZVJtUhuCydaZqlHaS2fwZyo07NzWajWVnoposSoNbdP",
	"YtxQShKrEsuT6ENVT0GMFxFUyLGly3vrLO22LK/3Gl8T3dS2/GAr5TV2W/893NyoD36qWnKTddJmRW29",
	"3lhFi408Ddfwllxfvt4XrNVh0LwDOjmk/b1y5vTz1Ba7OxxPno6Pj4NSmhnKQuAL+og9+FPaVfKvxn8e",
	"P4z1P0flf/yM3VADlSqlwsvUX84rr9fQ5pxejcWwj8tRhfJRILMoIiQmaxIuNSaqZYrlujne0NfS4vNQ",
	"8sGCa0ulZyym5mbq59fnerT59NXyhG3jt1ZOCtbHee2DJWlXxzUHpzwxuVGuhrIjNV1d9W+iXMMUr2DD",
	"ukyZue/nj4c/HZVcP08Oj7zqUJ7EIbvfn7MMIODXkidEkX2jcRHFe8QhyMwpo/aIZfDkt14stzihexzJ",
	"F3Z+hoJr5oCN9eHx+4nZExhqicJlNe7IgV3UOrMd69O1/fQUgK1j+hBg13gK5jytzUvQMajOu8Q22fQ2",
	"KdhgnRzpvUNUJlhYCmSo5vdf+osMtxuaPY8XDeTTOu6tyfjVUKGhWP1Oz2uNsnnblTaUP3efqwx0+Dte",
	"Y05Ayoe0ncO17r/W0boji7Qvl/eCoFIfRPWD2yoncFL5yQDJ7RuNEmf5Kw4K4uTVdPBdS00dV0inVFvH",
	"1NTp8/Qzzy2TmFZxJBUXxBV0okzxnEZ0nenXurVXJaR3cpXmPLloN1N1B+oaMOsZtiRS4jkxdMRVCr6C",
	"hsUJNBveTbXoJLcJKunC88J4GtnYTm6jZH1e5dIWbtvbRekQFcEBX6FyJvCI1muBsnnXlQCF/Ta7DvI0",
	"/wV67zVgROIQx3HYluR5SpRxqC/YCLpbEIb0LmVzhBEjdyhPA62/spR/J12C8S2qpq1Nmw4pKMcuO2nP",
	"kDHTycTnb+PDWFERGWDOs7NRZMhhg5f+/vZ3lYrdotMMLEmYv2AAThJ+F06EUn7xDycp28FX8fT84h26",
	"EFzxiCfSVQY2eu4NtStbrbDrBxMwzqO7twPB6Abb0vaRybb4wh2nvjLr1uFQf7UDSOcZaaDdUgzOKfJ4",
	"myHSdGGFuXVn0s6h8+R0COA4WjAZVWR3WCIJ/fU2NoMT8zu2ZwYBDprhRgmPqiv5K2R0Mm6+AAwZYOAo",
	"1j9fa217iAMbriJJlCl6S5BR5CHrlgzQpdrz5My4iEgoZXL7dIuNaXqrRN4eTnbrfrhb96Pdum8zdpPn",
	"y3onbx68Xek+zO3Vs97KnnfUEutODLOIbDGr/evSt0eXufivZqBZX5+eFtiFL1IdNGX9nSfdm2XtQjG+",
	"9cFkfPtT6foe7tD3aIe+W403ZbveRPwaZPhKvVu8IgIq8+oPverwdmJg4zxYoDDeOBZvvI6tbD4KZBbH",
	"hI1jYsouLrG4Gcdt6QQ5G+sGJB67rNQOvlxkSn83dpGFa/pXpc28txFEu4GA46IWkPsfBeiymesxdEkz",
	"MSdhnnRmP4xsG6bccqarzpr9xUrT/n41vj0al8KX8zdwKfpr4TREERFqHDH36YbkX0o6h6q90dOjKAAn",
	"NPPfsREMwbOAfs7ImPoPWY9SpD1zwz9Yy/u2b4yi8/j2aMv+IfQPb4/C7d4dDRhhxLYBk/A78PfZ30be",
	"7C1mFLZ+2/N2EwWuoBvH8fVjq76Qv+k5Ojstgv00eiIUndHIOmgOTINFovmY1SC5GZpOz2+fBqPg8nx6",
	"e3gwyT8d5p+O8k9PWydvSdl+AOf+rRuuqDJxbZv2SmSoKATX7q576loMyPXoLylIBJ1VGA7jjAQl3eWO",
	"qA2CBe/nY9UGqUxoHpPpKHzYKHOkbusLFF7onbI46mVJ+KDvWTDykGsTHY2kEgQvUWrVJhWPEudncBrH",
	"aNpam82pXtvUrg6KEphJCuXRjIq1pEdtK6lncw2eQAIpfXoglBgmEcf66sqdz3CS/5aledW9Hyd5ELJ+",
	"Ux3mf9kJuSPXpew5gyt2yySXndcM7fC+0qdFYOqXBnu+A3u/QzyzVZAF0wZSZ8lF/dNA+cPWiVOeXdd3",
	"x3UZHCyoraoD1va1z7+pQmm7n1NxMjoNof1sxXYD2yjqpr14cwVG3wzmwxn2euQK3W/RyTWGcLfANtjG",
	"May+ZUAPDw7LZUDv7u5KDOnHSTlvbL63qsvajOF+tBE92oj2YyPS7/CxfraPNzyqpjuIngDk0Ur1aKXa",
	"m5XKlIqWdI6T+RbQci5VFKDqu1cGso9Fmbglu1D+5Q1s63Xpr8CIFvGM/S2NaPVwKSrRjJIkRlSimKSC",
	"RFiZpI0zfMtNrLTuO4JIrjuaJBASR5bc5nbEaJapTBAXx7xhJJfdKxZvjerCTLAF2abz16P7cBe6D78e",
	"3Ue70H309eh+ugvdX3p/z7NGtE4v38AFlovwhqy2NeZ+I7bghIQuXHw/XI8yWrwt6mD7PiI1jIZOYZYl",
	"yWoMmoWyesF83WoE2zOTTzg4czrP0R4ZePi8EM9ykyKZ4whUUJEiamzuQL8hfEcz+ibZC/5NrO4yxS2W",
	"jbKp/S9yfVdM/H+Vu7viW/BXubgrTg1/lVu74k2xBdHlW//Lk161ozw6g/w1nUEgRdzGmty/mRfJ39vf",
	"g8RU9AqjuhBkRu9LUYBjRuo1h74v5PODF08+/eOH70f1b/5XS1y9AZkKMqsayml6q88sTW+fecfoIjZ5",
	"quoS+/egyh3HWTqm6X/TOeOCjI3h9b9TAVFN9scfvh9t0Lh7DEJupM2r5dmoZdUoh0CWUmvkaTUe3XU2",
	"B6PykYxVcju2oaK+NBFN9wNzEayLH6WaCtPWl/KitYTSKNhd0fkNuiM5dfR2XjtGaX9L8biA5DFDPXo9",
	"PXo9rV/RrXyxoSjPVv0EjdS4WV+lZE1UURruM5PDt+7pta2P+9YO7lt7t2/t2v7ozfZ1vNka166tSnFH",
	"VbSgbL5NVrg8b5/xDMlhIQ2r6iiCvo+4MJmgYigplkkytv1iKghk5/+hnhgSskJCkrhSsrfgTyTIZ5B5",
	"JKNoTNHd3d2B7XcQ8SV60BeBKUfovI7A/+QxH92w+eiqUzyYmG89ybxCfj1vXYWET3WfIjTNtyTkput7",
	"Djq86WreUNU9b53rem12+UNfHzz/UX1YM9h1nnihfvsmVpj6Ai55s88x89cV2a/nXbYMuQgFZvOW9O6D",
	"GKhSow/Ysoaw7V2jdmTmrIer3pQohJFbUL3jbApF+kfh9wk5bfRri8QIVokoIiAfbYnnmlUK5pzPDTOt",
	"E/UiOBw/rbgWu6EHUtx6dmW+zZo7r/8xy3ts5r1a3+nt1MnWc9KbyK1oa5LkpYSqTe/mKVW1K/gA6e80",
	"lfCDpDHRWwFLqCuqyaERAdU4ThI0w2IpUV6TBUF+G6xcu4Mr9hpaWGhFKwfI5A7RnM9Nkwad13q13xXs",
	"0JGXEIVWPLtijniCJNXbM8+5Wy+LOuMCLbkgCMe3mEUkz7UM9dGeLDBoOJ5Uul0xwuKUU6bkwVXNjRWG",
	"DvzuGifOYomTORdULZZa3OMZiwW/pqaaJhSOCBZKpRV3VzfGoLSTfm869te9ZN1l5o7Y8cmz55qbNvsd",
	"+fqFjNxV+36CzMch1l3t9AMLsV21xBLCBjN02kJ0ejhhUXIyLI0ySjjYRvKn3NFkMqnOw0ND1LKTWtL+",
	"1qqWFlPdWXLaNrPy1mbCW0UCc3NSl8FyvRYgsMct6JbMNhb/hkRuxELj2XKHRTzja2sml1p6Cv3bnayi",
	"1G+P2jZJVcFON2WQ6zX3xYS6UbitPqpM5aeeqbotvDUJ7zTH0mywJ5G7zJw9ltVD4z+k1ZUcq4wxkugX",
	"Zensgj00Hrs/oaGZ8Op3N4SkY5zQW9LnTDn8bhPnvKCZhOTy8qLkAIHe6p71Ok+9tomrGt5j/ofwC6l4",
	"bGxycJqP8DVJxqZU+V8s1Cs5uctd4NXjTd910/djPrQmLtIWGXGp0mjRXs8x5ktM/e+eBUkS3rPOY6HP",
	"b41z8gTewW+hrbvsJSEWPW8rKaLKwY5FSFPzHgcT/6zNFYlH0e4o+rzRfFZxoUqj36xzQVCunLNz7fzw",
	"8w9UH3pL7tr7pT0AaxTIlJMQAnI8x/vi/SsEv63Ldi1XLNom3oEzRVlGxj5XjmbO+qJjzJlK+HzMuFji",
	"bWxLhM0pI+OWbLT2rhpLosa3uDdVUPxEth+8ctroHZxG44QMAynh83U8KeHz0Ci8nCvieKaf8WPnxOn1",
	"hBzfYaoom5u2srVdR9V604AI0fG7yYcqN8kzPAoM9w710pZ3XZt81CIelaDYompjV25pe0hQRmpHOLdY",
	"jP2KoR4wUpqShDLr8/z/sfe3zY3b2Low/FdYrqdqZmrbbaWTPbMnz4dzK+5OxzXutKftzJxzT+eoaBKS",
	"uZsiNSRlt3fS//0uvJEgCYAACZCUhC9JWxIBELjWCy4srKUpUmQeUG1tE+jMwAY6ZhmUQCSo/IVGkRHr",
	"zN9ckFT7PYbO+BGKualZn6nUkmdS/ZoLFOwSfemla+wpBekOJcJF36HDb1X3odLkXxujw13wXAn4DOxE",
	"NDj8HTOC9uEa2xH9uYJjjLoWFKFCbeEqVDlx1uUGqI8qUFlWPD7Rslb6njP8d+hLQ8uKx9GcbdyFaFnJ",
	"nAiGVyaTVppfP4i7xukH+FKln234y4AiuNru5CGehzGgosNOE6pBLtAmFjaKj86Yb4qg8QV25mgcKP6M",
	"1lDktFN+1WqI/JZUvUEfka11rW38HPmVGi/BcxoHSBRFpUimWEnmwPY9+dqQXNHRNCWLdiOSLdStYIh4",
	"SITTqbWKn+KRLWWbnPdexjF+uzv8A533wz02365siPtuKF2MHxTcYo/o+fopO/v7Gqe9KktGvj4nFaP+",
	"8i349tv/+s+L1+EiuPhu/fDNhe+//svFX78NHh6+/Wa9fr34VrmQ1IqpSCnK5KkaIadVEYqnmL4251g2",
	"R3zkM78Rof9K1KjuOVBznZujv+c13UILis8r72g3UIuEEU5D4SOPEokr5VLu7m4u72/uPCa+Dhdh/Axe",
	"8rN2yMQ+4VcT4d8Px6VeM38DVmJNVb7v3Q0O+eOtS/WGPMFE5+7p2iOBgy1fSboEzOQ1RkNiECWH6e3I",
	"RHuTzxxC8QgfGkaPigULgnaDRz9KVlGe74GA+2m7h/iZfI/XQvEhaWESRBts/SjJu1M28ZsXoi3a0Sur",
	"oHfjeHp6P56kxcpfk+ubterceEOpnBmK6WWTXgT7vEi3F4W/QSf02fb7T+iH35cF+PAZP0rH9D9pAj6d",
	"nZHRPIB1moFZDCcHWVSrk8goikf/m9U6SjYgW+2ySKBn8kf/9X/+WeF3hBWpiyOU5nqBk1dnfRKfVmaq",
	"3j58ystBgYtqYGocVU+haeRur1+dnfeCVYcehRZRIKHVdys/hkbYL6In3FAu/bVQkegobUa1SRR3nses",
	"FuyhwRkt3NTiTLsK6jyL+6rxq483uV6JJnOG8+pjxzpk8QokZSU39Xklz73wCgvXf8CZNXZJM/CUBthf",
	"iqO88NBD7WIyIuP09fws9vNitd+FxNLWlBnPmUzAF63fwxF+BmELs4KgheqFVspdYP23StA1cJXjn2aN",
	"NTTCK3aAaqefebRJ/GKfgZXcjag0my4ga4XpxWD9kAAE1rcJLlQsQmuntsjiHloii88EgtOlFYoVRC1n",
	"OwDbyArvBmKabHsbwS98CW+Og7QhnhI8AlaKZV4wHRKdZ405Yjp6ORMME7erNGci9cAdptLUnZ/FUQIY",
	"KZIUhMSXtKB7T1wyCYEqriV99/P1j7gFgXjl8eohSsIV3m3y3WSmububH6IkxLtIIRS6ZIRMr3Tbhy6R",
	"giRo2qzalgN7ao8gaiR4fGXQmg3wx3j+l55tvMfzKTeQzHRypAs1QISLNWsxlfvc+2OQFRfw7z/1krfm",
	"DrS7xw7BU9URfUYr1AsyjYBY09WeV9B5mUML5fm1NyVlFWk2Fkq6cnbGankqe2SkZGiV9m5atvO/aniz",
	"hIZUTbknyj/YmVRQIVOgNKWfJE/f1/MzEISPgp136bc1tkRXd7ce/pKdh9bzJElV/eHbLHqCE/gZvEgf",
	"7nk7IF01kMFgJklXgd/aJLE/2CWCmJd8J5gGSvhL3wU+z3itDTHZF+nWL6LAqzdIfn+ufS8zKGJeNNkm",
	"AWFt43RfbutLR0f0AjLcHd4tW+HFRFo1V3pHsXkSw6qMXxu7aKLdvF/ymnnuqDZ8d3eDnvwlBy01q7fV",
	"q7Rzhy9U9ZhL3CEm50fzCHMLVrDjcB/XV4vcgEzXa6UDx+XV+7feXdkQ1ta04HLn04TgZfdSqKqr9wbF",
	"KqbY94X2Tq9JeXtlYCRyFqVZZtttv8EPe9B39K7Iw4JGZTln1VrGLbSaV0lD29UBasO7I220upDlie1q",
	"Gj/bbJIBo36bH3Zl0G+t0UFzwHl5coejLyrIpSYOLuoN90NGvfUWNmgXw9BBOxHig3bTDyG0+RZGSLN9",
	"UULa5eCE3t4cNh/sRDziaGOx94YDKmXEVckA5ZJgeInarR4XRiAIs3MrBTY07E0ev0XvxLVLnNl7S2ZA",
	"0EwuP/dZ4QOvnV888qmH1A9X4EuRMceRSot6k/qh9xY+iAknElmZ53EjJ4b8HgIqSr8DGQ139JIyp2RQ",
	"Za5Em8ZW9so8jwVRnNp9wQ5o1jT4E4/EWpObEatekcg8tMF2HrM0Sfe5d39z511ffvDKO+NlNMK/9wBz",
	"TEpL8Xf4a+8O/ca7pffMcVNPUQgy5ZZu6QPMwwLsdLTg3cKnEEcc7NFBbgyeQFwLXmcD1xdKRAnWP32z",
	"a9RH+w/USlkKpEFC55+j3SoH8RqfL4erwOdsnHiTAOI13iGG3tXy3PM/+96X/1z81cvStPCuloJLEYVf",
	"5Ct/j2e6ruB2fp4/80/A97mId2fVEvrVOW3nV2H36AoWDf8SBtTxou2HB8ehIfvxVqUN/H11vQJN29dq",
	"XhkXPI7TZyijIIH6Ff2wc1eDvhXPknAnQNYw3EaJIlTgA94SPVBhANWYGnghtDEUwcVMYVgiMzCvFgfZ",
	"HKLysvPeTSE+kjsQe7lDKinU2GtWkqti0PELoR5EJ+OwPWxedGD0Fj9RCXMUAk4oW2c7P0Uh8P5BnuOq",
	"Bt25qakV5TlCtyo/0h5lc8VchZTfg8I/b6qZzhn5iB6oP1+1ouBwciShfFwqmkyf6wzkj6YyoorS/6G+",
	"8sf0eRWCPOh+u/ozMdiAJMx1pvbuMX32bshz9da2abiPgX5r78lz9dYS6MRR575PRvwGAFGeirKLfRat",
	"9LOmcOxLFHzuk7zqDVhHCfB8j3Tt7XN8rTXIgF8Az09wfAJODI26gTuH3CvgNKBTNJ+k2ykvmMNP/TxP",
	"gwi1AJvMYJM+8ZgayVaql86zoHpd1K5LVmU2WVU518qByAW1Jqq/b/hReBnPz1JSSzIDzDUB+rdq+D/6",
	"tnoLljiGyBSntyrFQyWPDWpKlsgK/6L2MufkQ/S69I80OW/8Fr+o+rFoJdZfee8qidVAT5aL1zjWQA3c",
	"Iwm+TnCsDu+ODUonLyNQ0A/Y1UZH1yvoqaG7Z+WfGebv8d/pvqh9D/8mP0DJxfF3+J/7jP6T/GKzCxbk",
	"f8xH35D/VR8VC5K8AfoPpMnyT/Ir9DfIMvZr+Cf5uqoWC/+d5+Rn6J+0nzgqgsfGX4Gg+scOZFEaCq8g",
	"yvYpqAPuPqWcuD3KMa+QcaHBBkEsICj8iBZTL4eHMLyhe0fefBF0fxyl9D5nJqbUxg9R4mcvoruSSsnT",
	"WiKEXlusL5D0iMOM3uIv6L2fssAsarogTWuIedXdyxl/qLlH+pQLvCjO6EMCKmNeH2YjCxErxUqLWRd0",
	"jUeoLtB8RL2bUqNo/HqfafxafSjgy07th4we0fm9+kiQElX+pV7D36j/UqvhQnHENaWu94T6cGqGRe8J",
	"9U4Ed1dIgIggs9RKNZFkadHUf60+9H3OYyAEGlgS3lcpNVkMF0f15j10r1DripysyjeuqU/wZRdlXdvF",
	"T5/C//jjNv89/337++Pv4Z/+lyhvu1JmgmH1uHmVs1AdFbUt9M+pd4t+jbz14GmVoisdKo9+BAGInoCH",
	"LoEw7kNzoj7//rfft7+//33z+zvRTOFHmUsiQBLb2nQ7tPwN+MEqBj0zaN2/4Puvz1lUgBUuI9PBlfB2",
	"/CKhoLsZvD/XuoPZEoJ7Kkkt4Ae7VVlpuhnUQmNi6QwH6XYLSpcee6Dgyw7/I6epIZPwIl7Tf5HJr/1F",
	"v8b5b8p/oVod52f7hH7DWzGdYumccuflKzFpCRMsRH2Kfys3rhaYiQpM0klW4DFaPf5r+ML8issSEw2k",
	"PgJR3kfUO26TJDAUqBOdhcIljds3q2/+8uFvV2fnZzd/+Xh3i/5/d38H//9n8vd3Vx9+VqqL3+qfTCfu",
	"/ksQ+3invdr62eeer1Q2yavBjL7z3lY9ee9hT1/Pz0hJGzNLA5ccvdMj+LIy23KFqbID0qTpPnAHMbpA",
	"aQJemOlia6vRYWblv/A/sECVspSV/2IE6nywPhFNgQKA3lPutZ9fsYUbQRA8KVEdcqFJPwsEFskpkds/",
	"4z+/+/C34VKaJqsyA9fglmhyhsFtMbytQQCYyfuuLSg4I2EPoea3RmvxDWynqiVmQhmQelhDx5THRgaD",
	"JOgiIIlah0GxSPcFVybvP/xyj6SR/uM79I/BEvnkZyvwZZcZAf+/Sg/yV64C/IefeW+/7DKSooh0b8rE",
	"/avmtYpHcJNuPHKFloxAp+DmoGmRONblapS5hqYfTeSvqhJww+SkmaIU/5Y5Y7q/uvWuSPHW9n6MbonU",
	"YxyqXdRXTicS2iEogyKG1CuCPZEoCXSY1FGqiEnwpVyhKM8C75u/vn71zZ//69Xi1eLymz+jqkRREoIv",
	"7B3VKkCzfeDb3lD6QQB2EA1+UfjB40WePcGe/V2xzwCqLH9B6m6WG5qLBBR54McguwjQjp98jPX9+Vm8",
	"91EQIDkgyYMLPwwvNrsA/xElQeuPRe2vb/BfEJ2bXVH7Y0G3S/kuBRc0fx/88sFPwucoLB4v4mgbFfTT",
	"AJXqrf4q0pz8EebFBbLY5Z/kX+vaM2v2mTjdXOAASvw387skCsAZLX8ZoaQ5F0Hs53nzw3S9zgHtC5/S",
	"k3+xw6n65IluHsWoXmqWotdHVXouUO5wUg7tIg9qEo6TYNKs77i5DNDzjzCFb6ZiXSjjI1Q2DPpwAmBQ",
	"nvMhDYBUQ7lWK7RW+L/9rClv6RlmilFNaCSi8LYk9LOwTBIOakarOVpJcPoIg/2BPu+h53EmOs4oWwek",
	"85pUomEo9afhBgvLWxCdxQxUD6V8F+IKN+vdgGSDgwvp0HNO1M3//eP/+p6k4v31Pz59+uOnM1qyGVn0",
	"P306+/TpT7+Xv/iTkU2o5Te/w+85vD5KAz8qymKMoKNzE1ptmsAlg658zdB3m06+EZWYThNGsTKF1Hb9",
	"2lZL/zqrcqJqoL1DX212xUpQnboXdcZ4NNYAiM7dXjwSzuLhxnBi+OoaSHmTZgsy+C7Qr0PnCxlyokAG",
	"p/zZzxL8qklaYA8iStYpCul/2G9Kj0RvgyrmFVlPS2p4viJ3c1W1aYvog04tD2saCLvZ+x7uqDTacOxV",
	"nQ99Q212VGWhxTMoxBXcWfO2+PKvxcVflxc/+hfrX//jd/jHr//xJzNzXHrUA1/pvZ999v5B0d7zODcK",
	"QDUDJaP3zeL1dwyhd4H/NuC9lFsIXT/r5ygA1csSFb4qK/XWTmefvqNhYT3llOyB6cAYm6GoxCSrdlsW",
	"F65eg/w/y81oXaPj/ViOjRkwKScys6H+w88idIRN9U6WF6uiiLXCJ8X8ErMZFUzV3b13f3+Dc4OsovCL",
	"KQKwIgl+HcuKXiO+hbxJEnBzWfZ9GZM8yXgT8qacjUI1ikMTYI2ZYd6RO77gDhTeNe6vUo20mKX27l0k",
	"ogxjxlHadA75Q8S3Xak4El7G4NhYtkd7506KsJWj26VghRMAGBxhk8UbruXwRfz6sFHbsx41qvJRDRpR",
	"eajq4qrHYZxw2AxDqA0H9Cwqp4iDZTDDXpYA0r/3RgPvdLTAWZTkiGXGd+/ISJuhe0WaT+O2wn3uQK/1",
	"Ps0rZYVI3BU3OrWXcSlJYYMbZkQLMdtkr7xbgwaPg0HpXYo+hqHbA7XyYvewSQ8HrV6R4ZdvVTQuBA9w",
	"n60M/gNJIEZiFqleaUZqCgx/XcgYR4CXw8zPVjQ18W+GxIiecBibjn/4mffjVIe/7PFL/aza4OvVHfux",
	"T5RHfEVS7EaUJYI58mUPYkXHy+yZryTyFzZHfiq9xcgc6FZlaZWvJrYOob+KX6jrKBvfihx+lk1yQCof",
	"Zle3MU2fZhek5p3yUTYtNz2ng+jBh8o6B8KsVBo7262zru4I1x3hGj0NlA/F4qGfXv8HcZbXPDpraC2B",
	"NvrVMD7cMZOpYyb5Mox2rqQ8jBkfJMnf4ZRPjqY8EjCp+wRenr52QzRyFb/MMMkN1n/A6lml/bl6rHUA",
	"Y3T0tUGpTf2ww4PxEdE+WKj4cZumQUI9q43+9sNbr8p5Wy/QPetBv6vKYzvWuZt1ls9onWZu04JcJnB6",
	"/k/+UhPQfOztiQ71ZpSUK0/4yv7l3SvxZQzZIybMGGapkzEjDXZTZuSHfTkzlu36KnkrCWuW+YEkMVFM",
	"6iWRH+DUfeiZnBbXVx5x2RO37iH7dbvwD2HgAO3dw/X2m6xYP5cVtdju9B51hJx5UIAM6s9tlJBAaCa3",
	"pyjBHGqVxVpt4G2UoVnVJC2ZNvM6T9maG2aN1ZYpIunUe8xpR6Kwe/yq+KXF5dipTJ1SRfZ0X4R+0bc4",
	"+5VOXXZ5SXZT1dgFhdiVarAX+wSsHvbrdb2ORCPDGPo+ryhY/TwqP+AmvBvKE9I2M4DCZmq5bl/rtPiR",
	"NIDbpClpVJ/37uADrYw0pKVVvvXjuJlwWP/tYSeoAihsziOv7v1xnWbeFmzT7AXaqSLzowSEXh4Ve1wl",
	"4E/tge2iHVB/x9toBzzpi2bB08N+vSLZNHuuLUnFSdMDqXSIK67064/UWdHprqzB16vDssaVTpc4Gqxf",
	"hyR6S607EDytQJLuN49qoKCtvkXPeHdp8BkU8j7yJDSGkjv4H5XeDEBEuS9D+FDuzwA4uvripqGC2j7e",
	"+xJVn6YxuXe2CtKEMchVCY5si8rH7TJw8e2rby4e9hvu9u1hjxi/akc9LJc53V03tXiWFx74AoI9tqKk",
	"O+42ep1mAQhXLzQPbvdc3+x9uO0LQOj9H5pwFZ06pJsNCRofWCgGLSPs5ibd5LR06A1pnvSWFyHIeCXn",
	"TPVJOsDVdrZg2w+YsEVafec9MmveL7m/qQWgWoYDHAKNLpVCgUSKjDMezO7ey8ZT+PnnMQZz7+efZSMR",
	"ag1xXcTdLgbF6n9Alq6CdPeyWqfZs5+FJF/MQPHA1S5Q2l76HJIQ2N0F7M6rukM/8gsffoR+hIeG866l",
	"291q638pjwvVC0ldpduSob+hJ3lkMKu1nxf0jdWSKL7BT3rwyQtmrphGRXOp3jhvelBS210ax6stBBve",
	"0dbSX5Rrhc5KH1HASRbC//963lF3HLaNGkR1Usk//WKVJkHzlGqxWJx3FPCAe7WVH8dpoPbaP6K9nbeE",
	"T+Dd1NWjn+ATq3W4AuEGrIosgkoVhCZQGW7ARdmgBycV4o9GP+MMvyBffY7ieBXs9qs90oONeTjXlvKG",
	"k3P7C1aw3t+iOPZIr6F3VS+g9vgNC6jnsEz2NXAS8GNemlHJbAhmhv3MvCWWP93f315+4233cRHtYvCF",
	"pNxtDjMHSTjCMGE3ymN8vXoAq3J5i8cM5I9p3NNtLKsi+3H84kGseH5Z16AKYPR2fl54PlPEjg6gGlKU",
	"REXkx6vnKAnT55X6DvEaP+jhB3FRezgH6b7YpKROSA1MqDso41XVvlVeZKAeCaCgVrn1/0hLqDIfZwjV",
	"CLIvD/t1v2lHS/uawpPsxjvevOXHP75erS0jge5JdKCwtgCFKAnSLR8K65GgwBlCfQRFWvgx27n+GrQH",
	"gxqtxoFrSUJ1z46IoIk3MHsY5S4JD6OPwA9BRgoNUCg0swcqD+cNDkjzfkKtknTgaO+JexNAr/frU0T+",
	"EyOS6WkI6kjjdL1/Ltf7iqlDShqseltn/hZoSFOjlx/h4+wbzM3WvW7ZuqLYrYI0/RwBSQodkcsMH2My",
	"2qDG4nSzzyLtxn75eN1saet/ecQ5okssf/v6L3/+i9SvlHRRYQBDO8fnDTFY7RAf8uib8RvvYEPedRiD",
	"ppMGO4Pbv0ya3tPgZhANAsPce1MdaHG2pnGUFyAB2aqsDv3oZ2FeLyRES+2iMkEX0Bz6If43DstQmZ0b",
	"0lFVRxp3xI4BgXT17z3YAwPrUfb4Hjbr/R026y1xlD8mQ0iWwNUOalH8VoOsC24OmRDSHOkHHWTXdkyD",
	"9ga0P3I+Xngp2Q5t/S/kGoOWEOJJ8d7iTSNuB257ql2kelu38Lmw3lYGUIZ9vYY+4oe8u51PXg6xTqvH",
	"tBhgfG5BRgDsLbfpPkGn85jPwtUWihzanDh99gsTJPXPKSKqC+8mffb+6RcgI5HTDXNe79gAg6zaMTly",
	"XQV+8AiGTCwpWniTpp/3O+8KNleaxB0AGSYP9rvQL+qy0Md7Q7dDL/AlRdIkKwdIsT9Gm8fVOlwhjafc",
	"kfcL9AJ/ijaP3o9vvI/oWdpinD73bRCuQq09a6Ral5sgodR2fp5D6UBHRw2PIQMoMpnUd6mzHX9lI5Nf",
	"91Jpd8EjCPeIaKFZvRDDF4HQ89cFwAOsRzLs/CwndBUZXV74WYFDEkcb3QNYpxme5AzgaJ/WUNEQo2SD",
	"bVvPPUzlx2DFiNvyogRvJlH1HThCcgKN+twn6FerEOyKR3XI3vv5Z9Tyx32CDScOXH4EIRKC2C9oaNlQ",
	"I50+eze4NUxfk6mmtX6ZS+CDpw0rjbI1RMx/BukTyFZp8Qh9gM2K3XPxStPDNwlwfMl6H8dK73hPevE+",
	"wF68e2x+UFhqXncVhQT9v/dRIGbpKZmARr8qvqwMxHT8/ZfrK688+6xG6d3/b3owWYZ7lP1DDY88a8uH",
	"HfXBQcQij1d6CFMbJNlTrh6iMBowP7DnCl8/RCQOEd2gZ3aZta6LLyvsyZhYFySsX6gD0zLu1d42TvN8",
	"4Iui5Ua2Au93b9KcJK9KsxBklVk0SYMjg1nqWnKCuvNRVAPpGOq8iqJDAyqyl6GsHXrtj7AlJLBl4zmK",
	"qFilzwmoHdrSTUz9erqKekA9kUCND6jZr+dnVhiE8ryt9A1yLodA/QE0spofIFRQeR6L9RPyLfu7lnd3",
	"Nw1/kubQJbFtw5qm3iWN47qKdo8gQ5G7WNGhHosvDRdZrXGGgILzsY4C5KtGCX6js6qs0ip8xJfu1Bun",
	"W+k3P3m3NMy2nCMUD7HaZdGTXwA8dsUy7Hc3OCzCu8UPV0P9DF7i1ISTCvu4STfe/c2d9zfwQmiANSh9",
	"SxOV8dtd0tP6G9oVv4If3LEGaRaawRSjlmnB+TTId2QrhGwCviYxuLdr6Ng8+bH3AyieAUi8++fUK48f",
	"vF/IRol4qDlU4h+u7qpY97Pm0KJk8NDwQhoYmlD1PPlZLtY9mzh98GNs9HurCZpFJPfeoeaQPRSs7S5L",
	"A2Pd3WLiTdZfBv6dgdxYjyRZyGV5/0HSNapEaqpjKpuS/oovibHumABqcZdCzP1PHD2IMbcF2zIUpXSG",
	"/qrLX/+/cfRAQ63K0BR8+tI67PmGJZL/S7n12tkL72X3OfZy+BcL4LfITqKfNQP+ETeccyt/9rtnsvPz",
	"/DnNQkHJ3QB6BJzflCVv8evwrnbhhPqLi79erF59z7100LicUjbU7pgZJ3N55Ze8rMaLpgy9eRx/WJ99",
	"/y/5BQD6xOrBRxr6N+E0i2ZS1jq5V0lG1rsZBADOvZWvvzZv3PxCMfMcFY+eH8deVPwh94LHKA4zkHgZ",
	"yNN9FrC1Trl3YGg77KTiKVK8B5OuPR9dCYGfF1kaG7oNZQRfqJEGfLBH6ufcO3Z0CvJuadW8gLJnJro5",
	"HF5B2hJHCjqjx1Caw+AN4Xmfrbu2Izp+PCjwPumfv3z88caDvfobkBQeaggd3J+RkqurdSTM79cghdA+",
	"tnikLg9uG9OxEb6OGCX4gmyUJiuqMzrbXXr5zg/ARQgQ+QNCj95BxD0E/s5/iOKoINfTmp2scgB3IYWw",
	"7GKzu+DRh7tFH0p0HHsPAK4s2qqTlgAuHUAuP5Z3NnH0AhI+P0rgJh4PMAP5PsZHRzu/CB7Vp3TZeFX0",
	"OJpNNNNcfo1ajqh4uYMoI4Hyfh4FK3+POVMEP2RJ4McV3h6LYkfryUJR9+M3aSCB/ps02G9BUtDj2H0W",
	"k1by7y8vwzTIXz36qAzWqzTbXNLVIWmICj9ACABbP4LP5fvdLs2K/4c+EqTbM6p9yi7v8I9anW1fXjHP",
	"XcLf+PFlsM+LyzjdRAnel9YqvN9eI14AQD2YbDw/Cb2tn/gb+Adpy4uSvPCTAOSvoOf6FIWgDK3xGKCd",
	"N1QxagfAqTn/lNC28sKHqioJvTjd5K8+oTt4RPDLGYXichv7CfCWt9dn52fllYazb1+9RtuZHUj8XYQ+",
	"WLxaIOsMofD9b2eXyHqCor1gH0Gxz5Lc80tAZWlaeCAJd2mUFPmrMyY703V49v3ZO1Asb6/f0h9gqhjh",
	"HHX1erGgq0gOFBGjhcNZL/87x5cwsJrrUoLlKGhRZnbkd+SWY71aM6+5cnyXhEV4i0qtIoHYb7d+9lJO",
	"hGAW4Hr4mxyaqzdRHqRPIHvB6Voug3ifF9RzjEHBMcpv0Oce+aWXgwLCCi/4Nn3CBypJGgIUNInUSZRs",
	"YuCROmX1+cetXZFu4SKXt46hf1Xv+jrxAj9HXM82fUL0Ya11L0y9Z+B9BmDnpZkXQO+xdTk4gi39ew8Q",
	"7UqkrvmbakEpXQLb5F5B5S9S9RqXFNnQo2pg6zvO7dPmtOJlCNH0olmFcxw2p9UQbARrywCGrtSvX8/l",
	"IkjbQH4YR+qqJbcmcGQIq/I1RpO7xsvzJm+X5pzZu03zgjf99emDvzpokamPEXOW6GpI+AS9PeiG+GGY",
	"Qevz/AgS779T7Gj4dG4Eg6qeX5HnayPrNxJoY3sPo0zFR8cgKxLdvHKhrV0QA/RDGr6IQUx/EgGegEws",
	"jS3tFzz6yQag85vv8FjkovmDHxIezJREiySSK9N7jki/DSMFkYa/Eoq0w8C0GBAtYRsDjA91GVTnRmgr",
	"y1X4OJgaRUF5zANeBtYZyB9bOKG/Zw6lPpY/5a1bvTvSLErY+ITSbaBZ/Vb8yyQtvF2a59FDbMzN6H5p",
	"/sw+Aj/GOzuJ60E2JaFHLrfmHnmM44T8RL+xhnjS92ieh/jl6ZSSd8YzSrepsvlc3l6fe49+Fj77GUB+",
	"6Ic7dlPIm9hrnL7V2rSicY82qQozQGf3mvkUTzG9Yx3Srdal/5x3zbkfx6UXBkJv+c87LwObKE0EW9h/",
	"3n3EX9ucdP85p72Ip369j70qAbLZdfATklMsXUtmiFkNcumc3eWKPO9lGHq+l4BnpqlXn5KrDIQgKSI/",
	"zj24+FAdUr7Xi4hz/cYv/B0lM7wo97J9ghzFCI357dXrkmDB7DmmNb3r5XsvS2Pg4ZJSIGwv7lUG/AKU",
	"63vWw8KXy8Yx7d+YBwcPGx/J2YAXoNfpa8u/W/y1+5FlnAE/fHn7BdHchgDIQ4ccZ0LRv/wtCr8qECx+",
	"wvTV4N0eXvDhS8RBDH6cRYx0g8j0cf2G7md2PjIZZDsThWfnrYSI4l2VEs9RIoLwG3h5v+tepJ/T4sd0",
	"n4SGKY/abHdpEJnmTqEW+Oed91F33Vg1rrFoUWhp0RbjqAaR2ZgEDJWdUQcDd9P3EexiP1AQYj4WyONa",
	"ePhoXogNGprFyIYGB0L1NzSTgI+DmT5GJkiTfB93H5LUPagr9JSHbzDx3Uz8E6s+ZkC6mJ2DWZ+e3j5m",
	"TtyIWnMitw//qI/PRyBg0+GjXXAYHPxuh+/r1RapvyQqenwQGrUetZ2+Ei9SY1HvA9c1Hs3vq3c+F+dP",
	"Z6U7zr2g/9d3FUsVq7eEB+ACipXFHP2/1hoO8QGHiDVpQgsUhgXalOFZjGd4yDRnePIO0wfsaXtyjdCY",
	"5e11my6Wh8qQzvNjj5ch06EUMkOn7pLEP2msAI2GykAMPaWOyf8Jt3/scy+cFI01uKxHJ6ivSNmZV6Rl",
	"ROQ6zTw/fPKTAITtWGQ6XhyYKNw4VQ+dygIKpmz4el76AY7Uli9qYy/H3u0Hobe8ev/W2+FYxyznsnHB",
	"FtwyP9A7lGfS/6+i8MwuwRZswap6F1Uv6/zskeRV+v63etmDi39UGaZl1RFQiC4NP5C5El8N79PJerYW",
	"kQIKrp1kI46313QvDqePKerCPYBhsDAYChpRPd0/xbdFMxCnftgvAqSGHrtnRPWe2jC9STfebZYiWDH0",
	"wevF6/HGUEc4Dj7xcHImEoaJJ5vWB0d3aBlB+oi+vbh+wwn2eEMvDZTPksY6hedQT8ugaO0qwWnIp6Ku",
	"v/wNbmDUKJSkJs7eOku3nLQugkMzqZTXO6z1Qm6UcbZc5Bv1Tdf57NRJTRm87jIJcxEYLvvks3Cc09Ej",
	"a8d4Zozr6fwYJWEL8ORUieBO6tQcDsRHc57m6jtNgk+Kr050cumv92kYrSPkZNWm+A85/xyUi9i3YVQ4",
	"rTyCkzeiPNV+0MACc2zrnL6DYS2RqL8oqAoFf49k2s+19/fM3p62weVifqAd2N/GrfdxvKIbS6tGrJy1",
	"E9j7M+v+UK0lRRpZXrVTeFrWgaQnC1ovKDqZp73MmAroBU9Nq0JLz9kkDco+2simxessUQWSnh1JYIgk",
	"eCgFqS3AGtZChyEopZ7PDZQHsrBFUaSFUP75AHX8wGHwA3S9ZhOXIhMPhUAUpmyRMsArF+lI0D26F+ZI",
	"BI7X1gHlrgiaPkgmjztdPQN/cDGmP8hG/jiH8KDCnoz5gzsf1aBCbuGlH8S5Ujz88urGi6MEpVf2C3Tj",
	"j+EVosTLdyCI1hEIPdwB/x5PHC+DuO8ekRn5WTtFBRwhq6KaqSeCeEXzGx4MAR+fGm9RgxpLk13dKFnD",
	"58c0BlUg39VNju+VQiWBPt1ETyCBeC3XVHjHyChWD50kj3PL3Dgf6sua6rFlvkS9H43tMn0LC61IXrQE",
	"dJghuvwtSkLwRZGsoLAQRY3Dpiomo9s80UiHWNEtLvuXxZWTrzo9Y53MRjNXLUfEepRLPBvag46IYxo7",
	"OQ8lgYkSRXFBIRPHLiuWvTvHh/CvGElQ3nlyVUKNFl4okQzfVB3fNLzVmYOxPU3LkbZcqat0o63g2tid",
	"ltkOqZVojY5to1nTSDeQTnfMQXcsRtMdFrenjlm1x6wK9Ub/3ew6iml5z05m9Uf826G8Km5mIrrKpp9M",
	"5/L0iFCCDAaX+JMeTCgF2QAydFKAzczSlJicBvfLEhyWiVHJGBw3yjUm5bLU2NFSbgebFD2OlIzGKEPa",
	"oQeaN3HQAJxfe6wUKVng2RCkRNK4JrOTIVUQFx1+9AQkxb7j5zhSPkcqA3onSUrAZoQidfZgGu/TKk0q",
	"lj2qI+3wpOJ+HVVqkCqVKo+OjaVJI0madSpkNipkMZ4KsbtpdYypPcZUrD76728fi2K38tcFyFZ0NKts",
	"HwM1EvWn+/tbbwmfLuvrex/h00NpVdgwapc2C1s9QpZVPP2nx7sKwcQWC+LhogcxKwbuAKp2TqCdmeGT",
	"4Hwu0rWMY0+ICrt8r9Y4HQPMj479SbJ4NVZYpEMsGFE92lj0BmaJZD0t1ShALhqh2xYcK9MsXPLZcM+i",
	"ESq5DZ3kdC+h1KGrnTxO42I7hpvPcA8Sp04KXIhYI6S4k6WD8fyt8ug6Mo/WvaHa7bDsOqNyvLtB3n2Y",
	"SusgFuw6CKQjp9gOWbEtplNsvHUfm8ZwZwL2zgQGqLaBfEfwCILPGscE+PcmDgauYEvHehhApvW06H8G",
	"IA3gorXuS/ATyA2k9KeE2xxtHkXodJKwbOiUEdh58WAcHy/h48sFajHwVLCNWKEePDt60DyzLlcWHAcN",
	"j8O54kfNn+NFnhdjjsYktLZqvHi3EOky4dryc3WI8jOOF+kYbgnDLYe/Go+N4W+MuXa2Y1KX1j4jLZRK",
	"Vpla5J6F/Tu22TTb3KFeVDjlK3PGlWGRT8PAHpKSWYyvZOxvlR3na5nzlSmYgXtqAHvXjQJHQ5YHf6tn",
	"uMPEG2rymAO/2Yk+0XhvBjYNMJer35f9ZRE5kAKeGolzNGc18E4sKUueFhqBFe4YlqOGJdRwfala/DAr",
	"/ubsWQ+iuBonv07oALK4W61wPDhmPM4pP2rWmFnpeVHH1cCkNluNQ1aTL10e+cREa0RX1bHKElZZUTLU",
	"6GUGjsY4ZmdyZuQ422ec5WLb0r8WuWf5SBwBbZqAVtVEKky0YRPNsNFOHc1bHS2mVEcjbd0dVW2ZqlZS",
	"RQP3+GQudVlrMlPmkpaQBo+Zta5P9Yny1jXgNGDNYKAvd13H5UD2enpMztHuNWA8udQsedAag8TuHJmj",
	"sSU0dmO1Wjx2XRmYtHI9uOzaYI3HPqvoGe7dW2ZQzqE/akq7ttbzIrXZoXUYdDViW1nYdLntE5SzUZ1a",
	"x3BLGG4NMVFjuWuwNMZzO1s0OyfbPtvdJcQctWyR8e4ajeO8TXPeOrpJhfc2b8EZ6ttpqEPQUIupNdRo",
	"W39Hg1umwZW102CSoF8eb/MZvE8hebdL293GTgvdw3N1m83S7RJ0C2zhuKm51ZJycxL0jcKKu0Tcg2jx",
	"+npxeHGTyagGp922nHC7b9o+l7DvpMjx+ebXliWX65lU21467ZOUtnE9XceRSzlyDWFRZcmtJMt2dmmO",
	"rvcYTPm8smK7fNgTkOU6SkqNLreZ/tqpqgNRVYvpVdV4zIBjza2z5spqqj+HEKebVeFnG1Co8eU36ca7",
	"x78fypPfpBvc0hES5Oy0nh4xzoCEwW253j2YcBZ2AxjwqSE3M6NWQ+l00rCsQcYyxd0xFkdtcw1SbXlq",
	"jDYr1UbMkB6FzQzMKHXdrSnqI2LG4RztY+WqmUWeDUddjUloajtJaUUh0iGjT0d+xnEjHevMZ50V4N9J",
	"MzPYM0IvO9sxuT9rlUeWSyWrTO3wxvL+HV9skC9WUS8dG1nTxpU07ZTMHJXMYnwlY3+j7Jhee0xvp4Lp",
	"v6eGT4FslT9HRfAYJRuNqGiiU7w7+qxqZDQZCndLcIfGUzZJ42WPhvMVzPfp0b94oZvgYfDNQUIPTpjf",
	"TW96eA7wHNXUWQd93Yn4OgvRW4rwaZl2Vh+hY6D5wdWiVaux0XzNYtqG6lHU/IFrstVCw4r74b13x4ag",
	"MR63KThW1pqPv9kQ2NzhKTgLnay2vty19uCa7uxxi9zovrPjvPmcd1+J6STC+RKjyIkLZQWT4s5CTUtb",
	"CSTMIk2uLtN8RW2HPFcelePRDfLovVVWByNg08aLeQGnuGaouBZzUVyjUgiOm7fHzfdTWoPJhgJsd7Ff",
	"qFD1DeIVN+CVDZjg6+/L0RwfVV/N9Px2GudnXy6SfRz7DzE4+37txzmwyds3odOCOcWB2k6i0ZzQ6tIv",
	"gtYcyfcR5WhOO4C7geMx3PmqL6E9LFfdrgsvG4lz3g067w1hlqkGc8bv8rddBtaRKsneVDj8LQBuUmMP",
	"wLLrYp0jlwLcKd//L7/r3ACUQHLU+uyo9XKpZ0Oqa4isApNuSbhaPuaxS9aILu0BebRT0+lastJFSFkS",
	"lRoX5QzRTJ3txZTOtmXa6US87UkJpxEd7b7k0kBOaRnH+FWO8M4/ndjTCvikb93EqhZPZJoectf7K4M1",
	"AikkMU9WKSDH/IzC/PBke7D9ufwN/anF7vCdadhOT0pH8e4UwTJSC1zvmXzjSJwDJnFmxt3wDaoqVWNE",
	"Ukp+5njFxL4/6IIYZayLwG1UI1mMgLzGrDh7MLVruhjPNbVLmDiexDZPYtgtLaLgs8YV2Tv4eyPXYmFD",
	"x3cZlpnOE7wBW4GDRSld6T6XXRm49b7hOhnSDvBeaxO/I15mlYvOsoYv29dW5WNxd1X5gaPs8tTvpzIq",
	"wIit0ryKWg3M8P3T8r26XOdqBC4s/mgZlWqR53PNtByT0CJ33yhVEx89huX4JWccP9MRLYLbot3A774Y",
	"WmHP0G1QZy/GZlwYQbF5ICiXR0aBWjoYlPbvDgdN3ulUUCxd1zdNG9TmTteplzmol8X46sX+htgRvBZv",
	"Xnaplv575yLYrYJHEHxWo3nvr249/POh5W7ur26vYENHGPnGzOlpcb0VOhic0oXuwfLC9q4w2gZUuZkY",
	"aTOzTCw4J5OBJVElaF0sc7bykTjKlp9ekF2dGmXLiLMJq6NH2JYKxmx1m04NUR9PNQrnJB8rZ1ut8Wwo",
	"23JIIuPaSdiqiY9OXZseknN1iJIzirvoKFs+ZdsJ/E7CtgK+kYo2zl5M67papWyl4shoUDuErbR3x9ca",
	"5Gu7tUrHXrUyZiYL2ZyKRT0g3bIYW7dY3wo7stYeWduhV4Ztmsn8aQTmwuGQyVENz8W9oiUn/4QrIyFy",
	"Sfuw+SOlc+vzfnoRvC0U1cHNAKAnzVuH6DC2d3o4ztC4NRA8tbwsOaAagQjuHJfjg8V8cGOtmrRwXQkY",
	"tHP6HHFtpKapYhX10vbsakNyvvox88a1pZ4VfcyOTG7BlbhkZTHTpJRPT8LG9F8dzSymmdUFRIlzrkHS",
	"FPXs7M/M3GnrdHSX9LZ1sT1yumssjqM2zFFrqCQFwtq8ya54a6eY5q+YFtMqprH29o7gtktwqyqloSwA",
	"Hpg23Y0fM5GOgjKKuMWjZrhrc32qFDeLnCawKwz0JrlrwBzKck+OyVmavzqMJ5eaJQ9aozDdXSNzVLfE",
	"vNUXq01113SBSSvXh+xmB2s2kYWqnuG5feyonF9/3IQ3u9YzY7yZoXUYdEXOW1XatPJenKigjerVOuJb",
	"Rnyry4ki9c3C0kyaDGeNZulmj8B/d0gxRzHbZMA7RuMocOMUuIZyUiLBu234db9UG05FHYqKWkytokbb",
	"/Tsy3DYZrqqeFIiCwA8ee9Q6Z7ht3AJ3l3GFG9elCcf02sn7nxb/HNB1odBBC6XmbKNnvRyg5fGKVLNC",
	"FO5pKCJmpv/RnFh1S0kPHMWKlsOS+ynu1bmcZlzOgIhDUxCVNbdWIScsuyUtK67gIeJnBdLLg+So5Tkc",
	"odqbUMWrNRsSVSQQCnRp3TLpgJu6KgeAbOu+kGMtOb6TBJZdBABGpQ4aycNO1xr1xRZj+WK29tmn4IxN",
	"urce4otlxQrOSvdGuoy/SdcefAJuoEFWRGsICpDzzsxh43mRZoBrt7LiBnXcoShu8c3qsq2azvj3HmQv",
	"ldJgOzxYW1auyGlt7TmYYiGN0aK200c6AyRF9kK3+RxMlv4Wr1a0iAMgo9CFLO1qBtCdm9EjaLfLQZSd",
	"cGxQhTcWN7Z4CdlIHDVh7jSMUSNQB5BXbWsTHRN5+RvTqiJxwUAK+c55bWT8mqMtvSHiNNS0EYtwqOjF",
	"PjczNF0t5BTgMTIsfN04H8qFOz6B19DJwgwSVYmHewjyeSI+taOI+IFtWoLUxRvZMXmUW3I276id/sWU",
	"Tr81Auw0vP5pOTB1Fabo8yPB1A8wYbkEnmbLofb7aXkLexV4DXe451lHn1QTdAI0FVlWVm2Ua8TgC30m",
	"oagwiVTGo3TavJJ0uiM24rhiT0rjZ5v7Ib3I7QCaY5u8j3gUjvgxR/y0lpQvolo2QC9UpeUA8sNWxKSO",
	"QNrrHfL3bi5eZb5sSrVisyFQFIWlgzxpI57s+wj+hC7OgWB8FD/KURO86BVlgHJJifdpGK2julb+Q84L",
	"aRFg9W0YFU4h23LyRpKiamHqC7/fhc7VO6jdPpLnF3W1oODkkWENukdC2+CGZ5LXye/I7n+EXdx6H8cr",
	"uqe0ar3om9PeTi1mpURPBT+63mqRKrSBPtdSlmHYANecGYJesNU0NuVy2CQUqk7aUKfrYYtGkPXtWARD",
	"LEJTJoXCTV3OXQYCtNrEnbMi7ZgLdALvBN4J/CQCr+FMavGFLaUw4JZbp3oQoPdYd6zDfeXDphzfNLE1",
	"G+ZR1ch2Rm21xEfz+tyRisz4e0BHYPIITG1nUhBUBdspeuOcNOTMw6xc1MW4LioFjq0opxPxVSeNcmqp",
	"AQO+ai3Prh/Eavnjl1c3JDmzYplUUdb4ZRC/qWi0YWm5GzvvqxtZ8KUfxCvy9aGcFqLVOb2M8yXWGLQv",
	"r256JJdfXt0MSidvEqyHfbCHoTgB1pc15WPLmIl6d7ng+WVP8YrU0r9jCR1mivSSvFNYmK1kKpX5tsVB",
	"A3BZKY81iqtc4tlQKXREHOPYyZ4oSYxOUdITEBbLDp7jUfh31CQw7zxmL6FmpLSoMwgTOJtWj/gEYldp",
	"Rzune4Ju3cGewfsAMrXRsXU0axzpJtIpj1koj8VoysPiFtVRrfaoVqHi6L+jfSyK3cpfFyDrU7Hzp/v7",
	"W28Jn9Yu3ClnYGHDqF02CftUNJdN71o8/6fHqQrRxOCdC4werKsYuQOo2FmhdmYmTwL0uYgXKvcpgoVd",
	"bldrnI7w5RO+P0kWr0YDi5SIBTOqxxaL3sAse6yppuqDFQ7R7QiOlV8WLvls+GbRCJUch05GupdU6jDU",
	"TiAn8rIdsc0ntgfJUyf1LUSsESrcCdPhOP9WGXQdoUfrPkoVUp1ROdbdIOs+TKd1kAt2XQTSkdNsB63Z",
	"FtNpNt66j01luIMBewcDA3TbQM4jeATBZ43DAvx7E8cDV7Cloz0SIPN6WocADEIayEWL3ZfmJ5gbSOxP",
	"irc5Wj0K0elEYdnQKiNw9OLBOFZewsqXC9Ti4alkG7FDPdh29KB5fr1DW3B8NDwQ540fNYuOF3levDka",
	"k9DeqrHj3VKky4frC9DVIQrQOI6k47klPLcc/2psNsa/Mf7aWY9pvVr7vLRQLFl1apGBFvbvOGfTnHOH",
	"flFhlq/MmVeGSz4RE3tIWmYxvpaxv112zK9l5lemYQbuqwHsXTciHA1ZHgiufnsTs2+oyaMOAmdn+kRj",
	"vxncNNBcLn9fDpiF5EAieHIoztGg1dA7sagseXpoBG64Y1iOIJYQxPWlarHErPybs2g96OJqnPyaHQMo",
	"YwW9wnHimAE5v/youWNmpedFIFcDk1ptNSZZTcB02eRTk60RvVXHLUu4ZUXRUCOZGTgaY5qd0ZmT72yf",
	"d5bLbUsDW2Sg5SNxNLRpGlpVFanw0YaNNMNJO300c320mFIfjbR9d4S1ZcJaSRcN3OeTudTlrslMmUtj",
	"Qho8au66Ptcnyl7XkNPANQOCvgx2HZgDOewZgHKOlq+B48nFZsnD1hhUdufIHJktIbMbq9Vis+vawKSd",
	"68Fo1wZrPA5aSdFw7+Iyo3I+/VET27W1nhe1zQ6tw6Sr0dvK0qbLcJ+ioI3q1zqeW8Jza8iJGtddg6Ux",
	"tttZo/n52fY57y4p5ihmi7x312gc822a+dZRTirst3kbzhDgTkUdhIpaTK2iRtv+OzLcMhmurJ4GEwX9",
	"8nubz+x9Ekm9XTrvNnha8B6ew9ts9m6XuFtkDcdN2a2WrJuTtW8Ubtwl6B5EjtfXi8OOm0xQNTgdt+VE",
	"3L1z+bksfidFkc8377Ys41zPZNv20myfpriN6+w6plzKlGtIiypXbiWJtrNMs/S+x+DL55Ut2+XJnoAy",
	"19FSaqS5zbTYTlcdiq5aTK+rxmMHHHdunTtX1lP9eYQ43awKP9uAQo01v0k33j3+/VC2/Cbd4JaOkSZn",
	"5/X06HEGJQxwywXvwYezuBvAg0+OuZmZtRpMpxOHZQ0zlonujrE4gptrkmrLU+O1WbE2Yoj0iGxmYEYJ",
	"bAVVUR8SMxDnax8rY80s8myY6mpMQmPbSU0rSpEOJX1CAjSOJ+m4Zz73rID/TrKZwZ4RktlZj+ldWqts",
	"slwsWXVqhz2W9+9YY4OssYp+6djMmjavpGmnZWapZRbjaxn7m2XH99rjezs1TP999b/3UbCKkqiI/Fgj",
	"Ovrvv1xfedf4MS8zERwNWyQNHmtsNGeuT4/7bSOHwXQDBD2IYA4wB/DBMwHlzIwbD8eTi80yjj1BKVjb",
	"GbDVBuiIY35kNEdiGwxyWyuYtHd6dHJttObDopUVTn187VE59/1YKeb2Ws+GaW4NrcO0d9LOetKmwz6f",
	"qqCN6t86RprPSOvKSSc93YalEZbaWaN5+ttWmWslKR4vDFppOI7PNshna2unjg26JSNOenA66mB01Mie",
	"RnuJRyMAHBlujwzXU0/9mYIiIDU81Rjx+ytSjHIwE35/1VWe9nC3CMyknhb1XcGDgStd6R48N2zvCsNt",
	"AL89NdRmZsRYdE4mBEuiTHDBabvMtXwkjrHmM9bs6tSIakaeTdgdPWa61DBmGeluFVEfUDUM51AfKwVd",
	"rfFsqOdySCLz2sk1q8mPDsfcR3SuDlF0RvEYHZnMJ5M7kd/JHlfIN8IaO4sxsfdqlR6WyiOjQ+2wwdLe",
	"HQtskAXuVisd+9XKmpmke0/Gph6QclmMrVysb4cdf2uPv+1QLMM2zvqVD+FwehU+REtO/glXRkLnHnkd",
	"xPbEn15YcwtGdXQPK4LYxugwzteVQOSZt/EqICoJzJKDqhHoYFf+cAArLKt+2NICBi2dPlNsr/Shqn5p",
	"O3eujsvJsMfzrHvYHJnchisxylaKHp6miI3pwjqyWUw2q0uIEvNsvtyhs0Az9Kitk9Jd4tvWxvYoalfo",
	"cGSmWkMnKdDW1qocOs10GJppMa1mGmt/72huuzS3qlYaygRoFzfEg9OrbfjgB59BEkpp7uOubciZ7FMl",
	"ugWVDRsg6E11m6prOBNQztIAjlbVUE1sljxsjcJ3u5KGAwycpKBhWxmYtHN9KO8B1QyF1o8hvfXrsLSH",
	"5Vz746a9Z1nLsDW0DpOuyHz3rnokczVPVdJGdWwd/S2jv9UFRZEA71HDUCgiDAXu7NHsPO0RWPAOMeao",
	"Zps8uCtfODYRrqGdlKjwbit+rWnFWTLc6ahD0FGLqXXUaAyAo8RtU+Kq+kmBLFgHm2jl73YKpHeDxWRI",
	"7h+v3l17DIJy7rYD/moJe9KlDvWlf72P41UO0CN2/X44f+ilTovGpivOMtdkfdW89iZkvCJFMhy0XlXk",
	"n9Pu7KOpty3pBVRN20MAaNUrLvvgcM7MElrygiW9O9/XjO+blPLIlWcdO3L5G6KblTjlpK0GSt6Y4yfn",
	"HmxaxB8L9YEYsMj95Dq95JtOn7dcd8f7WuR92TWbC+PbITIKDG8L+xqQr9ypI8L76F6b42g5Xl4Xrrso",
	"jyGwJs04VT4TF3Ixtgtpi6Q4DR9yUmrCoAdZi1vwg1gtIm95dUOCXQZmD10Gcd/NZZPXbCD96qamqP69",
	"B9lLpan8IF6Rr01qJ5uGFC3O6UXwlVBjwL68uukRrLe8uhkUnmcQq4fNwWMkTgD1ZU312DJgot5dZB3/",
	"KjlekVowHRbQgZZIL2aO4sLs9XCZzLcNDurfne8dLTdCl3g2oXB0RBzb2MmJKAmMzj3v45cVy+6d40j4",
	"cWwSlHcefpVQM3JX25mD8V1Nq8dtAqmrdKOdczZBt+6MzWB8mUxrdOwbzZpGuoN0umMOumMxmu6wuD91",
	"5Ko9clWoN1S2sxla4HBQiFfZCP8ssuziqGK7yrc6LYZzzaxmSeWTz9QcXNpCj6gu2s+ph3XRebAa11V2",
	"0sY3XQhrUV2Svp3LacjlXFfSxBFkHduhE9ZVib8smusPHeFcQkUgwKkL5joMwrJcsNkQlnIpUWAtS7zr",
	"wJxxm44F4+O7Zo6d5EVwdQG6i2rohWcau+X09iy8xMW4XqK1wK3TcBMnJRdMeokzCN3qu4N0sVsudmv0",
	"2C1TYHXBWy54ywVvddiiuQRvKbrI7sjNRW+56K0jFxYXvuXCt5xBcPFbLgTDxW/1i99yysMFcDntcQoB",
	"XI0tLckOuMqfoyJ4jJKNRvmKH/Cz3h19VrWGBR0M118nrZaN0uIGR1O/QjTlp0ejCgDE4JsHhh4sqwip",
	"fYnXWWB0VKNmH/l1f+HrPARwKUSpZbpXY4yOAeYzwMJ1q5HCAg1j3qTqEceCwWvSyGJDi3vivnzHHqAx",
	"IrcTOFZeWQDB2bDM/PGpOA+dJHQP6WvturWd3OMWvPE9akdb82nr/nLTyWoL5EaR4xZLDGa5nbWamLcS",
	"yZlFHlxdtEU62w5Rrj4ux50b5M4H6K4OwsCuyZfwBk6DzVGDLeajwcalGByBb4/A76u9hpARUZ9L2+ip",
	"gTz+Mo5/iJJwquhUq/uN6PQudON3ZqAaqV7khk+KbSX9Rv1695Somps5iyzf7sYdcExVZO9Wt6hP50gb",
	"dKTRJLekeaih0brhjfSC+HagjntN2GypYuAAeNRrg464Ho24juZ0M5wvaQoktEH5eAeKoxYO287eQVPJ",
	"ViwJwyeLAN7FuBjEN6VXnAGY2vVcjON6WuNEIndN3CYDYtztDPxdsc+APsURgiBG3AZuwMtAkGaDSY83",
	"uNUrOqojIj3KmT4t3qOBE5YCqS92j7DEJgb7hiNOjLrDC0SsY3m8yEOZDC3j2HvTAITdGEPZaFxQIdd+",
	"ha0FqgUTtjSCAcumFzfYHKCh80vcQeP1OjxsCmbyc3dyebSES3OlZ8O9NKRBbrs7CRlLstVyG49csEZw",
	"Uh1fI+FrtISi83SvKRQGD/qcuZmO3ikFyeLhokRYm46wpaNGyQjcaaPB00Y9ldOxh7Zkhrl7aad05qF0",
	"FmMqnauSErS673Y8sz2eWUPhDNiir6O4IBPfeVn+R/zboclJcTPHGFRHJ/P0rsETaLCpc9EnPRhlirIB",
	"GUWnRdjMLFIJymmAvyzRYZkKlozBMcFcC1MuS40ALgV3uFXR433JcIymGe3SBI007ngEzgM+2qIreIFn",
	"Q+4SWeNazU4uV0FedJKMnoKo2Hf+3I1tPmMrQ3onQUvAZiTPqLMIE3mgdkv4CYWPaklL5fuE/Try1SD5",
	"KtUeHbtLk2aSFndyOmQ2OmQxng6xu3N1XKo9LlWsPwZsch+LYrfy1wXIVnQ4GplHf7q/v/WW8GnvI3la",
	"NfeonF6FDaN2abOw1WNkW8Xzf3r8qxBNDOa5wOhB0IqRO4CynRVqZ2b7JECfi3gt49gTwsIu76s1TscE",
	"8xON/iRZvBo7LFIiNuyoHn0segWzhLKmnqoPVjhEtzc4VsZZuOSz4aBFI1TyHDpJ6l5SqUNbO4GcyM12",
	"TDef6R4kT51UuBCxRshxJ0yH4/1b5dN1hB6te0O522HbdUbl+HeD/PswndbBLth1EUhHTrMdtGZbTKfZ",
	"eOs+NpfhzgbsnQ0M0G1DSQ8AB6Z7ZoDeRn5UoF5YGBOvqMmjPiZgZ/pETwcY3DSgXS5/38MAFpIDzwAm",
	"h+IcbWQNvROLypKnh0Zg+DuG5Yh9CbFfX6oWn8/Kv0GT1oO+rwbKc/4HkfYKioXj/DEDcr7+UXP0zErP",
	"i5qvBiY122pMvJqA6fLvpyZbI7qrjmWXsOyKoqFGqjNwNMalO6MzJ+fZPmMul9uWBrbIkstH4shx0+S4",
	"qipS4cING2mGAXf6aOb6aDGlPhpp/+7IbMtktpIuGrrRJ5Opy16TqTIX6k4aPGr2uj7XJ8pf15DTADYD",
	"gr4cdh2YA1nsGYByjqavgePJxWbJw9YYZHbnyBydLaGzG6vV4rPr2sCooevBaddGazwWXUnTcOO1mFE5",
	"r/6oqe3aWs+L3GaH1mHT1QhuZWnT5bhPUdBGdWwd0y1hujXkRI3trsHSGN/trNH8HG37rHeXFHMUs0Xm",
	"u2s0jvs2zX3rKCcV/tu8DWcocKeiDkJFLaZWUaPt/x0dbpkOV1ZPw5mCfllgzOd/OYnULy7pSxs8LXwP",
	"z/RiNseLS+8iMofjJnZRS+nCudo5Cjvu0rgMosfr68Xhx43eYhqctMVyupbeNz7dXc+TIsnnm51Fdi+x",
	"Z0oWe8lYTlPcxvV2HVcu5co1pEWVLbeSasVZplm632Mw5vPKqeKyqUxAmutoKTXa3GbyFKerDkVXLabX",
	"VePRA449t86eK+upAURCnG5WhZ9tQKHGm9+kG+8e/34oX36TbnBLx0iUs/N6egQ5gxIGueWC92DEWdwN",
	"YMInx9zM7FoNptOJw7KGGctUd8dYHMXNtUm15akx26xYm7FEelQ2MzKjFLaCrqgPiRmI87aPlbNmFnk2",
	"XHU1JqG17SSnFaVIh5Q+IQEax5V07DOffVbAfyfdzGDPCM3srMf0Pq1VPlkulqw6tcMfy/t3vLFB3lhF",
	"v3TsZk2bV9K00zKz1DKL8bWM/d2yY3ztMb6dGmbAxvrf+yhYRUlURH6sESH991+ur7xr/JiXmQiQhi2S",
	"Bo81Ppoz16fH/raRw4C6AYIeVDAHmAMY4ZmAcmbWjYfjycVmwlqXagN01DE/OpojsQ0Oua0VjBo8PUK5",
	"NlzzodHKGqc+vvaonAN/rCRze61nwzW3htZh2zuJZz1p0+GfT1XQRnVwHSfN56R15aSToG7D0ghP7azR",
	"PB1uq9y1khSPFwqtNBzHaBtktLW1U8cO3ZIRJz04HXUwOmpkT6O9xKMxAI4Ot0eH66mnAVRBnscr9N1q",
	"n6vw4g2m8+7uBimjX3IVdpwOQsSPs60dEynemOTTIsQbi0pRzHys5v4zD7TtJ0UW/SZoTYPI/WfHcdqU",
	"dw2lVr3vRk8ccWDW2pLL3TkG524bdLfrUsbXAcasmBbZndQUi07VG7E1w41LNYsY77i3P/4PyNKLBz8H",
	"4Z+cv36EDDe75HPhthMlOVWgtM2L1DtQnKA8jeaUHjSJbcV2MUy2mlB0MEQ27Axp3RmaubvOi2lcZ1tU",
	"0Cn5zlPSQIltv7kI+pRTu7/qWU0NrTz5J1wgEQ90f3XsxdXaE396UZItGDEIryOgR4xkG6MDQiTngceZ",
	"2TwOhKcWmCUHVZbjIpXG5cIi+daNs1a1oMiWFjBp6vRCIltDNRoRqapg6qNrjcmd7h4rW9Ra6tmEQzZH",
	"JjfincyRlpzpxEKepoiN6cO6QEg+faQnIZ3noC1IGomCdBZohi611UNYFfFta2M7h7EqY3HnsQbPYzV1",
	"UsfW247RJh04zXQYmmkxrWYaa4Pv6G57UY86WkmBCtjE6YMfd1La+GdQDSHmsNYGdyvxDrerS//pi/h6",
	"H8erHKBH7PryZKpOgISWLjcDOLLIXeaP35zIlo2GnN7GoRcoa8bEOB7rZvnrJFKAF86akRF37KhjjqXY",
	"UDFqCauyVZhF3m9D6sCl8T7dNN7ztyguK7fLyn0AWbnbZmFmSbhFkj6b9IbueM/l1B4xp/bByYNLke1S",
	"ZAtSZDvd7jJeu1S0LuO1VsZrpzRcAmunNY4pgfUmS/c7lo5sHz3hX3TI/C2+YrHPQYaoJSTkRO7/vQfZ",
	"SyX49Dcqsl+u0Lx8XzJrp8VOlmu7oYgouXD4Qc2f5bme+FcHh6OZmRA0+VZdTtID50QKfmHL0RT26nxM",
	"gz5mXYY5IqxsMi5/Q5cc6kwlj01UEnvUZk3Y684i+UZLzk9dsRwRWYk1z2x4SpHwnMudqC4heHeCQmDd",
	"S3NpJiQMZac5KCkHfmyRU+0H7TMuxvIZrQUxnYDTOCnFMMBNfCyK3QrA1nMau6ef7JOJdoLtXaD2PNoc",
	"97Tup/v7W/RS+R3tdc7RTtxpOi1igbOyDOSq9VQ7MWu35hVpO0On6ICsBZ9jC3TiAM4qncDtr41vzrJZ",
	"YhoUB+R4B4O8Q3t1RRLe07Jw6QhR4BQHaygw0icRkbCpKmyqQ23gZhXURifezfrIjo2wxUZwlm421IS6",
	"oCnEUhmVE55rdmhCMrIj6AKreLepdCDeFTChhHBegndhrIQzBFO4q4sZuKv7Xejc1YNnPIx6qnG6Wa3T",
	"7NnPwkHcR5xuPNqOKET5R9rPMV0Srk3gabEi7JrX43vISqvRIcwMcnkQaaUSprOjvkCsFrlHptF6vG/Z",
	"Dz92j6yIzYhfyQgcLWKIFmHkWyTemhZGiwNhuhds4cqgYdiq5K6YUEOIoeuYjsO5JEbXbDYUh4LgKHAb",
	"LP51YF9zto4I85P4dI7g4BEcSgDvYjb64ru68uH0+ow8zMUUHqbN6yGn4WJOSmXY8DBrCc4foqQHr4Ge",
	"Gl659YcoCQfsT2ec5RhP62mxHfidK5TC1VUjOOCTJquzTourmbHvcHKt8h24gzbU4SrYYjhEfTpqw2DE",
	"B5rkljwbsDdaLAdSDmL3V7/Capd24KB4VKfY1ccYixtBazsbUoQvbgo8iEEJeQeKIxcP216fu6wiuawi",
	"gngXE2IQ4aRVZwRm4IMuxvFBbXEgJ+CETkp+2PA/w03mb1f9WA/0rCr3wTA3XDP7Bjb2A9kyHw3vwU7v",
	"abEfDDgYzJarrEaEVI20TRp7GqDNiFTjOG0ypMKnVUqE7WZcYkTes6NHDNIjlbAKBN6YpdLiSxgdouMx",
	"S+0Vbl2iRJy77DiTKTiTThlUoE9sCAzr4DkKxZj9ckQKIVIUcN/FqdiAPWneGYo5uLOLMd1ZWxzLyfiz",
	"kzItll3ZOVRNOs44E1doad6FllwUiqvN5GozTVObSc0gzaxek17Q9kQp+h3b4ko8zbfE0ymIkKsK5apC",
	"CapCOQviCkm5QlKukJTtQlJOz7jaU6721InXnoIrtctS6L3px9OxIUz4ZIm2VSYRhurpp+Ut7Fng89/S",
	"3udeD7+cphPgacniQoQx68NgjHwqcZWxV8umQGpgQ+wH08aPsLw9mQPrbmbZD1//kxm26WhKRuA8TcOe",
	"ZiUwXBHVtAO6OYyagi3IZSRmToXyXu+U7cplLzoM/pNds1kRoB0iI6BAf4ySUAB6tCvLKTAlns7BwHwk",
	"h8qRlLwEREoY5VII79MwWkdN5fyHnMciCPD6NowKp5ft+nujyRK7PHUIWMqWfDre3wQKAkn3i5qCUPD7",
	"tn4Ug2wFkiKLGgzALgMBggeRVHVOoN5oI/CrTlbin+bUinIPBt+j37wlQ1QrXtxoV1aPjvx0VW1LD9Wo",
	"NhbztOLJGi9fiUQFn5cGXSFHOHPWh9v2YNsvNIOzEMP6l/vYER44vGdmghlQvFjlXOodtQWPWWJbpEvX",
	"EBzrYpB1qU22SNdo218B8yLXUxUXU1NTOndCOq0w7kNDT7F4H6Hu7MnqwyOiiljIzIYqUpLzc12nOU1q",
	"TrJhYa25zHOV1FNzyF/cdUhJQJ6imJV8V5eYlUE09kwi6cTZxCPfIywm2SPYisw5oU3CpLE5ZvcHlWSa",
	"IegYRo5qCXmcDh63uWruc6qF0Zji0+TNcl7Zd7LqWqxZPewHbHfFi/e+3oWUBTuEku9jlKJoCr598kpa",
	"2pIuoVXuytWCH4u+aktkW+b1rZMR+iofUgqtS4fwQe2CiQ6JIcrnww6piNEAcijXrYp2lPCfzBN0gUm8",
	"wCQ1zCsyNUysUh/Ivw2jwqn8+bmmi0lc0zFim07LUZ0yvsmQiwrFGf6ETG7f6u9MM1zL+zPTjVoIRwby",
	"NH4CmYyXpb854CMQdv5Pi1hJapCg4K2AopZmoGqFBh5RUEjOJjChwnR1cJCc2RlBtQpWiRi2m7asVOtp",
	"i4aR9+8YGFMMDCuYXMWgZ9i0LmwxCqUkWloqRYlsUdcvDHJHOPg8ITV2ROQOg5HZ8DvdgqqQKosROE06",
	"xwnYTFxXxwTxmCAV6ehKctNTOEgLTkCOypFejO9I24qzORlPetIoGyOO9A4ILsCpUETswwqpzgHIpHG7",
	"t0D3ohvbpEzdoIEefkRtbbFOi0+qvXoFdwqZFzU+CeEFh8O2M8exWNK+xVYN5GCROzNjWa643btrbDdt",
	"iSqX1RbpJO/ekU4Gw36YqeYrEE1zqUU8MZpHJxBfbjNx8+qqB4wYgA9Hnp+IZjsiIqrCyGx4qE65VaCh",
	"qjYMih/jsjrZm9QfdvfLZPfLFASoi6myYr5I+06GjskzX4zumdtisU7GNZ+UxTLmlfMuiWnGObHtCM39",
	"UV4DY9/8JKmldqAdXGsNVonEJ+kxRsd9z8s4MjEw65bWOjckCXaFS2iVGHI3wuxTQztQO0AhYq9pdfS5",
	"oAH3vPiagwNNd7XrcEiXefEtPDuoRLLoRvkwHtUxQHoaj81F6PAidAYp9mbN1YcoCfUPyNFT3Sfj6wwh",
	"IhSVAf8hSsJe7uKM6zTiCT2tnQZ+5wqSpDy9whYDPtmm1yhu9I+rp0LUzJgsOK1WT5dxB22Qw/m3tXMQ",
	"9el2DAYPk9EktyR5iHHR2kIgfaDDxItNDG5UrBA4wB3VCXPlusfahqC1nc02hC9hCtsQg7LxDhRHKxi2",
	"nTt3JCs5khWBu+sc1iC2SatO8U/qai7GcTVtnZGegK856emoUTezKkyswGTEMVNiVyW6X1B4GzMYZWHe",
	"Y6Mx2Dk9LTKjgZDeld6fH9MYeHGUF7BVFnPPUfGIBB19uYmeAArML1daZNKmxtts667nIxVe54rCsoYX",
	"L44SkI9Qgz0/avNkq6Y6Ern+hdU7rM/lb1ESgi+KXAczKr7nixqrDlS7bVJZe1emI9p1o8kgrmF3fC84",
	"Il91usFRUoANuh7pCJD5ECDMIs+qXC8RPZGF7WREFCWoHb4r9ulORHjGcR3d+S2fJVHAfufJGYM9oisq",
	"fMN3Vkc9PjlzVmNaH9bqcZ1cJFk1aufoTt6/O8AzeICnols6dq6mzSpp2mmY2WmYxfgaxv7O2PG29njb",
	"Tu3ScxPdN5kvea6bxn3wg8+SSLQ71M6xkbinmaK3nZ73TiM1L0kh1TJuBED6IWnTQWtmlmiEVLuSxH5W",
	"U+y69Lqj+LatrGB3mhnBBGZHK0StM7GhUHeICFuZhuCi2IUrHCVNezezRLlicVPgZk2KyTtQHLWM2PcB",
	"HRPLZ2JlEO+iSUwinDTrLMEM3NHFeO6oLTLEJam1TYQYd0UL/yHukaoWP2YgSe097v+I2A8yo6dFfhR0",
	"GSku0bqqUR/oWdMJZHH/p818oIm1SnyQHtpQR9Nvi/YQ9upYD4OsR0EkqCnRgwyNFuWBFYPp/K4CzcDD",
	"r3Nzj5LwwIs7G75DJGgKbIdpCaEO2fGJh3WPz93Pk/AdYoh3sR2mEU6adkZgSgd0MZYDaovoOAUPdFKe",
	"Y4jzmaWbzN/WOQ155XiVXKakVapvdlkKVfvF1k/8TYuO5e9M34Hilg5uaKZKq7mw6CBPLHFptTZlkiu8",
	"yu/xIjfoDDmm2ISmuGGa07QPdEiOU9zQnNOc9kqATV7Lau5R2gcn7ShZHluZR8U9O77CVNLRUjCEkqth",
	"OQQkhVzemXykBE/lDbpugccubUeaUpHw89HskpUeSLJSsl7zyVfaLUvnuo4VSmdKXpSBuo6IyNypg5CJ",
	"ETw2F27BTVyqAuiSh+gCdFXDRU/NSzU8Ld3iVLx5H3Ixpg9prXjKSTiR01ZOMeJDZv5zZzDFT8tb+CTP",
	"D4wSbxf7UeIV4EvBs3jk2dqij7kf7LZicOSX6CXq8G6hpAnkD/Rdvby0WQ1LFe/zAmQSG4V/0JhZFTN1",
	"3jCDV48g+Jzvt0p2cBv+pxfQB3R6scyOmFiVdyABmR97WHhGdRx45pwrO4zM1gVDHH9yu88fCT1DBFlf",
	"HG/TXFEeG2p17eWgOPeSlE4ERo/3HMWx9wC8EPrLUHMjt2KfPwKapbD8CUiQzQwF1dTyz9FuxZvlEh1r",
	"P87BOZ31hzSNgZ/wCrgxoyWGhI4hSqIi8ksrs0+KaAtND6p6hP2i/33xEX98sSQf04eRLZSPn2Nq+g8/",
	"TeIX78mPo9CH2/TaYp+j3FjpvkCjeomSjRcVgpHBdla0nYFjuyFZusgcecvbay9It1s/CUm6rgpHXg7g",
	"H3C2H168P/z//0DHhwWyGmBrys+GOX7junECkXrjF74CP9hby/0MngVmGYufs0Padqjt/vZenaEurluv",
	"zrewugswgYEfquWd8LzpmDwq5AIJHSCJT6WyDQJ5Gve6Ws+cuZaNcLm/j2UXx1Q5spq40zp8zZjVpLij",
	"K6wWRk5bKGPGtUtIlv0ddRnJbieMzqTVA9mqkzbO6ULYOpKV9e3OZA2dyWaVNHEEWseGaAWNl2pgQEVI",
	"sSIQ4NQdth7GYWu5YLM5bZVLiUIIeMvsaVaMPDasj++quVNX3qlrF7C7Ar9LXOvgmTzv9Pc8vMXFuN6i",
	"rcPXE3EXJz19He4tRslmGNsAG+CbSNT0UbEM6I1OjGEgq1jCC/aoxixEyaYHmwDbP3UmAa2qTRZBwLHC",
	"ybfGHlg6pXDMAWUOsOQ0BFXVBuixBRAnQ5gCrpBzsOgYggNhCOBizYcd4EqCCiuA9J8mE3AkWB7XjXK7",
	"f+7uXwDczl2/Lm7pjv/U9fCE3txiHG/O2u7++N25aXf2A725GSbs77W1cwn7XcL+7oT9U0DLJex3Cftd",
	"wn4FszOLhP0qrq5L0+wS9p9ywv4jlRGXsN8l7GcS9jtL4BL2O3/0iBP2FxlUId3uJprM58c0Bh5+pDMH",
	"Mm547nnEjinncG1d5uK7wferI4bNuYhB0uHFcdrwiG7iR9OMhr3xzoGInDrfqeU7ScDBRxqfd8MMGac1",
	"YfmHw1Bwuvl0Cc5sVnQQQrmhwWzVdhD27xiywUIpFCOBLEo2Nh2SzU+6PXuhHOMUVSjEi/GE2Fpe7FOQ",
	"3gn3EwWVoJa0Ku8mLkFSZJHKrgKl34fPePCRlypMTmOP8RY+eZRmeIUmhSPGR7BPIQs+nwop1aB0vEa2",
	"xhjzWlFCYrkbOPbu2yaNZisi3o4Xrb0EgBCEUsfzBFFv2AOl/QgsGFlJPwwt2TBx/84NNVljTC7YCkZt",
	"n4MsRoMbcPWnbIRLWPxSdnFMnEU1cacV9bNnVpMCjq6wmi2hLehfCSr7OeotkFF4YnTWT6dsWp96v3UM",
	"0OWzxX3I+nZmx6DZ2VdyyFEBOlZHKyKoVBz694zEmkMAUXff6DD2W+WCzWazJRcOhYieXjBn/Kxjwfj4",
	"vpyrQSkJ4TGi9NltBhfAeWfxBhQcUwkJC+JGqmFmxIdamATP2WnuMLx9Xr9eAPFR22KI9giHh6GZcVXw",
	"rc9sbxNEWwSb2wO3NRhpa4D+0ZZdVTNx+Rv8H2dvIHLuVZwej7bJd3qYb7VE/dR1y5HtJua1k+CZP5n/",
	"5ORgMj/N7R4Udg9CUJNgGW7giwP2ETiPi3GcR1uhOSfgPU4a6N/bX3yqVKaUWuPWJuESabUl/UepZact",
	"OE9WOUoKsFFBYiXyE6eyEdWE0aqOgWGvcEjtxaQmFK1GRJ4U5G7GrVpNvIq7EPsGhie8+f4fq/evEoPi",
	"Mcnn+vK3KPzaOeHQtten2ssLv9jLJrw7rTBqJwr5Zhx9LranO78oQAYf+7+fPoW/fff1Av7vNfu///j/",
	"nZ231Oav1lGg7CDO4MImd001MIRLqGnIK0jCXRolRe4VqfeAHMbQW6eZ54dPfhKAqkBeDooiSjY5i/L0",
	"4b9BIIg/IeXc3tIObIp7+RbTCXxrvgDz4nT53kR5kD5BZ1W+gJd+ECto3Tj2llc3aFuSe/sc5XuFbgtd",
	"sTT4DArhfXPY8U+4X7JWS9irxWXyg3iFBqsjkpbo7trkMUsEPyPTobJIauraT8q+0IFiaGq1rju1etkv",
	"jj28ftNLu4+ptSlKDkVvM4s7BEe1zC1MtLsKsBo62hS68J77Z3+LQoOjHpdganfqxwBNvqJTp4WeQ9m2",
	"sYAD5ZrwMSePCUyaYeWlolAHz22aj4we8xF7FDhs6PR4cXu83tv6G68Ucz53cKdU+A2KVElZCq7wMbGs",
	"8Pc7/wX6wm1ULsPwFn9HwXh1M2voNXTW+OiTKk1mrqubCz0AaPbAkxmVaaNbunRdoZFQRTbumMEBoIix",
	"3Hvy472OMq2SpSmqU57vp5nipv5eP47gJvLygh24VaYHh5VVfpGoNqk7RyGEF4EA6fqNNX/uICG0GNH6",
	"Hp/H+NJPXZLUXoYTG/+hxS6JMhiTYd7RvEQz3YaQ11nppia2WD+onGAy43SmhyUQJpuGVu43njdmeu3M",
	"e2J02fwwXLHJxcZzxUQj4OZVG+KGaauhSTcObdT5DNLUkpOpqbA+SXJLt69bDEjdHbkkzCwHopr3xsnq",
	"ekh+W3M5pfhSTwzbOjXpnxv20EFjy7oe0rmeABWDMrOiUIcIJMVgkNFqNIcHNHuugI4bMCrChYvPhmAd",
	"WiCSENLaVj5K1mnHdqQ8s91lKdQWHnwm29Io0ZYCJhvpW/zra9iBRQiQQa3Qi4x2nC2fEroE18ynHeuw",
	"9Xfd20KqD7f+Dh/Edmz/3vu7H8l5rVQ5Xa89pG08P85TL39Mn719svUTfwPCqjMvTv0QV9IhoxcElEZJ",
	"EO9DsCrbqAUClquw9uMclBEuD2kaAz+xTGGgaT4QQ9habQZZ7+F7KEBKwU3/CLbpE0A0A+yJsLqVs067",
	"56S7iIGfVVDrQtl70pBhIyiAckjcVdQjepkwyj8LEIvCibGDywtarbAp7i/abkEY+QWIX7z8JQlyEmWL",
	"IoW6ul7BJ4ZKCWe3sWws6tSXRlSx1ka6SjXMhrxwleOHBEyLWMva7ZC8/OaC8Va962gTPqt+tDk7LTWJ",
	"1jC/C9j6u6kOZVtdt5dzfsexDGp7GfW+wU+1QwWqfaPE871N9AQSBRV695g+y4RpLtxHByzmqhLhxFcR",
	"sc2ApUor6kQqiRdzGYbv/V2/PJbyg81jVXAvU6m3F5FyO/hgJxlkjSlHxSAVpBfpALjeKQkyiITl+yrl",
	"KJCr9hL2vEIyvGTTIW1l4ER9Bi+XOE5oHrffcw289NrSsOaABitT0jqSHn/MH39jWP+XQ7X9ZLGVd0Tl",
	"cQfEHRaRIM3wCEIUDJV6wA8evSjE/t7W33UdbDgVNorbscvgIhTEg0drx9d++Kv2lUB2gv9FGvi1/Bm+",
	"czb2wUyn24IxeshnMBqSpunG5Hm8Cnxy9UvlVtvd3Y13texzsW0Zx1c+PSOwV/mQfaF53GVjp4w9NLu7",
	"6b4RglO4UQaKaUlj7nEbeO7PZMpju4+LaOdnxeU6zbYXoV/4Mv2B4jP3O8QstAe+9AL40zVcRkA9bHxG",
	"BdVZlPg44LGmYc7Pvlxsoy0gnxbgS3G5i/0oaeketvN+GugbTsQMM7+Hus0RIkYEPWX9oBWHVXXK27mU",
	"YJQHMjDLYZUW/04IhWHBU2ZjoTrW8byTkmPn8+EFh6JoqfCZLZsVq3FAd1sVhFuh5hotsobMVQ/zcjcH",
	"XGiXYKZjFnim3JHPhdz/ZRfSqnvcxTOl6Vm6X4UGxpcIATRnEDz6UFqG4ZWvtBEcDUuW3CNyVkjTWUFX",
	"qbwDMjsnyZyKrTzC2atZfILG+rAoxN2SiF3+FiUh+KKUr6LmpZbAERjsKaXpXNYPel8Bk0O+Eve0jZJo",
	"u9+efb84b+cBs+4oHBCKuc5CXd30xDHIFEpkNbeAucf8jtDXpFUhZ4A6Gm9JJ2MNyrxFcKVaEzecOGg2",
	"qc8ggKwYjz84OPKAHfFhkwcS0AzTF1oMAtu17l19AtVOo8f2MTbDgC5kz4VfqM93T4oBXacpsn1QoCKI",
	"/RYQei1zW71Z+A+m7z1xF0qTR7gDRVNU6SZZfcUJGTGHVbdLIyCJ36PN+5QSLyZ/FIDQreizWOM4iW5+",
	"6YJm4CnFgoXdoZ7nTFls3WPM4rmcL8F5ufp4Y8JPpM14z1HxiKJJSoBoe4tkDUZxFj/eHIqTSCf4KDxE",
	"Zt4HKgu9s6WP2vnwiFuIMCm1MGXbp+4Odq2tgi+YZu3g7x5rBz3CaRauRWC9JbGjIfjiFamXoZd95d0V",
	"fgYdocL75pV3vfaStPB2WfoUhSA8r82BnwHyFK74z7/TiOkvDt31TZvuggot2cex/xADooh+tW/7Dibg",
	"/R0oeAclneDuDn3jt9jD751QKY1pnMsJm5mVFjnq2zREyRlm6akbsLzFClet17nLE2TFRemX9+Bys+KG",
	"VMq3rKDoy43soVNtQ6lcqPprc5YPXzD2VFYhH1KUbOJWMkx8Bascmb4fhdZR+WwpyAqvqzSUmdOl6mRD",
	"1hf81WpdhcP17PAerXQCvGS/fQCZ9/wIMsDkHo1yL4a7WegERIkX+DnwcvAEMr9yCPJHnzyT+9vaXljk",
	"HsAeV7hHs07CUScAZQTAL4HfP5Sq1Ih0HXcZyEFSeFGSRyHgCRm6F+fdP4IoIx5k4CdlYY8iJc4/fHTb",
	"oUCFWbu5old1b1L8fh1Jh/fxNE2pcsquVDsYtLgqABLEy+x2IGmEzAzSx8sw7KGMLSLC/H3IFhhe+sf3",
	"mlRnk5YWrl1j7Maj3LsoouDzqoC2oUe6WPiwhx/m5zyGP7jHjdtUGexLTMPLojf1ylctF6KcAJ2FYAgx",
	"hTO3cg263XBmOF3Kgmn2UI7Xqhk8lNAcBjUGQGMrW4OGmBspKdLytZflnmodxfD3cHSYRvBCv/Bffdov",
	"Ft8GEGzoX8DDH+CBplntQ3SXinySAziGAoTew4sXpNutL7qvh/o909oh/A28eM+PUfDoPQPv2U+Kmjux",
	"TjNBX5/Bi15H7/0vdBfCOKW4cBzlG1HxuJ2/iRKaPI67N0r3ScHrvAqwa/X+Yb3OQUHeNEpCHEjlPabP",
	"3tZPXryoANscTkH+OdrBhescRYpalA9jJEUylQPa1g/e21aajpqekJ/xeWlGDp89H8vzBdbt1JNA2EQf",
	"cYP8DUu4sWusUPpXGBx6a/oCVwpKGk/AaiQjFseqIz7RKLaeZW/9d9wmEHUHCu8t3Xb0tTt5VPQwKbTm",
	"LQg91ADfhqCmp64rLIVQpBMgOnJZe0shBjlZlRIi6G+1igQRDpsn/HXjxUSRA7CDwSiYWQl4OBNnVq9X",
	"RIJosqgejmqyAryozyOqAD/pJh/JD0fyxHpZr1QChEZ5JFCXTzZdubAgFldOOfBbZwht4bgpycfWCDXB",
	"ft2l2eciFXwnBK7aPPIeiaVAJRgZKT8NYBMn5IBQbdvbmauzM+ltKjEkOwtE6CKSPOt0rQXvazGO98Vm",
	"HnLu16HkXNL0vnYp6N4UlxwmSMJdGiUFpejQEfA6zby72w9vq7oh6ZpWf+Cbql0K3tKWbB6ulMMdr+oF",
	"nSla/QJNDGBeli7LmygP0ieQvciWBv1H41qC/+RHKFgC9ystgAFXwX5aq2r8h3LlWDCNrERBoem+mlA+",
	"W91KIJSskEGADY8V33iPKjml5FJtkXrkh0OjHFsM41D6oKWVWzAqJ5oQBq0JP9hsWGIMtfGookU0Ntpl",
	"18J9NFEgnf5d+Q6jJ8Mqe57JprAcEE+bdG4LJSuCy3bMbEUWA09H+Acc3ScYprZ5cDo5/O9B7PVqeOmr",
	"K+pVTYN0N/AEBc4nbkbmlNzBXww+hp8THwGnlEzfnPFq6yCmWnZ1J4o9jSmfl/lNk6BGgy+wFWVYYmv0",
	"xFiNnjlYRN8ecuGFFgINalKtMw+8v0bTKTj56PLUzMiHcJEPhbZT8xur95rNaUKFgP6+I36lKFHwJu1D",
	"5jiPHuRK0XmmSQONRhUq+j/5zN+gO5tD3VXcDJUZgRdS+a5L+PMptGz16ocuPWThTtVR5gCuv9eMGqOR",
	"TGp+9PEjeJDTrnBoV4L4zLr7TboRuN949Y/E/S6hPIbZ0PfN8fAEvnnUtHoyR/0ABVCIvePbFeD3mteu",
	"wCeI0d8VMJKljViySXBwPSjHym1LxMFRJRC4DldHhBRjBbRFiQZLOXE6Di9vMb6Xd8hl4uRmzJBjt8nS",
	"/W4QH4AGiZtRtI+EFHgHn3GkwBARIKt3gqQAg7pePACLWkIEyFBbEQHHj9oxTASaeftEAOlGYCLI8h8+",
	"EyAVBqOGQp8BIJNcUgDqO/4DlDQRyI5wx4/fa147frE9UDsIpAqh557fAfag/Ca35xfu+bu8K5VNf19h",
	"Ynb9TqCOwKVbTODSHcG237I7twV57m8MBK7ShpRjAd7jB9zGf4gUlMt3qvEAXNj1jwggzenFBJwCksew",
	"HGTy7dMBZUcC60FRcCSxAQyo7UYHUGHUy1fCDrGkB9SogYOUPAngjo8eoG82n7QjzKj6BwWUGqK5q1Gg",
	"BxxoD9DDciSBPDBAIlGdyVOkAqVBEzjBOhqHbzGNw3fYfIFcEHv4eAwmco00KEhc64LMtvTKu2f+ouUy",
	"cB5mnK+5QNU08sIv9tKrsEw7hoX+RzQaNJaqDzIiQW7j8ssKlyDZb1E1Kz+KUTqeKFntsnSTgTxnss2O",
	"k0MdLnJtQUdP+tKFiwZmWZRItvC0Sh/a77CrhVMiYXCiVFxR2E6ADB+2C6V63iaiNL00IXm1i9R7TrPP",
	"njBnduUEdKp7WRLtb6whiQek+7rUZNT1f/1XrWGAL/52FwP8TAjOvv/u9V/Pz6iK+/4s8JMkLXAPbQSc",
	"exnwg0cQoh3l1v8Sbfdbz9+m+wTh8fXCgz98AjUYVult4IjraRfwIH7jFGIqx9QrJ8N9muKU6ukO1IXC",
	"WJJo/hTJRW6gybj8LQoVSQDmMdl+356UsoCNQr7XhT43nIOF7Xc2e2RlgKgeqMuVPneXfOBLvRhV3c4x",
	"U5jC4ncafN7O8SrdbqOirufBFxDsIXRjZgLQmQDfIfC2+aZN6KOGDw57w7MaL6ZzDUrcxrhKS1TYSGiu",
	"MCqXXXNQPraWTPZ1LOrexFPFmEkNDUfPkEeF9qW24P8ofWzb5QnaxVIGiGLL7efn/uNOzNk8gov4Y1Mk",
	"Lwq/0OElaNJR9FyVdVRQ+Mov8lPJwtqYEK00rPDRy8SH2yjhUrzDmW9JP+UZnzQJLlrbjkR9H9CGyoNi",
	"APfRG1DQLtLM+yN0QNJ1mTr73Hvwg8/oH/AtQPYnwYYbSRWXxiEtnZ2fkabgz1BbPDbnXDBc2E1ruPJq",
	"nRoMMukE6xl+X1XZYhSIjR+IEBWPX4Y/FtykbDTnZ18uQrADSQiSABHBqIlX9Ge4dbvuMobiCusGuUT9",
	"54jdXicFyBI/9u7QJHhEOo0Vtc3x8tZqPsG/hWKbZoSu0M9t/egX3j4HjPpAjeFCdFCD5wVc/3MPvNq8",
	"8rb+Lj/38jxmq2Dnr14JxB41dTqKF89cT9WLHr7cgARkfqyxlnCbtPUTfwNCjzyNFpRmcuby7bi3d/jn",
	"1jNjk2EdWHJs5RmuhBTLYXe6bL9sj4Km2S7OgUxmX5xEu7WOZz2O7wJRWzZjt1hM8CDxrjkhrXzXdHIO",
	"NuG1Lgq4UFPRJlohXCKkY1cvjPLPQlKXh0apz9daZDLw1djZs1sDmQd9q7YeAhUktR8kcQ/CFdRx0L9W",
	"6ombi/tAFl5m0dKgAMVFXmTA39a1WFeJgAOxZ71XnGvepGFAza4kIE4TPrBoJNAskdXNDOWfo11J0o5R",
	"PknDhh923bvW+h5ymI+2kGjaf7hd67mV2Po7lS3Ee39nffuA3uKgdw3sZJrYLdD21Kvt1FZr1Lo75VgZ",
	"N3ZmVXc6wMfD3vvyrY6tDI8G2voppF67kXIMqruQ9/6uy1Uo13CqXUc5gPntNtrzbXqXwe1BsruY3YK6",
	"3YTOyprcRZQdqO0eKqs3GXpmuGOAPgehrmvu/xto8I9t11Cu7fHtFjjCoGmU8zxescc5uuU3725qp0F0",
	"IK/kO4e7u5srtlObkUzNFzzM+pyCee61p2g01rFvqK+VdmSNYd1mcbPSmJY5lwrVADwX7403Za7HGw3X",
	"6z2SAwjOm3ar1gTrcMWvUzG1sWiq27IuTSKHxoF5ZF0OVPP1yDZwXq6TYJCTl5cVAbDPPhWFt6sjurYv",
	"nQ2ifx3PgzqoawuaQJFvSputCX3d+hb0pNSe3Y3oYkrfhN0+Tuwm0aG4+wyK22et/VO335QVqxg5dXq7",
	"ZXYJ0fMa2+WsuInywvp5G/t6BxazpzbVPU/hmu0pbJqrFdPeNE+4C26+6EFvg1kgcy+LNV/W5k6472Dc",
	"ZrhrM9wWz4F6XeuYsiUxOvthmZLogMeRbYhb7zfLHbFolNPf9RfDsO+uWAfYrW3xPIDtTm5be2JtnHSl",
	"fWs1qLEvPh31d1AbY21XxereuPdo3PZYOeWc3n5J25O6pFFjKh5VgmLMXrBiUtl6Cbyqt7AVJb4tK2zo",
	"FDmHA9HM9te4pFs/3BnQL9zUxVECvGS/fQAZyqUC93lZcUE8ZV738IkVfkLa/TZKou1+e/b94rydxcCO",
	"n3g4kSdiF+Aw1ANfIol0IQD3cS39OEZzTFQCBKSKkFeXiusSjmNRVWT8ImaGfRCnLtTylXHFB+FmCpaY",
	"rFlPAi4BzwSEingR8HE6RsE4YIzGvxjE1ovw0IFOAiDTVn/X0Qg84SB/LmHhh2HN/zzatFDTXxJoyKJM",
	"sLmeYs90xDTZgtWMxPf1tHZSNXF8yYWnzSussMAMyEZLKyzNInjkOYJ7pAfuUzjhakDNBJeKeLapiFWy",
	"BdpLNKwhty5rcGfWYP2MwWrqXGaBZ7Fsi7GUqbEyNFeHWYFGDTNSD2CCPMPTwnVOSYOH5wseGewmTyos",
	"pyW2OxnnB3wO8t3iz0oPLNFkUx/MerJknuuzAwHmrLpTIXtv/ML3bmM/Ad7y9tr7sAMJ/H+9DW5K5PoP",
	"TOQlFjuZhveDjZduvkuVS5j9nDO5K+jz+rvo6due0/z0bfdMf6B9HNOUP32rNuvly8Pphw2CYJ9FxQuy",
	"eg9+HgUrf188nn3/r1+hzcEZY7FN3Gfx2fdnl0/fImtEWv+N2r/l1Q06Yad/Btz0++/9xN9EyYamAq77",
	"C7n3Rz988pMAhN42DcGfKvP6A8n3y3RBPrp7jorgMUo2H/extEuaPdh7iHQ6juq9XsFdZO2DeJ8XaOPX",
	"gqr/LPCL8D3gLUgKccc1k1DrMCtuaDxD9dFdkWa1cb0BQexn4MrfFftMOjEEjnljkMKREVTmtd42mb8t",
	"56pR4/n22vP3RRqShKq1bKv0+TLZKtPoj1fvrpe7Xe0jRN0pLbPi2/xIk0pL2tzE6YMfq7b4Dv2aHfVP",
	"9/e3V48g+Nz8EEl2CdzmF3nzU2JveQ98JEqj+d11gmOgGiC6STc/ptmzn4WNT2+zFMdr1D699zOojZkP",
	"3/tRDDJ8KtP6OK9/tKv9/bO/BTQTdfXpLWj/3Wr9NkuhDkXrwkUBmmS4YsQrI/7qK+8+9fynNEKoyAs/",
	"Kcgv4G+fAf15lHhRUoDsyY9JmmU/Y0piPsTAe34EyacEZdXBD12EIPZfvBQN4ZX3z0eAzrmwp1ikzYKa",
	"ubf1Q4A8R9bD9/ZZ7CFS0cOe2Kek3AvAh9Z+nAM40ijP93CzT3w6lPMZN3HO7nuw24davn4D34saFQ87",
	"p6+8/5PuvcBPPiUFHPE+p7/P2UzTqRfAGcW12BEFjn1Kv6haf+Vdr+vvEuUe2v/A8UKhzqIQbdk+Jejh",
	"KGcd52i7BWHkFyB+efUpqaQIe7Y15HwEeRo3cPMRJz7vNDQYccpq/64FUPxJ29rUvr4H212MLgPVv4kC",
	"UNdwgtHmUQFy7495tN3FzVqsaISvvDv0E4LLPArRCYmPmZtS9yF84isGMaBzkH9KgjRJQAB3AkXqRYX3",
	"FPlU/a/oTKUZRMMF/TOMMoCY0by2PGgYtdesuR+iLyr/o/aLFDT/vq8Tn5zTAZJO2I8SFOtCn8UJ4JnG",
	"iij43Fot+OE92VQwn+LjL+aj+6u24r6/Eili9A1fD7c6u8/8AOQyMNRPyHg70fKobJOl+x0IaZAQS7Ii",
	"QcesePEIPiUsUYJgUmR+yXfffri7x3okoLEAAbffl3TvJYDmUCtVVa35VRQSfQh//QyVLtKHePdVH+Y5",
	"+k3ZaY2Ev/3lHg0Jfkn6/5SgN/Vruziod0pOAmmlsk2f+xpo8Om+NZhVFJ7XJ2oL4BNRvoV9QOGMgqiI",
	"X1DjdBJQuQu62WhQUjXRaUGbfP5LDjIU2vX116//XwAAAP//n8EOtOt/CgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
