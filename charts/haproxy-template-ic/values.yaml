# Default values for haproxy-template-ic.

# Replica count for controller
replicaCount: 1

# Controller image configuration
image:
  repository: ghcr.io/phihos/haproxy-template-ic
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Controller configuration
controller:
  # Name of the ConfigMap containing controller config
  configmapName: haproxy-template-ic-config

  # Debug HTTP server port (0 to disable)
  # Exposes /debug/vars and /debug/pprof endpoints for introspection
  # Access via: kubectl port-forward pod/controller-xxx 6060:6060
  debugPort: 0

  # Controller configuration (rendered into ConfigMap)
  config:
    pod_selector:
      match_labels:
        app: haproxy
        component: loadbalancer

    controller:
      healthz_port: 8080
      metrics_port: 9090

    dataplane:
      port: 5555
      # Minimum time between consecutive deployments (rate limiting)
      # Prevents rapid-fire deployments from hammering HAProxy instances
      # Default: 2s
      min_deployment_interval: 2s
      # Interval for periodic drift prevention deployments
      # Triggers deployment if no deployment occurred within this interval
      # Helps detect and correct configuration drift from external changes
      # Default: 60s
      drift_prevention_interval: 60s

    logging:
      verbose: 1  # 0=WARNING, 1=INFO, 2=DEBUG

    # Validation configuration - must match HAProxy Dataplane API server settings
    # See: https://www.haproxy.com/documentation/haproxy-data-plane-api/reference/configuration-file/#resources
    validation:
      maps_dir: /etc/haproxy/maps
      ssl_certs_dir: /etc/haproxy/certs
      general_storage_dir: /etc/haproxy/general
      config_file: /etc/haproxy/haproxy.cfg

    watched_resources_ignore_fields:
      - metadata.managedFields

    watched_resources:
      ingresses:
        api_version: networking.k8s.io/v1
        kind: Ingress
        index_by: ["metadata.namespace", "metadata.name"]
      services:
        api_version: v1
        kind: Service
        index_by: ["metadata.namespace", "metadata.name"]
      endpoints:
        api_version: discovery.k8s.io/v1
        kind: EndpointSlice
        index_by: ["metadata.labels.kubernetes\\.io/service-name"]
      secrets:
        api_version: v1
        kind: Secret
        index_by: ["metadata.namespace", "type"]

    template_snippets:
      backend-name:
        name: backend-name
        template: >-
          {{- " " -}}ing_{{ ingress.metadata.namespace }}_{{ ingress.metadata.name }}_{{ path.backend.service.name }}_{{ path.backend.service.port.name | default(path.backend.service.port.number) }}

      backend-servers:
        name: backend-servers
        template: |
          {#- Pre-allocated server pool with auto-expansion #}
          {%- set initial_slots = 10 %}  {#- Single place to adjust initial slots #}

          {#- Collect active endpoints using O(1) indexed lookup #}
          {#- Use namespace() to maintain list across loop scopes #}
          {%- set ns = namespace(active_endpoints=[]) %}
          {%- for endpoint_slice in resources.endpoints.Get(service_name) %}
            {%- for endpoint in (endpoint_slice.endpoints | default([])) %}
              {%- for address in (endpoint.addresses | default([])) %}
                {%- set ns.active_endpoints = ns.active_endpoints + [{'name': endpoint.targetRef.name, 'address': address, 'port': port}] %}
              {%- endfor %}
            {%- endfor %}
          {%- endfor %}

          {#- Calculate required slots using simpler approach #}
          {%- set active_count = ns.active_endpoints|length %}
          {#- For now, just use initial_slots since we have few endpoints #}
          {%- set max_servers = initial_slots %}

          {#- Generate all server slots with fixed names #}
          {%- for i in range(1, max_servers + 1) %}
            {%- if loop.index0 < ns.active_endpoints|length %}
              {#- Active server with real endpoint #}
              {%- set endpoint = ns.active_endpoints[loop.index0] %}
          server SRV_{{ i }} {{ endpoint.address }}:{{ endpoint.port }} check
            {%- else %}
              {#- Disabled placeholder server #}
          server SRV_{{ i }} 127.0.0.1:1 disabled
            {%- endif %}
          {%- endfor %}

      path-map-entry:
        name: path-map-entry
        template: |
          {#- Generate map entries for paths matching specified pathTypes #}
          {#- Usage: {% include "path-map-entry" with context %} where path_types = ["Exact"] or ["Prefix", "ImplementationSpecific"] #}
          {%- for ingress in resources.ingresses.List() %}
          {%- for rule in (ingress.spec.rules | default([]) | selectattr("http", "defined")) %}
          {%- for path in (rule.http.paths | default([]) | selectattr("path", "defined") | selectattr("pathType", "in", path_types)) %}
          {{ rule.host }}{{ path.path }} {% include "backend-name" -%}{{ suffix }}
          {% endfor %}
          {% endfor %}
          {% endfor %}

      ingress-backends:
        name: ingress-backends
        template: |
          {#- Generate all backend definitions from ingress resources #}
          {#- Usage: {% include "ingress-backends" %} #}
          {%- for ingress in resources.ingresses.List() %}
          {%- if ingress.spec and ingress.spec.rules %}
          {%- for rule in ingress.spec.rules %}
          {%- if rule.http and rule.http.paths %}
          {%- for path in rule.http.paths %}
          {%- if path.backend and path.backend.service %}
          {%- set service_name = path.backend.service.name %}
          {%- set port = path.backend.service.port.number | default(80) %}

          backend {%+ include "backend-name" +%}
            balance roundrobin
            option httpchk GET {{ path.path | default('/') }}
            default-server check
            {%- filter indent(2, first=True) %}
            {% include "backend-servers" %}
            {%- endfilter %}
          {%- endif %}
          {%- endfor %}
          {%- endif %}
          {%- endfor %}
          {%- endif %}
          {%- endfor %}

    # IMPORTANT: All file references in HAProxy configuration must use relative paths
    # from /etc/haproxy/ as the working directory.
    #
    # Correct:   maps/host.map, general/503.http, certs/server.pem
    # Incorrect: /etc/haproxy/maps/host.map (will fail validation)
    #
    # This restriction exists because validation runs in isolated environments where
    # absolute path redirection requires elevated privileges that conflict with
    # restrictive pod security policies.

    maps:
      host.map:
        template: |
          {%- for ingress in resources.ingresses.List() %}
          {%- for rule in (ingress.spec.rules | default([]) | selectattr("http", "defined")) %}
          {%- set host_without_asterisk = rule.host | replace('*', '', 1) %}
          {{ host_without_asterisk }} {{ host_without_asterisk }}
          {%- endfor %}
          {%- endfor %}

      path-exact.map:
        template: |
          # This map is used to match the host header (without ":port") concatenated with the requested path (without query params) to an HAProxy backend defined in haproxy.cfg.
          # It should be used with the equality string matcher. Example:
          #   http-request set-var(txn.path_match) var(txn.host_match),concat(,txn.path,),map(/etc/haproxy/maps/path-exact.map)
          {% set path_types = ["Exact"] %}
          {%- set suffix = "" %}
          {% include "path-map-entry" %}


      path-prefix-exact.map:
        template: |
          # This map is used to match the host header (without ":port") concatenated with the requested path (without query params) to an HAProxy backend defined in haproxy.cfg.
          {% set path_types = ["Prefix", "ImplementationSpecific"] %}
          {%- set suffix = "" %}
          {% include "path-map-entry" %}


      path-prefix.map:
        template: |
          # This map is used to match the host header (without ":port") concatenated with the requested path (without query params) to an HAProxy backend defined in haproxy.cfg.
          # It should be used with the prefix string matcher. Example:
          #   http-request set-var(txn.path_match) var(txn.host_match),concat(,txn.path,),map_beg(maps/path-prefix.map)
          {% set path_types = ["Prefix", "ImplementationSpecific"] %}
          {%- set suffix = "/" %}
          {% include "path-map-entry" %}


    files:
      400.http:
        template: |
          HTTP/1.0 400 Bad Request
          Cache-Control: no-cache
          Connection: close
          Content-Type: text/html

          <html><body><h1>400 Bad Request</h1>
          <p>Your browser sent a request that this server could not understand.</p>
          </body></html>

      403.http:
        template: |
          HTTP/1.0 403 Forbidden
          Cache-Control: no-cache
          Connection: close
          Content-Type: text/html

          <html><body><h1>403 Forbidden</h1>
          <p>You don't have permission to access this resource.</p>
          </body></html>

      408.http:
        template: |
          HTTP/1.0 408 Request Time-out
          Cache-Control: no-cache
          Connection: close
          Content-Type: text/html

          <html><body><h1>408 Request Time-out</h1>
          <p>Your browser didn't send a complete request in time.</p>
          </body></html>

      500.http:
        template: |
          HTTP/1.0 500 Internal Server Error
          Cache-Control: no-cache
          Connection: close
          Content-Type: text/html

          <html><body><h1>500 Internal Server Error</h1>
          <p>An internal server error occurred.</p>
          </body></html>

      502.http:
        template: |
          HTTP/1.0 502 Bad Gateway
          Cache-Control: no-cache
          Connection: close
          Content-Type: text/html

          <html><body><h1>502 Bad Gateway</h1>
          <p>The server received an invalid response from an upstream server.</p>
          </body></html>

      503.http:
        template: |
          HTTP/1.0 503 Service Unavailable
          Cache-Control: no-cache
          Connection: close
          Content-Type: text/html

          <html><body><h1>503 Service Unavailable</h1>
          <p>No server is available to handle this request.</p>
          </body></html>

      504.http:
        template: |
          HTTP/1.0 504 Gateway Time-out
          Cache-Control: no-cache
          Connection: close
          Content-Type: text/html

          <html><body><h1>504 Gateway Time-out</h1>
          <p>The server didn't respond in time.</p>
          </body></html>

    haproxy_config:
      template: |
        global
            log stdout len 4096 local0 info
            chroot /var/lib/haproxy
            user haproxy
            group haproxy
            daemon
            ca-base /etc/ssl/certs
            crt-base /etc/haproxy/certs
            tune.ssl.default-dh-param 2048

        defaults
            mode http
            log global
            option httplog
            option dontlognull
            option log-health-checks
            option forwardfor
            timeout connect 5000
            timeout client 50000
            timeout server 50000
            errorfile 400 /etc/haproxy/general/400.http
            errorfile 403 /etc/haproxy/general/403.http
            errorfile 408 /etc/haproxy/general/408.http
            errorfile 500 /etc/haproxy/general/500.http
            errorfile 502 /etc/haproxy/general/502.http
            errorfile 503 /etc/haproxy/general/503.http
            errorfile 504 /etc/haproxy/general/504.http

        frontend status
            bind *:8404
            no log
            http-request return status 200 content-type text/plain string "OK" if { path /healthz }
            http-request return status 200 content-type text/plain string "READY" if { path /ready }

        frontend http_frontend
            bind *:80

            # Set variables for path-based routing
            http-request set-var(txn.base) base
            http-request set-var(txn.path) path
            http-request set-var(txn.host) req.hdr(Host),field(1,:),lower
            http-request set-var(txn.host_match) var(txn.host),map(/etc/haproxy/maps/host.map)
            http-request set-var(txn.host_match) var(txn.host),regsub(^[^.]*,,),map(/etc/haproxy/maps/host.map,'') if !{ var(txn.host_match) -m found }
            http-request set-var(txn.path_match) var(txn.host_match),concat(,txn.path,),map(/etc/haproxy/maps/path-exact.map)
            http-request set-var(txn.path_match) var(txn.host_match),concat(,txn.path,),map(/etc/haproxy/maps/path-prefix-exact.map) if !{ var(txn.path_match) -m found }
            http-request set-var(txn.path_match) var(txn.host_match),concat(,txn.path,),map_beg(/etc/haproxy/maps/path-prefix.map) if !{ var(txn.path_match) -m found }

            # Use path maps for routing
            use_backend %[var(txn.path_match)]

            # Default backend
            default_backend default_backend

        {% include "ingress-backends" %}

        backend default_backend
            http-request return status 404
        {%+ if false +%}{%+ endif +%}

# Dataplane API credentials
credentials:
  dataplane:
    username: admin
    password: adminpass

# ServiceAccount configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Pod security context
podSecurityContext: {}
  # fsGroup: 2000

# Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  healthzPort: 8080
  metricsPort: 9090

# Liveness and readiness probes
# Disabled until /healthz endpoint is implemented in the controller
# livenessProbe:
#   httpGet:
#     path: /healthz
#     port: healthz
#   initialDelaySeconds: 10
#   periodSeconds: 10
#
# readinessProbe:
#   httpGet:
#     path: /healthz
#     port: healthz
#   initialDelaySeconds: 5
#   periodSeconds: 5

# Resources limits and requests
# Note: The controller automatically detects and respects container resource limits:
# - CPU limits: Go 1.25+ automatically sets GOMAXPROCS based on cgroup CPU limits
# - Memory limits: automemlimit library automatically sets GOMEMLIMIT to 90% of cgroup memory limits
#
# The AUTOMEMLIMIT environment variable can be used to adjust the memory limit ratio (default: 0.9)
# Example: AUTOMEMLIMIT=0.8 sets GOMEMLIMIT to 80% of the container memory limit
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  # Only one of minAvailable or maxUnavailable should be set
  minAvailable: 1
  # maxUnavailable: 1

# Prometheus ServiceMonitor
monitoring:
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    # Additional labels for ServiceMonitor
    labels: {}
    # Relabeling configurations
    relabelings: []
    # Metric relabeling configurations
    metricRelabelings: []

# NetworkPolicy configuration
networkPolicy:
  enabled: true

  # Egress rules
  egress:
    # Allow DNS resolution (required for service discovery)
    allowDNS: true

    # Kubernetes API Server access (required for watching resources)
    # Configure based on your cluster setup
    kubernetesApi:
      # For kind/standard clusters
      # Adjust this CIDR based on your cluster
      - cidr: 0.0.0.0/0  # Allow all by default, restrict in production
        ports:
          - port: 443
            protocol: TCP
          - port: 6443
            protocol: TCP

    # HAProxy Dataplane API pods (in any namespace)
    haproxyPods:
      # Allow access to all pods matching the pod_selector
      enabled: true
      # Pod selector for HAProxy pods
      podSelector:
        matchLabels:
          app: haproxy
          component: loadbalancer
      # Namespace selector - empty {} means all namespaces
      namespaceSelector: {}
      ports:
        - port: 5555  # Dataplane API
          protocol: TCP
        - port: 8404  # Health/stats
          protocol: TCP

    # Additional custom egress rules
    additionalRules: []
    # Example:
    # - to:
    #     - namespaceSelector:
    #         matchLabels:
    #           name: monitoring
    #   ports:
    #     - port: 9090
    #       protocol: TCP

  # Ingress rules
  ingress:
    # Allow Prometheus/monitoring to scrape metrics
    monitoring:
      enabled: false
      # Pod selector for monitoring systems (e.g., Prometheus)
      podSelector: {}
      #   matchLabels:
      #     app: prometheus
      # Namespace selector for monitoring systems
      namespaceSelector: {}
      #   matchLabels:
      #     name: monitoring
      ports:
        - port: 9090  # Metrics
          protocol: TCP

    # Allow health checks from load balancers/ingress
    healthChecks:
      enabled: true
      # Allow from anywhere for health checks
      from:
        - podSelector: {}
      ports:
        - port: 8080  # Healthz
          protocol: TCP

    # Additional custom ingress rules
    additionalRules: []
