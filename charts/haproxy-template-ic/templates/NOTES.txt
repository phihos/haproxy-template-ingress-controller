HAProxy Template Ingress Controller has been installed!

Controller Status:
  kubectl get pods -l app.kubernetes.io/name={{ include "haproxy-template-ic.name" . }} -n {{ .Release.Namespace }}

View Logs:
  kubectl logs -f -l app.kubernetes.io/name={{ include "haproxy-template-ic.name" . }} -n {{ .Release.Namespace }}

Configuration:
  ConfigMap: {{ .Values.controller.configmapName }}
  Secret: {{ include "haproxy-template-ic.fullname" . }}-credentials

{{- if gt (.Values.controller.debugPort | int) 0 }}

Debug Endpoint:
  The debug server is running on port {{ .Values.controller.debugPort }}
  Access via: kubectl port-forward -n {{ .Release.Namespace }} pod/<controller-pod> {{ .Values.controller.debugPort }}:{{ .Values.controller.debugPort }}
  Endpoints: /debug/vars, /debug/pprof
{{- end }}

Metrics Endpoint:
  Prometheus metrics are available on port {{ .Values.controller.config.controller.metrics_port }}
  Access via: kubectl port-forward -n {{ .Release.Namespace }} pod/<controller-pod> {{ .Values.controller.config.controller.metrics_port }}:{{ .Values.controller.config.controller.metrics_port }}
  URL: http://localhost:{{ .Values.controller.config.controller.metrics_port }}/metrics

{{- if .Values.monitoring.serviceMonitor.enabled }}

  ✓ ServiceMonitor has been created for Prometheus Operator
  Prometheus will automatically discover and scrape metrics
{{- else }}

  ServiceMonitor: disabled (set monitoring.serviceMonitor.enabled=true to enable)
{{- end }}

{{- if .Values.networkPolicy.enabled }}

NetworkPolicy:
  NetworkPolicy has been created to allow:
  - DNS resolution (kube-system namespace)
  - Kubernetes API access
  - HAProxy Dataplane API access (cross-namespace)
  {{- if .Values.networkPolicy.ingress.monitoring.enabled }}
  - Prometheus metrics scraping ✓
  {{- else }}
  - Prometheus metrics scraping (disabled - set networkPolicy.ingress.monitoring.enabled=true)
  {{- end }}

  If you experience connectivity issues, check the NetworkPolicy configuration.
{{- end }}

Next Steps:
  1. Deploy HAProxy pods with labels matching pod_selector:
{{- range $key, $value := .Values.controller.config.pod_selector.match_labels }}
     {{ $key }}: {{ $value }}
{{- end }}

  2. Each HAProxy pod should include:
     - HAProxy container with Dataplane API sidecar
     - Shared emptyDir volume for config
     - Dataplane API accessible on port 5555
     - Same pod labels for NetworkPolicy matching

  3. Create Ingress resources to configure routing

For more information, visit:
  https://github.com/phihos/haproxy-template-ic
