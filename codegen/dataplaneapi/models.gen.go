// Package dataplaneapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package dataplaneapi

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Basic_authScopes = "basic_auth.Scopes"
)

// Defines values for AcmeProviderChallenge.
const (
	DNS01  AcmeProviderChallenge = "DNS-01"
	HTTP01 AcmeProviderChallenge = "HTTP-01"
)

// Defines values for AcmeProviderKeytype.
const (
	ECDSA AcmeProviderKeytype = "ECDSA"
	RSA   AcmeProviderKeytype = "RSA"
)

// Defines values for AwsRegionIpv4Address.
const (
	Private AwsRegionIpv4Address = "private"
	Public  AwsRegionIpv4Address = "public"
)

// Defines values for AwsRegionServerSlotsGrowthType.
const (
	AwsRegionServerSlotsGrowthTypeExponential AwsRegionServerSlotsGrowthType = "exponential"
	AwsRegionServerSlotsGrowthTypeLinear      AwsRegionServerSlotsGrowthType = "linear"
)

// Defines values for BackendAbortonclose.
const (
	BackendAbortoncloseDisabled BackendAbortonclose = "disabled"
	BackendAbortoncloseEnabled  BackendAbortonclose = "enabled"
)

// Defines values for BackendAcceptInvalidHttpResponse.
const (
	BackendAcceptInvalidHttpResponseDisabled BackendAcceptInvalidHttpResponse = "disabled"
	BackendAcceptInvalidHttpResponseEnabled  BackendAcceptInvalidHttpResponse = "enabled"
)

// Defines values for BackendAcceptUnsafeViolationsInHttpResponse.
const (
	BackendAcceptUnsafeViolationsInHttpResponseDisabled BackendAcceptUnsafeViolationsInHttpResponse = "disabled"
	BackendAcceptUnsafeViolationsInHttpResponseEnabled  BackendAcceptUnsafeViolationsInHttpResponse = "enabled"
)

// Defines values for BackendAdvCheck.
const (
	BackendAdvCheckHttpchk     BackendAdvCheck = "httpchk"
	BackendAdvCheckLdapCheck   BackendAdvCheck = "ldap-check"
	BackendAdvCheckMysqlCheck  BackendAdvCheck = "mysql-check"
	BackendAdvCheckPgsqlCheck  BackendAdvCheck = "pgsql-check"
	BackendAdvCheckRedisCheck  BackendAdvCheck = "redis-check"
	BackendAdvCheckSmtpchk     BackendAdvCheck = "smtpchk"
	BackendAdvCheckSslHelloChk BackendAdvCheck = "ssl-hello-chk"
	BackendAdvCheckTcpCheck    BackendAdvCheck = "tcp-check"
)

// Defines values for BackendAllbackups.
const (
	BackendAllbackupsDisabled BackendAllbackups = "disabled"
	BackendAllbackupsEnabled  BackendAllbackups = "enabled"
)

// Defines values for BackendCheckcache.
const (
	BackendCheckcacheDisabled BackendCheckcache = "disabled"
	BackendCheckcacheEnabled  BackendCheckcache = "enabled"
)

// Defines values for BackendExternalCheck.
const (
	BackendExternalCheckDisabled BackendExternalCheck = "disabled"
	BackendExternalCheckEnabled  BackendExternalCheck = "enabled"
)

// Defines values for BackendForcePersistCond.
const (
	BackendForcePersistCondIf     BackendForcePersistCond = "if"
	BackendForcePersistCondUnless BackendForcePersistCond = "unless"
)

// Defines values for BackendForcePersistListCond.
const (
	BackendForcePersistListCondIf     BackendForcePersistListCond = "if"
	BackendForcePersistListCondUnless BackendForcePersistListCond = "unless"
)

// Defines values for BackendH1CaseAdjustBogusServer.
const (
	BackendH1CaseAdjustBogusServerDisabled BackendH1CaseAdjustBogusServer = "disabled"
	BackendH1CaseAdjustBogusServerEnabled  BackendH1CaseAdjustBogusServer = "enabled"
)

// Defines values for BackendHashPreserveAffinity.
const (
	BackendHashPreserveAffinityAlways   BackendHashPreserveAffinity = "always"
	BackendHashPreserveAffinityMaxconn  BackendHashPreserveAffinity = "maxconn"
	BackendHashPreserveAffinityMaxqueue BackendHashPreserveAffinity = "maxqueue"
)

// Defines values for BackendHttpBufferRequest.
const (
	BackendHttpBufferRequestDisabled BackendHttpBufferRequest = "disabled"
	BackendHttpBufferRequestEnabled  BackendHttpBufferRequest = "enabled"
)

// Defines values for BackendHttpDropRequestTrailers.
const (
	BackendHttpDropRequestTrailersDisabled BackendHttpDropRequestTrailers = "disabled"
	BackendHttpDropRequestTrailersEnabled  BackendHttpDropRequestTrailers = "enabled"
)

// Defines values for BackendHttpNoDelay.
const (
	BackendHttpNoDelayDisabled BackendHttpNoDelay = "disabled"
	BackendHttpNoDelayEnabled  BackendHttpNoDelay = "enabled"
)

// Defines values for BackendHttpUseHtx.
const (
	BackendHttpUseHtxDisabled BackendHttpUseHtx = "disabled"
	BackendHttpUseHtxEnabled  BackendHttpUseHtx = "enabled"
)

// Defines values for BackendHttpConnectionMode.
const (
	BackendHttpConnectionModeHttpKeepAlive   BackendHttpConnectionMode = "http-keep-alive"
	BackendHttpConnectionModeHttpServerClose BackendHttpConnectionMode = "http-server-close"
	BackendHttpConnectionModeHttpclose       BackendHttpConnectionMode = "httpclose"
)

// Defines values for BackendHttpPretendKeepalive.
const (
	BackendHttpPretendKeepaliveDisabled BackendHttpPretendKeepalive = "disabled"
	BackendHttpPretendKeepaliveEnabled  BackendHttpPretendKeepalive = "enabled"
)

// Defines values for BackendHttpProxy.
const (
	BackendHttpProxyDisabled BackendHttpProxy = "disabled"
	BackendHttpProxyEnabled  BackendHttpProxy = "enabled"
)

// Defines values for BackendHttpRestrictReqHdrNames.
const (
	BackendHttpRestrictReqHdrNamesDelete   BackendHttpRestrictReqHdrNames = "delete"
	BackendHttpRestrictReqHdrNamesPreserve BackendHttpRestrictReqHdrNames = "preserve"
	BackendHttpRestrictReqHdrNamesReject   BackendHttpRestrictReqHdrNames = "reject"
)

// Defines values for BackendHttpReuse.
const (
	BackendHttpReuseAggressive BackendHttpReuse = "aggressive"
	BackendHttpReuseAlways     BackendHttpReuse = "always"
	BackendHttpReuseNever      BackendHttpReuse = "never"
	BackendHttpReuseSafe       BackendHttpReuse = "safe"
)

// Defines values for BackendIgnorePersistCond.
const (
	BackendIgnorePersistCondIf     BackendIgnorePersistCond = "if"
	BackendIgnorePersistCondUnless BackendIgnorePersistCond = "unless"
)

// Defines values for BackendIgnorePersistListCond.
const (
	BackendIgnorePersistListCondIf     BackendIgnorePersistListCond = "if"
	BackendIgnorePersistListCondUnless BackendIgnorePersistListCond = "unless"
)

// Defines values for BackendIndependentStreams.
const (
	BackendIndependentStreamsDisabled BackendIndependentStreams = "disabled"
	BackendIndependentStreamsEnabled  BackendIndependentStreams = "enabled"
)

// Defines values for BackendLoadServerStateFromFile.
const (
	BackendLoadServerStateFromFileGlobal BackendLoadServerStateFromFile = "global"
	BackendLoadServerStateFromFileLocal  BackendLoadServerStateFromFile = "local"
	BackendLoadServerStateFromFileNone   BackendLoadServerStateFromFile = "none"
)

// Defines values for BackendLogHealthChecks.
const (
	BackendLogHealthChecksDisabled BackendLogHealthChecks = "disabled"
	BackendLogHealthChecksEnabled  BackendLogHealthChecks = "enabled"
)

// Defines values for BackendMode.
const (
	BackendModeHttp BackendMode = "http"
	BackendModeLog  BackendMode = "log"
	BackendModeTcp  BackendMode = "tcp"
)

// Defines values for BackendNolinger.
const (
	BackendNolingerDisabled BackendNolinger = "disabled"
	BackendNolingerEnabled  BackendNolinger = "enabled"
)

// Defines values for BackendPersist.
const (
	BackendPersistDisabled BackendPersist = "disabled"
	BackendPersistEnabled  BackendPersist = "enabled"
)

// Defines values for BackendPreferLastServer.
const (
	BackendPreferLastServerDisabled BackendPreferLastServer = "disabled"
	BackendPreferLastServerEnabled  BackendPreferLastServer = "enabled"
)

// Defines values for BackendSpliceAuto.
const (
	BackendSpliceAutoDisabled BackendSpliceAuto = "disabled"
	BackendSpliceAutoEnabled  BackendSpliceAuto = "enabled"
)

// Defines values for BackendSpliceRequest.
const (
	BackendSpliceRequestDisabled BackendSpliceRequest = "disabled"
	BackendSpliceRequestEnabled  BackendSpliceRequest = "enabled"
)

// Defines values for BackendSpliceResponse.
const (
	BackendSpliceResponseDisabled BackendSpliceResponse = "disabled"
	BackendSpliceResponseEnabled  BackendSpliceResponse = "enabled"
)

// Defines values for BackendSpopCheck.
const (
	BackendSpopCheckDisabled BackendSpopCheck = "disabled"
	BackendSpopCheckEnabled  BackendSpopCheck = "enabled"
)

// Defines values for BackendSrvtcpka.
const (
	BackendSrvtcpkaDisabled BackendSrvtcpka = "disabled"
	BackendSrvtcpkaEnabled  BackendSrvtcpka = "enabled"
)

// Defines values for BackendTcpSmartConnect.
const (
	BackendTcpSmartConnectDisabled BackendTcpSmartConnect = "disabled"
	BackendTcpSmartConnectEnabled  BackendTcpSmartConnect = "enabled"
)

// Defines values for BackendTcpka.
const (
	BackendTcpkaDisabled BackendTcpka = "disabled"
	BackendTcpkaEnabled  BackendTcpka = "enabled"
)

// Defines values for BackendTransparent.
const (
	BackendTransparentDisabled BackendTransparent = "disabled"
	BackendTransparentEnabled  BackendTransparent = "enabled"
)

// Defines values for BackendBaseAbortonclose.
const (
	BackendBaseAbortoncloseDisabled BackendBaseAbortonclose = "disabled"
	BackendBaseAbortoncloseEnabled  BackendBaseAbortonclose = "enabled"
)

// Defines values for BackendBaseAcceptInvalidHttpResponse.
const (
	BackendBaseAcceptInvalidHttpResponseDisabled BackendBaseAcceptInvalidHttpResponse = "disabled"
	BackendBaseAcceptInvalidHttpResponseEnabled  BackendBaseAcceptInvalidHttpResponse = "enabled"
)

// Defines values for BackendBaseAcceptUnsafeViolationsInHttpResponse.
const (
	BackendBaseAcceptUnsafeViolationsInHttpResponseDisabled BackendBaseAcceptUnsafeViolationsInHttpResponse = "disabled"
	BackendBaseAcceptUnsafeViolationsInHttpResponseEnabled  BackendBaseAcceptUnsafeViolationsInHttpResponse = "enabled"
)

// Defines values for BackendBaseAdvCheck.
const (
	BackendBaseAdvCheckHttpchk     BackendBaseAdvCheck = "httpchk"
	BackendBaseAdvCheckLdapCheck   BackendBaseAdvCheck = "ldap-check"
	BackendBaseAdvCheckMysqlCheck  BackendBaseAdvCheck = "mysql-check"
	BackendBaseAdvCheckPgsqlCheck  BackendBaseAdvCheck = "pgsql-check"
	BackendBaseAdvCheckRedisCheck  BackendBaseAdvCheck = "redis-check"
	BackendBaseAdvCheckSmtpchk     BackendBaseAdvCheck = "smtpchk"
	BackendBaseAdvCheckSslHelloChk BackendBaseAdvCheck = "ssl-hello-chk"
	BackendBaseAdvCheckTcpCheck    BackendBaseAdvCheck = "tcp-check"
)

// Defines values for BackendBaseAllbackups.
const (
	BackendBaseAllbackupsDisabled BackendBaseAllbackups = "disabled"
	BackendBaseAllbackupsEnabled  BackendBaseAllbackups = "enabled"
)

// Defines values for BackendBaseCheckcache.
const (
	BackendBaseCheckcacheDisabled BackendBaseCheckcache = "disabled"
	BackendBaseCheckcacheEnabled  BackendBaseCheckcache = "enabled"
)

// Defines values for BackendBaseExternalCheck.
const (
	BackendBaseExternalCheckDisabled BackendBaseExternalCheck = "disabled"
	BackendBaseExternalCheckEnabled  BackendBaseExternalCheck = "enabled"
)

// Defines values for BackendBaseForcePersistCond.
const (
	BackendBaseForcePersistCondIf     BackendBaseForcePersistCond = "if"
	BackendBaseForcePersistCondUnless BackendBaseForcePersistCond = "unless"
)

// Defines values for BackendBaseForcePersistListCond.
const (
	BackendBaseForcePersistListCondIf     BackendBaseForcePersistListCond = "if"
	BackendBaseForcePersistListCondUnless BackendBaseForcePersistListCond = "unless"
)

// Defines values for BackendBaseH1CaseAdjustBogusServer.
const (
	BackendBaseH1CaseAdjustBogusServerDisabled BackendBaseH1CaseAdjustBogusServer = "disabled"
	BackendBaseH1CaseAdjustBogusServerEnabled  BackendBaseH1CaseAdjustBogusServer = "enabled"
)

// Defines values for BackendBaseHashPreserveAffinity.
const (
	BackendBaseHashPreserveAffinityAlways   BackendBaseHashPreserveAffinity = "always"
	BackendBaseHashPreserveAffinityMaxconn  BackendBaseHashPreserveAffinity = "maxconn"
	BackendBaseHashPreserveAffinityMaxqueue BackendBaseHashPreserveAffinity = "maxqueue"
)

// Defines values for BackendBaseHttpBufferRequest.
const (
	BackendBaseHttpBufferRequestDisabled BackendBaseHttpBufferRequest = "disabled"
	BackendBaseHttpBufferRequestEnabled  BackendBaseHttpBufferRequest = "enabled"
)

// Defines values for BackendBaseHttpDropRequestTrailers.
const (
	BackendBaseHttpDropRequestTrailersDisabled BackendBaseHttpDropRequestTrailers = "disabled"
	BackendBaseHttpDropRequestTrailersEnabled  BackendBaseHttpDropRequestTrailers = "enabled"
)

// Defines values for BackendBaseHttpNoDelay.
const (
	BackendBaseHttpNoDelayDisabled BackendBaseHttpNoDelay = "disabled"
	BackendBaseHttpNoDelayEnabled  BackendBaseHttpNoDelay = "enabled"
)

// Defines values for BackendBaseHttpUseHtx.
const (
	BackendBaseHttpUseHtxDisabled BackendBaseHttpUseHtx = "disabled"
	BackendBaseHttpUseHtxEnabled  BackendBaseHttpUseHtx = "enabled"
)

// Defines values for BackendBaseHttpConnectionMode.
const (
	BackendBaseHttpConnectionModeHttpKeepAlive   BackendBaseHttpConnectionMode = "http-keep-alive"
	BackendBaseHttpConnectionModeHttpServerClose BackendBaseHttpConnectionMode = "http-server-close"
	BackendBaseHttpConnectionModeHttpclose       BackendBaseHttpConnectionMode = "httpclose"
)

// Defines values for BackendBaseHttpPretendKeepalive.
const (
	BackendBaseHttpPretendKeepaliveDisabled BackendBaseHttpPretendKeepalive = "disabled"
	BackendBaseHttpPretendKeepaliveEnabled  BackendBaseHttpPretendKeepalive = "enabled"
)

// Defines values for BackendBaseHttpProxy.
const (
	BackendBaseHttpProxyDisabled BackendBaseHttpProxy = "disabled"
	BackendBaseHttpProxyEnabled  BackendBaseHttpProxy = "enabled"
)

// Defines values for BackendBaseHttpRestrictReqHdrNames.
const (
	BackendBaseHttpRestrictReqHdrNamesDelete   BackendBaseHttpRestrictReqHdrNames = "delete"
	BackendBaseHttpRestrictReqHdrNamesPreserve BackendBaseHttpRestrictReqHdrNames = "preserve"
	BackendBaseHttpRestrictReqHdrNamesReject   BackendBaseHttpRestrictReqHdrNames = "reject"
)

// Defines values for BackendBaseHttpReuse.
const (
	BackendBaseHttpReuseAggressive BackendBaseHttpReuse = "aggressive"
	BackendBaseHttpReuseAlways     BackendBaseHttpReuse = "always"
	BackendBaseHttpReuseNever      BackendBaseHttpReuse = "never"
	BackendBaseHttpReuseSafe       BackendBaseHttpReuse = "safe"
)

// Defines values for BackendBaseIgnorePersistCond.
const (
	BackendBaseIgnorePersistCondIf     BackendBaseIgnorePersistCond = "if"
	BackendBaseIgnorePersistCondUnless BackendBaseIgnorePersistCond = "unless"
)

// Defines values for BackendBaseIgnorePersistListCond.
const (
	BackendBaseIgnorePersistListCondIf     BackendBaseIgnorePersistListCond = "if"
	BackendBaseIgnorePersistListCondUnless BackendBaseIgnorePersistListCond = "unless"
)

// Defines values for BackendBaseIndependentStreams.
const (
	BackendBaseIndependentStreamsDisabled BackendBaseIndependentStreams = "disabled"
	BackendBaseIndependentStreamsEnabled  BackendBaseIndependentStreams = "enabled"
)

// Defines values for BackendBaseLoadServerStateFromFile.
const (
	BackendBaseLoadServerStateFromFileGlobal BackendBaseLoadServerStateFromFile = "global"
	BackendBaseLoadServerStateFromFileLocal  BackendBaseLoadServerStateFromFile = "local"
	BackendBaseLoadServerStateFromFileNone   BackendBaseLoadServerStateFromFile = "none"
)

// Defines values for BackendBaseLogHealthChecks.
const (
	BackendBaseLogHealthChecksDisabled BackendBaseLogHealthChecks = "disabled"
	BackendBaseLogHealthChecksEnabled  BackendBaseLogHealthChecks = "enabled"
)

// Defines values for BackendBaseMode.
const (
	BackendBaseModeHttp BackendBaseMode = "http"
	BackendBaseModeLog  BackendBaseMode = "log"
	BackendBaseModeTcp  BackendBaseMode = "tcp"
)

// Defines values for BackendBaseNolinger.
const (
	BackendBaseNolingerDisabled BackendBaseNolinger = "disabled"
	BackendBaseNolingerEnabled  BackendBaseNolinger = "enabled"
)

// Defines values for BackendBasePersist.
const (
	BackendBasePersistDisabled BackendBasePersist = "disabled"
	BackendBasePersistEnabled  BackendBasePersist = "enabled"
)

// Defines values for BackendBasePreferLastServer.
const (
	BackendBasePreferLastServerDisabled BackendBasePreferLastServer = "disabled"
	BackendBasePreferLastServerEnabled  BackendBasePreferLastServer = "enabled"
)

// Defines values for BackendBaseSpliceAuto.
const (
	BackendBaseSpliceAutoDisabled BackendBaseSpliceAuto = "disabled"
	BackendBaseSpliceAutoEnabled  BackendBaseSpliceAuto = "enabled"
)

// Defines values for BackendBaseSpliceRequest.
const (
	BackendBaseSpliceRequestDisabled BackendBaseSpliceRequest = "disabled"
	BackendBaseSpliceRequestEnabled  BackendBaseSpliceRequest = "enabled"
)

// Defines values for BackendBaseSpliceResponse.
const (
	BackendBaseSpliceResponseDisabled BackendBaseSpliceResponse = "disabled"
	BackendBaseSpliceResponseEnabled  BackendBaseSpliceResponse = "enabled"
)

// Defines values for BackendBaseSpopCheck.
const (
	BackendBaseSpopCheckDisabled BackendBaseSpopCheck = "disabled"
	BackendBaseSpopCheckEnabled  BackendBaseSpopCheck = "enabled"
)

// Defines values for BackendBaseSrvtcpka.
const (
	BackendBaseSrvtcpkaDisabled BackendBaseSrvtcpka = "disabled"
	BackendBaseSrvtcpkaEnabled  BackendBaseSrvtcpka = "enabled"
)

// Defines values for BackendBaseTcpSmartConnect.
const (
	BackendBaseTcpSmartConnectDisabled BackendBaseTcpSmartConnect = "disabled"
	BackendBaseTcpSmartConnectEnabled  BackendBaseTcpSmartConnect = "enabled"
)

// Defines values for BackendBaseTcpka.
const (
	BackendBaseTcpkaDisabled BackendBaseTcpka = "disabled"
	BackendBaseTcpkaEnabled  BackendBaseTcpka = "enabled"
)

// Defines values for BackendBaseTransparent.
const (
	BackendBaseTransparentDisabled BackendBaseTransparent = "disabled"
	BackendBaseTransparentEnabled  BackendBaseTransparent = "enabled"
)

// Defines values for BackendSwitchingRuleCond.
const (
	BackendSwitchingRuleCondIf     BackendSwitchingRuleCond = "if"
	BackendSwitchingRuleCondUnless BackendSwitchingRuleCond = "unless"
)

// Defines values for BalanceAlgorithm.
const (
	BalanceAlgorithmFirst      BalanceAlgorithm = "first"
	BalanceAlgorithmHash       BalanceAlgorithm = "hash"
	BalanceAlgorithmHdr        BalanceAlgorithm = "hdr"
	BalanceAlgorithmLeastconn  BalanceAlgorithm = "leastconn"
	BalanceAlgorithmRandom     BalanceAlgorithm = "random"
	BalanceAlgorithmRdpCookie  BalanceAlgorithm = "rdp-cookie"
	BalanceAlgorithmRoundrobin BalanceAlgorithm = "roundrobin"
	BalanceAlgorithmSource     BalanceAlgorithm = "source"
	BalanceAlgorithmStaticRr   BalanceAlgorithm = "static-rr"
	BalanceAlgorithmUri        BalanceAlgorithm = "uri"
	BalanceAlgorithmUrlParam   BalanceAlgorithm = "url_param"
)

// Defines values for BindForceStrictSni.
const (
	BindForceStrictSniDisabled BindForceStrictSni = "disabled"
	BindForceStrictSniEnabled  BindForceStrictSni = "enabled"
)

// Defines values for BindLevel.
const (
	BindLevelAdmin    BindLevel = "admin"
	BindLevelOperator BindLevel = "operator"
	BindLevelUser     BindLevel = "user"
)

// Defines values for BindQuicCcAlgo.
const (
	BindQuicCcAlgoBbr     BindQuicCcAlgo = "bbr"
	BindQuicCcAlgoCubic   BindQuicCcAlgo = "cubic"
	BindQuicCcAlgoNewreno BindQuicCcAlgo = "newreno"
	BindQuicCcAlgoNocc    BindQuicCcAlgo = "nocc"
)

// Defines values for BindQuicSocket.
const (
	BindQuicSocketConnection BindQuicSocket = "connection"
	BindQuicSocketListener   BindQuicSocket = "listener"
)

// Defines values for BindSeverityOutput.
const (
	BindSeverityOutputNone   BindSeverityOutput = "none"
	BindSeverityOutputNumber BindSeverityOutput = "number"
	BindSeverityOutputString BindSeverityOutput = "string"
)

// Defines values for BindSslMaxVer.
const (
	BindSslMaxVerSSLv3  BindSslMaxVer = "SSLv3"
	BindSslMaxVerTLSv10 BindSslMaxVer = "TLSv1.0"
	BindSslMaxVerTLSv11 BindSslMaxVer = "TLSv1.1"
	BindSslMaxVerTLSv12 BindSslMaxVer = "TLSv1.2"
	BindSslMaxVerTLSv13 BindSslMaxVer = "TLSv1.3"
)

// Defines values for BindSslMinVer.
const (
	BindSslMinVerSSLv3  BindSslMinVer = "SSLv3"
	BindSslMinVerTLSv10 BindSslMinVer = "TLSv1.0"
	BindSslMinVerTLSv11 BindSslMinVer = "TLSv1.1"
	BindSslMinVerTLSv12 BindSslMinVer = "TLSv1.2"
	BindSslMinVerTLSv13 BindSslMinVer = "TLSv1.3"
)

// Defines values for BindSslv3.
const (
	BindSslv3Disabled BindSslv3 = "disabled"
	BindSslv3Enabled  BindSslv3 = "enabled"
)

// Defines values for BindTlsTickets.
const (
	BindTlsTicketsDisabled BindTlsTickets = "disabled"
	BindTlsTicketsEnabled  BindTlsTickets = "enabled"
)

// Defines values for BindTlsv10.
const (
	BindTlsv10Disabled BindTlsv10 = "disabled"
	BindTlsv10Enabled  BindTlsv10 = "enabled"
)

// Defines values for BindTlsv11.
const (
	BindTlsv11Disabled BindTlsv11 = "disabled"
	BindTlsv11Enabled  BindTlsv11 = "enabled"
)

// Defines values for BindTlsv12.
const (
	BindTlsv12Disabled BindTlsv12 = "disabled"
	BindTlsv12Enabled  BindTlsv12 = "enabled"
)

// Defines values for BindTlsv13.
const (
	BindTlsv13Disabled BindTlsv13 = "disabled"
	BindTlsv13Enabled  BindTlsv13 = "enabled"
)

// Defines values for BindVerify.
const (
	BindVerifyNone     BindVerify = "none"
	BindVerifyOptional BindVerify = "optional"
	BindVerifyRequired BindVerify = "required"
)

// Defines values for BindParamsForceStrictSni.
const (
	BindParamsForceStrictSniDisabled BindParamsForceStrictSni = "disabled"
	BindParamsForceStrictSniEnabled  BindParamsForceStrictSni = "enabled"
)

// Defines values for BindParamsLevel.
const (
	BindParamsLevelAdmin    BindParamsLevel = "admin"
	BindParamsLevelOperator BindParamsLevel = "operator"
	BindParamsLevelUser     BindParamsLevel = "user"
)

// Defines values for BindParamsQuicCcAlgo.
const (
	BindParamsQuicCcAlgoBbr     BindParamsQuicCcAlgo = "bbr"
	BindParamsQuicCcAlgoCubic   BindParamsQuicCcAlgo = "cubic"
	BindParamsQuicCcAlgoNewreno BindParamsQuicCcAlgo = "newreno"
	BindParamsQuicCcAlgoNocc    BindParamsQuicCcAlgo = "nocc"
)

// Defines values for BindParamsQuicSocket.
const (
	BindParamsQuicSocketConnection BindParamsQuicSocket = "connection"
	BindParamsQuicSocketListener   BindParamsQuicSocket = "listener"
)

// Defines values for BindParamsSeverityOutput.
const (
	BindParamsSeverityOutputNone   BindParamsSeverityOutput = "none"
	BindParamsSeverityOutputNumber BindParamsSeverityOutput = "number"
	BindParamsSeverityOutputString BindParamsSeverityOutput = "string"
)

// Defines values for BindParamsSslMaxVer.
const (
	BindParamsSslMaxVerSSLv3  BindParamsSslMaxVer = "SSLv3"
	BindParamsSslMaxVerTLSv10 BindParamsSslMaxVer = "TLSv1.0"
	BindParamsSslMaxVerTLSv11 BindParamsSslMaxVer = "TLSv1.1"
	BindParamsSslMaxVerTLSv12 BindParamsSslMaxVer = "TLSv1.2"
	BindParamsSslMaxVerTLSv13 BindParamsSslMaxVer = "TLSv1.3"
)

// Defines values for BindParamsSslMinVer.
const (
	BindParamsSslMinVerSSLv3  BindParamsSslMinVer = "SSLv3"
	BindParamsSslMinVerTLSv10 BindParamsSslMinVer = "TLSv1.0"
	BindParamsSslMinVerTLSv11 BindParamsSslMinVer = "TLSv1.1"
	BindParamsSslMinVerTLSv12 BindParamsSslMinVer = "TLSv1.2"
	BindParamsSslMinVerTLSv13 BindParamsSslMinVer = "TLSv1.3"
)

// Defines values for BindParamsSslv3.
const (
	BindParamsSslv3Disabled BindParamsSslv3 = "disabled"
	BindParamsSslv3Enabled  BindParamsSslv3 = "enabled"
)

// Defines values for BindParamsTlsTickets.
const (
	BindParamsTlsTicketsDisabled BindParamsTlsTickets = "disabled"
	BindParamsTlsTicketsEnabled  BindParamsTlsTickets = "enabled"
)

// Defines values for BindParamsTlsv10.
const (
	BindParamsTlsv10Disabled BindParamsTlsv10 = "disabled"
	BindParamsTlsv10Enabled  BindParamsTlsv10 = "enabled"
)

// Defines values for BindParamsTlsv11.
const (
	BindParamsTlsv11Disabled BindParamsTlsv11 = "disabled"
	BindParamsTlsv11Enabled  BindParamsTlsv11 = "enabled"
)

// Defines values for BindParamsTlsv12.
const (
	BindParamsTlsv12Disabled BindParamsTlsv12 = "disabled"
	BindParamsTlsv12Enabled  BindParamsTlsv12 = "enabled"
)

// Defines values for BindParamsTlsv13.
const (
	BindParamsTlsv13Disabled BindParamsTlsv13 = "disabled"
	BindParamsTlsv13Enabled  BindParamsTlsv13 = "enabled"
)

// Defines values for BindParamsVerify.
const (
	BindParamsVerifyNone     BindParamsVerify = "none"
	BindParamsVerifyOptional BindParamsVerify = "optional"
	BindParamsVerifyRequired BindParamsVerify = "required"
)

// Defines values for CaptureType.
const (
	CaptureTypeRequest  CaptureType = "request"
	CaptureTypeResponse CaptureType = "response"
)

// Defines values for ClusterSettingsClusterLogTargetsProtocol.
const (
	ClusterSettingsClusterLogTargetsProtocolTcp ClusterSettingsClusterLogTargetsProtocol = "tcp"
	ClusterSettingsClusterLogTargetsProtocolUdp ClusterSettingsClusterLogTargetsProtocol = "udp"
)

// Defines values for ClusterSettingsMode.
const (
	Cluster ClusterSettingsMode = "cluster"
	Single  ClusterSettingsMode = "single"
)

// Defines values for ClusterSettingsStatus.
const (
	Active          ClusterSettingsStatus = "active"
	Unreachable     ClusterSettingsStatus = "unreachable"
	WaitingApproval ClusterSettingsStatus = "waiting_approval"
)

// Defines values for CompressionAlgoReq.
const (
	CompressionAlgoReqDeflate    CompressionAlgoReq = "deflate"
	CompressionAlgoReqGzip       CompressionAlgoReq = "gzip"
	CompressionAlgoReqIdentity   CompressionAlgoReq = "identity"
	CompressionAlgoReqRawDeflate CompressionAlgoReq = "raw-deflate"
)

// Defines values for CompressionAlgorithms.
const (
	CompressionAlgorithmsDeflate    CompressionAlgorithms = "deflate"
	CompressionAlgorithmsGzip       CompressionAlgorithms = "gzip"
	CompressionAlgorithmsIdentity   CompressionAlgorithms = "identity"
	CompressionAlgorithmsRawDeflate CompressionAlgorithms = "raw-deflate"
)

// Defines values for CompressionAlgosRes.
const (
	Deflate    CompressionAlgosRes = "deflate"
	Gzip       CompressionAlgosRes = "gzip"
	Identity   CompressionAlgosRes = "identity"
	RawDeflate CompressionAlgosRes = "raw-deflate"
)

// Defines values for CompressionDirection.
const (
	CompressionDirectionBoth     CompressionDirection = "both"
	CompressionDirectionRequest  CompressionDirection = "request"
	CompressionDirectionResponse CompressionDirection = "response"
)

// Defines values for ConfigStickTableSrvkey.
const (
	Addr ConfigStickTableSrvkey = "addr"
	Name ConfigStickTableSrvkey = "name"
)

// Defines values for ConfigStickTableType.
const (
	ConfigStickTableTypeBinary  ConfigStickTableType = "binary"
	ConfigStickTableTypeInteger ConfigStickTableType = "integer"
	ConfigStickTableTypeIp      ConfigStickTableType = "ip"
	ConfigStickTableTypeIpv6    ConfigStickTableType = "ipv6"
	ConfigStickTableTypeString  ConfigStickTableType = "string"
)

// Defines values for ConsulHealthCheckPolicy.
const (
	ConsulHealthCheckPolicyAll  ConsulHealthCheckPolicy = "all"
	ConsulHealthCheckPolicyAny  ConsulHealthCheckPolicy = "any"
	ConsulHealthCheckPolicyMin  ConsulHealthCheckPolicy = "min"
	ConsulHealthCheckPolicyNone ConsulHealthCheckPolicy = "none"
)

// Defines values for ConsulMode.
const (
	ConsulModeHttp  ConsulMode = "http"
	ConsulModeHttps ConsulMode = "https"
)

// Defines values for ConsulServerSlotsGrowthType.
const (
	ConsulServerSlotsGrowthTypeExponential ConsulServerSlotsGrowthType = "exponential"
	ConsulServerSlotsGrowthTypeLinear      ConsulServerSlotsGrowthType = "linear"
)

// Defines values for CookieType.
const (
	CookieTypeInsert  CookieType = "insert"
	CookieTypePrefix  CookieType = "prefix"
	CookieTypeRewrite CookieType = "rewrite"
)

// Defines values for CrtLoadOcspUpdate.
const (
	CrtLoadOcspUpdateDisabled CrtLoadOcspUpdate = "disabled"
	CrtLoadOcspUpdateEnabled  CrtLoadOcspUpdate = "enabled"
)

// Defines values for DefaultBindForceStrictSni.
const (
	DefaultBindForceStrictSniDisabled DefaultBindForceStrictSni = "disabled"
	DefaultBindForceStrictSniEnabled  DefaultBindForceStrictSni = "enabled"
)

// Defines values for DefaultBindLevel.
const (
	DefaultBindLevelAdmin    DefaultBindLevel = "admin"
	DefaultBindLevelOperator DefaultBindLevel = "operator"
	DefaultBindLevelUser     DefaultBindLevel = "user"
)

// Defines values for DefaultBindQuicCcAlgo.
const (
	DefaultBindQuicCcAlgoBbr     DefaultBindQuicCcAlgo = "bbr"
	DefaultBindQuicCcAlgoCubic   DefaultBindQuicCcAlgo = "cubic"
	DefaultBindQuicCcAlgoNewreno DefaultBindQuicCcAlgo = "newreno"
	DefaultBindQuicCcAlgoNocc    DefaultBindQuicCcAlgo = "nocc"
)

// Defines values for DefaultBindQuicSocket.
const (
	DefaultBindQuicSocketConnection DefaultBindQuicSocket = "connection"
	DefaultBindQuicSocketListener   DefaultBindQuicSocket = "listener"
)

// Defines values for DefaultBindSeverityOutput.
const (
	DefaultBindSeverityOutputNone   DefaultBindSeverityOutput = "none"
	DefaultBindSeverityOutputNumber DefaultBindSeverityOutput = "number"
	DefaultBindSeverityOutputString DefaultBindSeverityOutput = "string"
)

// Defines values for DefaultBindSslMaxVer.
const (
	DefaultBindSslMaxVerSSLv3  DefaultBindSslMaxVer = "SSLv3"
	DefaultBindSslMaxVerTLSv10 DefaultBindSslMaxVer = "TLSv1.0"
	DefaultBindSslMaxVerTLSv11 DefaultBindSslMaxVer = "TLSv1.1"
	DefaultBindSslMaxVerTLSv12 DefaultBindSslMaxVer = "TLSv1.2"
	DefaultBindSslMaxVerTLSv13 DefaultBindSslMaxVer = "TLSv1.3"
)

// Defines values for DefaultBindSslMinVer.
const (
	DefaultBindSslMinVerSSLv3  DefaultBindSslMinVer = "SSLv3"
	DefaultBindSslMinVerTLSv10 DefaultBindSslMinVer = "TLSv1.0"
	DefaultBindSslMinVerTLSv11 DefaultBindSslMinVer = "TLSv1.1"
	DefaultBindSslMinVerTLSv12 DefaultBindSslMinVer = "TLSv1.2"
	DefaultBindSslMinVerTLSv13 DefaultBindSslMinVer = "TLSv1.3"
)

// Defines values for DefaultBindSslv3.
const (
	DefaultBindSslv3Disabled DefaultBindSslv3 = "disabled"
	DefaultBindSslv3Enabled  DefaultBindSslv3 = "enabled"
)

// Defines values for DefaultBindTlsTickets.
const (
	DefaultBindTlsTicketsDisabled DefaultBindTlsTickets = "disabled"
	DefaultBindTlsTicketsEnabled  DefaultBindTlsTickets = "enabled"
)

// Defines values for DefaultBindTlsv10.
const (
	DefaultBindTlsv10Disabled DefaultBindTlsv10 = "disabled"
	DefaultBindTlsv10Enabled  DefaultBindTlsv10 = "enabled"
)

// Defines values for DefaultBindTlsv11.
const (
	DefaultBindTlsv11Disabled DefaultBindTlsv11 = "disabled"
	DefaultBindTlsv11Enabled  DefaultBindTlsv11 = "enabled"
)

// Defines values for DefaultBindTlsv12.
const (
	DefaultBindTlsv12Disabled DefaultBindTlsv12 = "disabled"
	DefaultBindTlsv12Enabled  DefaultBindTlsv12 = "enabled"
)

// Defines values for DefaultBindTlsv13.
const (
	DefaultBindTlsv13Disabled DefaultBindTlsv13 = "disabled"
	DefaultBindTlsv13Enabled  DefaultBindTlsv13 = "enabled"
)

// Defines values for DefaultBindVerify.
const (
	DefaultBindVerifyNone     DefaultBindVerify = "none"
	DefaultBindVerifyOptional DefaultBindVerify = "optional"
	DefaultBindVerifyRequired DefaultBindVerify = "required"
)

// Defines values for DefaultsAbortonclose.
const (
	DefaultsAbortoncloseDisabled DefaultsAbortonclose = "disabled"
	DefaultsAbortoncloseEnabled  DefaultsAbortonclose = "enabled"
)

// Defines values for DefaultsAcceptInvalidHttpRequest.
const (
	DefaultsAcceptInvalidHttpRequestDisabled DefaultsAcceptInvalidHttpRequest = "disabled"
	DefaultsAcceptInvalidHttpRequestEnabled  DefaultsAcceptInvalidHttpRequest = "enabled"
)

// Defines values for DefaultsAcceptInvalidHttpResponse.
const (
	DefaultsAcceptInvalidHttpResponseDisabled DefaultsAcceptInvalidHttpResponse = "disabled"
	DefaultsAcceptInvalidHttpResponseEnabled  DefaultsAcceptInvalidHttpResponse = "enabled"
)

// Defines values for DefaultsAcceptUnsafeViolationsInHttpRequest.
const (
	DefaultsAcceptUnsafeViolationsInHttpRequestDisabled DefaultsAcceptUnsafeViolationsInHttpRequest = "disabled"
	DefaultsAcceptUnsafeViolationsInHttpRequestEnabled  DefaultsAcceptUnsafeViolationsInHttpRequest = "enabled"
)

// Defines values for DefaultsAcceptUnsafeViolationsInHttpResponse.
const (
	DefaultsAcceptUnsafeViolationsInHttpResponseDisabled DefaultsAcceptUnsafeViolationsInHttpResponse = "disabled"
	DefaultsAcceptUnsafeViolationsInHttpResponseEnabled  DefaultsAcceptUnsafeViolationsInHttpResponse = "enabled"
)

// Defines values for DefaultsAdvCheck.
const (
	DefaultsAdvCheckHttpchk     DefaultsAdvCheck = "httpchk"
	DefaultsAdvCheckLdapCheck   DefaultsAdvCheck = "ldap-check"
	DefaultsAdvCheckMysqlCheck  DefaultsAdvCheck = "mysql-check"
	DefaultsAdvCheckPgsqlCheck  DefaultsAdvCheck = "pgsql-check"
	DefaultsAdvCheckRedisCheck  DefaultsAdvCheck = "redis-check"
	DefaultsAdvCheckSmtpchk     DefaultsAdvCheck = "smtpchk"
	DefaultsAdvCheckSslHelloChk DefaultsAdvCheck = "ssl-hello-chk"
	DefaultsAdvCheckTcpCheck    DefaultsAdvCheck = "tcp-check"
)

// Defines values for DefaultsAllbackups.
const (
	DefaultsAllbackupsDisabled DefaultsAllbackups = "disabled"
	DefaultsAllbackupsEnabled  DefaultsAllbackups = "enabled"
)

// Defines values for DefaultsCheckcache.
const (
	DefaultsCheckcacheDisabled DefaultsCheckcache = "disabled"
	DefaultsCheckcacheEnabled  DefaultsCheckcache = "enabled"
)

// Defines values for DefaultsClitcpka.
const (
	DefaultsClitcpkaDisabled DefaultsClitcpka = "disabled"
	DefaultsClitcpkaEnabled  DefaultsClitcpka = "enabled"
)

// Defines values for DefaultsContstats.
const (
	DefaultsContstatsEnabled DefaultsContstats = "enabled"
)

// Defines values for DefaultsDisableH2Upgrade.
const (
	DefaultsDisableH2UpgradeDisabled DefaultsDisableH2Upgrade = "disabled"
	DefaultsDisableH2UpgradeEnabled  DefaultsDisableH2Upgrade = "enabled"
)

// Defines values for DefaultsDontlogNormal.
const (
	DefaultsDontlogNormalDisabled DefaultsDontlogNormal = "disabled"
	DefaultsDontlogNormalEnabled  DefaultsDontlogNormal = "enabled"
)

// Defines values for DefaultsDontlognull.
const (
	DefaultsDontlognullDisabled DefaultsDontlognull = "disabled"
	DefaultsDontlognullEnabled  DefaultsDontlognull = "enabled"
)

// Defines values for DefaultsExternalCheck.
const (
	DefaultsExternalCheckDisabled DefaultsExternalCheck = "disabled"
	DefaultsExternalCheckEnabled  DefaultsExternalCheck = "enabled"
)

// Defines values for DefaultsH1CaseAdjustBogusClient.
const (
	DefaultsH1CaseAdjustBogusClientDisabled DefaultsH1CaseAdjustBogusClient = "disabled"
	DefaultsH1CaseAdjustBogusClientEnabled  DefaultsH1CaseAdjustBogusClient = "enabled"
)

// Defines values for DefaultsH1CaseAdjustBogusServer.
const (
	DefaultsH1CaseAdjustBogusServerDisabled DefaultsH1CaseAdjustBogusServer = "disabled"
	DefaultsH1CaseAdjustBogusServerEnabled  DefaultsH1CaseAdjustBogusServer = "enabled"
)

// Defines values for DefaultsHashPreserveAffinity.
const (
	DefaultsHashPreserveAffinityAlways   DefaultsHashPreserveAffinity = "always"
	DefaultsHashPreserveAffinityMaxconn  DefaultsHashPreserveAffinity = "maxconn"
	DefaultsHashPreserveAffinityMaxqueue DefaultsHashPreserveAffinity = "maxqueue"
)

// Defines values for DefaultsHttpBufferRequest.
const (
	DefaultsHttpBufferRequestDisabled DefaultsHttpBufferRequest = "disabled"
	DefaultsHttpBufferRequestEnabled  DefaultsHttpBufferRequest = "enabled"
)

// Defines values for DefaultsHttpDropRequestTrailers.
const (
	DefaultsHttpDropRequestTrailersDisabled DefaultsHttpDropRequestTrailers = "disabled"
	DefaultsHttpDropRequestTrailersEnabled  DefaultsHttpDropRequestTrailers = "enabled"
)

// Defines values for DefaultsHttpDropResponseTrailers.
const (
	DefaultsHttpDropResponseTrailersDisabled DefaultsHttpDropResponseTrailers = "disabled"
	DefaultsHttpDropResponseTrailersEnabled  DefaultsHttpDropResponseTrailers = "enabled"
)

// Defines values for DefaultsHttpUseHtx.
const (
	DefaultsHttpUseHtxDisabled DefaultsHttpUseHtx = "disabled"
	DefaultsHttpUseHtxEnabled  DefaultsHttpUseHtx = "enabled"
)

// Defines values for DefaultsHttpConnectionMode.
const (
	DefaultsHttpConnectionModeHttpKeepAlive   DefaultsHttpConnectionMode = "http-keep-alive"
	DefaultsHttpConnectionModeHttpServerClose DefaultsHttpConnectionMode = "http-server-close"
	DefaultsHttpConnectionModeHttpclose       DefaultsHttpConnectionMode = "httpclose"
)

// Defines values for DefaultsHttpIgnoreProbes.
const (
	DefaultsHttpIgnoreProbesDisabled DefaultsHttpIgnoreProbes = "disabled"
	DefaultsHttpIgnoreProbesEnabled  DefaultsHttpIgnoreProbes = "enabled"
)

// Defines values for DefaultsHttpNoDelay.
const (
	DefaultsHttpNoDelayDisabled DefaultsHttpNoDelay = "disabled"
	DefaultsHttpNoDelayEnabled  DefaultsHttpNoDelay = "enabled"
)

// Defines values for DefaultsHttpPretendKeepalive.
const (
	DefaultsHttpPretendKeepaliveDisabled DefaultsHttpPretendKeepalive = "disabled"
	DefaultsHttpPretendKeepaliveEnabled  DefaultsHttpPretendKeepalive = "enabled"
)

// Defines values for DefaultsHttpRestrictReqHdrNames.
const (
	DefaultsHttpRestrictReqHdrNamesDelete   DefaultsHttpRestrictReqHdrNames = "delete"
	DefaultsHttpRestrictReqHdrNamesPreserve DefaultsHttpRestrictReqHdrNames = "preserve"
	DefaultsHttpRestrictReqHdrNamesReject   DefaultsHttpRestrictReqHdrNames = "reject"
)

// Defines values for DefaultsHttpReuse.
const (
	DefaultsHttpReuseAggressive DefaultsHttpReuse = "aggressive"
	DefaultsHttpReuseAlways     DefaultsHttpReuse = "always"
	DefaultsHttpReuseNever      DefaultsHttpReuse = "never"
	DefaultsHttpReuseSafe       DefaultsHttpReuse = "safe"
)

// Defines values for DefaultsHttpUseProxyHeader.
const (
	DefaultsHttpUseProxyHeaderDisabled DefaultsHttpUseProxyHeader = "disabled"
	DefaultsHttpUseProxyHeaderEnabled  DefaultsHttpUseProxyHeader = "enabled"
)

// Defines values for DefaultsHttpslog.
const (
	DefaultsHttpslogDisabled DefaultsHttpslog = "disabled"
	DefaultsHttpslogEnabled  DefaultsHttpslog = "enabled"
)

// Defines values for DefaultsIdleCloseOnResponse.
const (
	DefaultsIdleCloseOnResponseDisabled DefaultsIdleCloseOnResponse = "disabled"
	DefaultsIdleCloseOnResponseEnabled  DefaultsIdleCloseOnResponse = "enabled"
)

// Defines values for DefaultsIndependentStreams.
const (
	DefaultsIndependentStreamsDisabled DefaultsIndependentStreams = "disabled"
	DefaultsIndependentStreamsEnabled  DefaultsIndependentStreams = "enabled"
)

// Defines values for DefaultsLoadServerStateFromFile.
const (
	DefaultsLoadServerStateFromFileGlobal DefaultsLoadServerStateFromFile = "global"
	DefaultsLoadServerStateFromFileLocal  DefaultsLoadServerStateFromFile = "local"
	DefaultsLoadServerStateFromFileNone   DefaultsLoadServerStateFromFile = "none"
)

// Defines values for DefaultsLogHealthChecks.
const (
	DefaultsLogHealthChecksDisabled DefaultsLogHealthChecks = "disabled"
	DefaultsLogHealthChecksEnabled  DefaultsLogHealthChecks = "enabled"
)

// Defines values for DefaultsLogSeparateErrors.
const (
	DefaultsLogSeparateErrorsDisabled DefaultsLogSeparateErrors = "disabled"
	DefaultsLogSeparateErrorsEnabled  DefaultsLogSeparateErrors = "enabled"
)

// Defines values for DefaultsLogSteps.
const (
	DefaultsLogStepsAccept   DefaultsLogSteps = "accept"
	DefaultsLogStepsAny      DefaultsLogSteps = "any"
	DefaultsLogStepsClose    DefaultsLogSteps = "close"
	DefaultsLogStepsConnect  DefaultsLogSteps = "connect"
	DefaultsLogStepsError    DefaultsLogSteps = "error"
	DefaultsLogStepsRequest  DefaultsLogSteps = "request"
	DefaultsLogStepsResponse DefaultsLogSteps = "response"
)

// Defines values for DefaultsLogasap.
const (
	DefaultsLogasapDisabled DefaultsLogasap = "disabled"
	DefaultsLogasapEnabled  DefaultsLogasap = "enabled"
)

// Defines values for DefaultsMode.
const (
	DefaultsModeHttp DefaultsMode = "http"
	DefaultsModeLog  DefaultsMode = "log"
	DefaultsModeTcp  DefaultsMode = "tcp"
)

// Defines values for DefaultsNolinger.
const (
	DefaultsNolingerDisabled DefaultsNolinger = "disabled"
	DefaultsNolingerEnabled  DefaultsNolinger = "enabled"
)

// Defines values for DefaultsPersist.
const (
	DefaultsPersistDisabled DefaultsPersist = "disabled"
	DefaultsPersistEnabled  DefaultsPersist = "enabled"
)

// Defines values for DefaultsPreferLastServer.
const (
	DefaultsPreferLastServerDisabled DefaultsPreferLastServer = "disabled"
	DefaultsPreferLastServerEnabled  DefaultsPreferLastServer = "enabled"
)

// Defines values for DefaultsSocketStats.
const (
	DefaultsSocketStatsDisabled DefaultsSocketStats = "disabled"
	DefaultsSocketStatsEnabled  DefaultsSocketStats = "enabled"
)

// Defines values for DefaultsSpliceAuto.
const (
	DefaultsSpliceAutoDisabled DefaultsSpliceAuto = "disabled"
	DefaultsSpliceAutoEnabled  DefaultsSpliceAuto = "enabled"
)

// Defines values for DefaultsSpliceRequest.
const (
	DefaultsSpliceRequestDisabled DefaultsSpliceRequest = "disabled"
	DefaultsSpliceRequestEnabled  DefaultsSpliceRequest = "enabled"
)

// Defines values for DefaultsSpliceResponse.
const (
	DefaultsSpliceResponseDisabled DefaultsSpliceResponse = "disabled"
	DefaultsSpliceResponseEnabled  DefaultsSpliceResponse = "enabled"
)

// Defines values for DefaultsSrvtcpka.
const (
	DefaultsSrvtcpkaDisabled DefaultsSrvtcpka = "disabled"
	DefaultsSrvtcpkaEnabled  DefaultsSrvtcpka = "enabled"
)

// Defines values for DefaultsTcpSmartAccept.
const (
	DefaultsTcpSmartAcceptDisabled DefaultsTcpSmartAccept = "disabled"
	DefaultsTcpSmartAcceptEnabled  DefaultsTcpSmartAccept = "enabled"
)

// Defines values for DefaultsTcpSmartConnect.
const (
	DefaultsTcpSmartConnectDisabled DefaultsTcpSmartConnect = "disabled"
	DefaultsTcpSmartConnectEnabled  DefaultsTcpSmartConnect = "enabled"
)

// Defines values for DefaultsTcpka.
const (
	DefaultsTcpkaDisabled DefaultsTcpka = "disabled"
	DefaultsTcpkaEnabled  DefaultsTcpka = "enabled"
)

// Defines values for DefaultsTransparent.
const (
	DefaultsTransparentDisabled DefaultsTransparent = "disabled"
	DefaultsTransparentEnabled  DefaultsTransparent = "enabled"
)

// Defines values for DefaultsBaseAbortonclose.
const (
	DefaultsBaseAbortoncloseDisabled DefaultsBaseAbortonclose = "disabled"
	DefaultsBaseAbortoncloseEnabled  DefaultsBaseAbortonclose = "enabled"
)

// Defines values for DefaultsBaseAcceptInvalidHttpRequest.
const (
	DefaultsBaseAcceptInvalidHttpRequestDisabled DefaultsBaseAcceptInvalidHttpRequest = "disabled"
	DefaultsBaseAcceptInvalidHttpRequestEnabled  DefaultsBaseAcceptInvalidHttpRequest = "enabled"
)

// Defines values for DefaultsBaseAcceptInvalidHttpResponse.
const (
	DefaultsBaseAcceptInvalidHttpResponseDisabled DefaultsBaseAcceptInvalidHttpResponse = "disabled"
	DefaultsBaseAcceptInvalidHttpResponseEnabled  DefaultsBaseAcceptInvalidHttpResponse = "enabled"
)

// Defines values for DefaultsBaseAcceptUnsafeViolationsInHttpRequest.
const (
	DefaultsBaseAcceptUnsafeViolationsInHttpRequestDisabled DefaultsBaseAcceptUnsafeViolationsInHttpRequest = "disabled"
	DefaultsBaseAcceptUnsafeViolationsInHttpRequestEnabled  DefaultsBaseAcceptUnsafeViolationsInHttpRequest = "enabled"
)

// Defines values for DefaultsBaseAcceptUnsafeViolationsInHttpResponse.
const (
	DefaultsBaseAcceptUnsafeViolationsInHttpResponseDisabled DefaultsBaseAcceptUnsafeViolationsInHttpResponse = "disabled"
	DefaultsBaseAcceptUnsafeViolationsInHttpResponseEnabled  DefaultsBaseAcceptUnsafeViolationsInHttpResponse = "enabled"
)

// Defines values for DefaultsBaseAdvCheck.
const (
	DefaultsBaseAdvCheckHttpchk     DefaultsBaseAdvCheck = "httpchk"
	DefaultsBaseAdvCheckLdapCheck   DefaultsBaseAdvCheck = "ldap-check"
	DefaultsBaseAdvCheckMysqlCheck  DefaultsBaseAdvCheck = "mysql-check"
	DefaultsBaseAdvCheckPgsqlCheck  DefaultsBaseAdvCheck = "pgsql-check"
	DefaultsBaseAdvCheckRedisCheck  DefaultsBaseAdvCheck = "redis-check"
	DefaultsBaseAdvCheckSmtpchk     DefaultsBaseAdvCheck = "smtpchk"
	DefaultsBaseAdvCheckSslHelloChk DefaultsBaseAdvCheck = "ssl-hello-chk"
	DefaultsBaseAdvCheckTcpCheck    DefaultsBaseAdvCheck = "tcp-check"
)

// Defines values for DefaultsBaseAllbackups.
const (
	DefaultsBaseAllbackupsDisabled DefaultsBaseAllbackups = "disabled"
	DefaultsBaseAllbackupsEnabled  DefaultsBaseAllbackups = "enabled"
)

// Defines values for DefaultsBaseCheckcache.
const (
	DefaultsBaseCheckcacheDisabled DefaultsBaseCheckcache = "disabled"
	DefaultsBaseCheckcacheEnabled  DefaultsBaseCheckcache = "enabled"
)

// Defines values for DefaultsBaseClitcpka.
const (
	DefaultsBaseClitcpkaDisabled DefaultsBaseClitcpka = "disabled"
	DefaultsBaseClitcpkaEnabled  DefaultsBaseClitcpka = "enabled"
)

// Defines values for DefaultsBaseContstats.
const (
	DefaultsBaseContstatsEnabled DefaultsBaseContstats = "enabled"
)

// Defines values for DefaultsBaseDisableH2Upgrade.
const (
	DefaultsBaseDisableH2UpgradeDisabled DefaultsBaseDisableH2Upgrade = "disabled"
	DefaultsBaseDisableH2UpgradeEnabled  DefaultsBaseDisableH2Upgrade = "enabled"
)

// Defines values for DefaultsBaseDontlogNormal.
const (
	DefaultsBaseDontlogNormalDisabled DefaultsBaseDontlogNormal = "disabled"
	DefaultsBaseDontlogNormalEnabled  DefaultsBaseDontlogNormal = "enabled"
)

// Defines values for DefaultsBaseDontlognull.
const (
	DefaultsBaseDontlognullDisabled DefaultsBaseDontlognull = "disabled"
	DefaultsBaseDontlognullEnabled  DefaultsBaseDontlognull = "enabled"
)

// Defines values for DefaultsBaseExternalCheck.
const (
	DefaultsBaseExternalCheckDisabled DefaultsBaseExternalCheck = "disabled"
	DefaultsBaseExternalCheckEnabled  DefaultsBaseExternalCheck = "enabled"
)

// Defines values for DefaultsBaseH1CaseAdjustBogusClient.
const (
	DefaultsBaseH1CaseAdjustBogusClientDisabled DefaultsBaseH1CaseAdjustBogusClient = "disabled"
	DefaultsBaseH1CaseAdjustBogusClientEnabled  DefaultsBaseH1CaseAdjustBogusClient = "enabled"
)

// Defines values for DefaultsBaseH1CaseAdjustBogusServer.
const (
	DefaultsBaseH1CaseAdjustBogusServerDisabled DefaultsBaseH1CaseAdjustBogusServer = "disabled"
	DefaultsBaseH1CaseAdjustBogusServerEnabled  DefaultsBaseH1CaseAdjustBogusServer = "enabled"
)

// Defines values for DefaultsBaseHashPreserveAffinity.
const (
	DefaultsBaseHashPreserveAffinityAlways   DefaultsBaseHashPreserveAffinity = "always"
	DefaultsBaseHashPreserveAffinityMaxconn  DefaultsBaseHashPreserveAffinity = "maxconn"
	DefaultsBaseHashPreserveAffinityMaxqueue DefaultsBaseHashPreserveAffinity = "maxqueue"
)

// Defines values for DefaultsBaseHttpBufferRequest.
const (
	DefaultsBaseHttpBufferRequestDisabled DefaultsBaseHttpBufferRequest = "disabled"
	DefaultsBaseHttpBufferRequestEnabled  DefaultsBaseHttpBufferRequest = "enabled"
)

// Defines values for DefaultsBaseHttpDropRequestTrailers.
const (
	DefaultsBaseHttpDropRequestTrailersDisabled DefaultsBaseHttpDropRequestTrailers = "disabled"
	DefaultsBaseHttpDropRequestTrailersEnabled  DefaultsBaseHttpDropRequestTrailers = "enabled"
)

// Defines values for DefaultsBaseHttpDropResponseTrailers.
const (
	DefaultsBaseHttpDropResponseTrailersDisabled DefaultsBaseHttpDropResponseTrailers = "disabled"
	DefaultsBaseHttpDropResponseTrailersEnabled  DefaultsBaseHttpDropResponseTrailers = "enabled"
)

// Defines values for DefaultsBaseHttpUseHtx.
const (
	DefaultsBaseHttpUseHtxDisabled DefaultsBaseHttpUseHtx = "disabled"
	DefaultsBaseHttpUseHtxEnabled  DefaultsBaseHttpUseHtx = "enabled"
)

// Defines values for DefaultsBaseHttpConnectionMode.
const (
	DefaultsBaseHttpConnectionModeHttpKeepAlive   DefaultsBaseHttpConnectionMode = "http-keep-alive"
	DefaultsBaseHttpConnectionModeHttpServerClose DefaultsBaseHttpConnectionMode = "http-server-close"
	DefaultsBaseHttpConnectionModeHttpclose       DefaultsBaseHttpConnectionMode = "httpclose"
)

// Defines values for DefaultsBaseHttpIgnoreProbes.
const (
	DefaultsBaseHttpIgnoreProbesDisabled DefaultsBaseHttpIgnoreProbes = "disabled"
	DefaultsBaseHttpIgnoreProbesEnabled  DefaultsBaseHttpIgnoreProbes = "enabled"
)

// Defines values for DefaultsBaseHttpNoDelay.
const (
	DefaultsBaseHttpNoDelayDisabled DefaultsBaseHttpNoDelay = "disabled"
	DefaultsBaseHttpNoDelayEnabled  DefaultsBaseHttpNoDelay = "enabled"
)

// Defines values for DefaultsBaseHttpPretendKeepalive.
const (
	DefaultsBaseHttpPretendKeepaliveDisabled DefaultsBaseHttpPretendKeepalive = "disabled"
	DefaultsBaseHttpPretendKeepaliveEnabled  DefaultsBaseHttpPretendKeepalive = "enabled"
)

// Defines values for DefaultsBaseHttpRestrictReqHdrNames.
const (
	DefaultsBaseHttpRestrictReqHdrNamesDelete   DefaultsBaseHttpRestrictReqHdrNames = "delete"
	DefaultsBaseHttpRestrictReqHdrNamesPreserve DefaultsBaseHttpRestrictReqHdrNames = "preserve"
	DefaultsBaseHttpRestrictReqHdrNamesReject   DefaultsBaseHttpRestrictReqHdrNames = "reject"
)

// Defines values for DefaultsBaseHttpReuse.
const (
	DefaultsBaseHttpReuseAggressive DefaultsBaseHttpReuse = "aggressive"
	DefaultsBaseHttpReuseAlways     DefaultsBaseHttpReuse = "always"
	DefaultsBaseHttpReuseNever      DefaultsBaseHttpReuse = "never"
	DefaultsBaseHttpReuseSafe       DefaultsBaseHttpReuse = "safe"
)

// Defines values for DefaultsBaseHttpUseProxyHeader.
const (
	DefaultsBaseHttpUseProxyHeaderDisabled DefaultsBaseHttpUseProxyHeader = "disabled"
	DefaultsBaseHttpUseProxyHeaderEnabled  DefaultsBaseHttpUseProxyHeader = "enabled"
)

// Defines values for DefaultsBaseHttpslog.
const (
	DefaultsBaseHttpslogDisabled DefaultsBaseHttpslog = "disabled"
	DefaultsBaseHttpslogEnabled  DefaultsBaseHttpslog = "enabled"
)

// Defines values for DefaultsBaseIdleCloseOnResponse.
const (
	DefaultsBaseIdleCloseOnResponseDisabled DefaultsBaseIdleCloseOnResponse = "disabled"
	DefaultsBaseIdleCloseOnResponseEnabled  DefaultsBaseIdleCloseOnResponse = "enabled"
)

// Defines values for DefaultsBaseIndependentStreams.
const (
	DefaultsBaseIndependentStreamsDisabled DefaultsBaseIndependentStreams = "disabled"
	DefaultsBaseIndependentStreamsEnabled  DefaultsBaseIndependentStreams = "enabled"
)

// Defines values for DefaultsBaseLoadServerStateFromFile.
const (
	DefaultsBaseLoadServerStateFromFileGlobal DefaultsBaseLoadServerStateFromFile = "global"
	DefaultsBaseLoadServerStateFromFileLocal  DefaultsBaseLoadServerStateFromFile = "local"
	DefaultsBaseLoadServerStateFromFileNone   DefaultsBaseLoadServerStateFromFile = "none"
)

// Defines values for DefaultsBaseLogHealthChecks.
const (
	DefaultsBaseLogHealthChecksDisabled DefaultsBaseLogHealthChecks = "disabled"
	DefaultsBaseLogHealthChecksEnabled  DefaultsBaseLogHealthChecks = "enabled"
)

// Defines values for DefaultsBaseLogSeparateErrors.
const (
	DefaultsBaseLogSeparateErrorsDisabled DefaultsBaseLogSeparateErrors = "disabled"
	DefaultsBaseLogSeparateErrorsEnabled  DefaultsBaseLogSeparateErrors = "enabled"
)

// Defines values for DefaultsBaseLogSteps.
const (
	DefaultsBaseLogStepsAccept   DefaultsBaseLogSteps = "accept"
	DefaultsBaseLogStepsAny      DefaultsBaseLogSteps = "any"
	DefaultsBaseLogStepsClose    DefaultsBaseLogSteps = "close"
	DefaultsBaseLogStepsConnect  DefaultsBaseLogSteps = "connect"
	DefaultsBaseLogStepsError    DefaultsBaseLogSteps = "error"
	DefaultsBaseLogStepsRequest  DefaultsBaseLogSteps = "request"
	DefaultsBaseLogStepsResponse DefaultsBaseLogSteps = "response"
)

// Defines values for DefaultsBaseLogasap.
const (
	DefaultsBaseLogasapDisabled DefaultsBaseLogasap = "disabled"
	DefaultsBaseLogasapEnabled  DefaultsBaseLogasap = "enabled"
)

// Defines values for DefaultsBaseMode.
const (
	DefaultsBaseModeHttp DefaultsBaseMode = "http"
	DefaultsBaseModeLog  DefaultsBaseMode = "log"
	DefaultsBaseModeTcp  DefaultsBaseMode = "tcp"
)

// Defines values for DefaultsBaseNolinger.
const (
	DefaultsBaseNolingerDisabled DefaultsBaseNolinger = "disabled"
	DefaultsBaseNolingerEnabled  DefaultsBaseNolinger = "enabled"
)

// Defines values for DefaultsBasePersist.
const (
	DefaultsBasePersistDisabled DefaultsBasePersist = "disabled"
	DefaultsBasePersistEnabled  DefaultsBasePersist = "enabled"
)

// Defines values for DefaultsBasePreferLastServer.
const (
	DefaultsBasePreferLastServerDisabled DefaultsBasePreferLastServer = "disabled"
	DefaultsBasePreferLastServerEnabled  DefaultsBasePreferLastServer = "enabled"
)

// Defines values for DefaultsBaseSocketStats.
const (
	DefaultsBaseSocketStatsDisabled DefaultsBaseSocketStats = "disabled"
	DefaultsBaseSocketStatsEnabled  DefaultsBaseSocketStats = "enabled"
)

// Defines values for DefaultsBaseSpliceAuto.
const (
	DefaultsBaseSpliceAutoDisabled DefaultsBaseSpliceAuto = "disabled"
	DefaultsBaseSpliceAutoEnabled  DefaultsBaseSpliceAuto = "enabled"
)

// Defines values for DefaultsBaseSpliceRequest.
const (
	DefaultsBaseSpliceRequestDisabled DefaultsBaseSpliceRequest = "disabled"
	DefaultsBaseSpliceRequestEnabled  DefaultsBaseSpliceRequest = "enabled"
)

// Defines values for DefaultsBaseSpliceResponse.
const (
	DefaultsBaseSpliceResponseDisabled DefaultsBaseSpliceResponse = "disabled"
	DefaultsBaseSpliceResponseEnabled  DefaultsBaseSpliceResponse = "enabled"
)

// Defines values for DefaultsBaseSrvtcpka.
const (
	DefaultsBaseSrvtcpkaDisabled DefaultsBaseSrvtcpka = "disabled"
	DefaultsBaseSrvtcpkaEnabled  DefaultsBaseSrvtcpka = "enabled"
)

// Defines values for DefaultsBaseTcpSmartAccept.
const (
	DefaultsBaseTcpSmartAcceptDisabled DefaultsBaseTcpSmartAccept = "disabled"
	DefaultsBaseTcpSmartAcceptEnabled  DefaultsBaseTcpSmartAccept = "enabled"
)

// Defines values for DefaultsBaseTcpSmartConnect.
const (
	DefaultsBaseTcpSmartConnectDisabled DefaultsBaseTcpSmartConnect = "disabled"
	DefaultsBaseTcpSmartConnectEnabled  DefaultsBaseTcpSmartConnect = "enabled"
)

// Defines values for DefaultsBaseTcpka.
const (
	DefaultsBaseTcpkaDisabled DefaultsBaseTcpka = "disabled"
	DefaultsBaseTcpkaEnabled  DefaultsBaseTcpka = "enabled"
)

// Defines values for DefaultsBaseTransparent.
const (
	DefaultsBaseTransparentDisabled DefaultsBaseTransparent = "disabled"
	DefaultsBaseTransparentEnabled  DefaultsBaseTransparent = "enabled"
)

// Defines values for EmailAlertLevel.
const (
	EmailAlertLevelAlert   EmailAlertLevel = "alert"
	EmailAlertLevelCrit    EmailAlertLevel = "crit"
	EmailAlertLevelDebug   EmailAlertLevel = "debug"
	EmailAlertLevelEmerg   EmailAlertLevel = "emerg"
	EmailAlertLevelErr     EmailAlertLevel = "err"
	EmailAlertLevelInfo    EmailAlertLevel = "info"
	EmailAlertLevelNotice  EmailAlertLevel = "notice"
	EmailAlertLevelWarning EmailAlertLevel = "warning"
)

// Defines values for ErrorfileCode.
const (
	ErrorfileCodeN200 ErrorfileCode = 200
	ErrorfileCodeN400 ErrorfileCode = 400
	ErrorfileCodeN401 ErrorfileCode = 401
	ErrorfileCodeN403 ErrorfileCode = 403
	ErrorfileCodeN404 ErrorfileCode = 404
	ErrorfileCodeN405 ErrorfileCode = 405
	ErrorfileCodeN407 ErrorfileCode = 407
	ErrorfileCodeN408 ErrorfileCode = 408
	ErrorfileCodeN410 ErrorfileCode = 410
	ErrorfileCodeN413 ErrorfileCode = 413
	ErrorfileCodeN425 ErrorfileCode = 425
	ErrorfileCodeN429 ErrorfileCode = 429
	ErrorfileCodeN500 ErrorfileCode = 500
	ErrorfileCodeN501 ErrorfileCode = 501
	ErrorfileCodeN502 ErrorfileCode = 502
	ErrorfileCodeN503 ErrorfileCode = 503
	ErrorfileCodeN504 ErrorfileCode = 504
)

// Defines values for ErrorfilesCodes.
const (
	ErrorfilesCodesN200 ErrorfilesCodes = 200
	ErrorfilesCodesN400 ErrorfilesCodes = 400
	ErrorfilesCodesN401 ErrorfilesCodes = 401
	ErrorfilesCodesN403 ErrorfilesCodes = 403
	ErrorfilesCodesN404 ErrorfilesCodes = 404
	ErrorfilesCodesN405 ErrorfilesCodes = 405
	ErrorfilesCodesN407 ErrorfilesCodes = 407
	ErrorfilesCodesN408 ErrorfilesCodes = 408
	ErrorfilesCodesN410 ErrorfilesCodes = 410
	ErrorfilesCodesN413 ErrorfilesCodes = 413
	ErrorfilesCodesN425 ErrorfilesCodes = 425
	ErrorfilesCodesN429 ErrorfilesCodes = 429
	ErrorfilesCodesN500 ErrorfilesCodes = 500
	ErrorfilesCodesN501 ErrorfilesCodes = 501
	ErrorfilesCodesN502 ErrorfilesCodes = 502
	ErrorfilesCodesN503 ErrorfilesCodes = 503
	ErrorfilesCodesN504 ErrorfilesCodes = 504
)

// Defines values for ErrorlocCode.
const (
	ErrorlocCodeN200 ErrorlocCode = 200
	ErrorlocCodeN400 ErrorlocCode = 400
	ErrorlocCodeN401 ErrorlocCode = 401
	ErrorlocCodeN403 ErrorlocCode = 403
	ErrorlocCodeN404 ErrorlocCode = 404
	ErrorlocCodeN405 ErrorlocCode = 405
	ErrorlocCodeN407 ErrorlocCode = 407
	ErrorlocCodeN408 ErrorlocCode = 408
	ErrorlocCodeN410 ErrorlocCode = 410
	ErrorlocCodeN413 ErrorlocCode = 413
	ErrorlocCodeN425 ErrorlocCode = 425
	ErrorlocCodeN429 ErrorlocCode = 429
	ErrorlocCodeN500 ErrorlocCode = 500
	ErrorlocCodeN501 ErrorlocCode = 501
	ErrorlocCodeN502 ErrorlocCode = 502
	ErrorlocCodeN503 ErrorlocCode = 503
	ErrorlocCodeN504 ErrorlocCode = 504
)

// Defines values for FcgiAppGetValues.
const (
	FcgiAppGetValuesDisabled FcgiAppGetValues = "disabled"
	FcgiAppGetValuesEnabled  FcgiAppGetValues = "enabled"
)

// Defines values for FcgiAppKeepConn.
const (
	FcgiAppKeepConnDisabled FcgiAppKeepConn = "disabled"
	FcgiAppKeepConnEnabled  FcgiAppKeepConn = "enabled"
)

// Defines values for FcgiAppMpxsConns.
const (
	FcgiAppMpxsConnsDisabled FcgiAppMpxsConns = "disabled"
	FcgiAppMpxsConnsEnabled  FcgiAppMpxsConns = "enabled"
)

// Defines values for FcgiAppBaseGetValues.
const (
	FcgiAppBaseGetValuesDisabled FcgiAppBaseGetValues = "disabled"
	FcgiAppBaseGetValuesEnabled  FcgiAppBaseGetValues = "enabled"
)

// Defines values for FcgiAppBaseKeepConn.
const (
	FcgiAppBaseKeepConnDisabled FcgiAppBaseKeepConn = "disabled"
	FcgiAppBaseKeepConnEnabled  FcgiAppBaseKeepConn = "enabled"
)

// Defines values for FcgiAppBaseMpxsConns.
const (
	FcgiAppBaseMpxsConnsDisabled FcgiAppBaseMpxsConns = "disabled"
	FcgiAppBaseMpxsConnsEnabled  FcgiAppBaseMpxsConns = "enabled"
)

// Defines values for FcgiPassHeaderCond.
const (
	FcgiPassHeaderCondIf     FcgiPassHeaderCond = "if"
	FcgiPassHeaderCondUnless FcgiPassHeaderCond = "unless"
)

// Defines values for FcgiSetParamCond.
const (
	FcgiSetParamCondIf     FcgiSetParamCond = "if"
	FcgiSetParamCondUnless FcgiSetParamCond = "unless"
)

// Defines values for FilterType.
const (
	FilterTypeBwlimIn     FilterType = "bwlim-in"
	FilterTypeBwlimOut    FilterType = "bwlim-out"
	FilterTypeCache       FilterType = "cache"
	FilterTypeCompression FilterType = "compression"
	FilterTypeFcgiApp     FilterType = "fcgi-app"
	FilterTypeSpoe        FilterType = "spoe"
	FilterTypeTrace       FilterType = "trace"
)

// Defines values for ForwardforEnabled.
const (
	ForwardforEnabledEnabled ForwardforEnabled = "enabled"
)

// Defines values for FrontendAcceptInvalidHttpRequest.
const (
	FrontendAcceptInvalidHttpRequestDisabled FrontendAcceptInvalidHttpRequest = "disabled"
	FrontendAcceptInvalidHttpRequestEnabled  FrontendAcceptInvalidHttpRequest = "enabled"
)

// Defines values for FrontendAcceptUnsafeViolationsInHttpRequest.
const (
	FrontendAcceptUnsafeViolationsInHttpRequestDisabled FrontendAcceptUnsafeViolationsInHttpRequest = "disabled"
	FrontendAcceptUnsafeViolationsInHttpRequestEnabled  FrontendAcceptUnsafeViolationsInHttpRequest = "enabled"
)

// Defines values for FrontendClitcpka.
const (
	FrontendClitcpkaDisabled FrontendClitcpka = "disabled"
	FrontendClitcpkaEnabled  FrontendClitcpka = "enabled"
)

// Defines values for FrontendContstats.
const (
	FrontendContstatsEnabled FrontendContstats = "enabled"
)

// Defines values for FrontendDisableH2Upgrade.
const (
	FrontendDisableH2UpgradeDisabled FrontendDisableH2Upgrade = "disabled"
	FrontendDisableH2UpgradeEnabled  FrontendDisableH2Upgrade = "enabled"
)

// Defines values for FrontendDontlogNormal.
const (
	FrontendDontlogNormalDisabled FrontendDontlogNormal = "disabled"
	FrontendDontlogNormalEnabled  FrontendDontlogNormal = "enabled"
)

// Defines values for FrontendDontlognull.
const (
	FrontendDontlognullDisabled FrontendDontlognull = "disabled"
	FrontendDontlognullEnabled  FrontendDontlognull = "enabled"
)

// Defines values for FrontendH1CaseAdjustBogusClient.
const (
	FrontendH1CaseAdjustBogusClientDisabled FrontendH1CaseAdjustBogusClient = "disabled"
	FrontendH1CaseAdjustBogusClientEnabled  FrontendH1CaseAdjustBogusClient = "enabled"
)

// Defines values for FrontendHttpBufferRequest.
const (
	FrontendHttpBufferRequestDisabled FrontendHttpBufferRequest = "disabled"
	FrontendHttpBufferRequestEnabled  FrontendHttpBufferRequest = "enabled"
)

// Defines values for FrontendHttpDropResponseTrailers.
const (
	FrontendHttpDropResponseTrailersDisabled FrontendHttpDropResponseTrailers = "disabled"
	FrontendHttpDropResponseTrailersEnabled  FrontendHttpDropResponseTrailers = "enabled"
)

// Defines values for FrontendHttpUseHtx.
const (
	FrontendHttpUseHtxDisabled FrontendHttpUseHtx = "disabled"
	FrontendHttpUseHtxEnabled  FrontendHttpUseHtx = "enabled"
)

// Defines values for FrontendHttpConnectionMode.
const (
	FrontendHttpConnectionModeHttpKeepAlive   FrontendHttpConnectionMode = "http-keep-alive"
	FrontendHttpConnectionModeHttpServerClose FrontendHttpConnectionMode = "http-server-close"
	FrontendHttpConnectionModeHttpclose       FrontendHttpConnectionMode = "httpclose"
)

// Defines values for FrontendHttpIgnoreProbes.
const (
	FrontendHttpIgnoreProbesDisabled FrontendHttpIgnoreProbes = "disabled"
	FrontendHttpIgnoreProbesEnabled  FrontendHttpIgnoreProbes = "enabled"
)

// Defines values for FrontendHttpNoDelay.
const (
	FrontendHttpNoDelayDisabled FrontendHttpNoDelay = "disabled"
	FrontendHttpNoDelayEnabled  FrontendHttpNoDelay = "enabled"
)

// Defines values for FrontendHttpRestrictReqHdrNames.
const (
	FrontendHttpRestrictReqHdrNamesDelete   FrontendHttpRestrictReqHdrNames = "delete"
	FrontendHttpRestrictReqHdrNamesPreserve FrontendHttpRestrictReqHdrNames = "preserve"
	FrontendHttpRestrictReqHdrNamesReject   FrontendHttpRestrictReqHdrNames = "reject"
)

// Defines values for FrontendHttpUseProxyHeader.
const (
	FrontendHttpUseProxyHeaderDisabled FrontendHttpUseProxyHeader = "disabled"
	FrontendHttpUseProxyHeaderEnabled  FrontendHttpUseProxyHeader = "enabled"
)

// Defines values for FrontendHttpslog.
const (
	FrontendHttpslogDisabled FrontendHttpslog = "disabled"
	FrontendHttpslogEnabled  FrontendHttpslog = "enabled"
)

// Defines values for FrontendIdleCloseOnResponse.
const (
	FrontendIdleCloseOnResponseDisabled FrontendIdleCloseOnResponse = "disabled"
	FrontendIdleCloseOnResponseEnabled  FrontendIdleCloseOnResponse = "enabled"
)

// Defines values for FrontendIndependentStreams.
const (
	FrontendIndependentStreamsDisabled FrontendIndependentStreams = "disabled"
	FrontendIndependentStreamsEnabled  FrontendIndependentStreams = "enabled"
)

// Defines values for FrontendLogSeparateErrors.
const (
	FrontendLogSeparateErrorsDisabled FrontendLogSeparateErrors = "disabled"
	FrontendLogSeparateErrorsEnabled  FrontendLogSeparateErrors = "enabled"
)

// Defines values for FrontendLogSteps.
const (
	FrontendLogStepsAccept   FrontendLogSteps = "accept"
	FrontendLogStepsAny      FrontendLogSteps = "any"
	FrontendLogStepsClose    FrontendLogSteps = "close"
	FrontendLogStepsConnect  FrontendLogSteps = "connect"
	FrontendLogStepsError    FrontendLogSteps = "error"
	FrontendLogStepsRequest  FrontendLogSteps = "request"
	FrontendLogStepsResponse FrontendLogSteps = "response"
)

// Defines values for FrontendLogasap.
const (
	FrontendLogasapDisabled FrontendLogasap = "disabled"
	FrontendLogasapEnabled  FrontendLogasap = "enabled"
)

// Defines values for FrontendMode.
const (
	FrontendModeHttp FrontendMode = "http"
	FrontendModeTcp  FrontendMode = "tcp"
)

// Defines values for FrontendNolinger.
const (
	FrontendNolingerDisabled FrontendNolinger = "disabled"
	FrontendNolingerEnabled  FrontendNolinger = "enabled"
)

// Defines values for FrontendSocketStats.
const (
	FrontendSocketStatsDisabled FrontendSocketStats = "disabled"
	FrontendSocketStatsEnabled  FrontendSocketStats = "enabled"
)

// Defines values for FrontendSpliceAuto.
const (
	FrontendSpliceAutoDisabled FrontendSpliceAuto = "disabled"
	FrontendSpliceAutoEnabled  FrontendSpliceAuto = "enabled"
)

// Defines values for FrontendSpliceRequest.
const (
	FrontendSpliceRequestDisabled FrontendSpliceRequest = "disabled"
	FrontendSpliceRequestEnabled  FrontendSpliceRequest = "enabled"
)

// Defines values for FrontendSpliceResponse.
const (
	FrontendSpliceResponseDisabled FrontendSpliceResponse = "disabled"
	FrontendSpliceResponseEnabled  FrontendSpliceResponse = "enabled"
)

// Defines values for FrontendTcpSmartAccept.
const (
	FrontendTcpSmartAcceptDisabled FrontendTcpSmartAccept = "disabled"
	FrontendTcpSmartAcceptEnabled  FrontendTcpSmartAccept = "enabled"
)

// Defines values for FrontendTcpka.
const (
	FrontendTcpkaDisabled FrontendTcpka = "disabled"
	FrontendTcpkaEnabled  FrontendTcpka = "enabled"
)

// Defines values for FrontendBaseAcceptInvalidHttpRequest.
const (
	FrontendBaseAcceptInvalidHttpRequestDisabled FrontendBaseAcceptInvalidHttpRequest = "disabled"
	FrontendBaseAcceptInvalidHttpRequestEnabled  FrontendBaseAcceptInvalidHttpRequest = "enabled"
)

// Defines values for FrontendBaseAcceptUnsafeViolationsInHttpRequest.
const (
	FrontendBaseAcceptUnsafeViolationsInHttpRequestDisabled FrontendBaseAcceptUnsafeViolationsInHttpRequest = "disabled"
	FrontendBaseAcceptUnsafeViolationsInHttpRequestEnabled  FrontendBaseAcceptUnsafeViolationsInHttpRequest = "enabled"
)

// Defines values for FrontendBaseClitcpka.
const (
	FrontendBaseClitcpkaDisabled FrontendBaseClitcpka = "disabled"
	FrontendBaseClitcpkaEnabled  FrontendBaseClitcpka = "enabled"
)

// Defines values for FrontendBaseContstats.
const (
	FrontendBaseContstatsEnabled FrontendBaseContstats = "enabled"
)

// Defines values for FrontendBaseDisableH2Upgrade.
const (
	FrontendBaseDisableH2UpgradeDisabled FrontendBaseDisableH2Upgrade = "disabled"
	FrontendBaseDisableH2UpgradeEnabled  FrontendBaseDisableH2Upgrade = "enabled"
)

// Defines values for FrontendBaseDontlogNormal.
const (
	FrontendBaseDontlogNormalDisabled FrontendBaseDontlogNormal = "disabled"
	FrontendBaseDontlogNormalEnabled  FrontendBaseDontlogNormal = "enabled"
)

// Defines values for FrontendBaseDontlognull.
const (
	FrontendBaseDontlognullDisabled FrontendBaseDontlognull = "disabled"
	FrontendBaseDontlognullEnabled  FrontendBaseDontlognull = "enabled"
)

// Defines values for FrontendBaseH1CaseAdjustBogusClient.
const (
	FrontendBaseH1CaseAdjustBogusClientDisabled FrontendBaseH1CaseAdjustBogusClient = "disabled"
	FrontendBaseH1CaseAdjustBogusClientEnabled  FrontendBaseH1CaseAdjustBogusClient = "enabled"
)

// Defines values for FrontendBaseHttpBufferRequest.
const (
	FrontendBaseHttpBufferRequestDisabled FrontendBaseHttpBufferRequest = "disabled"
	FrontendBaseHttpBufferRequestEnabled  FrontendBaseHttpBufferRequest = "enabled"
)

// Defines values for FrontendBaseHttpDropResponseTrailers.
const (
	FrontendBaseHttpDropResponseTrailersDisabled FrontendBaseHttpDropResponseTrailers = "disabled"
	FrontendBaseHttpDropResponseTrailersEnabled  FrontendBaseHttpDropResponseTrailers = "enabled"
)

// Defines values for FrontendBaseHttpUseHtx.
const (
	FrontendBaseHttpUseHtxDisabled FrontendBaseHttpUseHtx = "disabled"
	FrontendBaseHttpUseHtxEnabled  FrontendBaseHttpUseHtx = "enabled"
)

// Defines values for FrontendBaseHttpConnectionMode.
const (
	FrontendBaseHttpConnectionModeHttpKeepAlive   FrontendBaseHttpConnectionMode = "http-keep-alive"
	FrontendBaseHttpConnectionModeHttpServerClose FrontendBaseHttpConnectionMode = "http-server-close"
	FrontendBaseHttpConnectionModeHttpclose       FrontendBaseHttpConnectionMode = "httpclose"
)

// Defines values for FrontendBaseHttpIgnoreProbes.
const (
	FrontendBaseHttpIgnoreProbesDisabled FrontendBaseHttpIgnoreProbes = "disabled"
	FrontendBaseHttpIgnoreProbesEnabled  FrontendBaseHttpIgnoreProbes = "enabled"
)

// Defines values for FrontendBaseHttpNoDelay.
const (
	FrontendBaseHttpNoDelayDisabled FrontendBaseHttpNoDelay = "disabled"
	FrontendBaseHttpNoDelayEnabled  FrontendBaseHttpNoDelay = "enabled"
)

// Defines values for FrontendBaseHttpRestrictReqHdrNames.
const (
	FrontendBaseHttpRestrictReqHdrNamesDelete   FrontendBaseHttpRestrictReqHdrNames = "delete"
	FrontendBaseHttpRestrictReqHdrNamesPreserve FrontendBaseHttpRestrictReqHdrNames = "preserve"
	FrontendBaseHttpRestrictReqHdrNamesReject   FrontendBaseHttpRestrictReqHdrNames = "reject"
)

// Defines values for FrontendBaseHttpUseProxyHeader.
const (
	FrontendBaseHttpUseProxyHeaderDisabled FrontendBaseHttpUseProxyHeader = "disabled"
	FrontendBaseHttpUseProxyHeaderEnabled  FrontendBaseHttpUseProxyHeader = "enabled"
)

// Defines values for FrontendBaseHttpslog.
const (
	FrontendBaseHttpslogDisabled FrontendBaseHttpslog = "disabled"
	FrontendBaseHttpslogEnabled  FrontendBaseHttpslog = "enabled"
)

// Defines values for FrontendBaseIdleCloseOnResponse.
const (
	FrontendBaseIdleCloseOnResponseDisabled FrontendBaseIdleCloseOnResponse = "disabled"
	FrontendBaseIdleCloseOnResponseEnabled  FrontendBaseIdleCloseOnResponse = "enabled"
)

// Defines values for FrontendBaseIndependentStreams.
const (
	FrontendBaseIndependentStreamsDisabled FrontendBaseIndependentStreams = "disabled"
	FrontendBaseIndependentStreamsEnabled  FrontendBaseIndependentStreams = "enabled"
)

// Defines values for FrontendBaseLogSeparateErrors.
const (
	FrontendBaseLogSeparateErrorsDisabled FrontendBaseLogSeparateErrors = "disabled"
	FrontendBaseLogSeparateErrorsEnabled  FrontendBaseLogSeparateErrors = "enabled"
)

// Defines values for FrontendBaseLogSteps.
const (
	FrontendBaseLogStepsAccept   FrontendBaseLogSteps = "accept"
	FrontendBaseLogStepsAny      FrontendBaseLogSteps = "any"
	FrontendBaseLogStepsClose    FrontendBaseLogSteps = "close"
	FrontendBaseLogStepsConnect  FrontendBaseLogSteps = "connect"
	FrontendBaseLogStepsError    FrontendBaseLogSteps = "error"
	FrontendBaseLogStepsRequest  FrontendBaseLogSteps = "request"
	FrontendBaseLogStepsResponse FrontendBaseLogSteps = "response"
)

// Defines values for FrontendBaseLogasap.
const (
	FrontendBaseLogasapDisabled FrontendBaseLogasap = "disabled"
	FrontendBaseLogasapEnabled  FrontendBaseLogasap = "enabled"
)

// Defines values for FrontendBaseMode.
const (
	FrontendBaseModeHttp FrontendBaseMode = "http"
	FrontendBaseModeTcp  FrontendBaseMode = "tcp"
)

// Defines values for FrontendBaseNolinger.
const (
	FrontendBaseNolingerDisabled FrontendBaseNolinger = "disabled"
	FrontendBaseNolingerEnabled  FrontendBaseNolinger = "enabled"
)

// Defines values for FrontendBaseSocketStats.
const (
	FrontendBaseSocketStatsDisabled FrontendBaseSocketStats = "disabled"
	FrontendBaseSocketStatsEnabled  FrontendBaseSocketStats = "enabled"
)

// Defines values for FrontendBaseSpliceAuto.
const (
	FrontendBaseSpliceAutoDisabled FrontendBaseSpliceAuto = "disabled"
	FrontendBaseSpliceAutoEnabled  FrontendBaseSpliceAuto = "enabled"
)

// Defines values for FrontendBaseSpliceRequest.
const (
	FrontendBaseSpliceRequestDisabled FrontendBaseSpliceRequest = "disabled"
	FrontendBaseSpliceRequestEnabled  FrontendBaseSpliceRequest = "enabled"
)

// Defines values for FrontendBaseSpliceResponse.
const (
	FrontendBaseSpliceResponseDisabled FrontendBaseSpliceResponse = "disabled"
	FrontendBaseSpliceResponseEnabled  FrontendBaseSpliceResponse = "enabled"
)

// Defines values for FrontendBaseTcpSmartAccept.
const (
	FrontendBaseTcpSmartAcceptDisabled FrontendBaseTcpSmartAccept = "disabled"
	FrontendBaseTcpSmartAcceptEnabled  FrontendBaseTcpSmartAccept = "enabled"
)

// Defines values for FrontendBaseTcpka.
const (
	FrontendBaseTcpkaDisabled FrontendBaseTcpka = "disabled"
	FrontendBaseTcpkaEnabled  FrontendBaseTcpka = "enabled"
)

// Defines values for GlobalCpuPolicy.
const (
	GlobalCpuPolicyEfficiency       GlobalCpuPolicy = "efficiency"
	GlobalCpuPolicyFirstUsableNode  GlobalCpuPolicy = "first-usable-node"
	GlobalCpuPolicyGroupBy2Ccx      GlobalCpuPolicy = "group-by-2-ccx"
	GlobalCpuPolicyGroupBy2Clusters GlobalCpuPolicy = "group-by-2-clusters"
	GlobalCpuPolicyGroupBy3Ccx      GlobalCpuPolicy = "group-by-3-ccx"
	GlobalCpuPolicyGroupBy3Clusters GlobalCpuPolicy = "group-by-3-clusters"
	GlobalCpuPolicyGroupBy4Ccx      GlobalCpuPolicy = "group-by-4-ccx"
	GlobalCpuPolicyGroupBy4Cluster  GlobalCpuPolicy = "group-by-4-cluster"
	GlobalCpuPolicyGroupByCcx       GlobalCpuPolicy = "group-by-ccx"
	GlobalCpuPolicyGroupByCluster   GlobalCpuPolicy = "group-by-cluster"
	GlobalCpuPolicyNone             GlobalCpuPolicy = "none"
	GlobalCpuPolicyPerformance      GlobalCpuPolicy = "performance"
	GlobalCpuPolicyResource         GlobalCpuPolicy = "resource"
)

// Defines values for GlobalCpuSetDirective.
const (
	GlobalCpuSetDirectiveDropCluster GlobalCpuSetDirective = "drop-cluster"
	GlobalCpuSetDirectiveDropCore    GlobalCpuSetDirective = "drop-core"
	GlobalCpuSetDirectiveDropCpu     GlobalCpuSetDirective = "drop-cpu"
	GlobalCpuSetDirectiveDropNode    GlobalCpuSetDirective = "drop-node"
	GlobalCpuSetDirectiveDropThread  GlobalCpuSetDirective = "drop-thread"
	GlobalCpuSetDirectiveOnlyCluster GlobalCpuSetDirective = "only-cluster"
	GlobalCpuSetDirectiveOnlyCore    GlobalCpuSetDirective = "only-core"
	GlobalCpuSetDirectiveOnlyCpu     GlobalCpuSetDirective = "only-cpu"
	GlobalCpuSetDirectiveOnlyNode    GlobalCpuSetDirective = "only-node"
	GlobalCpuSetDirectiveOnlyThread  GlobalCpuSetDirective = "only-thread"
	GlobalCpuSetDirectiveReset       GlobalCpuSetDirective = "reset"
)

// Defines values for GlobalDefaultPathType.
const (
	GlobalDefaultPathTypeConfig  GlobalDefaultPathType = "config"
	GlobalDefaultPathTypeCurrent GlobalDefaultPathType = "current"
	GlobalDefaultPathTypeOrigin  GlobalDefaultPathType = "origin"
	GlobalDefaultPathTypeParent  GlobalDefaultPathType = "parent"
)

// Defines values for GlobalHardenRejectPrivilegedPortsQuic.
const (
	GlobalHardenRejectPrivilegedPortsQuicDisabled GlobalHardenRejectPrivilegedPortsQuic = "disabled"
	GlobalHardenRejectPrivilegedPortsQuicEnabled  GlobalHardenRejectPrivilegedPortsQuic = "enabled"
)

// Defines values for GlobalHardenRejectPrivilegedPortsTcp.
const (
	GlobalHardenRejectPrivilegedPortsTcpDisabled GlobalHardenRejectPrivilegedPortsTcp = "disabled"
	GlobalHardenRejectPrivilegedPortsTcpEnabled  GlobalHardenRejectPrivilegedPortsTcp = "enabled"
)

// Defines values for GlobalLogSendHostnameEnabled.
const (
	GlobalLogSendHostnameEnabledDisabled GlobalLogSendHostnameEnabled = "disabled"
	GlobalLogSendHostnameEnabledEnabled  GlobalLogSendHostnameEnabled = "enabled"
)

// Defines values for GlobalNumaCpuMapping.
const (
	GlobalNumaCpuMappingDisabled GlobalNumaCpuMapping = "disabled"
	GlobalNumaCpuMappingEnabled  GlobalNumaCpuMapping = "enabled"
)

// Defines values for GlobalRuntimeApisForceStrictSni.
const (
	GlobalRuntimeApisForceStrictSniDisabled GlobalRuntimeApisForceStrictSni = "disabled"
	GlobalRuntimeApisForceStrictSniEnabled  GlobalRuntimeApisForceStrictSni = "enabled"
)

// Defines values for GlobalRuntimeApisLevel.
const (
	GlobalRuntimeApisLevelAdmin    GlobalRuntimeApisLevel = "admin"
	GlobalRuntimeApisLevelOperator GlobalRuntimeApisLevel = "operator"
	GlobalRuntimeApisLevelUser     GlobalRuntimeApisLevel = "user"
)

// Defines values for GlobalRuntimeApisQuicCcAlgo.
const (
	GlobalRuntimeApisQuicCcAlgoBbr     GlobalRuntimeApisQuicCcAlgo = "bbr"
	GlobalRuntimeApisQuicCcAlgoCubic   GlobalRuntimeApisQuicCcAlgo = "cubic"
	GlobalRuntimeApisQuicCcAlgoNewreno GlobalRuntimeApisQuicCcAlgo = "newreno"
	GlobalRuntimeApisQuicCcAlgoNocc    GlobalRuntimeApisQuicCcAlgo = "nocc"
)

// Defines values for GlobalRuntimeApisQuicSocket.
const (
	GlobalRuntimeApisQuicSocketConnection GlobalRuntimeApisQuicSocket = "connection"
	GlobalRuntimeApisQuicSocketListener   GlobalRuntimeApisQuicSocket = "listener"
)

// Defines values for GlobalRuntimeApisSeverityOutput.
const (
	GlobalRuntimeApisSeverityOutputNone   GlobalRuntimeApisSeverityOutput = "none"
	GlobalRuntimeApisSeverityOutputNumber GlobalRuntimeApisSeverityOutput = "number"
	GlobalRuntimeApisSeverityOutputString GlobalRuntimeApisSeverityOutput = "string"
)

// Defines values for GlobalRuntimeApisSslMaxVer.
const (
	GlobalRuntimeApisSslMaxVerSSLv3  GlobalRuntimeApisSslMaxVer = "SSLv3"
	GlobalRuntimeApisSslMaxVerTLSv10 GlobalRuntimeApisSslMaxVer = "TLSv1.0"
	GlobalRuntimeApisSslMaxVerTLSv11 GlobalRuntimeApisSslMaxVer = "TLSv1.1"
	GlobalRuntimeApisSslMaxVerTLSv12 GlobalRuntimeApisSslMaxVer = "TLSv1.2"
	GlobalRuntimeApisSslMaxVerTLSv13 GlobalRuntimeApisSslMaxVer = "TLSv1.3"
)

// Defines values for GlobalRuntimeApisSslMinVer.
const (
	GlobalRuntimeApisSslMinVerSSLv3  GlobalRuntimeApisSslMinVer = "SSLv3"
	GlobalRuntimeApisSslMinVerTLSv10 GlobalRuntimeApisSslMinVer = "TLSv1.0"
	GlobalRuntimeApisSslMinVerTLSv11 GlobalRuntimeApisSslMinVer = "TLSv1.1"
	GlobalRuntimeApisSslMinVerTLSv12 GlobalRuntimeApisSslMinVer = "TLSv1.2"
	GlobalRuntimeApisSslMinVerTLSv13 GlobalRuntimeApisSslMinVer = "TLSv1.3"
)

// Defines values for GlobalRuntimeApisSslv3.
const (
	GlobalRuntimeApisSslv3Disabled GlobalRuntimeApisSslv3 = "disabled"
	GlobalRuntimeApisSslv3Enabled  GlobalRuntimeApisSslv3 = "enabled"
)

// Defines values for GlobalRuntimeApisTlsTickets.
const (
	GlobalRuntimeApisTlsTicketsDisabled GlobalRuntimeApisTlsTickets = "disabled"
	GlobalRuntimeApisTlsTicketsEnabled  GlobalRuntimeApisTlsTickets = "enabled"
)

// Defines values for GlobalRuntimeApisTlsv10.
const (
	GlobalRuntimeApisTlsv10Disabled GlobalRuntimeApisTlsv10 = "disabled"
	GlobalRuntimeApisTlsv10Enabled  GlobalRuntimeApisTlsv10 = "enabled"
)

// Defines values for GlobalRuntimeApisTlsv11.
const (
	GlobalRuntimeApisTlsv11Disabled GlobalRuntimeApisTlsv11 = "disabled"
	GlobalRuntimeApisTlsv11Enabled  GlobalRuntimeApisTlsv11 = "enabled"
)

// Defines values for GlobalRuntimeApisTlsv12.
const (
	GlobalRuntimeApisTlsv12Disabled GlobalRuntimeApisTlsv12 = "disabled"
	GlobalRuntimeApisTlsv12Enabled  GlobalRuntimeApisTlsv12 = "enabled"
)

// Defines values for GlobalRuntimeApisTlsv13.
const (
	GlobalRuntimeApisTlsv13Disabled GlobalRuntimeApisTlsv13 = "disabled"
	GlobalRuntimeApisTlsv13Enabled  GlobalRuntimeApisTlsv13 = "enabled"
)

// Defines values for GlobalRuntimeApisVerify.
const (
	GlobalRuntimeApisVerifyNone     GlobalRuntimeApisVerify = "none"
	GlobalRuntimeApisVerifyOptional GlobalRuntimeApisVerify = "optional"
	GlobalRuntimeApisVerifyRequired GlobalRuntimeApisVerify = "required"
)

// Defines values for GlobalBaseCpuPolicy.
const (
	GlobalBaseCpuPolicyEfficiency       GlobalBaseCpuPolicy = "efficiency"
	GlobalBaseCpuPolicyFirstUsableNode  GlobalBaseCpuPolicy = "first-usable-node"
	GlobalBaseCpuPolicyGroupBy2Ccx      GlobalBaseCpuPolicy = "group-by-2-ccx"
	GlobalBaseCpuPolicyGroupBy2Clusters GlobalBaseCpuPolicy = "group-by-2-clusters"
	GlobalBaseCpuPolicyGroupBy3Ccx      GlobalBaseCpuPolicy = "group-by-3-ccx"
	GlobalBaseCpuPolicyGroupBy3Clusters GlobalBaseCpuPolicy = "group-by-3-clusters"
	GlobalBaseCpuPolicyGroupBy4Ccx      GlobalBaseCpuPolicy = "group-by-4-ccx"
	GlobalBaseCpuPolicyGroupBy4Cluster  GlobalBaseCpuPolicy = "group-by-4-cluster"
	GlobalBaseCpuPolicyGroupByCcx       GlobalBaseCpuPolicy = "group-by-ccx"
	GlobalBaseCpuPolicyGroupByCluster   GlobalBaseCpuPolicy = "group-by-cluster"
	GlobalBaseCpuPolicyNone             GlobalBaseCpuPolicy = "none"
	GlobalBaseCpuPolicyPerformance      GlobalBaseCpuPolicy = "performance"
	GlobalBaseCpuPolicyResource         GlobalBaseCpuPolicy = "resource"
)

// Defines values for GlobalBaseCpuSetDirective.
const (
	GlobalBaseCpuSetDirectiveDropCluster GlobalBaseCpuSetDirective = "drop-cluster"
	GlobalBaseCpuSetDirectiveDropCore    GlobalBaseCpuSetDirective = "drop-core"
	GlobalBaseCpuSetDirectiveDropCpu     GlobalBaseCpuSetDirective = "drop-cpu"
	GlobalBaseCpuSetDirectiveDropNode    GlobalBaseCpuSetDirective = "drop-node"
	GlobalBaseCpuSetDirectiveDropThread  GlobalBaseCpuSetDirective = "drop-thread"
	GlobalBaseCpuSetDirectiveOnlyCluster GlobalBaseCpuSetDirective = "only-cluster"
	GlobalBaseCpuSetDirectiveOnlyCore    GlobalBaseCpuSetDirective = "only-core"
	GlobalBaseCpuSetDirectiveOnlyCpu     GlobalBaseCpuSetDirective = "only-cpu"
	GlobalBaseCpuSetDirectiveOnlyNode    GlobalBaseCpuSetDirective = "only-node"
	GlobalBaseCpuSetDirectiveOnlyThread  GlobalBaseCpuSetDirective = "only-thread"
	GlobalBaseCpuSetDirectiveReset       GlobalBaseCpuSetDirective = "reset"
)

// Defines values for GlobalBaseDefaultPathType.
const (
	GlobalBaseDefaultPathTypeConfig  GlobalBaseDefaultPathType = "config"
	GlobalBaseDefaultPathTypeCurrent GlobalBaseDefaultPathType = "current"
	GlobalBaseDefaultPathTypeOrigin  GlobalBaseDefaultPathType = "origin"
	GlobalBaseDefaultPathTypeParent  GlobalBaseDefaultPathType = "parent"
)

// Defines values for GlobalBaseHardenRejectPrivilegedPortsQuic.
const (
	GlobalBaseHardenRejectPrivilegedPortsQuicDisabled GlobalBaseHardenRejectPrivilegedPortsQuic = "disabled"
	GlobalBaseHardenRejectPrivilegedPortsQuicEnabled  GlobalBaseHardenRejectPrivilegedPortsQuic = "enabled"
)

// Defines values for GlobalBaseHardenRejectPrivilegedPortsTcp.
const (
	GlobalBaseHardenRejectPrivilegedPortsTcpDisabled GlobalBaseHardenRejectPrivilegedPortsTcp = "disabled"
	GlobalBaseHardenRejectPrivilegedPortsTcpEnabled  GlobalBaseHardenRejectPrivilegedPortsTcp = "enabled"
)

// Defines values for GlobalBaseLogSendHostnameEnabled.
const (
	GlobalBaseLogSendHostnameEnabledDisabled GlobalBaseLogSendHostnameEnabled = "disabled"
	GlobalBaseLogSendHostnameEnabledEnabled  GlobalBaseLogSendHostnameEnabled = "enabled"
)

// Defines values for GlobalBaseNumaCpuMapping.
const (
	GlobalBaseNumaCpuMappingDisabled GlobalBaseNumaCpuMapping = "disabled"
	GlobalBaseNumaCpuMappingEnabled  GlobalBaseNumaCpuMapping = "enabled"
)

// Defines values for GlobalBaseRuntimeApisForceStrictSni.
const (
	GlobalBaseRuntimeApisForceStrictSniDisabled GlobalBaseRuntimeApisForceStrictSni = "disabled"
	GlobalBaseRuntimeApisForceStrictSniEnabled  GlobalBaseRuntimeApisForceStrictSni = "enabled"
)

// Defines values for GlobalBaseRuntimeApisLevel.
const (
	GlobalBaseRuntimeApisLevelAdmin    GlobalBaseRuntimeApisLevel = "admin"
	GlobalBaseRuntimeApisLevelOperator GlobalBaseRuntimeApisLevel = "operator"
	GlobalBaseRuntimeApisLevelUser     GlobalBaseRuntimeApisLevel = "user"
)

// Defines values for GlobalBaseRuntimeApisQuicCcAlgo.
const (
	Bbr     GlobalBaseRuntimeApisQuicCcAlgo = "bbr"
	Cubic   GlobalBaseRuntimeApisQuicCcAlgo = "cubic"
	Newreno GlobalBaseRuntimeApisQuicCcAlgo = "newreno"
	Nocc    GlobalBaseRuntimeApisQuicCcAlgo = "nocc"
)

// Defines values for GlobalBaseRuntimeApisQuicSocket.
const (
	GlobalBaseRuntimeApisQuicSocketConnection GlobalBaseRuntimeApisQuicSocket = "connection"
	GlobalBaseRuntimeApisQuicSocketListener   GlobalBaseRuntimeApisQuicSocket = "listener"
)

// Defines values for GlobalBaseRuntimeApisSeverityOutput.
const (
	GlobalBaseRuntimeApisSeverityOutputNone   GlobalBaseRuntimeApisSeverityOutput = "none"
	GlobalBaseRuntimeApisSeverityOutputNumber GlobalBaseRuntimeApisSeverityOutput = "number"
	GlobalBaseRuntimeApisSeverityOutputString GlobalBaseRuntimeApisSeverityOutput = "string"
)

// Defines values for GlobalBaseRuntimeApisSslMaxVer.
const (
	GlobalBaseRuntimeApisSslMaxVerSSLv3  GlobalBaseRuntimeApisSslMaxVer = "SSLv3"
	GlobalBaseRuntimeApisSslMaxVerTLSv10 GlobalBaseRuntimeApisSslMaxVer = "TLSv1.0"
	GlobalBaseRuntimeApisSslMaxVerTLSv11 GlobalBaseRuntimeApisSslMaxVer = "TLSv1.1"
	GlobalBaseRuntimeApisSslMaxVerTLSv12 GlobalBaseRuntimeApisSslMaxVer = "TLSv1.2"
	GlobalBaseRuntimeApisSslMaxVerTLSv13 GlobalBaseRuntimeApisSslMaxVer = "TLSv1.3"
)

// Defines values for GlobalBaseRuntimeApisSslMinVer.
const (
	GlobalBaseRuntimeApisSslMinVerSSLv3  GlobalBaseRuntimeApisSslMinVer = "SSLv3"
	GlobalBaseRuntimeApisSslMinVerTLSv10 GlobalBaseRuntimeApisSslMinVer = "TLSv1.0"
	GlobalBaseRuntimeApisSslMinVerTLSv11 GlobalBaseRuntimeApisSslMinVer = "TLSv1.1"
	GlobalBaseRuntimeApisSslMinVerTLSv12 GlobalBaseRuntimeApisSslMinVer = "TLSv1.2"
	GlobalBaseRuntimeApisSslMinVerTLSv13 GlobalBaseRuntimeApisSslMinVer = "TLSv1.3"
)

// Defines values for GlobalBaseRuntimeApisSslv3.
const (
	GlobalBaseRuntimeApisSslv3Disabled GlobalBaseRuntimeApisSslv3 = "disabled"
	GlobalBaseRuntimeApisSslv3Enabled  GlobalBaseRuntimeApisSslv3 = "enabled"
)

// Defines values for GlobalBaseRuntimeApisTlsTickets.
const (
	GlobalBaseRuntimeApisTlsTicketsDisabled GlobalBaseRuntimeApisTlsTickets = "disabled"
	GlobalBaseRuntimeApisTlsTicketsEnabled  GlobalBaseRuntimeApisTlsTickets = "enabled"
)

// Defines values for GlobalBaseRuntimeApisTlsv10.
const (
	GlobalBaseRuntimeApisTlsv10Disabled GlobalBaseRuntimeApisTlsv10 = "disabled"
	GlobalBaseRuntimeApisTlsv10Enabled  GlobalBaseRuntimeApisTlsv10 = "enabled"
)

// Defines values for GlobalBaseRuntimeApisTlsv11.
const (
	GlobalBaseRuntimeApisTlsv11Disabled GlobalBaseRuntimeApisTlsv11 = "disabled"
	GlobalBaseRuntimeApisTlsv11Enabled  GlobalBaseRuntimeApisTlsv11 = "enabled"
)

// Defines values for GlobalBaseRuntimeApisTlsv12.
const (
	GlobalBaseRuntimeApisTlsv12Disabled GlobalBaseRuntimeApisTlsv12 = "disabled"
	GlobalBaseRuntimeApisTlsv12Enabled  GlobalBaseRuntimeApisTlsv12 = "enabled"
)

// Defines values for GlobalBaseRuntimeApisTlsv13.
const (
	GlobalBaseRuntimeApisTlsv13Disabled GlobalBaseRuntimeApisTlsv13 = "disabled"
	GlobalBaseRuntimeApisTlsv13Enabled  GlobalBaseRuntimeApisTlsv13 = "enabled"
)

// Defines values for GlobalBaseRuntimeApisVerify.
const (
	GlobalBaseRuntimeApisVerifyNone     GlobalBaseRuntimeApisVerify = "none"
	GlobalBaseRuntimeApisVerifyOptional GlobalBaseRuntimeApisVerify = "optional"
	GlobalBaseRuntimeApisVerifyRequired GlobalBaseRuntimeApisVerify = "required"
)

// Defines values for HashTypeFunction.
const (
	HashTypeFunctionCrc32 HashTypeFunction = "crc32"
	HashTypeFunctionDjb2  HashTypeFunction = "djb2"
	HashTypeFunctionNone  HashTypeFunction = "none"
	HashTypeFunctionSdbm  HashTypeFunction = "sdbm"
	HashTypeFunctionWt6   HashTypeFunction = "wt6"
)

// Defines values for HashTypeMethod.
const (
	Consistent HashTypeMethod = "consistent"
	MapBased   HashTypeMethod = "map-based"
)

// Defines values for HashTypeModifier.
const (
	Avalanche HashTypeModifier = "avalanche"
)

// Defines values for HealthHaproxy.
const (
	HealthHaproxyDown    HealthHaproxy = "down"
	HealthHaproxyUnknown HealthHaproxy = "unknown"
	HealthHaproxyUp      HealthHaproxy = "up"
)

// Defines values for HttpAfterResponseRuleCond.
const (
	HttpAfterResponseRuleCondIf     HttpAfterResponseRuleCond = "if"
	HttpAfterResponseRuleCondUnless HttpAfterResponseRuleCond = "unless"
)

// Defines values for HttpAfterResponseRuleLogLevel.
const (
	HttpAfterResponseRuleLogLevelAlert   HttpAfterResponseRuleLogLevel = "alert"
	HttpAfterResponseRuleLogLevelCrit    HttpAfterResponseRuleLogLevel = "crit"
	HttpAfterResponseRuleLogLevelDebug   HttpAfterResponseRuleLogLevel = "debug"
	HttpAfterResponseRuleLogLevelEmerg   HttpAfterResponseRuleLogLevel = "emerg"
	HttpAfterResponseRuleLogLevelErr     HttpAfterResponseRuleLogLevel = "err"
	HttpAfterResponseRuleLogLevelInfo    HttpAfterResponseRuleLogLevel = "info"
	HttpAfterResponseRuleLogLevelNotice  HttpAfterResponseRuleLogLevel = "notice"
	HttpAfterResponseRuleLogLevelSilent  HttpAfterResponseRuleLogLevel = "silent"
	HttpAfterResponseRuleLogLevelWarning HttpAfterResponseRuleLogLevel = "warning"
)

// Defines values for HttpAfterResponseRuleStrictMode.
const (
	HttpAfterResponseRuleStrictModeOff HttpAfterResponseRuleStrictMode = "off"
	HttpAfterResponseRuleStrictModeOn  HttpAfterResponseRuleStrictMode = "on"
)

// Defines values for HttpAfterResponseRuleType.
const (
	HttpAfterResponseRuleTypeAddHeader     HttpAfterResponseRuleType = "add-header"
	HttpAfterResponseRuleTypeAllow         HttpAfterResponseRuleType = "allow"
	HttpAfterResponseRuleTypeCapture       HttpAfterResponseRuleType = "capture"
	HttpAfterResponseRuleTypeDelAcl        HttpAfterResponseRuleType = "del-acl"
	HttpAfterResponseRuleTypeDelHeader     HttpAfterResponseRuleType = "del-header"
	HttpAfterResponseRuleTypeDelMap        HttpAfterResponseRuleType = "del-map"
	HttpAfterResponseRuleTypeDoLog         HttpAfterResponseRuleType = "do-log"
	HttpAfterResponseRuleTypeReplaceHeader HttpAfterResponseRuleType = "replace-header"
	HttpAfterResponseRuleTypeReplaceValue  HttpAfterResponseRuleType = "replace-value"
	HttpAfterResponseRuleTypeScAddGpc      HttpAfterResponseRuleType = "sc-add-gpc"
	HttpAfterResponseRuleTypeScIncGpc      HttpAfterResponseRuleType = "sc-inc-gpc"
	HttpAfterResponseRuleTypeScIncGpc0     HttpAfterResponseRuleType = "sc-inc-gpc0"
	HttpAfterResponseRuleTypeScIncGpc1     HttpAfterResponseRuleType = "sc-inc-gpc1"
	HttpAfterResponseRuleTypeScSetGpt      HttpAfterResponseRuleType = "sc-set-gpt"
	HttpAfterResponseRuleTypeScSetGpt0     HttpAfterResponseRuleType = "sc-set-gpt0"
	HttpAfterResponseRuleTypeSetHeader     HttpAfterResponseRuleType = "set-header"
	HttpAfterResponseRuleTypeSetLogLevel   HttpAfterResponseRuleType = "set-log-level"
	HttpAfterResponseRuleTypeSetMap        HttpAfterResponseRuleType = "set-map"
	HttpAfterResponseRuleTypeSetStatus     HttpAfterResponseRuleType = "set-status"
	HttpAfterResponseRuleTypeSetVar        HttpAfterResponseRuleType = "set-var"
	HttpAfterResponseRuleTypeSetVarFmt     HttpAfterResponseRuleType = "set-var-fmt"
	HttpAfterResponseRuleTypeStrictMode    HttpAfterResponseRuleType = "strict-mode"
	HttpAfterResponseRuleTypeUnsetVar      HttpAfterResponseRuleType = "unset-var"
)

// Defines values for HttpCheckErrorStatus.
const (
	HttpCheckErrorStatusL4CON HttpCheckErrorStatus = "L4CON"
	HttpCheckErrorStatusL6RSP HttpCheckErrorStatus = "L6RSP"
	HttpCheckErrorStatusL7OKC HttpCheckErrorStatus = "L7OKC"
	HttpCheckErrorStatusL7RSP HttpCheckErrorStatus = "L7RSP"
	HttpCheckErrorStatusL7STS HttpCheckErrorStatus = "L7STS"
)

// Defines values for HttpCheckMatch.
const (
	HttpCheckMatchFhdr    HttpCheckMatch = "fhdr"
	HttpCheckMatchHdr     HttpCheckMatch = "hdr"
	HttpCheckMatchRstatus HttpCheckMatch = "rstatus"
	HttpCheckMatchRstring HttpCheckMatch = "rstring"
	HttpCheckMatchStatus  HttpCheckMatch = "status"
	HttpCheckMatchString  HttpCheckMatch = "string"
)

// Defines values for HttpCheckMethod.
const (
	HttpCheckMethodCONNECT HttpCheckMethod = "CONNECT"
	HttpCheckMethodDELETE  HttpCheckMethod = "DELETE"
	HttpCheckMethodGET     HttpCheckMethod = "GET"
	HttpCheckMethodHEAD    HttpCheckMethod = "HEAD"
	HttpCheckMethodOPTIONS HttpCheckMethod = "OPTIONS"
	HttpCheckMethodPATCH   HttpCheckMethod = "PATCH"
	HttpCheckMethodPOST    HttpCheckMethod = "POST"
	HttpCheckMethodPUT     HttpCheckMethod = "PUT"
	HttpCheckMethodTRACE   HttpCheckMethod = "TRACE"
)

// Defines values for HttpCheckOkStatus.
const (
	HttpCheckOkStatusL4OK  HttpCheckOkStatus = "L4OK"
	HttpCheckOkStatusL6OK  HttpCheckOkStatus = "L6OK"
	HttpCheckOkStatusL7OK  HttpCheckOkStatus = "L7OK"
	HttpCheckOkStatusL7OKC HttpCheckOkStatus = "L7OKC"
)

// Defines values for HttpCheckToutStatus.
const (
	HttpCheckToutStatusL4TOUT HttpCheckToutStatus = "L4TOUT"
	HttpCheckToutStatusL6TOUT HttpCheckToutStatus = "L6TOUT"
	HttpCheckToutStatusL7TOUT HttpCheckToutStatus = "L7TOUT"
)

// Defines values for HttpCheckType.
const (
	HttpCheckTypeComment      HttpCheckType = "comment"
	HttpCheckTypeConnect      HttpCheckType = "connect"
	HttpCheckTypeDisableOn404 HttpCheckType = "disable-on-404"
	HttpCheckTypeExpect       HttpCheckType = "expect"
	HttpCheckTypeSend         HttpCheckType = "send"
	HttpCheckTypeSendState    HttpCheckType = "send-state"
	HttpCheckTypeSetVar       HttpCheckType = "set-var"
	HttpCheckTypeSetVarFmt    HttpCheckType = "set-var-fmt"
	HttpCheckTypeUnsetVar     HttpCheckType = "unset-var"
)

// Defines values for HttpClientOptionsResolversDisabled.
const (
	HttpClientOptionsResolversDisabledDisabled HttpClientOptionsResolversDisabled = "disabled"
	HttpClientOptionsResolversDisabledEnabled  HttpClientOptionsResolversDisabled = "enabled"
)

// Defines values for HttpClientOptionsResolversPrefer.
const (
	HttpClientOptionsResolversPreferIpv4 HttpClientOptionsResolversPrefer = "ipv4"
	HttpClientOptionsResolversPreferIpv6 HttpClientOptionsResolversPrefer = "ipv6"
)

// Defines values for HttpClientOptionsSslVerify.
const (
	HttpClientOptionsSslVerifyEmpty    HttpClientOptionsSslVerify = ""
	HttpClientOptionsSslVerifyNone     HttpClientOptionsSslVerify = "none"
	HttpClientOptionsSslVerifyRequired HttpClientOptionsSslVerify = "required"
)

// Defines values for HttpErrorRuleReturnContentFormat.
const (
	HttpErrorRuleReturnContentFormatDefaultErrorfiles HttpErrorRuleReturnContentFormat = "default-errorfiles"
	HttpErrorRuleReturnContentFormatErrorfile         HttpErrorRuleReturnContentFormat = "errorfile"
	HttpErrorRuleReturnContentFormatErrorfiles        HttpErrorRuleReturnContentFormat = "errorfiles"
	HttpErrorRuleReturnContentFormatFile              HttpErrorRuleReturnContentFormat = "file"
	HttpErrorRuleReturnContentFormatLfFile            HttpErrorRuleReturnContentFormat = "lf-file"
	HttpErrorRuleReturnContentFormatLfString          HttpErrorRuleReturnContentFormat = "lf-string"
	HttpErrorRuleReturnContentFormatString            HttpErrorRuleReturnContentFormat = "string"
)

// Defines values for HttpErrorRuleStatus.
const (
	HttpErrorRuleStatusN200 HttpErrorRuleStatus = 200
	HttpErrorRuleStatusN400 HttpErrorRuleStatus = 400
	HttpErrorRuleStatusN401 HttpErrorRuleStatus = 401
	HttpErrorRuleStatusN403 HttpErrorRuleStatus = 403
	HttpErrorRuleStatusN404 HttpErrorRuleStatus = 404
	HttpErrorRuleStatusN405 HttpErrorRuleStatus = 405
	HttpErrorRuleStatusN407 HttpErrorRuleStatus = 407
	HttpErrorRuleStatusN408 HttpErrorRuleStatus = 408
	HttpErrorRuleStatusN410 HttpErrorRuleStatus = 410
	HttpErrorRuleStatusN413 HttpErrorRuleStatus = 413
	HttpErrorRuleStatusN425 HttpErrorRuleStatus = 425
	HttpErrorRuleStatusN429 HttpErrorRuleStatus = 429
	HttpErrorRuleStatusN500 HttpErrorRuleStatus = 500
	HttpErrorRuleStatusN501 HttpErrorRuleStatus = 501
	HttpErrorRuleStatusN502 HttpErrorRuleStatus = 502
	HttpErrorRuleStatusN503 HttpErrorRuleStatus = 503
	HttpErrorRuleStatusN504 HttpErrorRuleStatus = 504
)

// Defines values for HttpErrorRuleType.
const (
	Status HttpErrorRuleType = "status"
)

// Defines values for HttpRequestRuleCond.
const (
	HttpRequestRuleCondIf     HttpRequestRuleCond = "if"
	HttpRequestRuleCondUnless HttpRequestRuleCond = "unless"
)

// Defines values for HttpRequestRuleLogLevel.
const (
	HttpRequestRuleLogLevelAlert   HttpRequestRuleLogLevel = "alert"
	HttpRequestRuleLogLevelCrit    HttpRequestRuleLogLevel = "crit"
	HttpRequestRuleLogLevelDebug   HttpRequestRuleLogLevel = "debug"
	HttpRequestRuleLogLevelEmerg   HttpRequestRuleLogLevel = "emerg"
	HttpRequestRuleLogLevelErr     HttpRequestRuleLogLevel = "err"
	HttpRequestRuleLogLevelInfo    HttpRequestRuleLogLevel = "info"
	HttpRequestRuleLogLevelNotice  HttpRequestRuleLogLevel = "notice"
	HttpRequestRuleLogLevelSilent  HttpRequestRuleLogLevel = "silent"
	HttpRequestRuleLogLevelWarning HttpRequestRuleLogLevel = "warning"
)

// Defines values for HttpRequestRuleNormalizer.
const (
	FragmentEncode          HttpRequestRuleNormalizer = "fragment-encode"
	FragmentStrip           HttpRequestRuleNormalizer = "fragment-strip"
	PathMergeSlashes        HttpRequestRuleNormalizer = "path-merge-slashes"
	PathStripDot            HttpRequestRuleNormalizer = "path-strip-dot"
	PathStripDotdot         HttpRequestRuleNormalizer = "path-strip-dotdot"
	PercentDecodeUnreserved HttpRequestRuleNormalizer = "percent-decode-unreserved"
	PercentToUppercase      HttpRequestRuleNormalizer = "percent-to-uppercase"
	QuerySortByName         HttpRequestRuleNormalizer = "query-sort-by-name"
)

// Defines values for HttpRequestRuleProtocol.
const (
	HttpRequestRuleProtocolIpv4 HttpRequestRuleProtocol = "ipv4"
	HttpRequestRuleProtocolIpv6 HttpRequestRuleProtocol = "ipv6"
)

// Defines values for HttpRequestRuleRedirCode.
const (
	HttpRequestRuleRedirCodeN301 HttpRequestRuleRedirCode = 301
	HttpRequestRuleRedirCodeN302 HttpRequestRuleRedirCode = 302
	HttpRequestRuleRedirCodeN303 HttpRequestRuleRedirCode = 303
	HttpRequestRuleRedirCodeN307 HttpRequestRuleRedirCode = 307
	HttpRequestRuleRedirCodeN308 HttpRequestRuleRedirCode = 308
)

// Defines values for HttpRequestRuleRedirType.
const (
	HttpRequestRuleRedirTypeLocation HttpRequestRuleRedirType = "location"
	HttpRequestRuleRedirTypePrefix   HttpRequestRuleRedirType = "prefix"
	HttpRequestRuleRedirTypeScheme   HttpRequestRuleRedirType = "scheme"
)

// Defines values for HttpRequestRuleReturnContentFormat.
const (
	HttpRequestRuleReturnContentFormatDefaultErrorfiles HttpRequestRuleReturnContentFormat = "default-errorfiles"
	HttpRequestRuleReturnContentFormatErrorfile         HttpRequestRuleReturnContentFormat = "errorfile"
	HttpRequestRuleReturnContentFormatErrorfiles        HttpRequestRuleReturnContentFormat = "errorfiles"
	HttpRequestRuleReturnContentFormatFile              HttpRequestRuleReturnContentFormat = "file"
	HttpRequestRuleReturnContentFormatLfFile            HttpRequestRuleReturnContentFormat = "lf-file"
	HttpRequestRuleReturnContentFormatLfString          HttpRequestRuleReturnContentFormat = "lf-string"
	HttpRequestRuleReturnContentFormatString            HttpRequestRuleReturnContentFormat = "string"
)

// Defines values for HttpRequestRuleStrictMode.
const (
	HttpRequestRuleStrictModeOff HttpRequestRuleStrictMode = "off"
	HttpRequestRuleStrictModeOn  HttpRequestRuleStrictMode = "on"
)

// Defines values for HttpRequestRuleTimeoutType.
const (
	HttpRequestRuleTimeoutTypeClient HttpRequestRuleTimeoutType = "client"
	HttpRequestRuleTimeoutTypeServer HttpRequestRuleTimeoutType = "server"
	HttpRequestRuleTimeoutTypeTunnel HttpRequestRuleTimeoutType = "tunnel"
)

// Defines values for HttpRequestRuleType.
const (
	HttpRequestRuleTypeAddAcl            HttpRequestRuleType = "add-acl"
	HttpRequestRuleTypeAddHeader         HttpRequestRuleType = "add-header"
	HttpRequestRuleTypeAllow             HttpRequestRuleType = "allow"
	HttpRequestRuleTypeAuth              HttpRequestRuleType = "auth"
	HttpRequestRuleTypeCacheUse          HttpRequestRuleType = "cache-use"
	HttpRequestRuleTypeCapture           HttpRequestRuleType = "capture"
	HttpRequestRuleTypeDelAcl            HttpRequestRuleType = "del-acl"
	HttpRequestRuleTypeDelHeader         HttpRequestRuleType = "del-header"
	HttpRequestRuleTypeDelMap            HttpRequestRuleType = "del-map"
	HttpRequestRuleTypeDeny              HttpRequestRuleType = "deny"
	HttpRequestRuleTypeDisableL7Retry    HttpRequestRuleType = "disable-l7-retry"
	HttpRequestRuleTypeDoLog             HttpRequestRuleType = "do-log"
	HttpRequestRuleTypeDoResolve         HttpRequestRuleType = "do-resolve"
	HttpRequestRuleTypeEarlyHint         HttpRequestRuleType = "early-hint"
	HttpRequestRuleTypeLua               HttpRequestRuleType = "lua"
	HttpRequestRuleTypeNormalizeUri      HttpRequestRuleType = "normalize-uri"
	HttpRequestRuleTypePause             HttpRequestRuleType = "pause"
	HttpRequestRuleTypeRedirect          HttpRequestRuleType = "redirect"
	HttpRequestRuleTypeReject            HttpRequestRuleType = "reject"
	HttpRequestRuleTypeReplaceHeader     HttpRequestRuleType = "replace-header"
	HttpRequestRuleTypeReplacePath       HttpRequestRuleType = "replace-path"
	HttpRequestRuleTypeReplacePathq      HttpRequestRuleType = "replace-pathq"
	HttpRequestRuleTypeReplaceUri        HttpRequestRuleType = "replace-uri"
	HttpRequestRuleTypeReplaceValue      HttpRequestRuleType = "replace-value"
	HttpRequestRuleTypeReturn            HttpRequestRuleType = "return"
	HttpRequestRuleTypeScAddGpc          HttpRequestRuleType = "sc-add-gpc"
	HttpRequestRuleTypeScIncGpc          HttpRequestRuleType = "sc-inc-gpc"
	HttpRequestRuleTypeScIncGpc0         HttpRequestRuleType = "sc-inc-gpc0"
	HttpRequestRuleTypeScIncGpc1         HttpRequestRuleType = "sc-inc-gpc1"
	HttpRequestRuleTypeScSetGpt          HttpRequestRuleType = "sc-set-gpt"
	HttpRequestRuleTypeScSetGpt0         HttpRequestRuleType = "sc-set-gpt0"
	HttpRequestRuleTypeSendSpoeGroup     HttpRequestRuleType = "send-spoe-group"
	HttpRequestRuleTypeSetBandwidthLimit HttpRequestRuleType = "set-bandwidth-limit"
	HttpRequestRuleTypeSetBcMark         HttpRequestRuleType = "set-bc-mark"
	HttpRequestRuleTypeSetBcTos          HttpRequestRuleType = "set-bc-tos"
	HttpRequestRuleTypeSetDst            HttpRequestRuleType = "set-dst"
	HttpRequestRuleTypeSetDstPort        HttpRequestRuleType = "set-dst-port"
	HttpRequestRuleTypeSetFcMark         HttpRequestRuleType = "set-fc-mark"
	HttpRequestRuleTypeSetFcTos          HttpRequestRuleType = "set-fc-tos"
	HttpRequestRuleTypeSetHeader         HttpRequestRuleType = "set-header"
	HttpRequestRuleTypeSetLogLevel       HttpRequestRuleType = "set-log-level"
	HttpRequestRuleTypeSetMap            HttpRequestRuleType = "set-map"
	HttpRequestRuleTypeSetMark           HttpRequestRuleType = "set-mark"
	HttpRequestRuleTypeSetMethod         HttpRequestRuleType = "set-method"
	HttpRequestRuleTypeSetNice           HttpRequestRuleType = "set-nice"
	HttpRequestRuleTypeSetPath           HttpRequestRuleType = "set-path"
	HttpRequestRuleTypeSetPathq          HttpRequestRuleType = "set-pathq"
	HttpRequestRuleTypeSetPriorityClass  HttpRequestRuleType = "set-priority-class"
	HttpRequestRuleTypeSetPriorityOffset HttpRequestRuleType = "set-priority-offset"
	HttpRequestRuleTypeSetQuery          HttpRequestRuleType = "set-query"
	HttpRequestRuleTypeSetRetries        HttpRequestRuleType = "set-retries"
	HttpRequestRuleTypeSetSrc            HttpRequestRuleType = "set-src"
	HttpRequestRuleTypeSetSrcPort        HttpRequestRuleType = "set-src-port"
	HttpRequestRuleTypeSetTimeout        HttpRequestRuleType = "set-timeout"
	HttpRequestRuleTypeSetTos            HttpRequestRuleType = "set-tos"
	HttpRequestRuleTypeSetUri            HttpRequestRuleType = "set-uri"
	HttpRequestRuleTypeSetVar            HttpRequestRuleType = "set-var"
	HttpRequestRuleTypeSetVarFmt         HttpRequestRuleType = "set-var-fmt"
	HttpRequestRuleTypeSilentDrop        HttpRequestRuleType = "silent-drop"
	HttpRequestRuleTypeStrictMode        HttpRequestRuleType = "strict-mode"
	HttpRequestRuleTypeTarpit            HttpRequestRuleType = "tarpit"
	HttpRequestRuleTypeTrackSc           HttpRequestRuleType = "track-sc"
	HttpRequestRuleTypeUnsetVar          HttpRequestRuleType = "unset-var"
	HttpRequestRuleTypeUseService        HttpRequestRuleType = "use-service"
	HttpRequestRuleTypeWaitForBody       HttpRequestRuleType = "wait-for-body"
	HttpRequestRuleTypeWaitForHandshake  HttpRequestRuleType = "wait-for-handshake"
)

// Defines values for HttpResponseRuleCond.
const (
	HttpResponseRuleCondIf     HttpResponseRuleCond = "if"
	HttpResponseRuleCondUnless HttpResponseRuleCond = "unless"
)

// Defines values for HttpResponseRuleLogLevel.
const (
	HttpResponseRuleLogLevelAlert   HttpResponseRuleLogLevel = "alert"
	HttpResponseRuleLogLevelCrit    HttpResponseRuleLogLevel = "crit"
	HttpResponseRuleLogLevelDebug   HttpResponseRuleLogLevel = "debug"
	HttpResponseRuleLogLevelEmerg   HttpResponseRuleLogLevel = "emerg"
	HttpResponseRuleLogLevelErr     HttpResponseRuleLogLevel = "err"
	HttpResponseRuleLogLevelInfo    HttpResponseRuleLogLevel = "info"
	HttpResponseRuleLogLevelNotice  HttpResponseRuleLogLevel = "notice"
	HttpResponseRuleLogLevelSilent  HttpResponseRuleLogLevel = "silent"
	HttpResponseRuleLogLevelWarning HttpResponseRuleLogLevel = "warning"
)

// Defines values for HttpResponseRuleRedirCode.
const (
	HttpResponseRuleRedirCodeN301 HttpResponseRuleRedirCode = 301
	HttpResponseRuleRedirCodeN302 HttpResponseRuleRedirCode = 302
	HttpResponseRuleRedirCodeN303 HttpResponseRuleRedirCode = 303
	HttpResponseRuleRedirCodeN307 HttpResponseRuleRedirCode = 307
	HttpResponseRuleRedirCodeN308 HttpResponseRuleRedirCode = 308
)

// Defines values for HttpResponseRuleRedirType.
const (
	Location HttpResponseRuleRedirType = "location"
	Prefix   HttpResponseRuleRedirType = "prefix"
	Scheme   HttpResponseRuleRedirType = "scheme"
)

// Defines values for HttpResponseRuleReturnContentFormat.
const (
	HttpResponseRuleReturnContentFormatDefaultErrorfiles HttpResponseRuleReturnContentFormat = "default-errorfiles"
	HttpResponseRuleReturnContentFormatErrorfile         HttpResponseRuleReturnContentFormat = "errorfile"
	HttpResponseRuleReturnContentFormatErrorfiles        HttpResponseRuleReturnContentFormat = "errorfiles"
	HttpResponseRuleReturnContentFormatFile              HttpResponseRuleReturnContentFormat = "file"
	HttpResponseRuleReturnContentFormatLfFile            HttpResponseRuleReturnContentFormat = "lf-file"
	HttpResponseRuleReturnContentFormatLfString          HttpResponseRuleReturnContentFormat = "lf-string"
	HttpResponseRuleReturnContentFormatString            HttpResponseRuleReturnContentFormat = "string"
)

// Defines values for HttpResponseRuleStrictMode.
const (
	HttpResponseRuleStrictModeOff HttpResponseRuleStrictMode = "off"
	HttpResponseRuleStrictModeOn  HttpResponseRuleStrictMode = "on"
)

// Defines values for HttpResponseRuleTimeoutType.
const (
	HttpResponseRuleTimeoutTypeClient HttpResponseRuleTimeoutType = "client"
	HttpResponseRuleTimeoutTypeServer HttpResponseRuleTimeoutType = "server"
	HttpResponseRuleTimeoutTypeTunnel HttpResponseRuleTimeoutType = "tunnel"
)

// Defines values for HttpResponseRuleType.
const (
	HttpResponseRuleTypeAddAcl            HttpResponseRuleType = "add-acl"
	HttpResponseRuleTypeAddHeader         HttpResponseRuleType = "add-header"
	HttpResponseRuleTypeAllow             HttpResponseRuleType = "allow"
	HttpResponseRuleTypeCacheStore        HttpResponseRuleType = "cache-store"
	HttpResponseRuleTypeCapture           HttpResponseRuleType = "capture"
	HttpResponseRuleTypeDelAcl            HttpResponseRuleType = "del-acl"
	HttpResponseRuleTypeDelHeader         HttpResponseRuleType = "del-header"
	HttpResponseRuleTypeDelMap            HttpResponseRuleType = "del-map"
	HttpResponseRuleTypeDeny              HttpResponseRuleType = "deny"
	HttpResponseRuleTypeDoLog             HttpResponseRuleType = "do-log"
	HttpResponseRuleTypeLua               HttpResponseRuleType = "lua"
	HttpResponseRuleTypePause             HttpResponseRuleType = "pause"
	HttpResponseRuleTypeRedirect          HttpResponseRuleType = "redirect"
	HttpResponseRuleTypeReplaceHeader     HttpResponseRuleType = "replace-header"
	HttpResponseRuleTypeReplaceValue      HttpResponseRuleType = "replace-value"
	HttpResponseRuleTypeReturn            HttpResponseRuleType = "return"
	HttpResponseRuleTypeScAddGpc          HttpResponseRuleType = "sc-add-gpc"
	HttpResponseRuleTypeScIncGpc          HttpResponseRuleType = "sc-inc-gpc"
	HttpResponseRuleTypeScIncGpc0         HttpResponseRuleType = "sc-inc-gpc0"
	HttpResponseRuleTypeScIncGpc1         HttpResponseRuleType = "sc-inc-gpc1"
	HttpResponseRuleTypeScSetGpt          HttpResponseRuleType = "sc-set-gpt"
	HttpResponseRuleTypeScSetGpt0         HttpResponseRuleType = "sc-set-gpt0"
	HttpResponseRuleTypeSendSpoeGroup     HttpResponseRuleType = "send-spoe-group"
	HttpResponseRuleTypeSetBandwidthLimit HttpResponseRuleType = "set-bandwidth-limit"
	HttpResponseRuleTypeSetFcMark         HttpResponseRuleType = "set-fc-mark"
	HttpResponseRuleTypeSetFcTos          HttpResponseRuleType = "set-fc-tos"
	HttpResponseRuleTypeSetHeader         HttpResponseRuleType = "set-header"
	HttpResponseRuleTypeSetLogLevel       HttpResponseRuleType = "set-log-level"
	HttpResponseRuleTypeSetMap            HttpResponseRuleType = "set-map"
	HttpResponseRuleTypeSetMark           HttpResponseRuleType = "set-mark"
	HttpResponseRuleTypeSetNice           HttpResponseRuleType = "set-nice"
	HttpResponseRuleTypeSetStatus         HttpResponseRuleType = "set-status"
	HttpResponseRuleTypeSetTimeout        HttpResponseRuleType = "set-timeout"
	HttpResponseRuleTypeSetTos            HttpResponseRuleType = "set-tos"
	HttpResponseRuleTypeSetVar            HttpResponseRuleType = "set-var"
	HttpResponseRuleTypeSetVarFmt         HttpResponseRuleType = "set-var-fmt"
	HttpResponseRuleTypeSilentDrop        HttpResponseRuleType = "silent-drop"
	HttpResponseRuleTypeStrictMode        HttpResponseRuleType = "strict-mode"
	HttpResponseRuleTypeTrackSc           HttpResponseRuleType = "track-sc"
	HttpResponseRuleTypeUnsetVar          HttpResponseRuleType = "unset-var"
	HttpResponseRuleTypeWaitForBody       HttpResponseRuleType = "wait-for-body"
)

// Defines values for HttpchkParamsMethod.
const (
	HttpchkParamsMethodCONNECT HttpchkParamsMethod = "CONNECT"
	HttpchkParamsMethodDELETE  HttpchkParamsMethod = "DELETE"
	HttpchkParamsMethodGET     HttpchkParamsMethod = "GET"
	HttpchkParamsMethodHEAD    HttpchkParamsMethod = "HEAD"
	HttpchkParamsMethodOPTIONS HttpchkParamsMethod = "OPTIONS"
	HttpchkParamsMethodPATCH   HttpchkParamsMethod = "PATCH"
	HttpchkParamsMethodPOST    HttpchkParamsMethod = "POST"
	HttpchkParamsMethodPUT     HttpchkParamsMethod = "PUT"
	HttpchkParamsMethodTRACE   HttpchkParamsMethod = "TRACE"
)

// Defines values for LogProfileStepDrop.
const (
	LogProfileStepDropDisabled LogProfileStepDrop = "disabled"
	LogProfileStepDropEnabled  LogProfileStepDrop = "enabled"
)

// Defines values for LogProfileStepStep.
const (
	LogProfileStepStepAccept       LogProfileStepStep = "accept"
	LogProfileStepStepAny          LogProfileStepStep = "any"
	LogProfileStepStepClose        LogProfileStepStep = "close"
	LogProfileStepStepConnect      LogProfileStepStep = "connect"
	LogProfileStepStepError        LogProfileStepStep = "error"
	LogProfileStepStepHttpAfterRes LogProfileStepStep = "http-after-res"
	LogProfileStepStepHttpReq      LogProfileStepStep = "http-req"
	LogProfileStepStepHttpRes      LogProfileStepStep = "http-res"
	LogProfileStepStepQuicInit     LogProfileStepStep = "quic-init"
	LogProfileStepStepRequest      LogProfileStepStep = "request"
	LogProfileStepStepResponse     LogProfileStepStep = "response"
	LogProfileStepStepTcpReqConn   LogProfileStepStep = "tcp-req-conn"
	LogProfileStepStepTcpReqCont   LogProfileStepStep = "tcp-req-cont"
	LogProfileStepStepTcpReqSess   LogProfileStepStep = "tcp-req-sess"
)

// Defines values for LogTargetFacility.
const (
	LogTargetFacilityAlert  LogTargetFacility = "alert"
	LogTargetFacilityAudit  LogTargetFacility = "audit"
	LogTargetFacilityAuth   LogTargetFacility = "auth"
	LogTargetFacilityAuth2  LogTargetFacility = "auth2"
	LogTargetFacilityCron   LogTargetFacility = "cron"
	LogTargetFacilityCron2  LogTargetFacility = "cron2"
	LogTargetFacilityDaemon LogTargetFacility = "daemon"
	LogTargetFacilityFtp    LogTargetFacility = "ftp"
	LogTargetFacilityKern   LogTargetFacility = "kern"
	LogTargetFacilityLocal0 LogTargetFacility = "local0"
	LogTargetFacilityLocal1 LogTargetFacility = "local1"
	LogTargetFacilityLocal2 LogTargetFacility = "local2"
	LogTargetFacilityLocal3 LogTargetFacility = "local3"
	LogTargetFacilityLocal4 LogTargetFacility = "local4"
	LogTargetFacilityLocal5 LogTargetFacility = "local5"
	LogTargetFacilityLocal6 LogTargetFacility = "local6"
	LogTargetFacilityLocal7 LogTargetFacility = "local7"
	LogTargetFacilityLpr    LogTargetFacility = "lpr"
	LogTargetFacilityMail   LogTargetFacility = "mail"
	LogTargetFacilityNews   LogTargetFacility = "news"
	LogTargetFacilityNtp    LogTargetFacility = "ntp"
	LogTargetFacilitySyslog LogTargetFacility = "syslog"
	LogTargetFacilityUser   LogTargetFacility = "user"
	LogTargetFacilityUucp   LogTargetFacility = "uucp"
)

// Defines values for LogTargetFormat.
const (
	LogTargetFormatIso      LogTargetFormat = "iso"
	LogTargetFormatLocal    LogTargetFormat = "local"
	LogTargetFormatPriority LogTargetFormat = "priority"
	LogTargetFormatRaw      LogTargetFormat = "raw"
	LogTargetFormatRfc3164  LogTargetFormat = "rfc3164"
	LogTargetFormatRfc5424  LogTargetFormat = "rfc5424"
	LogTargetFormatShort    LogTargetFormat = "short"
	LogTargetFormatTimed    LogTargetFormat = "timed"
)

// Defines values for LogTargetLevel.
const (
	LogTargetLevelAlert   LogTargetLevel = "alert"
	LogTargetLevelCrit    LogTargetLevel = "crit"
	LogTargetLevelDebug   LogTargetLevel = "debug"
	LogTargetLevelEmerg   LogTargetLevel = "emerg"
	LogTargetLevelErr     LogTargetLevel = "err"
	LogTargetLevelInfo    LogTargetLevel = "info"
	LogTargetLevelNotice  LogTargetLevel = "notice"
	LogTargetLevelWarning LogTargetLevel = "warning"
)

// Defines values for LogTargetMinlevel.
const (
	LogTargetMinlevelAlert   LogTargetMinlevel = "alert"
	LogTargetMinlevelCrit    LogTargetMinlevel = "crit"
	LogTargetMinlevelDebug   LogTargetMinlevel = "debug"
	LogTargetMinlevelEmerg   LogTargetMinlevel = "emerg"
	LogTargetMinlevelErr     LogTargetMinlevel = "err"
	LogTargetMinlevelInfo    LogTargetMinlevel = "info"
	LogTargetMinlevelNotice  LogTargetMinlevel = "notice"
	LogTargetMinlevelWarning LogTargetMinlevel = "warning"
)

// Defines values for LuaOptionsPrependPathType.
const (
	Cpath LuaOptionsPrependPathType = "cpath"
	Path  LuaOptionsPrependPathType = "path"
)

// Defines values for MonitorFailCond.
const (
	MonitorFailCondIf     MonitorFailCond = "if"
	MonitorFailCondUnless MonitorFailCond = "unless"
)

// Defines values for MysqlCheckParamsClientVersion.
const (
	Post41 MysqlCheckParamsClientVersion = "post-41"
	Pre41  MysqlCheckParamsClientVersion = "pre-41"
)

// Defines values for NativeStatType.
const (
	NativeStatTypeBackend  NativeStatType = "backend"
	NativeStatTypeFrontend NativeStatType = "frontend"
	NativeStatTypeServer   NativeStatType = "server"
)

// Defines values for NativeStatStatsAgentStatus.
const (
	NativeStatStatsAgentStatusINI     NativeStatStatsAgentStatus = "INI"
	NativeStatStatsAgentStatusL4CON   NativeStatStatsAgentStatus = "L4CON"
	NativeStatStatsAgentStatusL4OK    NativeStatStatsAgentStatus = "L4OK"
	NativeStatStatsAgentStatusL4TOUT  NativeStatStatsAgentStatus = "L4TOUT"
	NativeStatStatsAgentStatusL7OK    NativeStatStatsAgentStatus = "L7OK"
	NativeStatStatsAgentStatusL7STS   NativeStatStatsAgentStatus = "L7STS"
	NativeStatStatsAgentStatusSOCKERR NativeStatStatsAgentStatus = "SOCKERR"
	NativeStatStatsAgentStatusUNK     NativeStatStatsAgentStatus = "UNK"
)

// Defines values for NativeStatStatsCheckStatus.
const (
	NativeStatStatsCheckStatusINI     NativeStatStatsCheckStatus = "INI"
	NativeStatStatsCheckStatusL4CON   NativeStatStatsCheckStatus = "L4CON"
	NativeStatStatsCheckStatusL4OK    NativeStatStatsCheckStatus = "L4OK"
	NativeStatStatsCheckStatusL4TOUT  NativeStatStatsCheckStatus = "L4TOUT"
	NativeStatStatsCheckStatusL6OK    NativeStatStatsCheckStatus = "L6OK"
	NativeStatStatsCheckStatusL6RSP   NativeStatStatsCheckStatus = "L6RSP"
	NativeStatStatsCheckStatusL6TOUT  NativeStatStatsCheckStatus = "L6TOUT"
	NativeStatStatsCheckStatusL7OK    NativeStatStatsCheckStatus = "L7OK"
	NativeStatStatsCheckStatusL7OKC   NativeStatStatsCheckStatus = "L7OKC"
	NativeStatStatsCheckStatusL7RSP   NativeStatStatsCheckStatus = "L7RSP"
	NativeStatStatsCheckStatusL7STS   NativeStatStatsCheckStatus = "L7STS"
	NativeStatStatsCheckStatusL7TOUT  NativeStatStatsCheckStatus = "L7TOUT"
	NativeStatStatsCheckStatusSOCKERR NativeStatStatsCheckStatus = "SOCKERR"
	NativeStatStatsCheckStatusUNK     NativeStatStatsCheckStatus = "UNK"
)

// Defines values for NativeStatStatsMode.
const (
	NativeStatStatsModeHealth  NativeStatStatsMode = "health"
	NativeStatStatsModeHttp    NativeStatStatsMode = "http"
	NativeStatStatsModeTcp     NativeStatStatsMode = "tcp"
	NativeStatStatsModeUnknown NativeStatStatsMode = "unknown"
)

// Defines values for NativeStatStatsStatus.
const (
	DOWN    NativeStatStatsStatus = "DOWN"
	MAINT   NativeStatStatsStatus = "MAINT"
	NOLB    NativeStatStatsStatus = "NOLB"
	NoCheck NativeStatStatsStatus = "no check"
	UP      NativeStatStatsStatus = "UP"
)

// Defines values for OcspUpdateOptionsMode.
const (
	OcspUpdateOptionsModeDisabled OcspUpdateOptionsMode = "disabled"
	OcspUpdateOptionsModeEnabled  OcspUpdateOptionsMode = "enabled"
)

// Defines values for OriginaltoEnabled.
const (
	OriginaltoEnabledEnabled OriginaltoEnabled = "enabled"
)

// Defines values for PerformanceOptionsProfilingMemory.
const (
	PerformanceOptionsProfilingMemoryDisabled PerformanceOptionsProfilingMemory = "disabled"
	PerformanceOptionsProfilingMemoryEnabled  PerformanceOptionsProfilingMemory = "enabled"
)

// Defines values for PerformanceOptionsProfilingTasks.
const (
	PerformanceOptionsProfilingTasksAuto     PerformanceOptionsProfilingTasks = "auto"
	PerformanceOptionsProfilingTasksDisabled PerformanceOptionsProfilingTasks = "disabled"
	PerformanceOptionsProfilingTasksEnabled  PerformanceOptionsProfilingTasks = "enabled"
)

// Defines values for PersistRuleType.
const (
	RdpCookie PersistRuleType = "rdp-cookie"
)

// Defines values for ProgramStartOnReload.
const (
	ProgramStartOnReloadDisabled ProgramStartOnReload = "disabled"
	ProgramStartOnReloadEnabled  ProgramStartOnReload = "enabled"
)

// Defines values for QuicInitialRuleCond.
const (
	QuicInitialRuleCondIf     QuicInitialRuleCond = "if"
	QuicInitialRuleCondUnless QuicInitialRuleCond = "unless"
)

// Defines values for QuicInitialRuleType.
const (
	QuicInitialRuleTypeAccept    QuicInitialRuleType = "accept"
	QuicInitialRuleTypeDgramDrop QuicInitialRuleType = "dgram-drop"
	QuicInitialRuleTypeReject    QuicInitialRuleType = "reject"
	QuicInitialRuleTypeSendRetry QuicInitialRuleType = "send-retry"
)

// Defines values for RedispatchEnabled.
const (
	RedispatchEnabledDisabled RedispatchEnabled = "disabled"
	RedispatchEnabledEnabled  RedispatchEnabled = "enabled"
)

// Defines values for ReloadStatus.
const (
	ReloadStatusFailed     ReloadStatus = "failed"
	ReloadStatusInProgress ReloadStatus = "in_progress"
	ReloadStatusSucceeded  ReloadStatus = "succeeded"
)

// Defines values for RingFormat.
const (
	RingFormatIso      RingFormat = "iso"
	RingFormatLocal    RingFormat = "local"
	RingFormatPriority RingFormat = "priority"
	RingFormatRaw      RingFormat = "raw"
	RingFormatRfc3164  RingFormat = "rfc3164"
	RingFormatRfc5424  RingFormat = "rfc5424"
	RingFormatShort    RingFormat = "short"
	RingFormatTimed    RingFormat = "timed"
)

// Defines values for RingBaseFormat.
const (
	Iso      RingBaseFormat = "iso"
	Local    RingBaseFormat = "local"
	Priority RingBaseFormat = "priority"
	Raw      RingBaseFormat = "raw"
	Rfc3164  RingBaseFormat = "rfc3164"
	Rfc5424  RingBaseFormat = "rfc5424"
	Short    RingBaseFormat = "short"
	Timed    RingBaseFormat = "timed"
)

// Defines values for RuntimeAddServerAgentCheck.
const (
	RuntimeAddServerAgentCheckDisabled RuntimeAddServerAgentCheck = "disabled"
	RuntimeAddServerAgentCheckEnabled  RuntimeAddServerAgentCheck = "enabled"
)

// Defines values for RuntimeAddServerBackup.
const (
	RuntimeAddServerBackupDisabled RuntimeAddServerBackup = "disabled"
	RuntimeAddServerBackupEnabled  RuntimeAddServerBackup = "enabled"
)

// Defines values for RuntimeAddServerCheck.
const (
	RuntimeAddServerCheckDisabled RuntimeAddServerCheck = "disabled"
	RuntimeAddServerCheckEnabled  RuntimeAddServerCheck = "enabled"
)

// Defines values for RuntimeAddServerCheckSendProxy.
const (
	RuntimeAddServerCheckSendProxyDisabled RuntimeAddServerCheckSendProxy = "disabled"
	RuntimeAddServerCheckSendProxyEnabled  RuntimeAddServerCheckSendProxy = "enabled"
)

// Defines values for RuntimeAddServerCheckSsl.
const (
	RuntimeAddServerCheckSslDisabled RuntimeAddServerCheckSsl = "disabled"
	RuntimeAddServerCheckSslEnabled  RuntimeAddServerCheckSsl = "enabled"
)

// Defines values for RuntimeAddServerCheckViaSocks4.
const (
	RuntimeAddServerCheckViaSocks4Disabled RuntimeAddServerCheckViaSocks4 = "disabled"
	RuntimeAddServerCheckViaSocks4Enabled  RuntimeAddServerCheckViaSocks4 = "enabled"
)

// Defines values for RuntimeAddServerForceSslv3.
const (
	RuntimeAddServerForceSslv3Disabled RuntimeAddServerForceSslv3 = "disabled"
	RuntimeAddServerForceSslv3Enabled  RuntimeAddServerForceSslv3 = "enabled"
)

// Defines values for RuntimeAddServerForceTlsv10.
const (
	RuntimeAddServerForceTlsv10Disabled RuntimeAddServerForceTlsv10 = "disabled"
	RuntimeAddServerForceTlsv10Enabled  RuntimeAddServerForceTlsv10 = "enabled"
)

// Defines values for RuntimeAddServerForceTlsv11.
const (
	RuntimeAddServerForceTlsv11Disabled RuntimeAddServerForceTlsv11 = "disabled"
	RuntimeAddServerForceTlsv11Enabled  RuntimeAddServerForceTlsv11 = "enabled"
)

// Defines values for RuntimeAddServerForceTlsv12.
const (
	RuntimeAddServerForceTlsv12Disabled RuntimeAddServerForceTlsv12 = "disabled"
	RuntimeAddServerForceTlsv12Enabled  RuntimeAddServerForceTlsv12 = "enabled"
)

// Defines values for RuntimeAddServerForceTlsv13.
const (
	RuntimeAddServerForceTlsv13Disabled RuntimeAddServerForceTlsv13 = "disabled"
	RuntimeAddServerForceTlsv13Enabled  RuntimeAddServerForceTlsv13 = "enabled"
)

// Defines values for RuntimeAddServerMaintenance.
const (
	RuntimeAddServerMaintenanceDisabled RuntimeAddServerMaintenance = "disabled"
	RuntimeAddServerMaintenanceEnabled  RuntimeAddServerMaintenance = "enabled"
)

// Defines values for RuntimeAddServerNoSslv3.
const (
	RuntimeAddServerNoSslv3Disabled RuntimeAddServerNoSslv3 = "disabled"
	RuntimeAddServerNoSslv3Enabled  RuntimeAddServerNoSslv3 = "enabled"
)

// Defines values for RuntimeAddServerNoTlsv10.
const (
	RuntimeAddServerNoTlsv10Disabled RuntimeAddServerNoTlsv10 = "disabled"
	RuntimeAddServerNoTlsv10Enabled  RuntimeAddServerNoTlsv10 = "enabled"
)

// Defines values for RuntimeAddServerNoTlsv11.
const (
	RuntimeAddServerNoTlsv11Disabled RuntimeAddServerNoTlsv11 = "disabled"
	RuntimeAddServerNoTlsv11Enabled  RuntimeAddServerNoTlsv11 = "enabled"
)

// Defines values for RuntimeAddServerNoTlsv12.
const (
	RuntimeAddServerNoTlsv12Disabled RuntimeAddServerNoTlsv12 = "disabled"
	RuntimeAddServerNoTlsv12Enabled  RuntimeAddServerNoTlsv12 = "enabled"
)

// Defines values for RuntimeAddServerNoTlsv13.
const (
	RuntimeAddServerNoTlsv13Disabled RuntimeAddServerNoTlsv13 = "disabled"
	RuntimeAddServerNoTlsv13Enabled  RuntimeAddServerNoTlsv13 = "enabled"
)

// Defines values for RuntimeAddServerObserve.
const (
	RuntimeAddServerObserveLayer4 RuntimeAddServerObserve = "layer4"
	RuntimeAddServerObserveLayer7 RuntimeAddServerObserve = "layer7"
)

// Defines values for RuntimeAddServerOnError.
const (
	RuntimeAddServerOnErrorFailCheck   RuntimeAddServerOnError = "fail-check"
	RuntimeAddServerOnErrorFastinter   RuntimeAddServerOnError = "fastinter"
	RuntimeAddServerOnErrorMarkDown    RuntimeAddServerOnError = "mark-down"
	RuntimeAddServerOnErrorSuddenDeath RuntimeAddServerOnError = "sudden-death"
)

// Defines values for RuntimeAddServerOnMarkedDown.
const (
	RuntimeAddServerOnMarkedDownShutdownSessions RuntimeAddServerOnMarkedDown = "shutdown-sessions"
)

// Defines values for RuntimeAddServerOnMarkedUp.
const (
	RuntimeAddServerOnMarkedUpShutdownBackupSessions RuntimeAddServerOnMarkedUp = "shutdown-backup-sessions"
)

// Defines values for RuntimeAddServerProxyV2Options.
const (
	RuntimeAddServerProxyV2OptionsAuthority RuntimeAddServerProxyV2Options = "authority"
	RuntimeAddServerProxyV2OptionsCertCn    RuntimeAddServerProxyV2Options = "cert-cn"
	RuntimeAddServerProxyV2OptionsCertKey   RuntimeAddServerProxyV2Options = "cert-key"
	RuntimeAddServerProxyV2OptionsCertSig   RuntimeAddServerProxyV2Options = "cert-sig"
	RuntimeAddServerProxyV2OptionsCrc32c    RuntimeAddServerProxyV2Options = "crc32c"
	RuntimeAddServerProxyV2OptionsSsl       RuntimeAddServerProxyV2Options = "ssl"
	RuntimeAddServerProxyV2OptionsSslCipher RuntimeAddServerProxyV2Options = "ssl-cipher"
	RuntimeAddServerProxyV2OptionsUniqueId  RuntimeAddServerProxyV2Options = "unique-id"
)

// Defines values for RuntimeAddServerSendProxy.
const (
	RuntimeAddServerSendProxyDisabled RuntimeAddServerSendProxy = "disabled"
	RuntimeAddServerSendProxyEnabled  RuntimeAddServerSendProxy = "enabled"
)

// Defines values for RuntimeAddServerSendProxyV2.
const (
	RuntimeAddServerSendProxyV2Disabled RuntimeAddServerSendProxyV2 = "disabled"
	RuntimeAddServerSendProxyV2Enabled  RuntimeAddServerSendProxyV2 = "enabled"
)

// Defines values for RuntimeAddServerSendProxyV2Ssl.
const (
	RuntimeAddServerSendProxyV2SslDisabled RuntimeAddServerSendProxyV2Ssl = "disabled"
	RuntimeAddServerSendProxyV2SslEnabled  RuntimeAddServerSendProxyV2Ssl = "enabled"
)

// Defines values for RuntimeAddServerSendProxyV2SslCn.
const (
	RuntimeAddServerSendProxyV2SslCnDisabled RuntimeAddServerSendProxyV2SslCn = "disabled"
	RuntimeAddServerSendProxyV2SslCnEnabled  RuntimeAddServerSendProxyV2SslCn = "enabled"
)

// Defines values for RuntimeAddServerSsl.
const (
	RuntimeAddServerSslDisabled RuntimeAddServerSsl = "disabled"
	RuntimeAddServerSslEnabled  RuntimeAddServerSsl = "enabled"
)

// Defines values for RuntimeAddServerSslMaxVer.
const (
	RuntimeAddServerSslMaxVerSSLv3  RuntimeAddServerSslMaxVer = "SSLv3"
	RuntimeAddServerSslMaxVerTLSv10 RuntimeAddServerSslMaxVer = "TLSv1.0"
	RuntimeAddServerSslMaxVerTLSv11 RuntimeAddServerSslMaxVer = "TLSv1.1"
	RuntimeAddServerSslMaxVerTLSv12 RuntimeAddServerSslMaxVer = "TLSv1.2"
	RuntimeAddServerSslMaxVerTLSv13 RuntimeAddServerSslMaxVer = "TLSv1.3"
)

// Defines values for RuntimeAddServerSslMinVer.
const (
	RuntimeAddServerSslMinVerSSLv3  RuntimeAddServerSslMinVer = "SSLv3"
	RuntimeAddServerSslMinVerTLSv10 RuntimeAddServerSslMinVer = "TLSv1.0"
	RuntimeAddServerSslMinVerTLSv11 RuntimeAddServerSslMinVer = "TLSv1.1"
	RuntimeAddServerSslMinVerTLSv12 RuntimeAddServerSslMinVer = "TLSv1.2"
	RuntimeAddServerSslMinVerTLSv13 RuntimeAddServerSslMinVer = "TLSv1.3"
)

// Defines values for RuntimeAddServerSslReuse.
const (
	RuntimeAddServerSslReuseDisabled RuntimeAddServerSslReuse = "disabled"
	RuntimeAddServerSslReuseEnabled  RuntimeAddServerSslReuse = "enabled"
)

// Defines values for RuntimeAddServerTfo.
const (
	RuntimeAddServerTfoDisabled RuntimeAddServerTfo = "disabled"
	RuntimeAddServerTfoEnabled  RuntimeAddServerTfo = "enabled"
)

// Defines values for RuntimeAddServerTlsTickets.
const (
	RuntimeAddServerTlsTicketsDisabled RuntimeAddServerTlsTickets = "disabled"
	RuntimeAddServerTlsTicketsEnabled  RuntimeAddServerTlsTickets = "enabled"
)

// Defines values for RuntimeAddServerVerify.
const (
	RuntimeAddServerVerifyNone     RuntimeAddServerVerify = "none"
	RuntimeAddServerVerifyRequired RuntimeAddServerVerify = "required"
)

// Defines values for RuntimeAddServerWs.
const (
	RuntimeAddServerWsAuto RuntimeAddServerWs = "auto"
	RuntimeAddServerWsH1   RuntimeAddServerWs = "h1"
	RuntimeAddServerWsH2   RuntimeAddServerWs = "h2"
)

// Defines values for RuntimeServerAdminState.
const (
	Drain RuntimeServerAdminState = "drain"
	Maint RuntimeServerAdminState = "maint"
	Ready RuntimeServerAdminState = "ready"
)

// Defines values for RuntimeServerOperationalState.
const (
	RuntimeServerOperationalStateDown     RuntimeServerOperationalState = "down"
	RuntimeServerOperationalStateStopping RuntimeServerOperationalState = "stopping"
	RuntimeServerOperationalStateUp       RuntimeServerOperationalState = "up"
)

// Defines values for ServerAgentCheck.
const (
	ServerAgentCheckDisabled ServerAgentCheck = "disabled"
	ServerAgentCheckEnabled  ServerAgentCheck = "enabled"
)

// Defines values for ServerBackup.
const (
	ServerBackupDisabled ServerBackup = "disabled"
	ServerBackupEnabled  ServerBackup = "enabled"
)

// Defines values for ServerCheck.
const (
	ServerCheckDisabled ServerCheck = "disabled"
	ServerCheckEnabled  ServerCheck = "enabled"
)

// Defines values for ServerCheckReusePool.
const (
	ServerCheckReusePoolDisabled ServerCheckReusePool = "disabled"
	ServerCheckReusePoolEnabled  ServerCheckReusePool = "enabled"
)

// Defines values for ServerCheckSendProxy.
const (
	ServerCheckSendProxyDisabled ServerCheckSendProxy = "disabled"
	ServerCheckSendProxyEnabled  ServerCheckSendProxy = "enabled"
)

// Defines values for ServerCheckSsl.
const (
	ServerCheckSslDisabled ServerCheckSsl = "disabled"
	ServerCheckSslEnabled  ServerCheckSsl = "enabled"
)

// Defines values for ServerCheckViaSocks4.
const (
	ServerCheckViaSocks4Disabled ServerCheckViaSocks4 = "disabled"
	ServerCheckViaSocks4Enabled  ServerCheckViaSocks4 = "enabled"
)

// Defines values for ServerForceSslv3.
const (
	ServerForceSslv3Disabled ServerForceSslv3 = "disabled"
	ServerForceSslv3Enabled  ServerForceSslv3 = "enabled"
)

// Defines values for ServerForceTlsv10.
const (
	ServerForceTlsv10Disabled ServerForceTlsv10 = "disabled"
	ServerForceTlsv10Enabled  ServerForceTlsv10 = "enabled"
)

// Defines values for ServerForceTlsv11.
const (
	ServerForceTlsv11Disabled ServerForceTlsv11 = "disabled"
	ServerForceTlsv11Enabled  ServerForceTlsv11 = "enabled"
)

// Defines values for ServerForceTlsv12.
const (
	ServerForceTlsv12Disabled ServerForceTlsv12 = "disabled"
	ServerForceTlsv12Enabled  ServerForceTlsv12 = "enabled"
)

// Defines values for ServerForceTlsv13.
const (
	ServerForceTlsv13Disabled ServerForceTlsv13 = "disabled"
	ServerForceTlsv13Enabled  ServerForceTlsv13 = "enabled"
)

// Defines values for ServerInitState.
const (
	ServerInitStateDown      ServerInitState = "down"
	ServerInitStateFullyDown ServerInitState = "fully-down"
	ServerInitStateFullyUp   ServerInitState = "fully-up"
	ServerInitStateUp        ServerInitState = "up"
)

// Defines values for ServerLogProto.
const (
	ServerLogProtoLegacy     ServerLogProto = "legacy"
	ServerLogProtoOctetCount ServerLogProto = "octet-count"
)

// Defines values for ServerMaintenance.
const (
	ServerMaintenanceDisabled ServerMaintenance = "disabled"
	ServerMaintenanceEnabled  ServerMaintenance = "enabled"
)

// Defines values for ServerNoSslv3.
const (
	ServerNoSslv3Disabled ServerNoSslv3 = "disabled"
	ServerNoSslv3Enabled  ServerNoSslv3 = "enabled"
)

// Defines values for ServerNoTlsv10.
const (
	ServerNoTlsv10Disabled ServerNoTlsv10 = "disabled"
	ServerNoTlsv10Enabled  ServerNoTlsv10 = "enabled"
)

// Defines values for ServerNoTlsv11.
const (
	ServerNoTlsv11Disabled ServerNoTlsv11 = "disabled"
	ServerNoTlsv11Enabled  ServerNoTlsv11 = "enabled"
)

// Defines values for ServerNoTlsv12.
const (
	ServerNoTlsv12Disabled ServerNoTlsv12 = "disabled"
	ServerNoTlsv12Enabled  ServerNoTlsv12 = "enabled"
)

// Defines values for ServerNoTlsv13.
const (
	ServerNoTlsv13Disabled ServerNoTlsv13 = "disabled"
	ServerNoTlsv13Enabled  ServerNoTlsv13 = "enabled"
)

// Defines values for ServerNoVerifyhost.
const (
	ServerNoVerifyhostDisabled ServerNoVerifyhost = "disabled"
	ServerNoVerifyhostEnabled  ServerNoVerifyhost = "enabled"
)

// Defines values for ServerObserve.
const (
	ServerObserveLayer4 ServerObserve = "layer4"
	ServerObserveLayer7 ServerObserve = "layer7"
)

// Defines values for ServerOnError.
const (
	ServerOnErrorFailCheck   ServerOnError = "fail-check"
	ServerOnErrorFastinter   ServerOnError = "fastinter"
	ServerOnErrorMarkDown    ServerOnError = "mark-down"
	ServerOnErrorSuddenDeath ServerOnError = "sudden-death"
)

// Defines values for ServerOnMarkedDown.
const (
	ServerOnMarkedDownShutdownSessions ServerOnMarkedDown = "shutdown-sessions"
)

// Defines values for ServerOnMarkedUp.
const (
	ServerOnMarkedUpShutdownBackupSessions ServerOnMarkedUp = "shutdown-backup-sessions"
)

// Defines values for ServerProxyV2Options.
const (
	ServerProxyV2OptionsAuthority ServerProxyV2Options = "authority"
	ServerProxyV2OptionsCertCn    ServerProxyV2Options = "cert-cn"
	ServerProxyV2OptionsCertKey   ServerProxyV2Options = "cert-key"
	ServerProxyV2OptionsCertSig   ServerProxyV2Options = "cert-sig"
	ServerProxyV2OptionsCrc32c    ServerProxyV2Options = "crc32c"
	ServerProxyV2OptionsSsl       ServerProxyV2Options = "ssl"
	ServerProxyV2OptionsSslCipher ServerProxyV2Options = "ssl-cipher"
	ServerProxyV2OptionsUniqueId  ServerProxyV2Options = "unique-id"
)

// Defines values for ServerResolvePrefer.
const (
	ServerResolvePreferIpv4 ServerResolvePrefer = "ipv4"
	ServerResolvePreferIpv6 ServerResolvePrefer = "ipv6"
)

// Defines values for ServerSendProxy.
const (
	ServerSendProxyDisabled ServerSendProxy = "disabled"
	ServerSendProxyEnabled  ServerSendProxy = "enabled"
)

// Defines values for ServerSendProxyV2.
const (
	ServerSendProxyV2Disabled ServerSendProxyV2 = "disabled"
	ServerSendProxyV2Enabled  ServerSendProxyV2 = "enabled"
)

// Defines values for ServerSendProxyV2Ssl.
const (
	ServerSendProxyV2SslDisabled ServerSendProxyV2Ssl = "disabled"
	ServerSendProxyV2SslEnabled  ServerSendProxyV2Ssl = "enabled"
)

// Defines values for ServerSendProxyV2SslCn.
const (
	ServerSendProxyV2SslCnDisabled ServerSendProxyV2SslCn = "disabled"
	ServerSendProxyV2SslCnEnabled  ServerSendProxyV2SslCn = "enabled"
)

// Defines values for ServerSsl.
const (
	ServerSslDisabled ServerSsl = "disabled"
	ServerSslEnabled  ServerSsl = "enabled"
)

// Defines values for ServerSslMaxVer.
const (
	ServerSslMaxVerSSLv3  ServerSslMaxVer = "SSLv3"
	ServerSslMaxVerTLSv10 ServerSslMaxVer = "TLSv1.0"
	ServerSslMaxVerTLSv11 ServerSslMaxVer = "TLSv1.1"
	ServerSslMaxVerTLSv12 ServerSslMaxVer = "TLSv1.2"
	ServerSslMaxVerTLSv13 ServerSslMaxVer = "TLSv1.3"
)

// Defines values for ServerSslMinVer.
const (
	ServerSslMinVerSSLv3  ServerSslMinVer = "SSLv3"
	ServerSslMinVerTLSv10 ServerSslMinVer = "TLSv1.0"
	ServerSslMinVerTLSv11 ServerSslMinVer = "TLSv1.1"
	ServerSslMinVerTLSv12 ServerSslMinVer = "TLSv1.2"
	ServerSslMinVerTLSv13 ServerSslMinVer = "TLSv1.3"
)

// Defines values for ServerSslReuse.
const (
	ServerSslReuseDisabled ServerSslReuse = "disabled"
	ServerSslReuseEnabled  ServerSslReuse = "enabled"
)

// Defines values for ServerSslv3.
const (
	ServerSslv3Disabled ServerSslv3 = "disabled"
	ServerSslv3Enabled  ServerSslv3 = "enabled"
)

// Defines values for ServerStick.
const (
	ServerStickDisabled ServerStick = "disabled"
	ServerStickEnabled  ServerStick = "enabled"
)

// Defines values for ServerTfo.
const (
	ServerTfoDisabled ServerTfo = "disabled"
	ServerTfoEnabled  ServerTfo = "enabled"
)

// Defines values for ServerTlsTickets.
const (
	ServerTlsTicketsDisabled ServerTlsTickets = "disabled"
	ServerTlsTicketsEnabled  ServerTlsTickets = "enabled"
)

// Defines values for ServerTlsv10.
const (
	ServerTlsv10Disabled ServerTlsv10 = "disabled"
	ServerTlsv10Enabled  ServerTlsv10 = "enabled"
)

// Defines values for ServerTlsv11.
const (
	ServerTlsv11Disabled ServerTlsv11 = "disabled"
	ServerTlsv11Enabled  ServerTlsv11 = "enabled"
)

// Defines values for ServerTlsv12.
const (
	ServerTlsv12Disabled ServerTlsv12 = "disabled"
	ServerTlsv12Enabled  ServerTlsv12 = "enabled"
)

// Defines values for ServerTlsv13.
const (
	ServerTlsv13Disabled ServerTlsv13 = "disabled"
	ServerTlsv13Enabled  ServerTlsv13 = "enabled"
)

// Defines values for ServerVerify.
const (
	ServerVerifyNone     ServerVerify = "none"
	ServerVerifyRequired ServerVerify = "required"
)

// Defines values for ServerWs.
const (
	ServerWsAuto ServerWs = "auto"
	ServerWsH1   ServerWs = "h1"
	ServerWsH2   ServerWs = "h2"
)

// Defines values for ServerParamsAgentCheck.
const (
	ServerParamsAgentCheckDisabled ServerParamsAgentCheck = "disabled"
	ServerParamsAgentCheckEnabled  ServerParamsAgentCheck = "enabled"
)

// Defines values for ServerParamsBackup.
const (
	ServerParamsBackupDisabled ServerParamsBackup = "disabled"
	ServerParamsBackupEnabled  ServerParamsBackup = "enabled"
)

// Defines values for ServerParamsCheck.
const (
	ServerParamsCheckDisabled ServerParamsCheck = "disabled"
	ServerParamsCheckEnabled  ServerParamsCheck = "enabled"
)

// Defines values for ServerParamsCheckReusePool.
const (
	ServerParamsCheckReusePoolDisabled ServerParamsCheckReusePool = "disabled"
	ServerParamsCheckReusePoolEnabled  ServerParamsCheckReusePool = "enabled"
)

// Defines values for ServerParamsCheckSendProxy.
const (
	ServerParamsCheckSendProxyDisabled ServerParamsCheckSendProxy = "disabled"
	ServerParamsCheckSendProxyEnabled  ServerParamsCheckSendProxy = "enabled"
)

// Defines values for ServerParamsCheckSsl.
const (
	ServerParamsCheckSslDisabled ServerParamsCheckSsl = "disabled"
	ServerParamsCheckSslEnabled  ServerParamsCheckSsl = "enabled"
)

// Defines values for ServerParamsCheckViaSocks4.
const (
	ServerParamsCheckViaSocks4Disabled ServerParamsCheckViaSocks4 = "disabled"
	ServerParamsCheckViaSocks4Enabled  ServerParamsCheckViaSocks4 = "enabled"
)

// Defines values for ServerParamsForceSslv3.
const (
	ServerParamsForceSslv3Disabled ServerParamsForceSslv3 = "disabled"
	ServerParamsForceSslv3Enabled  ServerParamsForceSslv3 = "enabled"
)

// Defines values for ServerParamsForceTlsv10.
const (
	ServerParamsForceTlsv10Disabled ServerParamsForceTlsv10 = "disabled"
	ServerParamsForceTlsv10Enabled  ServerParamsForceTlsv10 = "enabled"
)

// Defines values for ServerParamsForceTlsv11.
const (
	ServerParamsForceTlsv11Disabled ServerParamsForceTlsv11 = "disabled"
	ServerParamsForceTlsv11Enabled  ServerParamsForceTlsv11 = "enabled"
)

// Defines values for ServerParamsForceTlsv12.
const (
	ServerParamsForceTlsv12Disabled ServerParamsForceTlsv12 = "disabled"
	ServerParamsForceTlsv12Enabled  ServerParamsForceTlsv12 = "enabled"
)

// Defines values for ServerParamsForceTlsv13.
const (
	ServerParamsForceTlsv13Disabled ServerParamsForceTlsv13 = "disabled"
	ServerParamsForceTlsv13Enabled  ServerParamsForceTlsv13 = "enabled"
)

// Defines values for ServerParamsInitState.
const (
	ServerParamsInitStateDown      ServerParamsInitState = "down"
	ServerParamsInitStateFullyDown ServerParamsInitState = "fully-down"
	ServerParamsInitStateFullyUp   ServerParamsInitState = "fully-up"
	ServerParamsInitStateUp        ServerParamsInitState = "up"
)

// Defines values for ServerParamsLogProto.
const (
	ServerParamsLogProtoLegacy     ServerParamsLogProto = "legacy"
	ServerParamsLogProtoOctetCount ServerParamsLogProto = "octet-count"
)

// Defines values for ServerParamsMaintenance.
const (
	ServerParamsMaintenanceDisabled ServerParamsMaintenance = "disabled"
	ServerParamsMaintenanceEnabled  ServerParamsMaintenance = "enabled"
)

// Defines values for ServerParamsNoSslv3.
const (
	ServerParamsNoSslv3Disabled ServerParamsNoSslv3 = "disabled"
	ServerParamsNoSslv3Enabled  ServerParamsNoSslv3 = "enabled"
)

// Defines values for ServerParamsNoTlsv10.
const (
	ServerParamsNoTlsv10Disabled ServerParamsNoTlsv10 = "disabled"
	ServerParamsNoTlsv10Enabled  ServerParamsNoTlsv10 = "enabled"
)

// Defines values for ServerParamsNoTlsv11.
const (
	ServerParamsNoTlsv11Disabled ServerParamsNoTlsv11 = "disabled"
	ServerParamsNoTlsv11Enabled  ServerParamsNoTlsv11 = "enabled"
)

// Defines values for ServerParamsNoTlsv12.
const (
	ServerParamsNoTlsv12Disabled ServerParamsNoTlsv12 = "disabled"
	ServerParamsNoTlsv12Enabled  ServerParamsNoTlsv12 = "enabled"
)

// Defines values for ServerParamsNoTlsv13.
const (
	ServerParamsNoTlsv13Disabled ServerParamsNoTlsv13 = "disabled"
	ServerParamsNoTlsv13Enabled  ServerParamsNoTlsv13 = "enabled"
)

// Defines values for ServerParamsNoVerifyhost.
const (
	ServerParamsNoVerifyhostDisabled ServerParamsNoVerifyhost = "disabled"
	ServerParamsNoVerifyhostEnabled  ServerParamsNoVerifyhost = "enabled"
)

// Defines values for ServerParamsObserve.
const (
	ServerParamsObserveLayer4 ServerParamsObserve = "layer4"
	ServerParamsObserveLayer7 ServerParamsObserve = "layer7"
)

// Defines values for ServerParamsOnError.
const (
	ServerParamsOnErrorFailCheck   ServerParamsOnError = "fail-check"
	ServerParamsOnErrorFastinter   ServerParamsOnError = "fastinter"
	ServerParamsOnErrorMarkDown    ServerParamsOnError = "mark-down"
	ServerParamsOnErrorSuddenDeath ServerParamsOnError = "sudden-death"
)

// Defines values for ServerParamsOnMarkedDown.
const (
	ServerParamsOnMarkedDownShutdownSessions ServerParamsOnMarkedDown = "shutdown-sessions"
)

// Defines values for ServerParamsOnMarkedUp.
const (
	ServerParamsOnMarkedUpShutdownBackupSessions ServerParamsOnMarkedUp = "shutdown-backup-sessions"
)

// Defines values for ServerParamsProxyV2Options.
const (
	ServerParamsProxyV2OptionsAuthority ServerParamsProxyV2Options = "authority"
	ServerParamsProxyV2OptionsCertCn    ServerParamsProxyV2Options = "cert-cn"
	ServerParamsProxyV2OptionsCertKey   ServerParamsProxyV2Options = "cert-key"
	ServerParamsProxyV2OptionsCertSig   ServerParamsProxyV2Options = "cert-sig"
	ServerParamsProxyV2OptionsCrc32c    ServerParamsProxyV2Options = "crc32c"
	ServerParamsProxyV2OptionsSsl       ServerParamsProxyV2Options = "ssl"
	ServerParamsProxyV2OptionsSslCipher ServerParamsProxyV2Options = "ssl-cipher"
	ServerParamsProxyV2OptionsUniqueId  ServerParamsProxyV2Options = "unique-id"
)

// Defines values for ServerParamsResolvePrefer.
const (
	ServerParamsResolvePreferIpv4 ServerParamsResolvePrefer = "ipv4"
	ServerParamsResolvePreferIpv6 ServerParamsResolvePrefer = "ipv6"
)

// Defines values for ServerParamsSendProxy.
const (
	ServerParamsSendProxyDisabled ServerParamsSendProxy = "disabled"
	ServerParamsSendProxyEnabled  ServerParamsSendProxy = "enabled"
)

// Defines values for ServerParamsSendProxyV2.
const (
	ServerParamsSendProxyV2Disabled ServerParamsSendProxyV2 = "disabled"
	ServerParamsSendProxyV2Enabled  ServerParamsSendProxyV2 = "enabled"
)

// Defines values for ServerParamsSendProxyV2Ssl.
const (
	ServerParamsSendProxyV2SslDisabled ServerParamsSendProxyV2Ssl = "disabled"
	ServerParamsSendProxyV2SslEnabled  ServerParamsSendProxyV2Ssl = "enabled"
)

// Defines values for ServerParamsSendProxyV2SslCn.
const (
	ServerParamsSendProxyV2SslCnDisabled ServerParamsSendProxyV2SslCn = "disabled"
	ServerParamsSendProxyV2SslCnEnabled  ServerParamsSendProxyV2SslCn = "enabled"
)

// Defines values for ServerParamsSsl.
const (
	ServerParamsSslDisabled ServerParamsSsl = "disabled"
	ServerParamsSslEnabled  ServerParamsSsl = "enabled"
)

// Defines values for ServerParamsSslMaxVer.
const (
	ServerParamsSslMaxVerSSLv3  ServerParamsSslMaxVer = "SSLv3"
	ServerParamsSslMaxVerTLSv10 ServerParamsSslMaxVer = "TLSv1.0"
	ServerParamsSslMaxVerTLSv11 ServerParamsSslMaxVer = "TLSv1.1"
	ServerParamsSslMaxVerTLSv12 ServerParamsSslMaxVer = "TLSv1.2"
	ServerParamsSslMaxVerTLSv13 ServerParamsSslMaxVer = "TLSv1.3"
)

// Defines values for ServerParamsSslMinVer.
const (
	ServerParamsSslMinVerSSLv3  ServerParamsSslMinVer = "SSLv3"
	ServerParamsSslMinVerTLSv10 ServerParamsSslMinVer = "TLSv1.0"
	ServerParamsSslMinVerTLSv11 ServerParamsSslMinVer = "TLSv1.1"
	ServerParamsSslMinVerTLSv12 ServerParamsSslMinVer = "TLSv1.2"
	ServerParamsSslMinVerTLSv13 ServerParamsSslMinVer = "TLSv1.3"
)

// Defines values for ServerParamsSslReuse.
const (
	ServerParamsSslReuseDisabled ServerParamsSslReuse = "disabled"
	ServerParamsSslReuseEnabled  ServerParamsSslReuse = "enabled"
)

// Defines values for ServerParamsSslv3.
const (
	ServerParamsSslv3Disabled ServerParamsSslv3 = "disabled"
	ServerParamsSslv3Enabled  ServerParamsSslv3 = "enabled"
)

// Defines values for ServerParamsStick.
const (
	ServerParamsStickDisabled ServerParamsStick = "disabled"
	ServerParamsStickEnabled  ServerParamsStick = "enabled"
)

// Defines values for ServerParamsTfo.
const (
	ServerParamsTfoDisabled ServerParamsTfo = "disabled"
	ServerParamsTfoEnabled  ServerParamsTfo = "enabled"
)

// Defines values for ServerParamsTlsTickets.
const (
	ServerParamsTlsTicketsDisabled ServerParamsTlsTickets = "disabled"
	ServerParamsTlsTicketsEnabled  ServerParamsTlsTickets = "enabled"
)

// Defines values for ServerParamsTlsv10.
const (
	ServerParamsTlsv10Disabled ServerParamsTlsv10 = "disabled"
	ServerParamsTlsv10Enabled  ServerParamsTlsv10 = "enabled"
)

// Defines values for ServerParamsTlsv11.
const (
	ServerParamsTlsv11Disabled ServerParamsTlsv11 = "disabled"
	ServerParamsTlsv11Enabled  ServerParamsTlsv11 = "enabled"
)

// Defines values for ServerParamsTlsv12.
const (
	ServerParamsTlsv12Disabled ServerParamsTlsv12 = "disabled"
	ServerParamsTlsv12Enabled  ServerParamsTlsv12 = "enabled"
)

// Defines values for ServerParamsTlsv13.
const (
	ServerParamsTlsv13Disabled ServerParamsTlsv13 = "disabled"
	ServerParamsTlsv13Enabled  ServerParamsTlsv13 = "enabled"
)

// Defines values for ServerParamsVerify.
const (
	ServerParamsVerifyNone     ServerParamsVerify = "none"
	ServerParamsVerifyRequired ServerParamsVerify = "required"
)

// Defines values for ServerParamsWs.
const (
	ServerParamsWsAuto ServerParamsWs = "auto"
	ServerParamsWsH1   ServerParamsWs = "h1"
	ServerParamsWsH2   ServerParamsWs = "h2"
)

// Defines values for ServerSwitchingRuleCond.
const (
	ServerSwitchingRuleCondIf     ServerSwitchingRuleCond = "if"
	ServerSwitchingRuleCondUnless ServerSwitchingRuleCond = "unless"
)

// Defines values for ServerTemplateAgentCheck.
const (
	ServerTemplateAgentCheckDisabled ServerTemplateAgentCheck = "disabled"
	ServerTemplateAgentCheckEnabled  ServerTemplateAgentCheck = "enabled"
)

// Defines values for ServerTemplateBackup.
const (
	ServerTemplateBackupDisabled ServerTemplateBackup = "disabled"
	ServerTemplateBackupEnabled  ServerTemplateBackup = "enabled"
)

// Defines values for ServerTemplateCheck.
const (
	ServerTemplateCheckDisabled ServerTemplateCheck = "disabled"
	ServerTemplateCheckEnabled  ServerTemplateCheck = "enabled"
)

// Defines values for ServerTemplateCheckReusePool.
const (
	ServerTemplateCheckReusePoolDisabled ServerTemplateCheckReusePool = "disabled"
	ServerTemplateCheckReusePoolEnabled  ServerTemplateCheckReusePool = "enabled"
)

// Defines values for ServerTemplateCheckSendProxy.
const (
	ServerTemplateCheckSendProxyDisabled ServerTemplateCheckSendProxy = "disabled"
	ServerTemplateCheckSendProxyEnabled  ServerTemplateCheckSendProxy = "enabled"
)

// Defines values for ServerTemplateCheckSsl.
const (
	ServerTemplateCheckSslDisabled ServerTemplateCheckSsl = "disabled"
	ServerTemplateCheckSslEnabled  ServerTemplateCheckSsl = "enabled"
)

// Defines values for ServerTemplateCheckViaSocks4.
const (
	ServerTemplateCheckViaSocks4Disabled ServerTemplateCheckViaSocks4 = "disabled"
	ServerTemplateCheckViaSocks4Enabled  ServerTemplateCheckViaSocks4 = "enabled"
)

// Defines values for ServerTemplateForceSslv3.
const (
	ServerTemplateForceSslv3Disabled ServerTemplateForceSslv3 = "disabled"
	ServerTemplateForceSslv3Enabled  ServerTemplateForceSslv3 = "enabled"
)

// Defines values for ServerTemplateForceTlsv10.
const (
	ServerTemplateForceTlsv10Disabled ServerTemplateForceTlsv10 = "disabled"
	ServerTemplateForceTlsv10Enabled  ServerTemplateForceTlsv10 = "enabled"
)

// Defines values for ServerTemplateForceTlsv11.
const (
	ServerTemplateForceTlsv11Disabled ServerTemplateForceTlsv11 = "disabled"
	ServerTemplateForceTlsv11Enabled  ServerTemplateForceTlsv11 = "enabled"
)

// Defines values for ServerTemplateForceTlsv12.
const (
	ServerTemplateForceTlsv12Disabled ServerTemplateForceTlsv12 = "disabled"
	ServerTemplateForceTlsv12Enabled  ServerTemplateForceTlsv12 = "enabled"
)

// Defines values for ServerTemplateForceTlsv13.
const (
	ServerTemplateForceTlsv13Disabled ServerTemplateForceTlsv13 = "disabled"
	ServerTemplateForceTlsv13Enabled  ServerTemplateForceTlsv13 = "enabled"
)

// Defines values for ServerTemplateInitState.
const (
	ServerTemplateInitStateDown      ServerTemplateInitState = "down"
	ServerTemplateInitStateFullyDown ServerTemplateInitState = "fully-down"
	ServerTemplateInitStateFullyUp   ServerTemplateInitState = "fully-up"
	ServerTemplateInitStateUp        ServerTemplateInitState = "up"
)

// Defines values for ServerTemplateLogProto.
const (
	Legacy     ServerTemplateLogProto = "legacy"
	OctetCount ServerTemplateLogProto = "octet-count"
)

// Defines values for ServerTemplateMaintenance.
const (
	ServerTemplateMaintenanceDisabled ServerTemplateMaintenance = "disabled"
	ServerTemplateMaintenanceEnabled  ServerTemplateMaintenance = "enabled"
)

// Defines values for ServerTemplateNoSslv3.
const (
	ServerTemplateNoSslv3Disabled ServerTemplateNoSslv3 = "disabled"
	ServerTemplateNoSslv3Enabled  ServerTemplateNoSslv3 = "enabled"
)

// Defines values for ServerTemplateNoTlsv10.
const (
	ServerTemplateNoTlsv10Disabled ServerTemplateNoTlsv10 = "disabled"
	ServerTemplateNoTlsv10Enabled  ServerTemplateNoTlsv10 = "enabled"
)

// Defines values for ServerTemplateNoTlsv11.
const (
	ServerTemplateNoTlsv11Disabled ServerTemplateNoTlsv11 = "disabled"
	ServerTemplateNoTlsv11Enabled  ServerTemplateNoTlsv11 = "enabled"
)

// Defines values for ServerTemplateNoTlsv12.
const (
	ServerTemplateNoTlsv12Disabled ServerTemplateNoTlsv12 = "disabled"
	ServerTemplateNoTlsv12Enabled  ServerTemplateNoTlsv12 = "enabled"
)

// Defines values for ServerTemplateNoTlsv13.
const (
	ServerTemplateNoTlsv13Disabled ServerTemplateNoTlsv13 = "disabled"
	ServerTemplateNoTlsv13Enabled  ServerTemplateNoTlsv13 = "enabled"
)

// Defines values for ServerTemplateNoVerifyhost.
const (
	ServerTemplateNoVerifyhostDisabled ServerTemplateNoVerifyhost = "disabled"
	ServerTemplateNoVerifyhostEnabled  ServerTemplateNoVerifyhost = "enabled"
)

// Defines values for ServerTemplateObserve.
const (
	ServerTemplateObserveLayer4 ServerTemplateObserve = "layer4"
	ServerTemplateObserveLayer7 ServerTemplateObserve = "layer7"
)

// Defines values for ServerTemplateOnError.
const (
	ServerTemplateOnErrorFailCheck   ServerTemplateOnError = "fail-check"
	ServerTemplateOnErrorFastinter   ServerTemplateOnError = "fastinter"
	ServerTemplateOnErrorMarkDown    ServerTemplateOnError = "mark-down"
	ServerTemplateOnErrorSuddenDeath ServerTemplateOnError = "sudden-death"
)

// Defines values for ServerTemplateOnMarkedDown.
const (
	ServerTemplateOnMarkedDownShutdownSessions ServerTemplateOnMarkedDown = "shutdown-sessions"
)

// Defines values for ServerTemplateOnMarkedUp.
const (
	ServerTemplateOnMarkedUpShutdownBackupSessions ServerTemplateOnMarkedUp = "shutdown-backup-sessions"
)

// Defines values for ServerTemplateProxyV2Options.
const (
	ServerTemplateProxyV2OptionsAuthority ServerTemplateProxyV2Options = "authority"
	ServerTemplateProxyV2OptionsCertCn    ServerTemplateProxyV2Options = "cert-cn"
	ServerTemplateProxyV2OptionsCertKey   ServerTemplateProxyV2Options = "cert-key"
	ServerTemplateProxyV2OptionsCertSig   ServerTemplateProxyV2Options = "cert-sig"
	ServerTemplateProxyV2OptionsCrc32c    ServerTemplateProxyV2Options = "crc32c"
	ServerTemplateProxyV2OptionsSsl       ServerTemplateProxyV2Options = "ssl"
	ServerTemplateProxyV2OptionsSslCipher ServerTemplateProxyV2Options = "ssl-cipher"
	ServerTemplateProxyV2OptionsUniqueId  ServerTemplateProxyV2Options = "unique-id"
)

// Defines values for ServerTemplateResolvePrefer.
const (
	ServerTemplateResolvePreferIpv4 ServerTemplateResolvePrefer = "ipv4"
	ServerTemplateResolvePreferIpv6 ServerTemplateResolvePrefer = "ipv6"
)

// Defines values for ServerTemplateSendProxy.
const (
	ServerTemplateSendProxyDisabled ServerTemplateSendProxy = "disabled"
	ServerTemplateSendProxyEnabled  ServerTemplateSendProxy = "enabled"
)

// Defines values for ServerTemplateSendProxyV2.
const (
	ServerTemplateSendProxyV2Disabled ServerTemplateSendProxyV2 = "disabled"
	ServerTemplateSendProxyV2Enabled  ServerTemplateSendProxyV2 = "enabled"
)

// Defines values for ServerTemplateSendProxyV2Ssl.
const (
	ServerTemplateSendProxyV2SslDisabled ServerTemplateSendProxyV2Ssl = "disabled"
	ServerTemplateSendProxyV2SslEnabled  ServerTemplateSendProxyV2Ssl = "enabled"
)

// Defines values for ServerTemplateSendProxyV2SslCn.
const (
	ServerTemplateSendProxyV2SslCnDisabled ServerTemplateSendProxyV2SslCn = "disabled"
	ServerTemplateSendProxyV2SslCnEnabled  ServerTemplateSendProxyV2SslCn = "enabled"
)

// Defines values for ServerTemplateSsl.
const (
	ServerTemplateSslDisabled ServerTemplateSsl = "disabled"
	ServerTemplateSslEnabled  ServerTemplateSsl = "enabled"
)

// Defines values for ServerTemplateSslMaxVer.
const (
	ServerTemplateSslMaxVerSSLv3  ServerTemplateSslMaxVer = "SSLv3"
	ServerTemplateSslMaxVerTLSv10 ServerTemplateSslMaxVer = "TLSv1.0"
	ServerTemplateSslMaxVerTLSv11 ServerTemplateSslMaxVer = "TLSv1.1"
	ServerTemplateSslMaxVerTLSv12 ServerTemplateSslMaxVer = "TLSv1.2"
	ServerTemplateSslMaxVerTLSv13 ServerTemplateSslMaxVer = "TLSv1.3"
)

// Defines values for ServerTemplateSslMinVer.
const (
	ServerTemplateSslMinVerSSLv3  ServerTemplateSslMinVer = "SSLv3"
	ServerTemplateSslMinVerTLSv10 ServerTemplateSslMinVer = "TLSv1.0"
	ServerTemplateSslMinVerTLSv11 ServerTemplateSslMinVer = "TLSv1.1"
	ServerTemplateSslMinVerTLSv12 ServerTemplateSslMinVer = "TLSv1.2"
	ServerTemplateSslMinVerTLSv13 ServerTemplateSslMinVer = "TLSv1.3"
)

// Defines values for ServerTemplateSslReuse.
const (
	ServerTemplateSslReuseDisabled ServerTemplateSslReuse = "disabled"
	ServerTemplateSslReuseEnabled  ServerTemplateSslReuse = "enabled"
)

// Defines values for ServerTemplateSslv3.
const (
	ServerTemplateSslv3Disabled ServerTemplateSslv3 = "disabled"
	ServerTemplateSslv3Enabled  ServerTemplateSslv3 = "enabled"
)

// Defines values for ServerTemplateStick.
const (
	ServerTemplateStickDisabled ServerTemplateStick = "disabled"
	ServerTemplateStickEnabled  ServerTemplateStick = "enabled"
)

// Defines values for ServerTemplateTfo.
const (
	ServerTemplateTfoDisabled ServerTemplateTfo = "disabled"
	ServerTemplateTfoEnabled  ServerTemplateTfo = "enabled"
)

// Defines values for ServerTemplateTlsTickets.
const (
	ServerTemplateTlsTicketsDisabled ServerTemplateTlsTickets = "disabled"
	ServerTemplateTlsTicketsEnabled  ServerTemplateTlsTickets = "enabled"
)

// Defines values for ServerTemplateTlsv10.
const (
	ServerTemplateTlsv10Disabled ServerTemplateTlsv10 = "disabled"
	ServerTemplateTlsv10Enabled  ServerTemplateTlsv10 = "enabled"
)

// Defines values for ServerTemplateTlsv11.
const (
	ServerTemplateTlsv11Disabled ServerTemplateTlsv11 = "disabled"
	ServerTemplateTlsv11Enabled  ServerTemplateTlsv11 = "enabled"
)

// Defines values for ServerTemplateTlsv12.
const (
	ServerTemplateTlsv12Disabled ServerTemplateTlsv12 = "disabled"
	ServerTemplateTlsv12Enabled  ServerTemplateTlsv12 = "enabled"
)

// Defines values for ServerTemplateTlsv13.
const (
	ServerTemplateTlsv13Disabled ServerTemplateTlsv13 = "disabled"
	ServerTemplateTlsv13Enabled  ServerTemplateTlsv13 = "enabled"
)

// Defines values for ServerTemplateVerify.
const (
	ServerTemplateVerifyNone     ServerTemplateVerify = "none"
	ServerTemplateVerifyRequired ServerTemplateVerify = "required"
)

// Defines values for ServerTemplateWs.
const (
	ServerTemplateWsAuto ServerTemplateWs = "auto"
	ServerTemplateWsH1   ServerTemplateWs = "h1"
	ServerTemplateWsH2   ServerTemplateWs = "h2"
)

// Defines values for SiteFarmsCond.
const (
	SiteFarmsCondIf     SiteFarmsCond = "if"
	SiteFarmsCondUnless SiteFarmsCond = "unless"
)

// Defines values for SiteFarmsMode.
const (
	SiteFarmsModeHttp SiteFarmsMode = "http"
	SiteFarmsModeTcp  SiteFarmsMode = "tcp"
)

// Defines values for SiteFarmsUseAs.
const (
	Conditional SiteFarmsUseAs = "conditional"
	Default     SiteFarmsUseAs = "default"
)

// Defines values for SiteServiceHttpConnectionMode.
const (
	ForcedClose     SiteServiceHttpConnectionMode = "forced-close"
	HttpKeepAlive   SiteServiceHttpConnectionMode = "http-keep-alive"
	HttpServerClose SiteServiceHttpConnectionMode = "http-server-close"
	HttpTunnel      SiteServiceHttpConnectionMode = "http-tunnel"
	Httpclose       SiteServiceHttpConnectionMode = "httpclose"
)

// Defines values for SiteServiceMode.
const (
	SiteServiceModeHttp SiteServiceMode = "http"
	SiteServiceModeTcp  SiteServiceMode = "tcp"
)

// Defines values for SourceUsesrc.
const (
	Address      SourceUsesrc = "address"
	SourceClient SourceUsesrc = "client"
	Clientip     SourceUsesrc = "clientip"
	HdrIp        SourceUsesrc = "hdr_ip"
)

// Defines values for SpoeAgentAsync.
const (
	SpoeAgentAsyncDisabled SpoeAgentAsync = "disabled"
	SpoeAgentAsyncEnabled  SpoeAgentAsync = "enabled"
)

// Defines values for SpoeAgentContinueOnError.
const (
	SpoeAgentContinueOnErrorEnabled SpoeAgentContinueOnError = "enabled"
)

// Defines values for SpoeAgentDontlogNormal.
const (
	SpoeAgentDontlogNormalDisabled SpoeAgentDontlogNormal = "disabled"
	SpoeAgentDontlogNormalEnabled  SpoeAgentDontlogNormal = "enabled"
)

// Defines values for SpoeAgentForceSetVar.
const (
	SpoeAgentForceSetVarEnabled SpoeAgentForceSetVar = "enabled"
)

// Defines values for SpoeAgentPipelining.
const (
	SpoeAgentPipeliningDisabled SpoeAgentPipelining = "disabled"
	SpoeAgentPipeliningEnabled  SpoeAgentPipelining = "enabled"
)

// Defines values for SpoeAgentSendFragPayload.
const (
	SpoeAgentSendFragPayloadDisabled SpoeAgentSendFragPayload = "disabled"
	SpoeAgentSendFragPayloadEnabled  SpoeAgentSendFragPayload = "enabled"
)

// Defines values for SpoeMessageEventCond.
const (
	SpoeMessageEventCondIf     SpoeMessageEventCond = "if"
	SpoeMessageEventCondUnless SpoeMessageEventCond = "unless"
)

// Defines values for SpoeMessageEventName.
const (
	OnBackendHttpRequest  SpoeMessageEventName = "on-backend-http-request"
	OnBackendTcpRequest   SpoeMessageEventName = "on-backend-tcp-request"
	OnClientSession       SpoeMessageEventName = "on-client-session"
	OnFrontendHttpRequest SpoeMessageEventName = "on-frontend-http-request"
	OnFrontendTcpRequest  SpoeMessageEventName = "on-frontend-tcp-request"
	OnHttpResponse        SpoeMessageEventName = "on-http-response"
	OnServerSession       SpoeMessageEventName = "on-server-session"
	OnTcpResponse         SpoeMessageEventName = "on-tcp-response"
)

// Defines values for SpoeTransactionStatus.
const (
	SpoeTransactionStatusFailed     SpoeTransactionStatus = "failed"
	SpoeTransactionStatusInProgress SpoeTransactionStatus = "in_progress"
	SpoeTransactionStatusSuccess    SpoeTransactionStatus = "success"
)

// Defines values for SslFrontUseOcspUpdate.
const (
	SslFrontUseOcspUpdateDisabled SslFrontUseOcspUpdate = "disabled"
	SslFrontUseOcspUpdateEnabled  SslFrontUseOcspUpdate = "enabled"
)

// Defines values for SslFrontUseSslMaxVer.
const (
	SslFrontUseSslMaxVerSSLv3  SslFrontUseSslMaxVer = "SSLv3"
	SslFrontUseSslMaxVerTLSv10 SslFrontUseSslMaxVer = "TLSv1.0"
	SslFrontUseSslMaxVerTLSv11 SslFrontUseSslMaxVer = "TLSv1.1"
	SslFrontUseSslMaxVerTLSv12 SslFrontUseSslMaxVer = "TLSv1.2"
	SslFrontUseSslMaxVerTLSv13 SslFrontUseSslMaxVer = "TLSv1.3"
)

// Defines values for SslFrontUseSslMinVer.
const (
	SslFrontUseSslMinVerSSLv3  SslFrontUseSslMinVer = "SSLv3"
	SslFrontUseSslMinVerTLSv10 SslFrontUseSslMinVer = "TLSv1.0"
	SslFrontUseSslMinVerTLSv11 SslFrontUseSslMinVer = "TLSv1.1"
	SslFrontUseSslMinVerTLSv12 SslFrontUseSslMinVer = "TLSv1.2"
	SslFrontUseSslMinVerTLSv13 SslFrontUseSslMinVer = "TLSv1.3"
)

// Defines values for SslFrontUseVerify.
const (
	SslFrontUseVerifyNone     SslFrontUseVerify = "none"
	SslFrontUseVerifyOptional SslFrontUseVerify = "optional"
	SslFrontUseVerifyRequired SslFrontUseVerify = "required"
)

// Defines values for SslOptionsAcmeScheduler.
const (
	SslOptionsAcmeSchedulerAuto SslOptionsAcmeScheduler = "auto"
	SslOptionsAcmeSchedulerOff  SslOptionsAcmeScheduler = "off"
)

// Defines values for SslOptionsModeAsync.
const (
	SslOptionsModeAsyncDisabled SslOptionsModeAsync = "disabled"
	SslOptionsModeAsyncEnabled  SslOptionsModeAsync = "enabled"
)

// Defines values for SslOptionsServerVerify.
const (
	SslOptionsServerVerifyNone     SslOptionsServerVerify = "none"
	SslOptionsServerVerifyRequired SslOptionsServerVerify = "required"
)

// Defines values for StatsHttpRequestType.
const (
	Allow StatsHttpRequestType = "allow"
	Auth  StatsHttpRequestType = "auth"
	Deny  StatsHttpRequestType = "deny"
)

// Defines values for StatsOptionsStatsAdminCond.
const (
	StatsOptionsStatsAdminCondIf     StatsOptionsStatsAdminCond = "if"
	StatsOptionsStatsAdminCondUnless StatsOptionsStatsAdminCond = "unless"
)

// Defines values for StickRuleCond.
const (
	StickRuleCondIf     StickRuleCond = "if"
	StickRuleCondUnless StickRuleCond = "unless"
)

// Defines values for StickRuleType.
const (
	Match         StickRuleType = "match"
	On            StickRuleType = "on"
	StoreRequest  StickRuleType = "store-request"
	StoreResponse StickRuleType = "store-response"
)

// Defines values for StickTableFieldsField.
const (
	BytesInCnt   StickTableFieldsField = "bytes_in_cnt"
	BytesInRate  StickTableFieldsField = "bytes_in_rate"
	BytesOutCnt  StickTableFieldsField = "bytes_out_cnt"
	BytesOutRate StickTableFieldsField = "bytes_out_rate"
	ConnCnt      StickTableFieldsField = "conn_cnt"
	ConnCur      StickTableFieldsField = "conn_cur"
	ConnRate     StickTableFieldsField = "conn_rate"
	GlitchCnt    StickTableFieldsField = "glitch_cnt"
	GlitchRate   StickTableFieldsField = "glitch_rate"
	Gpc0         StickTableFieldsField = "gpc0"
	Gpc0Rate     StickTableFieldsField = "gpc0_rate"
	Gpc1         StickTableFieldsField = "gpc1"
	Gpc1Rate     StickTableFieldsField = "gpc1_rate"
	Gpt0         StickTableFieldsField = "gpt0"
	HttpErrCnt   StickTableFieldsField = "http_err_cnt"
	HttpErrRate  StickTableFieldsField = "http_err_rate"
	HttpReqCnt   StickTableFieldsField = "http_req_cnt"
	HttpReqRate  StickTableFieldsField = "http_req_rate"
	ServerId     StickTableFieldsField = "server_id"
	SessCnt      StickTableFieldsField = "sess_cnt"
	SessRate     StickTableFieldsField = "sess_rate"
)

// Defines values for StickTableFieldsType.
const (
	Counter StickTableFieldsType = "counter"
	Rate    StickTableFieldsType = "rate"
)

// Defines values for StickTableType.
const (
	StickTableTypeBinary  StickTableType = "binary"
	StickTableTypeInteger StickTableType = "integer"
	StickTableTypeIp      StickTableType = "ip"
	StickTableTypeIpv6    StickTableType = "ipv6"
	StickTableTypeString  StickTableType = "string"
)

// Defines values for TableType.
const (
	TableTypeBinary  TableType = "binary"
	TableTypeInteger TableType = "integer"
	TableTypeIp      TableType = "ip"
	TableTypeString  TableType = "string"
)

// Defines values for TcpCheckAction.
const (
	TcpCheckActionComment      TcpCheckAction = "comment"
	TcpCheckActionConnect      TcpCheckAction = "connect"
	TcpCheckActionExpect       TcpCheckAction = "expect"
	TcpCheckActionSend         TcpCheckAction = "send"
	TcpCheckActionSendBinary   TcpCheckAction = "send-binary"
	TcpCheckActionSendBinaryLf TcpCheckAction = "send-binary-lf"
	TcpCheckActionSendLf       TcpCheckAction = "send-lf"
	TcpCheckActionSetVar       TcpCheckAction = "set-var"
	TcpCheckActionSetVarFmt    TcpCheckAction = "set-var-fmt"
	TcpCheckActionUnsetVar     TcpCheckAction = "unset-var"
)

// Defines values for TcpCheckErrorStatus.
const (
	TcpCheckErrorStatusL4CON TcpCheckErrorStatus = "L4CON"
	TcpCheckErrorStatusL6RSP TcpCheckErrorStatus = "L6RSP"
	TcpCheckErrorStatusL7OKC TcpCheckErrorStatus = "L7OKC"
	TcpCheckErrorStatusL7RSP TcpCheckErrorStatus = "L7RSP"
	TcpCheckErrorStatusL7STS TcpCheckErrorStatus = "L7STS"
)

// Defines values for TcpCheckMatch.
const (
	TcpCheckMatchBinary   TcpCheckMatch = "binary"
	TcpCheckMatchBinaryLf TcpCheckMatch = "binary-lf"
	TcpCheckMatchRbinary  TcpCheckMatch = "rbinary"
	TcpCheckMatchRstring  TcpCheckMatch = "rstring"
	TcpCheckMatchString   TcpCheckMatch = "string"
	TcpCheckMatchStringLf TcpCheckMatch = "string-lf"
)

// Defines values for TcpCheckOkStatus.
const (
	L4OK  TcpCheckOkStatus = "L4OK"
	L6OK  TcpCheckOkStatus = "L6OK"
	L7OK  TcpCheckOkStatus = "L7OK"
	L7OKC TcpCheckOkStatus = "L7OKC"
)

// Defines values for TcpCheckToutStatus.
const (
	L4TOUT TcpCheckToutStatus = "L4TOUT"
	L6TOUT TcpCheckToutStatus = "L6TOUT"
	L7TOUT TcpCheckToutStatus = "L7TOUT"
)

// Defines values for TcpRequestRuleAction.
const (
	TcpRequestRuleActionAccept             TcpRequestRuleAction = "accept"
	TcpRequestRuleActionAttachSrv          TcpRequestRuleAction = "attach-srv"
	TcpRequestRuleActionCapture            TcpRequestRuleAction = "capture"
	TcpRequestRuleActionDoLog              TcpRequestRuleAction = "do-log"
	TcpRequestRuleActionDoResolve          TcpRequestRuleAction = "do-resolve"
	TcpRequestRuleActionExpectNetscalerCip TcpRequestRuleAction = "expect-netscaler-cip"
	TcpRequestRuleActionExpectProxy        TcpRequestRuleAction = "expect-proxy"
	TcpRequestRuleActionLua                TcpRequestRuleAction = "lua"
	TcpRequestRuleActionReject             TcpRequestRuleAction = "reject"
	TcpRequestRuleActionScAddGpc           TcpRequestRuleAction = "sc-add-gpc"
	TcpRequestRuleActionScIncGpc           TcpRequestRuleAction = "sc-inc-gpc"
	TcpRequestRuleActionScIncGpc0          TcpRequestRuleAction = "sc-inc-gpc0"
	TcpRequestRuleActionScIncGpc1          TcpRequestRuleAction = "sc-inc-gpc1"
	TcpRequestRuleActionScSetGpt           TcpRequestRuleAction = "sc-set-gpt"
	TcpRequestRuleActionScSetGpt0          TcpRequestRuleAction = "sc-set-gpt0"
	TcpRequestRuleActionSendSpoeGroup      TcpRequestRuleAction = "send-spoe-group"
	TcpRequestRuleActionSetBandwidthLimit  TcpRequestRuleAction = "set-bandwidth-limit"
	TcpRequestRuleActionSetBcMark          TcpRequestRuleAction = "set-bc-mark"
	TcpRequestRuleActionSetBcTos           TcpRequestRuleAction = "set-bc-tos"
	TcpRequestRuleActionSetDst             TcpRequestRuleAction = "set-dst"
	TcpRequestRuleActionSetDstPort         TcpRequestRuleAction = "set-dst-port"
	TcpRequestRuleActionSetFcMark          TcpRequestRuleAction = "set-fc-mark"
	TcpRequestRuleActionSetFcTos           TcpRequestRuleAction = "set-fc-tos"
	TcpRequestRuleActionSetLogLevel        TcpRequestRuleAction = "set-log-level"
	TcpRequestRuleActionSetMark            TcpRequestRuleAction = "set-mark"
	TcpRequestRuleActionSetNice            TcpRequestRuleAction = "set-nice"
	TcpRequestRuleActionSetPriorityClass   TcpRequestRuleAction = "set-priority-class"
	TcpRequestRuleActionSetPriorityOffset  TcpRequestRuleAction = "set-priority-offset"
	TcpRequestRuleActionSetRetries         TcpRequestRuleAction = "set-retries"
	TcpRequestRuleActionSetSrc             TcpRequestRuleAction = "set-src"
	TcpRequestRuleActionSetSrcPort         TcpRequestRuleAction = "set-src-port"
	TcpRequestRuleActionSetTos             TcpRequestRuleAction = "set-tos"
	TcpRequestRuleActionSetVar             TcpRequestRuleAction = "set-var"
	TcpRequestRuleActionSetVarFmt          TcpRequestRuleAction = "set-var-fmt"
	TcpRequestRuleActionSilentDrop         TcpRequestRuleAction = "silent-drop"
	TcpRequestRuleActionSwitchMode         TcpRequestRuleAction = "switch-mode"
	TcpRequestRuleActionTrackSc            TcpRequestRuleAction = "track-sc"
	TcpRequestRuleActionUnsetVar           TcpRequestRuleAction = "unset-var"
	TcpRequestRuleActionUseService         TcpRequestRuleAction = "use-service"
)

// Defines values for TcpRequestRuleCond.
const (
	TcpRequestRuleCondIf     TcpRequestRuleCond = "if"
	TcpRequestRuleCondUnless TcpRequestRuleCond = "unless"
)

// Defines values for TcpRequestRuleLogLevel.
const (
	TcpRequestRuleLogLevelAlert   TcpRequestRuleLogLevel = "alert"
	TcpRequestRuleLogLevelCrit    TcpRequestRuleLogLevel = "crit"
	TcpRequestRuleLogLevelDebug   TcpRequestRuleLogLevel = "debug"
	TcpRequestRuleLogLevelEmerg   TcpRequestRuleLogLevel = "emerg"
	TcpRequestRuleLogLevelErr     TcpRequestRuleLogLevel = "err"
	TcpRequestRuleLogLevelInfo    TcpRequestRuleLogLevel = "info"
	TcpRequestRuleLogLevelNotice  TcpRequestRuleLogLevel = "notice"
	TcpRequestRuleLogLevelSilent  TcpRequestRuleLogLevel = "silent"
	TcpRequestRuleLogLevelWarning TcpRequestRuleLogLevel = "warning"
)

// Defines values for TcpRequestRuleResolveProtocol.
const (
	TcpRequestRuleResolveProtocolIpv4 TcpRequestRuleResolveProtocol = "ipv4"
	TcpRequestRuleResolveProtocolIpv6 TcpRequestRuleResolveProtocol = "ipv6"
)

// Defines values for TcpRequestRuleType.
const (
	TcpRequestRuleTypeConnection   TcpRequestRuleType = "connection"
	TcpRequestRuleTypeContent      TcpRequestRuleType = "content"
	TcpRequestRuleTypeInspectDelay TcpRequestRuleType = "inspect-delay"
	TcpRequestRuleTypeSession      TcpRequestRuleType = "session"
)

// Defines values for TcpResponseRuleAction.
const (
	Accept            TcpResponseRuleAction = "accept"
	Close             TcpResponseRuleAction = "close"
	DoLog             TcpResponseRuleAction = "do-log"
	Lua               TcpResponseRuleAction = "lua"
	Reject            TcpResponseRuleAction = "reject"
	ScAddGpc          TcpResponseRuleAction = "sc-add-gpc"
	ScIncGpc          TcpResponseRuleAction = "sc-inc-gpc"
	ScIncGpc0         TcpResponseRuleAction = "sc-inc-gpc0"
	ScIncGpc1         TcpResponseRuleAction = "sc-inc-gpc1"
	ScSetGpt          TcpResponseRuleAction = "sc-set-gpt"
	ScSetGpt0         TcpResponseRuleAction = "sc-set-gpt0"
	SendSpoeGroup     TcpResponseRuleAction = "send-spoe-group"
	SetBandwidthLimit TcpResponseRuleAction = "set-bandwidth-limit"
	SetFcMark         TcpResponseRuleAction = "set-fc-mark"
	SetFcTos          TcpResponseRuleAction = "set-fc-tos"
	SetLogLevel       TcpResponseRuleAction = "set-log-level"
	SetMark           TcpResponseRuleAction = "set-mark"
	SetNice           TcpResponseRuleAction = "set-nice"
	SetTos            TcpResponseRuleAction = "set-tos"
	SetVar            TcpResponseRuleAction = "set-var"
	SetVarFmt         TcpResponseRuleAction = "set-var-fmt"
	SilentDrop        TcpResponseRuleAction = "silent-drop"
	UnsetVar          TcpResponseRuleAction = "unset-var"
)

// Defines values for TcpResponseRuleCond.
const (
	If     TcpResponseRuleCond = "if"
	Unless TcpResponseRuleCond = "unless"
)

// Defines values for TcpResponseRuleLogLevel.
const (
	TcpResponseRuleLogLevelAlert   TcpResponseRuleLogLevel = "alert"
	TcpResponseRuleLogLevelCrit    TcpResponseRuleLogLevel = "crit"
	TcpResponseRuleLogLevelDebug   TcpResponseRuleLogLevel = "debug"
	TcpResponseRuleLogLevelEmerg   TcpResponseRuleLogLevel = "emerg"
	TcpResponseRuleLogLevelErr     TcpResponseRuleLogLevel = "err"
	TcpResponseRuleLogLevelInfo    TcpResponseRuleLogLevel = "info"
	TcpResponseRuleLogLevelNotice  TcpResponseRuleLogLevel = "notice"
	TcpResponseRuleLogLevelSilent  TcpResponseRuleLogLevel = "silent"
	TcpResponseRuleLogLevelWarning TcpResponseRuleLogLevel = "warning"
)

// Defines values for TcpResponseRuleType.
const (
	Content      TcpResponseRuleType = "content"
	InspectDelay TcpResponseRuleType = "inspect-delay"
)

// Defines values for TransactionStatus.
const (
	TransactionStatusFailed     TransactionStatus = "failed"
	TransactionStatusInProgress TransactionStatus = "in_progress"
	TransactionStatusOutdated   TransactionStatus = "outdated"
	TransactionStatusSuccess    TransactionStatus = "success"
)

// Defines values for TuneLuaOptionsBoolSampleConversion.
const (
	Normal   TuneLuaOptionsBoolSampleConversion = "normal"
	Pre31Bug TuneLuaOptionsBoolSampleConversion = "pre-3.1-bug"
)

// Defines values for TuneLuaOptionsLogLoggers.
const (
	TuneLuaOptionsLogLoggersDisabled TuneLuaOptionsLogLoggers = "disabled"
	TuneLuaOptionsLogLoggersEnabled  TuneLuaOptionsLogLoggers = "enabled"
)

// Defines values for TuneLuaOptionsLogStderr.
const (
	TuneLuaOptionsLogStderrAuto     TuneLuaOptionsLogStderr = "auto"
	TuneLuaOptionsLogStderrDisabled TuneLuaOptionsLogStderr = "disabled"
	TuneLuaOptionsLogStderrEnabled  TuneLuaOptionsLogStderr = "enabled"
)

// Defines values for TuneOptionsAppletZeroCopyForwarding.
const (
	TuneOptionsAppletZeroCopyForwardingDisabled TuneOptionsAppletZeroCopyForwarding = "disabled"
	TuneOptionsAppletZeroCopyForwardingEnabled  TuneOptionsAppletZeroCopyForwarding = "enabled"
)

// Defines values for TuneOptionsEpollMaskEvents.
const (
	Err   TuneOptionsEpollMaskEvents = "err"
	Hup   TuneOptionsEpollMaskEvents = "hup"
	Rdhup TuneOptionsEpollMaskEvents = "rdhup"
)

// Defines values for TuneOptionsFdEdgeTriggered.
const (
	TuneOptionsFdEdgeTriggeredDisabled TuneOptionsFdEdgeTriggered = "disabled"
	TuneOptionsFdEdgeTriggeredEnabled  TuneOptionsFdEdgeTriggered = "enabled"
)

// Defines values for TuneOptionsH1ZeroCopyFwdRecv.
const (
	TuneOptionsH1ZeroCopyFwdRecvDisabled TuneOptionsH1ZeroCopyFwdRecv = "disabled"
	TuneOptionsH1ZeroCopyFwdRecvEnabled  TuneOptionsH1ZeroCopyFwdRecv = "enabled"
)

// Defines values for TuneOptionsH1ZeroCopyFwdSend.
const (
	TuneOptionsH1ZeroCopyFwdSendDisabled TuneOptionsH1ZeroCopyFwdSend = "disabled"
	TuneOptionsH1ZeroCopyFwdSendEnabled  TuneOptionsH1ZeroCopyFwdSend = "enabled"
)

// Defines values for TuneOptionsH2ZeroCopyFwdSend.
const (
	TuneOptionsH2ZeroCopyFwdSendDisabled TuneOptionsH2ZeroCopyFwdSend = "disabled"
	TuneOptionsH2ZeroCopyFwdSendEnabled  TuneOptionsH2ZeroCopyFwdSend = "enabled"
)

// Defines values for TuneOptionsIdlePoolShared.
const (
	TuneOptionsIdlePoolSharedDisabled TuneOptionsIdlePoolShared = "disabled"
	TuneOptionsIdlePoolSharedEnabled  TuneOptionsIdlePoolShared = "enabled"
)

// Defines values for TuneOptionsListenerDefaultShards.
const (
	ByGroup   TuneOptionsListenerDefaultShards = "by-group"
	ByProcess TuneOptionsListenerDefaultShards = "by-process"
	ByThread  TuneOptionsListenerDefaultShards = "by-thread"
)

// Defines values for TuneOptionsListenerMultiQueue.
const (
	TuneOptionsListenerMultiQueueDisabled TuneOptionsListenerMultiQueue = "disabled"
	TuneOptionsListenerMultiQueueEnabled  TuneOptionsListenerMultiQueue = "enabled"
)

// Defines values for TuneOptionsPtZeroCopyForwarding.
const (
	TuneOptionsPtZeroCopyForwardingDisabled TuneOptionsPtZeroCopyForwarding = "disabled"
	TuneOptionsPtZeroCopyForwardingEnabled  TuneOptionsPtZeroCopyForwarding = "enabled"
)

// Defines values for TuneOptionsSchedLowLatency.
const (
	TuneOptionsSchedLowLatencyDisabled TuneOptionsSchedLowLatency = "disabled"
	TuneOptionsSchedLowLatencyEnabled  TuneOptionsSchedLowLatency = "enabled"
)

// Defines values for TuneOptionsTakeoverOtherTgConnections.
const (
	Full       TuneOptionsTakeoverOtherTgConnections = "full"
	None       TuneOptionsTakeoverOtherTgConnections = "none"
	Restricted TuneOptionsTakeoverOtherTgConnections = "restricted"
)

// Defines values for TuneQuicOptionsSocketOwner.
const (
	Connection TuneQuicOptionsSocketOwner = "connection"
	Listener   TuneQuicOptionsSocketOwner = "listener"
)

// Defines values for TuneQuicOptionsZeroCopyFwdSend.
const (
	TuneQuicOptionsZeroCopyFwdSendDisabled TuneQuicOptionsZeroCopyFwdSend = "disabled"
	TuneQuicOptionsZeroCopyFwdSendEnabled  TuneQuicOptionsZeroCopyFwdSend = "enabled"
)

// Defines values for TuneSslOptionsKeylog.
const (
	TuneSslOptionsKeylogDisabled TuneSslOptionsKeylog = "disabled"
	TuneSslOptionsKeylogEnabled  TuneSslOptionsKeylog = "enabled"
)

// Defines values for DeleteClusterParamsConfiguration.
const (
	DeleteClusterParamsConfigurationKeep DeleteClusterParamsConfiguration = "keep"
)

// Defines values for PostClusterParamsConfiguration.
const (
	PostClusterParamsConfigurationKeep PostClusterParamsConfiguration = "keep"
)

// Defines values for GetAllSpoeTransactionParamsStatus.
const (
	GetAllSpoeTransactionParamsStatusFailed     GetAllSpoeTransactionParamsStatus = "failed"
	GetAllSpoeTransactionParamsStatusInProgress GetAllSpoeTransactionParamsStatus = "in_progress"
)

// Defines values for GetStatsParamsType.
const (
	GetStatsParamsTypeBackend  GetStatsParamsType = "backend"
	GetStatsParamsTypeFrontend GetStatsParamsType = "frontend"
	GetStatsParamsTypeServer   GetStatsParamsType = "server"
)

// Defines values for GetTransactionsParamsStatus.
const (
	Failed     GetTransactionsParamsStatus = "failed"
	InProgress GetTransactionsParamsStatus = "in_progress"
)

// Acl The use of Access Control Lists (ACL) provides a flexible solution to perform
// content switching and generally to take decisions based on content extracted
// from the request, the response or any environmental status.
type Acl struct {
	AclName   string                             `json:"acl_name"`
	Criterion string                             `json:"criterion"`
	Metadata  *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Value     *string                            `json:"value,omitempty"`
}

// AclFile ACL File
type AclFile struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	StorageName *string `json:"storage_name,omitempty"`
}

// AclFileEntry One ACL File Entry
type AclFileEntry struct {
	Id    *string `json:"id,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AclFiles Array of runtime acl files
type AclFiles = []AclFile

// AclFilesEntries Array of entries of one runtime acl file
type AclFilesEntries = []AclFileEntry

// Acls HAProxy ACL lines array (corresponds to acl directives)
type Acls = []Acl

// AcmeProvider Define an ACME provider to generate certificates automatically
type AcmeProvider struct {
	// AccountKey Path where the the ACME account key is stored
	AccountKey *string `json:"account_key,omitempty"`

	// Bits Number of bits to generate an RSA certificate
	Bits *int `json:"bits,omitempty"`

	// Challenge ACME challenge type. Only HTTP-01 and DNS-01 are supported.
	Challenge *AcmeProviderChallenge `json:"challenge,omitempty"`

	// Contact Contact email for the ACME account
	Contact *string `json:"contact,omitempty"`

	// Curves Curves used with the ECDSA key type
	Curves *string `json:"curves,omitempty"`

	// Directory URL to the ACME provider's directory. For example:
	// https://acme-staging-v02.api.letsencrypt.org/directory
	Directory string `json:"directory"`

	// Keytype Type of key to generate
	Keytype *AcmeProviderKeytype `json:"keytype,omitempty"`

	// Map The map which will be used to store the ACME token (key) and thumbprint
	Map      *string                            `json:"map,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// Name ACME provider's name
	Name string `json:"name"`
}

// AcmeProviderChallenge ACME challenge type. Only HTTP-01 and DNS-01 are supported.
type AcmeProviderChallenge string

// AcmeProviderKeytype Type of key to generate
type AcmeProviderKeytype string

// AcmeProviders List of ACME sections.
type AcmeProviders = []AcmeProvider

// AwsFilters defines model for awsFilters.
type AwsFilters struct {
	// Key Key to use as filter, using the format specified at https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options
	Key string `json:"key"`

	// Value Value of the filter to use
	Value string `json:"value"`
}

// AwsRegion AWS region configuration
type AwsRegion struct {
	// AccessKeyId AWS Access Key ID.
	AccessKeyId *string `json:"access_key_id,omitempty"`

	// Allowlist Specify the AWS filters used to filter the EC2 instances to add
	Allowlist *[]AwsFilters `json:"allowlist,omitempty"`

	// Denylist Specify the AWS filters used to filter the EC2 instances to ignore
	Denylist    *[]AwsFilters `json:"denylist,omitempty"`
	Description *string       `json:"description,omitempty"`
	Enabled     bool          `json:"enabled"`

	// Id Auto generated ID.
	Id *string `json:"id"`

	// Ipv4Address Select which IPv4 address the Service Discovery has to use for the backend server entry
	Ipv4Address AwsRegionIpv4Address `json:"ipv4_address"`
	Name        string               `json:"name"`
	Region      string               `json:"region"`

	// RetryTimeout Duration in seconds in-between data pulling requests to the AWS region
	RetryTimeout int `json:"retry_timeout"`

	// SecretAccessKey AWS Secret Access Key.
	SecretAccessKey            *string                         `json:"secret_access_key,omitempty"`
	ServerSlotsBase            *int                            `json:"server_slots_base,omitempty"`
	ServerSlotsGrowthIncrement *int                            `json:"server_slots_growth_increment,omitempty"`
	ServerSlotsGrowthType      *AwsRegionServerSlotsGrowthType `json:"server_slots_growth_type,omitempty"`
}

// AwsRegionIpv4Address Select which IPv4 address the Service Discovery has to use for the backend server entry
type AwsRegionIpv4Address string

// AwsRegionServerSlotsGrowthType defines model for AwsRegion.ServerSlotsGrowthType.
type AwsRegionServerSlotsGrowthType string

// AwsRegions AWS regions array
type AwsRegions = []AwsRegion

// Backend defines model for backend.
type Backend struct {
	Abortonclose                         *BackendAbortonclose                         `json:"abortonclose,omitempty"`
	AcceptInvalidHttpResponse            *BackendAcceptInvalidHttpResponse            `json:"accept_invalid_http_response,omitempty"`
	AcceptUnsafeViolationsInHttpResponse *BackendAcceptUnsafeViolationsInHttpResponse `json:"accept_unsafe_violations_in_http_response,omitempty"`

	// AclList HAProxy ACL lines array (corresponds to acl directives)
	AclList          *Acls              `json:"acl_list,omitempty"`
	AdvCheck         *BackendAdvCheck   `json:"adv_check,omitempty"`
	Allbackups       *BackendAllbackups `json:"allbackups,omitempty"`
	Balance          *Balance           `json:"balance,omitempty"`
	CheckTimeout     *int               `json:"check_timeout"`
	Checkcache       *BackendCheckcache `json:"checkcache,omitempty"`
	Compression      *Compression       `json:"compression,omitempty"`
	ConnectTimeout   *int               `json:"connect_timeout"`
	Cookie           *Cookie            `json:"cookie,omitempty"`
	DefaultServer    *DefaultServer     `json:"default_server,omitempty"`
	Description      *string            `json:"description,omitempty"`
	Disabled         *bool              `json:"disabled,omitempty"`
	DynamicCookieKey *string            `json:"dynamic_cookie_key,omitempty"`

	// EmailAlert Send emails for important log messages.
	EmailAlert               *EmailAlert           `json:"email_alert,omitempty"`
	Enabled                  *bool                 `json:"enabled,omitempty"`
	ErrorFiles               *[]Errorfile          `json:"error_files,omitempty"`
	ErrorFilesFromHTTPErrors *[]Errorfiles         `json:"errorfiles_from_http_errors,omitempty"`
	Errorloc302              *Errorloc             `json:"errorloc302,omitempty"`
	Errorloc303              *Errorloc             `json:"errorloc303,omitempty"`
	ExternalCheck            *BackendExternalCheck `json:"external_check,omitempty"`
	ExternalCheckCommand     *string               `json:"external_check_command,omitempty"`
	ExternalCheckPath        *string               `json:"external_check_path,omitempty"`

	// FilterList HAProxy filters array (corresponds to filter directive)
	FilterList *Filters `json:"filter_list,omitempty"`

	// BackendForcePersist This field is deprecated in favor of force_persist_list, and will be removed in a future release
	BackendForcePersist *struct {
		Cond     BackendForcePersistCond `json:"cond"`
		CondTest string                  `json:"cond_test"`
	} `json:"force_persist,omitempty"`
	ForcePersistList *[]struct {
		Cond     BackendForcePersistListCond `json:"cond"`
		CondTest string                      `json:"cond_test"`
	} `json:"force_persist_list,omitempty"`
	Forwardfor              *Forwardfor                     `json:"forwardfor,omitempty"`
	From                    *string                         `json:"from,omitempty"`
	Fullconn                *int                            `json:"fullconn"`
	Guid                    *string                         `json:"guid,omitempty"`
	H1CaseAdjustBogusServer *BackendH1CaseAdjustBogusServer `json:"h1_case_adjust_bogus_server,omitempty"`
	HashBalanceFactor       *int                            `json:"hash_balance_factor"`
	HashPreserveAffinity    *BackendHashPreserveAffinity    `json:"hash_preserve_affinity,omitempty"`
	HashType                *HashType                       `json:"hash_type,omitempty"`
	HttpBufferRequest       *BackendHttpBufferRequest       `json:"http-buffer-request,omitempty"`
	HttpDropRequestTrailers *BackendHttpDropRequestTrailers `json:"http-drop-request-trailers,omitempty"`
	HttpNoDelay             *BackendHttpNoDelay             `json:"http-no-delay,omitempty"`
	HttpUseHtx              *BackendHttpUseHtx              `json:"http-use-htx,omitempty"`

	// HttpAfterResponseRuleList HAProxy HTTP after response rules array (corresponds to http-after-response directives)
	HttpAfterResponseRuleList *HttpAfterResponseRules    `json:"http_after_response_rule_list,omitempty"`
	HttpCheckList             *HttpChecks                `json:"http_check_list,omitempty"`
	HttpConnectionMode        *BackendHttpConnectionMode `json:"http_connection_mode,omitempty"`

	// HttpErrorRuleList HAProxy HTTP error rules array (corresponds to http-error directives)
	HttpErrorRuleList    *HttpErrorRules              `json:"http_error_rule_list,omitempty"`
	HttpKeepAliveTimeout *int                         `json:"http_keep_alive_timeout"`
	HttpPretendKeepalive *BackendHttpPretendKeepalive `json:"http_pretend_keepalive,omitempty"`
	HttpProxy            *BackendHttpProxy            `json:"http_proxy,omitempty"`

	// HttpRequestRuleList HAProxy HTTP request rules array (corresponds to http-request directives)
	HttpRequestRuleList *HttpRequestRules `json:"http_request_rule_list,omitempty"`
	HttpRequestTimeout  *int              `json:"http_request_timeout"`

	// HttpResponseRuleList HAProxy HTTP response rules array (corresponds to http-response directives)
	HttpResponseRuleList    *HttpResponseRules              `json:"http_response_rule_list,omitempty"`
	HttpRestrictReqHdrNames *BackendHttpRestrictReqHdrNames `json:"http_restrict_req_hdr_names,omitempty"`
	HttpReuse               *BackendHttpReuse               `json:"http_reuse,omitempty"`
	HttpSendNameHeader      *string                         `json:"http_send_name_header"`
	HttpchkParams           *HttpchkParams                  `json:"httpchk_params,omitempty"`
	Id                      *int                            `json:"id"`

	// BackendIgnorePersist This field is deprecated in favor of ignore_persist_list, and will be removed in a future release
	BackendIgnorePersist *struct {
		Cond     BackendIgnorePersistCond `json:"cond"`
		CondTest string                   `json:"cond_test"`
	} `json:"ignore_persist,omitempty"`
	IgnorePersistList *[]struct {
		Cond     BackendIgnorePersistListCond `json:"cond"`
		CondTest string                       `json:"cond_test"`
	} `json:"ignore_persist_list,omitempty"`
	IndependentStreams      *BackendIndependentStreams      `json:"independent_streams,omitempty"`
	LoadServerStateFromFile *BackendLoadServerStateFromFile `json:"load_server_state_from_file,omitempty"`
	LogHealthChecks         *BackendLogHealthChecks         `json:"log_health_checks,omitempty"`
	LogTag                  *string                         `json:"log_tag,omitempty"`

	// LogTargetList HAProxy log target array (corresponds to log directives)
	LogTargetList       *LogTargets                        `json:"log_target_list,omitempty"`
	MaxKeepAliveQueue   *int                               `json:"max_keep_alive_queue"`
	Metadata            *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Mode                *BackendMode                       `json:"mode,omitempty"`
	MysqlCheckParams    *MysqlCheckParams                  `json:"mysql_check_params,omitempty"`
	Name                string                             `json:"name"`
	Nolinger            *BackendNolinger                   `json:"nolinger,omitempty"`
	Originalto          *Originalto                        `json:"originalto,omitempty"`
	Persist             *BackendPersist                    `json:"persist,omitempty"`
	PersistRule         *PersistRule                       `json:"persist_rule,omitempty"`
	PgsqlCheckParams    *PgsqlCheckParams                  `json:"pgsql_check_params,omitempty"`
	PreferLastServer    *BackendPreferLastServer           `json:"prefer_last_server,omitempty"`
	QueueTimeout        *int                               `json:"queue_timeout"`
	Redispatch          *Redispatch                        `json:"redispatch,omitempty"`
	Retries             *int                               `json:"retries"`
	RetryOn             *string                            `json:"retry_on,omitempty"`
	ServerFinTimeout    *int                               `json:"server_fin_timeout"`
	ServerStateFileName *string                            `json:"server_state_file_name,omitempty"`

	// ServerSwitchingRuleList HAProxy backend server switching rules array (corresponds to use-server directives)
	ServerSwitchingRuleList *ServerSwitchingRules      `json:"server_switching_rule_list,omitempty"`
	ServerTemplates         *map[string]ServerTemplate `json:"server_templates,omitempty"`
	ServerTimeout           *int                       `json:"server_timeout"`
	Servers                 *map[string]Server         `json:"servers,omitempty"`
	SmtpchkParams           *SmtpchkParams             `json:"smtpchk_params,omitempty"`
	Source                  *Source                    `json:"source,omitempty"`
	SpliceAuto              *BackendSpliceAuto         `json:"splice_auto,omitempty"`
	SpliceRequest           *BackendSpliceRequest      `json:"splice_request,omitempty"`
	SpliceResponse          *BackendSpliceResponse     `json:"splice_response,omitempty"`
	SpopCheck               *BackendSpopCheck          `json:"spop_check,omitempty"`
	Srvtcpka                *BackendSrvtcpka           `json:"srvtcpka,omitempty"`
	SrvtcpkaCnt             *int                       `json:"srvtcpka_cnt"`
	SrvtcpkaIdle            *int                       `json:"srvtcpka_idle"`
	SrvtcpkaIntvl           *int                       `json:"srvtcpka_intvl"`
	StatsOptions            *StatsOptions              `json:"stats_options,omitempty"`

	// StickRuleList HAProxy backend stick rules array (corresponds to stick store-request, stick match, stick on, stick store-response)
	StickRuleList    *StickRules       `json:"stick_rule_list,omitempty"`
	StickTable       *ConfigStickTable `json:"stick_table,omitempty"`
	TarpitTimeout    *int              `json:"tarpit_timeout"`
	TcpCheckRuleList *TcpChecks        `json:"tcp_check_rule_list,omitempty"`

	// TcpRequestRuleList HAProxy TCP request rules array (corresponds to tcp-request directive)
	TcpRequestRuleList *TcpRequestRules `json:"tcp_request_rule_list,omitempty"`

	// TcpResponseRuleList HAProxy TCP response rules array (corresponds to tcp-response directive)
	TcpResponseRuleList *TcpResponseRules       `json:"tcp_response_rule_list,omitempty"`
	TcpSmartConnect     *BackendTcpSmartConnect `json:"tcp_smart_connect,omitempty"`
	Tcpka               *BackendTcpka           `json:"tcpka,omitempty"`
	Transparent         *BackendTransparent     `json:"transparent,omitempty"`
	TunnelTimeout       *int                    `json:"tunnel_timeout"`
	UseFcgiApp          *string                 `json:"use_fcgi_app,omitempty"`
}

// BackendAbortonclose defines model for Backend.Abortonclose.
type BackendAbortonclose string

// BackendAcceptInvalidHttpResponse defines model for Backend.AcceptInvalidHttpResponse.
type BackendAcceptInvalidHttpResponse string

// BackendAcceptUnsafeViolationsInHttpResponse defines model for Backend.AcceptUnsafeViolationsInHttpResponse.
type BackendAcceptUnsafeViolationsInHttpResponse string

// BackendAdvCheck defines model for Backend.AdvCheck.
type BackendAdvCheck string

// BackendAllbackups defines model for Backend.Allbackups.
type BackendAllbackups string

// BackendCheckcache defines model for Backend.Checkcache.
type BackendCheckcache string

// BackendExternalCheck defines model for Backend.ExternalCheck.
type BackendExternalCheck string

// BackendForcePersistCond defines model for Backend.ForcePersist.Cond.
type BackendForcePersistCond string

// BackendForcePersistListCond defines model for Backend.ForcePersistList.Cond.
type BackendForcePersistListCond string

// BackendH1CaseAdjustBogusServer defines model for Backend.H1CaseAdjustBogusServer.
type BackendH1CaseAdjustBogusServer string

// BackendHashPreserveAffinity defines model for Backend.HashPreserveAffinity.
type BackendHashPreserveAffinity string

// BackendHttpBufferRequest defines model for Backend.HttpBufferRequest.
type BackendHttpBufferRequest string

// BackendHttpDropRequestTrailers defines model for Backend.HttpDropRequestTrailers.
type BackendHttpDropRequestTrailers string

// BackendHttpNoDelay defines model for Backend.HttpNoDelay.
type BackendHttpNoDelay string

// BackendHttpUseHtx defines model for Backend.HttpUseHtx.
type BackendHttpUseHtx string

// BackendHttpConnectionMode defines model for Backend.HttpConnectionMode.
type BackendHttpConnectionMode string

// BackendHttpPretendKeepalive defines model for Backend.HttpPretendKeepalive.
type BackendHttpPretendKeepalive string

// BackendHttpProxy defines model for Backend.HttpProxy.
type BackendHttpProxy string

// BackendHttpRestrictReqHdrNames defines model for Backend.HttpRestrictReqHdrNames.
type BackendHttpRestrictReqHdrNames string

// BackendHttpReuse defines model for Backend.HttpReuse.
type BackendHttpReuse string

// BackendIgnorePersistCond defines model for Backend.IgnorePersist.Cond.
type BackendIgnorePersistCond string

// BackendIgnorePersistListCond defines model for Backend.IgnorePersistList.Cond.
type BackendIgnorePersistListCond string

// BackendIndependentStreams defines model for Backend.IndependentStreams.
type BackendIndependentStreams string

// BackendLoadServerStateFromFile defines model for Backend.LoadServerStateFromFile.
type BackendLoadServerStateFromFile string

// BackendLogHealthChecks defines model for Backend.LogHealthChecks.
type BackendLogHealthChecks string

// BackendMode defines model for Backend.Mode.
type BackendMode string

// BackendNolinger defines model for Backend.Nolinger.
type BackendNolinger string

// BackendPersist defines model for Backend.Persist.
type BackendPersist string

// BackendPreferLastServer defines model for Backend.PreferLastServer.
type BackendPreferLastServer string

// BackendSpliceAuto defines model for Backend.SpliceAuto.
type BackendSpliceAuto string

// BackendSpliceRequest defines model for Backend.SpliceRequest.
type BackendSpliceRequest string

// BackendSpliceResponse defines model for Backend.SpliceResponse.
type BackendSpliceResponse string

// BackendSpopCheck defines model for Backend.SpopCheck.
type BackendSpopCheck string

// BackendSrvtcpka defines model for Backend.Srvtcpka.
type BackendSrvtcpka string

// BackendTcpSmartConnect defines model for Backend.TcpSmartConnect.
type BackendTcpSmartConnect string

// BackendTcpka defines model for Backend.Tcpka.
type BackendTcpka string

// BackendTransparent defines model for Backend.Transparent.
type BackendTransparent string

// BackendBase HAProxy backend configuration
type BackendBase struct {
	Abortonclose                         *BackendBaseAbortonclose                         `json:"abortonclose,omitempty"`
	AcceptInvalidHttpResponse            *BackendBaseAcceptInvalidHttpResponse            `json:"accept_invalid_http_response,omitempty"`
	AcceptUnsafeViolationsInHttpResponse *BackendBaseAcceptUnsafeViolationsInHttpResponse `json:"accept_unsafe_violations_in_http_response,omitempty"`
	AdvCheck                             *BackendBaseAdvCheck                             `json:"adv_check,omitempty"`
	Allbackups                           *BackendBaseAllbackups                           `json:"allbackups,omitempty"`
	Balance                              *Balance                                         `json:"balance,omitempty"`
	CheckTimeout                         *int                                             `json:"check_timeout"`
	Checkcache                           *BackendBaseCheckcache                           `json:"checkcache,omitempty"`
	Compression                          *Compression                                     `json:"compression,omitempty"`
	ConnectTimeout                       *int                                             `json:"connect_timeout"`
	Cookie                               *Cookie                                          `json:"cookie,omitempty"`
	DefaultServer                        *DefaultServer                                   `json:"default_server,omitempty"`
	Description                          *string                                          `json:"description,omitempty"`
	Disabled                             *bool                                            `json:"disabled,omitempty"`
	DynamicCookieKey                     *string                                          `json:"dynamic_cookie_key,omitempty"`

	// EmailAlert Send emails for important log messages.
	EmailAlert               *EmailAlert               `json:"email_alert,omitempty"`
	Enabled                  *bool                     `json:"enabled,omitempty"`
	ErrorFiles               *[]Errorfile              `json:"error_files,omitempty"`
	ErrorFilesFromHTTPErrors *[]Errorfiles             `json:"errorfiles_from_http_errors,omitempty"`
	Errorloc302              *Errorloc                 `json:"errorloc302,omitempty"`
	Errorloc303              *Errorloc                 `json:"errorloc303,omitempty"`
	ExternalCheck            *BackendBaseExternalCheck `json:"external_check,omitempty"`
	ExternalCheckCommand     *string                   `json:"external_check_command,omitempty"`
	ExternalCheckPath        *string                   `json:"external_check_path,omitempty"`

	// BackendForcePersist This field is deprecated in favor of force_persist_list, and will be removed in a future release
	BackendForcePersist *struct {
		Cond     BackendBaseForcePersistCond `json:"cond"`
		CondTest string                      `json:"cond_test"`
	} `json:"force_persist,omitempty"`
	ForcePersistList *[]struct {
		Cond     BackendBaseForcePersistListCond `json:"cond"`
		CondTest string                          `json:"cond_test"`
	} `json:"force_persist_list,omitempty"`
	Forwardfor              *Forwardfor                         `json:"forwardfor,omitempty"`
	From                    *string                             `json:"from,omitempty"`
	Fullconn                *int                                `json:"fullconn"`
	Guid                    *string                             `json:"guid,omitempty"`
	H1CaseAdjustBogusServer *BackendBaseH1CaseAdjustBogusServer `json:"h1_case_adjust_bogus_server,omitempty"`
	HashBalanceFactor       *int                                `json:"hash_balance_factor"`
	HashPreserveAffinity    *BackendBaseHashPreserveAffinity    `json:"hash_preserve_affinity,omitempty"`
	HashType                *HashType                           `json:"hash_type,omitempty"`
	HttpBufferRequest       *BackendBaseHttpBufferRequest       `json:"http-buffer-request,omitempty"`
	HttpDropRequestTrailers *BackendBaseHttpDropRequestTrailers `json:"http-drop-request-trailers,omitempty"`
	HttpNoDelay             *BackendBaseHttpNoDelay             `json:"http-no-delay,omitempty"`
	HttpUseHtx              *BackendBaseHttpUseHtx              `json:"http-use-htx,omitempty"`
	HttpConnectionMode      *BackendBaseHttpConnectionMode      `json:"http_connection_mode,omitempty"`
	HttpKeepAliveTimeout    *int                                `json:"http_keep_alive_timeout"`
	HttpPretendKeepalive    *BackendBaseHttpPretendKeepalive    `json:"http_pretend_keepalive,omitempty"`
	HttpProxy               *BackendBaseHttpProxy               `json:"http_proxy,omitempty"`
	HttpRequestTimeout      *int                                `json:"http_request_timeout"`
	HttpRestrictReqHdrNames *BackendBaseHttpRestrictReqHdrNames `json:"http_restrict_req_hdr_names,omitempty"`
	HttpReuse               *BackendBaseHttpReuse               `json:"http_reuse,omitempty"`
	HttpSendNameHeader      *string                             `json:"http_send_name_header"`
	HttpchkParams           *HttpchkParams                      `json:"httpchk_params,omitempty"`
	Id                      *int                                `json:"id"`

	// BackendIgnorePersist This field is deprecated in favor of ignore_persist_list, and will be removed in a future release
	BackendIgnorePersist *struct {
		Cond     BackendBaseIgnorePersistCond `json:"cond"`
		CondTest string                       `json:"cond_test"`
	} `json:"ignore_persist,omitempty"`
	IgnorePersistList *[]struct {
		Cond     BackendBaseIgnorePersistListCond `json:"cond"`
		CondTest string                           `json:"cond_test"`
	} `json:"ignore_persist_list,omitempty"`
	IndependentStreams      *BackendBaseIndependentStreams      `json:"independent_streams,omitempty"`
	LoadServerStateFromFile *BackendBaseLoadServerStateFromFile `json:"load_server_state_from_file,omitempty"`
	LogHealthChecks         *BackendBaseLogHealthChecks         `json:"log_health_checks,omitempty"`
	LogTag                  *string                             `json:"log_tag,omitempty"`
	MaxKeepAliveQueue       *int                                `json:"max_keep_alive_queue"`
	Metadata                *map[string]map[string]interface{}  `json:"metadata,omitempty"`
	Mode                    *BackendBaseMode                    `json:"mode,omitempty"`
	MysqlCheckParams        *MysqlCheckParams                   `json:"mysql_check_params,omitempty"`
	Name                    string                              `json:"name"`
	Nolinger                *BackendBaseNolinger                `json:"nolinger,omitempty"`
	Originalto              *Originalto                         `json:"originalto,omitempty"`
	Persist                 *BackendBasePersist                 `json:"persist,omitempty"`
	PersistRule             *PersistRule                        `json:"persist_rule,omitempty"`
	PgsqlCheckParams        *PgsqlCheckParams                   `json:"pgsql_check_params,omitempty"`
	PreferLastServer        *BackendBasePreferLastServer        `json:"prefer_last_server,omitempty"`
	QueueTimeout            *int                                `json:"queue_timeout"`
	Redispatch              *Redispatch                         `json:"redispatch,omitempty"`
	Retries                 *int                                `json:"retries"`
	RetryOn                 *string                             `json:"retry_on,omitempty"`
	ServerFinTimeout        *int                                `json:"server_fin_timeout"`
	ServerStateFileName     *string                             `json:"server_state_file_name,omitempty"`
	ServerTimeout           *int                                `json:"server_timeout"`
	SmtpchkParams           *SmtpchkParams                      `json:"smtpchk_params,omitempty"`
	Source                  *Source                             `json:"source,omitempty"`
	SpliceAuto              *BackendBaseSpliceAuto              `json:"splice_auto,omitempty"`
	SpliceRequest           *BackendBaseSpliceRequest           `json:"splice_request,omitempty"`
	SpliceResponse          *BackendBaseSpliceResponse          `json:"splice_response,omitempty"`
	SpopCheck               *BackendBaseSpopCheck               `json:"spop_check,omitempty"`
	Srvtcpka                *BackendBaseSrvtcpka                `json:"srvtcpka,omitempty"`
	SrvtcpkaCnt             *int                                `json:"srvtcpka_cnt"`
	SrvtcpkaIdle            *int                                `json:"srvtcpka_idle"`
	SrvtcpkaIntvl           *int                                `json:"srvtcpka_intvl"`
	StatsOptions            *StatsOptions                       `json:"stats_options,omitempty"`
	StickTable              *ConfigStickTable                   `json:"stick_table,omitempty"`
	TarpitTimeout           *int                                `json:"tarpit_timeout"`
	TcpSmartConnect         *BackendBaseTcpSmartConnect         `json:"tcp_smart_connect,omitempty"`
	Tcpka                   *BackendBaseTcpka                   `json:"tcpka,omitempty"`
	Transparent             *BackendBaseTransparent             `json:"transparent,omitempty"`
	TunnelTimeout           *int                                `json:"tunnel_timeout"`
	UseFcgiApp              *string                             `json:"use_fcgi_app,omitempty"`
}

// BackendBaseAbortonclose defines model for BackendBase.Abortonclose.
type BackendBaseAbortonclose string

// BackendBaseAcceptInvalidHttpResponse defines model for BackendBase.AcceptInvalidHttpResponse.
type BackendBaseAcceptInvalidHttpResponse string

// BackendBaseAcceptUnsafeViolationsInHttpResponse defines model for BackendBase.AcceptUnsafeViolationsInHttpResponse.
type BackendBaseAcceptUnsafeViolationsInHttpResponse string

// BackendBaseAdvCheck defines model for BackendBase.AdvCheck.
type BackendBaseAdvCheck string

// BackendBaseAllbackups defines model for BackendBase.Allbackups.
type BackendBaseAllbackups string

// BackendBaseCheckcache defines model for BackendBase.Checkcache.
type BackendBaseCheckcache string

// BackendBaseExternalCheck defines model for BackendBase.ExternalCheck.
type BackendBaseExternalCheck string

// BackendBaseForcePersistCond defines model for BackendBase.ForcePersist.Cond.
type BackendBaseForcePersistCond string

// BackendBaseForcePersistListCond defines model for BackendBase.ForcePersistList.Cond.
type BackendBaseForcePersistListCond string

// BackendBaseH1CaseAdjustBogusServer defines model for BackendBase.H1CaseAdjustBogusServer.
type BackendBaseH1CaseAdjustBogusServer string

// BackendBaseHashPreserveAffinity defines model for BackendBase.HashPreserveAffinity.
type BackendBaseHashPreserveAffinity string

// BackendBaseHttpBufferRequest defines model for BackendBase.HttpBufferRequest.
type BackendBaseHttpBufferRequest string

// BackendBaseHttpDropRequestTrailers defines model for BackendBase.HttpDropRequestTrailers.
type BackendBaseHttpDropRequestTrailers string

// BackendBaseHttpNoDelay defines model for BackendBase.HttpNoDelay.
type BackendBaseHttpNoDelay string

// BackendBaseHttpUseHtx defines model for BackendBase.HttpUseHtx.
type BackendBaseHttpUseHtx string

// BackendBaseHttpConnectionMode defines model for BackendBase.HttpConnectionMode.
type BackendBaseHttpConnectionMode string

// BackendBaseHttpPretendKeepalive defines model for BackendBase.HttpPretendKeepalive.
type BackendBaseHttpPretendKeepalive string

// BackendBaseHttpProxy defines model for BackendBase.HttpProxy.
type BackendBaseHttpProxy string

// BackendBaseHttpRestrictReqHdrNames defines model for BackendBase.HttpRestrictReqHdrNames.
type BackendBaseHttpRestrictReqHdrNames string

// BackendBaseHttpReuse defines model for BackendBase.HttpReuse.
type BackendBaseHttpReuse string

// BackendBaseIgnorePersistCond defines model for BackendBase.IgnorePersist.Cond.
type BackendBaseIgnorePersistCond string

// BackendBaseIgnorePersistListCond defines model for BackendBase.IgnorePersistList.Cond.
type BackendBaseIgnorePersistListCond string

// BackendBaseIndependentStreams defines model for BackendBase.IndependentStreams.
type BackendBaseIndependentStreams string

// BackendBaseLoadServerStateFromFile defines model for BackendBase.LoadServerStateFromFile.
type BackendBaseLoadServerStateFromFile string

// BackendBaseLogHealthChecks defines model for BackendBase.LogHealthChecks.
type BackendBaseLogHealthChecks string

// BackendBaseMode defines model for BackendBase.Mode.
type BackendBaseMode string

// BackendBaseNolinger defines model for BackendBase.Nolinger.
type BackendBaseNolinger string

// BackendBasePersist defines model for BackendBase.Persist.
type BackendBasePersist string

// BackendBasePreferLastServer defines model for BackendBase.PreferLastServer.
type BackendBasePreferLastServer string

// BackendBaseSpliceAuto defines model for BackendBase.SpliceAuto.
type BackendBaseSpliceAuto string

// BackendBaseSpliceRequest defines model for BackendBase.SpliceRequest.
type BackendBaseSpliceRequest string

// BackendBaseSpliceResponse defines model for BackendBase.SpliceResponse.
type BackendBaseSpliceResponse string

// BackendBaseSpopCheck defines model for BackendBase.SpopCheck.
type BackendBaseSpopCheck string

// BackendBaseSrvtcpka defines model for BackendBase.Srvtcpka.
type BackendBaseSrvtcpka string

// BackendBaseTcpSmartConnect defines model for BackendBase.TcpSmartConnect.
type BackendBaseTcpSmartConnect string

// BackendBaseTcpka defines model for BackendBase.Tcpka.
type BackendBaseTcpka string

// BackendBaseTransparent defines model for BackendBase.Transparent.
type BackendBaseTransparent string

// BackendSwitchingRule HAProxy backend switching rule configuration (corresponds to use_backend directive)
type BackendSwitchingRule struct {
	Cond     *BackendSwitchingRuleCond          `json:"cond,omitempty"`
	CondTest *string                            `json:"cond_test,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
}

// BackendSwitchingRuleCond defines model for BackendSwitchingRule.Cond.
type BackendSwitchingRuleCond string

// BackendSwitchingRules HAProxy backend switching rules array (corresponds to use_backend directives)
type BackendSwitchingRules = []BackendSwitchingRule

// Backends HAProxy backends array
type Backends = []Backend

// Balance defines model for balance.
type Balance struct {
	Algorithm         BalanceAlgorithm `json:"algorithm"`
	HashExpression    *string          `json:"hash_expression,omitempty"`
	HdrName           *string          `json:"hdr_name,omitempty"`
	HdrUseDomainOnly  *bool            `json:"hdr_use_domain_only,omitempty"`
	RandomDraws       *int             `json:"random_draws,omitempty"`
	RdpCookieName     *string          `json:"rdp_cookie_name,omitempty"`
	UriDepth          *int             `json:"uri_depth,omitempty"`
	UriLen            *int             `json:"uri_len,omitempty"`
	UriPathOnly       *bool            `json:"uri_path_only,omitempty"`
	UriWhole          *bool            `json:"uri_whole,omitempty"`
	UrlParam          *string          `json:"url_param,omitempty"`
	UrlParamCheckPost *int             `json:"url_param_check_post,omitempty"`
	UrlParamMaxWait   *int             `json:"url_param_max_wait,omitempty"`
}

// BalanceAlgorithm defines model for Balance.Algorithm.
type BalanceAlgorithm string

// Bind defines model for bind.
type Bind struct {
	AcceptNetscalerCip *int      `json:"accept_netscaler_cip,omitempty"`
	AcceptProxy        *bool     `json:"accept_proxy,omitempty"`
	Address            *string   `json:"address,omitempty"`
	Allow0rtt          *bool     `json:"allow_0rtt,omitempty"`
	Alpn               *string   `json:"alpn,omitempty"`
	Backlog            *string   `json:"backlog,omitempty"`
	CaIgnoreErr        *string   `json:"ca_ignore_err,omitempty"`
	CaSignFile         *string   `json:"ca_sign_file,omitempty"`
	CaSignPass         *string   `json:"ca_sign_pass,omitempty"`
	CaVerifyFile       *string   `json:"ca_verify_file,omitempty"`
	Ciphers            *string   `json:"ciphers,omitempty"`
	Ciphersuites       *string   `json:"ciphersuites,omitempty"`
	ClientSigalgs      *string   `json:"client_sigalgs,omitempty"`
	CrlFile            *string   `json:"crl_file,omitempty"`
	CrtIgnoreErr       *string   `json:"crt_ignore_err,omitempty"`
	CrtList            *string   `json:"crt_list,omitempty"`
	Curves             *string   `json:"curves,omitempty"`
	DefaultCrtList     *[]string `json:"default_crt_list,omitempty"`
	DeferAccept        *bool     `json:"defer_accept,omitempty"`
	Ecdhe              *string   `json:"ecdhe,omitempty"`
	ExposeFdListeners  *bool     `json:"expose_fd_listeners,omitempty"`

	// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	ForceSslv3     *bool               `json:"force_sslv3,omitempty"`
	ForceStrictSni *BindForceStrictSni `json:"force_strict_sni,omitempty"`

	// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	ForceTlsv10 *bool `json:"force_tlsv10,omitempty"`

	// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	ForceTlsv11 *bool `json:"force_tlsv11,omitempty"`

	// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	ForceTlsv12 *bool `json:"force_tlsv12,omitempty"`

	// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	ForceTlsv13          *bool                              `json:"force_tlsv13,omitempty"`
	GenerateCertificates *bool                              `json:"generate_certificates,omitempty"`
	Gid                  *int                               `json:"gid,omitempty"`
	Group                *string                            `json:"group,omitempty"`
	GuidPrefix           *string                            `json:"guid_prefix,omitempty"`
	Id                   *string                            `json:"id,omitempty"`
	IdlePing             *int                               `json:"idle_ping"`
	Interface            *string                            `json:"interface,omitempty"`
	Level                *BindLevel                         `json:"level,omitempty"`
	Maxconn              *int                               `json:"maxconn,omitempty"`
	Metadata             *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Mode                 *string                            `json:"mode,omitempty"`
	Mss                  *string                            `json:"mss,omitempty"`
	Name                 *string                            `json:"name,omitempty"`
	Namespace            *string                            `json:"namespace,omitempty"`
	Nbconn               *int                               `json:"nbconn,omitempty"`
	Nice                 *int                               `json:"nice,omitempty"`
	NoAlpn               *bool                              `json:"no_alpn,omitempty"`
	NoCaNames            *bool                              `json:"no_ca_names,omitempty"`

	// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	NoSslv3     *bool `json:"no_sslv3,omitempty"`
	NoStrictSni *bool `json:"no_strict_sni,omitempty"`

	// NoTlsTickets This field is deprecated in favor of tls_tickets, and will be removed in a future release
	NoTlsTickets *bool `json:"no_tls_tickets,omitempty"`

	// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	NoTlsv10 *bool `json:"no_tlsv10,omitempty"`

	// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	NoTlsv11 *bool `json:"no_tlsv11,omitempty"`

	// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	NoTlsv12 *bool `json:"no_tlsv12,omitempty"`

	// NoTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	NoTlsv13            *bool               `json:"no_tlsv13,omitempty"`
	Npn                 *string             `json:"npn,omitempty"`
	Port                *int                `json:"port"`
	PortRangeEnd        *int                `json:"port-range-end"`
	PreferClientCiphers *bool               `json:"prefer_client_ciphers,omitempty"`
	Proto               *string             `json:"proto,omitempty"`
	QuicCcAlgo          *BindQuicCcAlgo     `json:"quic-cc-algo,omitempty"`
	QuicForceRetry      *bool               `json:"quic-force-retry,omitempty"`
	QuicSocket          *BindQuicSocket     `json:"quic-socket,omitempty"`
	QuicCcAlgoBurstSize *int                `json:"quic_cc_algo_burst_size"`
	QuicCcAlgoMaxWindow *int                `json:"quic_cc_algo_max_window"`
	SeverityOutput      *BindSeverityOutput `json:"severity_output,omitempty"`
	Sigalgs             *string             `json:"sigalgs,omitempty"`
	Ssl                 *bool               `json:"ssl,omitempty"`
	SslCafile           *string             `json:"ssl_cafile,omitempty"`
	SslCertificate      *string             `json:"ssl_certificate,omitempty"`
	SslMaxVer           *BindSslMaxVer      `json:"ssl_max_ver,omitempty"`
	SslMinVer           *BindSslMinVer      `json:"ssl_min_ver,omitempty"`
	Sslv3               *BindSslv3          `json:"sslv3,omitempty"`
	StrictSni           *bool               `json:"strict_sni,omitempty"`
	TcpUserTimeout      *int                `json:"tcp_user_timeout"`
	Tfo                 *bool               `json:"tfo,omitempty"`
	Thread              *string             `json:"thread,omitempty"`
	TlsTicketKeys       *string             `json:"tls_ticket_keys,omitempty"`
	TlsTickets          *BindTlsTickets     `json:"tls_tickets,omitempty"`
	Tlsv10              *BindTlsv10         `json:"tlsv10,omitempty"`
	Tlsv11              *BindTlsv11         `json:"tlsv11,omitempty"`
	Tlsv12              *BindTlsv12         `json:"tlsv12,omitempty"`
	Tlsv13              *BindTlsv13         `json:"tlsv13,omitempty"`
	Transparent         *bool               `json:"transparent,omitempty"`
	Uid                 *string             `json:"uid,omitempty"`
	User                *string             `json:"user,omitempty"`
	V4v6                *bool               `json:"v4v6,omitempty"`
	V6only              *bool               `json:"v6only,omitempty"`
	Verify              *BindVerify         `json:"verify,omitempty"`
}

// BindForceStrictSni defines model for Bind.ForceStrictSni.
type BindForceStrictSni string

// BindLevel defines model for Bind.Level.
type BindLevel string

// BindQuicCcAlgo defines model for Bind.QuicCcAlgo.
type BindQuicCcAlgo string

// BindQuicSocket defines model for Bind.QuicSocket.
type BindQuicSocket string

// BindSeverityOutput defines model for Bind.SeverityOutput.
type BindSeverityOutput string

// BindSslMaxVer defines model for Bind.SslMaxVer.
type BindSslMaxVer string

// BindSslMinVer defines model for Bind.SslMinVer.
type BindSslMinVer string

// BindSslv3 defines model for Bind.Sslv3.
type BindSslv3 string

// BindTlsTickets defines model for Bind.TlsTickets.
type BindTlsTickets string

// BindTlsv10 defines model for Bind.Tlsv10.
type BindTlsv10 string

// BindTlsv11 defines model for Bind.Tlsv11.
type BindTlsv11 string

// BindTlsv12 defines model for Bind.Tlsv12.
type BindTlsv12 string

// BindTlsv13 defines model for Bind.Tlsv13.
type BindTlsv13 string

// BindVerify defines model for Bind.Verify.
type BindVerify string

// BindParams defines model for bind_params.
type BindParams struct {
	AcceptNetscalerCip *int      `json:"accept_netscaler_cip,omitempty"`
	AcceptProxy        *bool     `json:"accept_proxy,omitempty"`
	Allow0rtt          *bool     `json:"allow_0rtt,omitempty"`
	Alpn               *string   `json:"alpn,omitempty"`
	Backlog            *string   `json:"backlog,omitempty"`
	CaIgnoreErr        *string   `json:"ca_ignore_err,omitempty"`
	CaSignFile         *string   `json:"ca_sign_file,omitempty"`
	CaSignPass         *string   `json:"ca_sign_pass,omitempty"`
	CaVerifyFile       *string   `json:"ca_verify_file,omitempty"`
	Ciphers            *string   `json:"ciphers,omitempty"`
	Ciphersuites       *string   `json:"ciphersuites,omitempty"`
	ClientSigalgs      *string   `json:"client_sigalgs,omitempty"`
	CrlFile            *string   `json:"crl_file,omitempty"`
	CrtIgnoreErr       *string   `json:"crt_ignore_err,omitempty"`
	CrtList            *string   `json:"crt_list,omitempty"`
	Curves             *string   `json:"curves,omitempty"`
	DefaultCrtList     *[]string `json:"default_crt_list,omitempty"`
	DeferAccept        *bool     `json:"defer_accept,omitempty"`
	Ecdhe              *string   `json:"ecdhe,omitempty"`
	ExposeFdListeners  *bool     `json:"expose_fd_listeners,omitempty"`

	// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	ForceSslv3     *bool                     `json:"force_sslv3,omitempty"`
	ForceStrictSni *BindParamsForceStrictSni `json:"force_strict_sni,omitempty"`

	// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	ForceTlsv10 *bool `json:"force_tlsv10,omitempty"`

	// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	ForceTlsv11 *bool `json:"force_tlsv11,omitempty"`

	// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	ForceTlsv12 *bool `json:"force_tlsv12,omitempty"`

	// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	ForceTlsv13          *bool            `json:"force_tlsv13,omitempty"`
	GenerateCertificates *bool            `json:"generate_certificates,omitempty"`
	Gid                  *int             `json:"gid,omitempty"`
	Group                *string          `json:"group,omitempty"`
	GuidPrefix           *string          `json:"guid_prefix,omitempty"`
	Id                   *string          `json:"id,omitempty"`
	IdlePing             *int             `json:"idle_ping"`
	Interface            *string          `json:"interface,omitempty"`
	Level                *BindParamsLevel `json:"level,omitempty"`
	Maxconn              *int             `json:"maxconn,omitempty"`
	Mode                 *string          `json:"mode,omitempty"`
	Mss                  *string          `json:"mss,omitempty"`
	Name                 *string          `json:"name,omitempty"`
	Namespace            *string          `json:"namespace,omitempty"`
	Nbconn               *int             `json:"nbconn,omitempty"`
	Nice                 *int             `json:"nice,omitempty"`
	NoAlpn               *bool            `json:"no_alpn,omitempty"`
	NoCaNames            *bool            `json:"no_ca_names,omitempty"`

	// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	NoSslv3     *bool `json:"no_sslv3,omitempty"`
	NoStrictSni *bool `json:"no_strict_sni,omitempty"`

	// NoTlsTickets This field is deprecated in favor of tls_tickets, and will be removed in a future release
	NoTlsTickets *bool `json:"no_tls_tickets,omitempty"`

	// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	NoTlsv10 *bool `json:"no_tlsv10,omitempty"`

	// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	NoTlsv11 *bool `json:"no_tlsv11,omitempty"`

	// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	NoTlsv12 *bool `json:"no_tlsv12,omitempty"`

	// NoTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	NoTlsv13            *bool                     `json:"no_tlsv13,omitempty"`
	Npn                 *string                   `json:"npn,omitempty"`
	PreferClientCiphers *bool                     `json:"prefer_client_ciphers,omitempty"`
	Proto               *string                   `json:"proto,omitempty"`
	QuicCcAlgo          *BindParamsQuicCcAlgo     `json:"quic-cc-algo,omitempty"`
	QuicForceRetry      *bool                     `json:"quic-force-retry,omitempty"`
	QuicSocket          *BindParamsQuicSocket     `json:"quic-socket,omitempty"`
	QuicCcAlgoBurstSize *int                      `json:"quic_cc_algo_burst_size"`
	QuicCcAlgoMaxWindow *int                      `json:"quic_cc_algo_max_window"`
	SeverityOutput      *BindParamsSeverityOutput `json:"severity_output,omitempty"`
	Sigalgs             *string                   `json:"sigalgs,omitempty"`
	Ssl                 *bool                     `json:"ssl,omitempty"`
	SslCafile           *string                   `json:"ssl_cafile,omitempty"`
	SslCertificate      *string                   `json:"ssl_certificate,omitempty"`
	SslMaxVer           *BindParamsSslMaxVer      `json:"ssl_max_ver,omitempty"`
	SslMinVer           *BindParamsSslMinVer      `json:"ssl_min_ver,omitempty"`
	Sslv3               *BindParamsSslv3          `json:"sslv3,omitempty"`
	StrictSni           *bool                     `json:"strict_sni,omitempty"`
	TcpUserTimeout      *int                      `json:"tcp_user_timeout"`
	Tfo                 *bool                     `json:"tfo,omitempty"`
	Thread              *string                   `json:"thread,omitempty"`
	TlsTicketKeys       *string                   `json:"tls_ticket_keys,omitempty"`
	TlsTickets          *BindParamsTlsTickets     `json:"tls_tickets,omitempty"`
	Tlsv10              *BindParamsTlsv10         `json:"tlsv10,omitempty"`
	Tlsv11              *BindParamsTlsv11         `json:"tlsv11,omitempty"`
	Tlsv12              *BindParamsTlsv12         `json:"tlsv12,omitempty"`
	Tlsv13              *BindParamsTlsv13         `json:"tlsv13,omitempty"`
	Transparent         *bool                     `json:"transparent,omitempty"`
	Uid                 *string                   `json:"uid,omitempty"`
	User                *string                   `json:"user,omitempty"`
	V4v6                *bool                     `json:"v4v6,omitempty"`
	V6only              *bool                     `json:"v6only,omitempty"`
	Verify              *BindParamsVerify         `json:"verify,omitempty"`
}

// BindParamsForceStrictSni defines model for BindParams.ForceStrictSni.
type BindParamsForceStrictSni string

// BindParamsLevel defines model for BindParams.Level.
type BindParamsLevel string

// BindParamsQuicCcAlgo defines model for BindParams.QuicCcAlgo.
type BindParamsQuicCcAlgo string

// BindParamsQuicSocket defines model for BindParams.QuicSocket.
type BindParamsQuicSocket string

// BindParamsSeverityOutput defines model for BindParams.SeverityOutput.
type BindParamsSeverityOutput string

// BindParamsSslMaxVer defines model for BindParams.SslMaxVer.
type BindParamsSslMaxVer string

// BindParamsSslMinVer defines model for BindParams.SslMinVer.
type BindParamsSslMinVer string

// BindParamsSslv3 defines model for BindParams.Sslv3.
type BindParamsSslv3 string

// BindParamsTlsTickets defines model for BindParams.TlsTickets.
type BindParamsTlsTickets string

// BindParamsTlsv10 defines model for BindParams.Tlsv10.
type BindParamsTlsv10 string

// BindParamsTlsv11 defines model for BindParams.Tlsv11.
type BindParamsTlsv11 string

// BindParamsTlsv12 defines model for BindParams.Tlsv12.
type BindParamsTlsv12 string

// BindParamsTlsv13 defines model for BindParams.Tlsv13.
type BindParamsTlsv13 string

// BindParamsVerify defines model for BindParams.Verify.
type BindParamsVerify string

// Binds HAProxy frontend binds array (corresponds to bind directives)
type Binds = []Bind

// Cache HAPRoxy Cache section
type Cache struct {
	MaxAge              *int                               `json:"max_age,omitempty"`
	MaxObjectSize       *int                               `json:"max_object_size,omitempty"`
	MaxSecondaryEntries *int                               `json:"max_secondary_entries,omitempty"`
	Metadata            *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name                string                             `json:"name"`
	ProcessVary         *bool                              `json:"process_vary"`
	TotalMaxSize        *int                               `json:"total_max_size,omitempty"`
}

// Caches HAProxy caches array
type Caches = []Cache

// Capture defines model for capture.
type Capture struct {
	Length   int                                `json:"length"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Type     CaptureType                        `json:"type"`
}

// CaptureType defines model for Capture.Type.
type CaptureType string

// Captures defines model for captures.
type Captures = []Capture

// ClusterSettings Settings related to a cluster.
type ClusterSettings struct {
	BootstrapKey *string `json:"bootstrap_key,omitempty"`
	Cluster      *struct {
		Address           *string `json:"address,omitempty"`
		ApiBasePath       *string `json:"api_base_path,omitempty"`
		ClusterId         *string `json:"cluster_id,omitempty"`
		Description       *string `json:"description,omitempty"`
		ClusterLogTargets *[]struct {
			Address   string                                   `json:"address"`
			LogFormat *string                                  `json:"log_format,omitempty"`
			Port      int                                      `json:"port"`
			Protocol  ClusterSettingsClusterLogTargetsProtocol `json:"protocol"`
		} `json:"log_targets,omitempty"`
		Name *string `json:"name,omitempty"`
		Port *int    `json:"port"`
	} `json:"cluster,omitempty"`
	Mode   *ClusterSettingsMode   `json:"mode,omitempty"`
	Status *ClusterSettingsStatus `json:"status,omitempty"`
}

// ClusterSettingsClusterLogTargetsProtocol defines model for ClusterSettings.Cluster.LogTargets.Protocol.
type ClusterSettingsClusterLogTargetsProtocol string

// ClusterSettingsMode defines model for ClusterSettings.Mode.
type ClusterSettingsMode string

// ClusterSettingsStatus defines model for ClusterSettings.Status.
type ClusterSettingsStatus string

// Compression defines model for compression.
type Compression struct {
	AlgoReq    *CompressionAlgoReq      `json:"algo-req,omitempty"`
	Algorithms *[]CompressionAlgorithms `json:"algorithms,omitempty"`
	AlgosRes   *[]CompressionAlgosRes   `json:"algos-res,omitempty"`
	Direction  *CompressionDirection    `json:"direction,omitempty"`
	MinsizeReq *int                     `json:"minsize_req,omitempty"`
	MinsizeRes *int                     `json:"minsize_res,omitempty"`
	Offload    *bool                    `json:"offload,omitempty"`
	Types      *[]string                `json:"types,omitempty"`
	TypesReq   *[]string                `json:"types-req,omitempty"`
	TypesRes   *[]string                `json:"types-res,omitempty"`
}

// CompressionAlgoReq defines model for Compression.AlgoReq.
type CompressionAlgoReq string

// CompressionAlgorithms defines model for Compression.Algorithms.
type CompressionAlgorithms string

// CompressionAlgosRes defines model for Compression.AlgosRes.
type CompressionAlgosRes string

// CompressionDirection defines model for Compression.Direction.
type CompressionDirection string

// ConfigStickTable defines model for config_stick_table.
type ConfigStickTable struct {
	Expire   *int                               `json:"expire"`
	Keylen   *int                               `json:"keylen"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Nopurge  *bool                              `json:"nopurge,omitempty"`
	Peers    *string                            `json:"peers,omitempty"`
	RecvOnly *bool                              `json:"recv_only,omitempty"`
	Size     *int                               `json:"size"`
	Srvkey   *ConfigStickTableSrvkey            `json:"srvkey"`
	Store    *string                            `json:"store,omitempty"`
	Type     *ConfigStickTableType              `json:"type,omitempty"`
	WriteTo  *string                            `json:"write_to"`
}

// ConfigStickTableSrvkey defines model for ConfigStickTable.Srvkey.
type ConfigStickTableSrvkey string

// ConfigStickTableType defines model for ConfigStickTable.Type.
type ConfigStickTableType string

// Consul Consul server configuration
type Consul struct {
	Address string `json:"address"`

	// Defaults Name of the defaults section to be used in backends created by this service
	Defaults    *string `json:"defaults,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled     bool    `json:"enabled"`

	// HealthCheckPolicy Defines the health check conditions required for each node to be considered valid for the service.
	//   none: all nodes are considered valid
	//   any: a node is considered valid if any one health check is 'passing'
	//   all: a node is considered valid if all health checks are 'passing'
	//   min: a node is considered valid if the number of 'passing' checks is greater or equal to the 'health_check_policy_min' value.
	//     If the node has less health checks configured then 'health_check_policy_min' it is considered invalid.
	HealthCheckPolicy    *ConsulHealthCheckPolicy `json:"health_check_policy,omitempty"`
	HealthCheckPolicyMin *int                     `json:"health_check_policy_min,omitempty"`

	// Id Auto generated ID.
	Id        *string     `json:"id"`
	Mode      *ConsulMode `json:"mode,omitempty"`
	Name      *string     `json:"name,omitempty"`
	Namespace *string     `json:"namespace,omitempty"`
	Port      int         `json:"port"`

	// RetryTimeout Duration in seconds in-between data pulling requests to the consul server
	RetryTimeout               int                          `json:"retry_timeout"`
	ServerSlotsBase            *int                         `json:"server_slots_base,omitempty"`
	ServerSlotsGrowthIncrement *int                         `json:"server_slots_growth_increment,omitempty"`
	ServerSlotsGrowthType      *ConsulServerSlotsGrowthType `json:"server_slots_growth_type,omitempty"`
	ServiceAllowlist           *[]string                    `json:"service_allowlist,omitempty"`
	ServiceDenylist            *[]string                    `json:"service_denylist,omitempty"`

	// ServiceNameRegexp Regular expression used to filter services by name.
	ServiceNameRegexp *string `json:"service_name_regexp,omitempty"`
	Token             *string `json:"token,omitempty"`
}

// ConsulHealthCheckPolicy Defines the health check conditions required for each node to be considered valid for the service.
//
//	none: all nodes are considered valid
//	any: a node is considered valid if any one health check is 'passing'
//	all: a node is considered valid if all health checks are 'passing'
//	min: a node is considered valid if the number of 'passing' checks is greater or equal to the 'health_check_policy_min' value.
//	  If the node has less health checks configured then 'health_check_policy_min' it is considered invalid.
type ConsulHealthCheckPolicy string

// ConsulMode defines model for Consul.Mode.
type ConsulMode string

// ConsulServerSlotsGrowthType defines model for Consul.ServerSlotsGrowthType.
type ConsulServerSlotsGrowthType string

// Consuls Consuls array
type Consuls = []Consul

// Cookie defines model for cookie.
type Cookie struct {
	Attrs *[]struct {
		Value *string `json:"value,omitempty"`
	} `json:"attr,omitempty"`
	Domains *[]struct {
		Value *string `json:"value,omitempty"`
	} `json:"domain,omitempty"`
	Dynamic  *bool       `json:"dynamic,omitempty"`
	Httponly *bool       `json:"httponly,omitempty"`
	Indirect *bool       `json:"indirect,omitempty"`
	Maxidle  *int        `json:"maxidle,omitempty"`
	Maxlife  *int        `json:"maxlife,omitempty"`
	Name     string      `json:"name"`
	Nocache  *bool       `json:"nocache,omitempty"`
	Postonly *bool       `json:"postonly,omitempty"`
	Preserve *bool       `json:"preserve,omitempty"`
	Secure   *bool       `json:"secure,omitempty"`
	Type     *CookieType `json:"type,omitempty"`
}

// CookieType defines model for Cookie.Type.
type CookieType string

// CrtLoad Loads a certificate from a store with options
type CrtLoad struct {
	// Acme ACME section name to use
	Acme *string `json:"acme,omitempty"`

	// Alias Certificate alias
	Alias *string `json:"alias,omitempty"`

	// Certificate Certificate filename
	Certificate string `json:"certificate"`

	// Domains List of domains used to generate the certificate with ACME
	Domains *[]string `json:"domains,omitempty"`

	// Issuer OCSP issuer filename
	Issuer *string `json:"issuer,omitempty"`

	// Key Private key filename
	Key      *string                            `json:"key,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// Ocsp OCSP response filename
	Ocsp *string `json:"ocsp,omitempty"`

	// OcspUpdate Automatic OCSP response update
	OcspUpdate *CrtLoadOcspUpdate `json:"ocsp_update,omitempty"`

	// Sctl Signed Certificate Timestamp List filename
	Sctl *string `json:"sctl,omitempty"`
}

// CrtLoadOcspUpdate Automatic OCSP response update
type CrtLoadOcspUpdate string

// CrtLoads List of certificates to load from a Certificate Store
type CrtLoads = []CrtLoad

// CrtStore Storage mechanism to load and store certificates used in the configuration
type CrtStore struct {
	// CrtBase Default directory to fetch SSL certificates from
	CrtBase *string `json:"crt_base,omitempty"`

	// KeyBase Default directory to fetch SSL private keys from
	KeyBase *string `json:"key_base,omitempty"`

	// Loads List of certificates to load from a Certificate Store
	Loads    *CrtLoads                          `json:"loads,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
}

// CrtStores List of Certificate Stores
type CrtStores = []CrtStore

// DebugOptions defines model for debug_options.
type DebugOptions struct {
	Anonkey     *int  `json:"anonkey"`
	Quiet       *bool `json:"quiet,omitempty"`
	StressLevel *int  `json:"stress_level"`
	ZeroWarning *bool `json:"zero_warning,omitempty"`
}

// DefaultBind defines model for default_bind.
type DefaultBind struct {
	AcceptNetscalerCip *int      `json:"accept_netscaler_cip,omitempty"`
	AcceptProxy        *bool     `json:"accept_proxy,omitempty"`
	Allow0rtt          *bool     `json:"allow_0rtt,omitempty"`
	Alpn               *string   `json:"alpn,omitempty"`
	Backlog            *string   `json:"backlog,omitempty"`
	CaIgnoreErr        *string   `json:"ca_ignore_err,omitempty"`
	CaSignFile         *string   `json:"ca_sign_file,omitempty"`
	CaSignPass         *string   `json:"ca_sign_pass,omitempty"`
	CaVerifyFile       *string   `json:"ca_verify_file,omitempty"`
	Ciphers            *string   `json:"ciphers,omitempty"`
	Ciphersuites       *string   `json:"ciphersuites,omitempty"`
	ClientSigalgs      *string   `json:"client_sigalgs,omitempty"`
	CrlFile            *string   `json:"crl_file,omitempty"`
	CrtIgnoreErr       *string   `json:"crt_ignore_err,omitempty"`
	CrtList            *string   `json:"crt_list,omitempty"`
	Curves             *string   `json:"curves,omitempty"`
	DefaultCrtList     *[]string `json:"default_crt_list,omitempty"`
	DeferAccept        *bool     `json:"defer_accept,omitempty"`
	Ecdhe              *string   `json:"ecdhe,omitempty"`
	ExposeFdListeners  *bool     `json:"expose_fd_listeners,omitempty"`

	// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	ForceSslv3     *bool                      `json:"force_sslv3,omitempty"`
	ForceStrictSni *DefaultBindForceStrictSni `json:"force_strict_sni,omitempty"`

	// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	ForceTlsv10 *bool `json:"force_tlsv10,omitempty"`

	// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	ForceTlsv11 *bool `json:"force_tlsv11,omitempty"`

	// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	ForceTlsv12 *bool `json:"force_tlsv12,omitempty"`

	// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	ForceTlsv13          *bool                              `json:"force_tlsv13,omitempty"`
	GenerateCertificates *bool                              `json:"generate_certificates,omitempty"`
	Gid                  *int                               `json:"gid,omitempty"`
	Group                *string                            `json:"group,omitempty"`
	GuidPrefix           *string                            `json:"guid_prefix,omitempty"`
	Id                   *string                            `json:"id,omitempty"`
	IdlePing             *int                               `json:"idle_ping"`
	Interface            *string                            `json:"interface,omitempty"`
	Level                *DefaultBindLevel                  `json:"level,omitempty"`
	Maxconn              *int                               `json:"maxconn,omitempty"`
	Metadata             *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Mode                 *string                            `json:"mode,omitempty"`
	Mss                  *string                            `json:"mss,omitempty"`
	Name                 *string                            `json:"name,omitempty"`
	Namespace            *string                            `json:"namespace,omitempty"`
	Nbconn               *int                               `json:"nbconn,omitempty"`
	Nice                 *int                               `json:"nice,omitempty"`
	NoAlpn               *bool                              `json:"no_alpn,omitempty"`
	NoCaNames            *bool                              `json:"no_ca_names,omitempty"`

	// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	NoSslv3     *bool `json:"no_sslv3,omitempty"`
	NoStrictSni *bool `json:"no_strict_sni,omitempty"`

	// NoTlsTickets This field is deprecated in favor of tls_tickets, and will be removed in a future release
	NoTlsTickets *bool `json:"no_tls_tickets,omitempty"`

	// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	NoTlsv10 *bool `json:"no_tlsv10,omitempty"`

	// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	NoTlsv11 *bool `json:"no_tlsv11,omitempty"`

	// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	NoTlsv12 *bool `json:"no_tlsv12,omitempty"`

	// NoTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	NoTlsv13            *bool                      `json:"no_tlsv13,omitempty"`
	Npn                 *string                    `json:"npn,omitempty"`
	PreferClientCiphers *bool                      `json:"prefer_client_ciphers,omitempty"`
	Proto               *string                    `json:"proto,omitempty"`
	QuicCcAlgo          *DefaultBindQuicCcAlgo     `json:"quic-cc-algo,omitempty"`
	QuicForceRetry      *bool                      `json:"quic-force-retry,omitempty"`
	QuicSocket          *DefaultBindQuicSocket     `json:"quic-socket,omitempty"`
	QuicCcAlgoBurstSize *int                       `json:"quic_cc_algo_burst_size"`
	QuicCcAlgoMaxWindow *int                       `json:"quic_cc_algo_max_window"`
	SeverityOutput      *DefaultBindSeverityOutput `json:"severity_output,omitempty"`
	Sigalgs             *string                    `json:"sigalgs,omitempty"`
	Ssl                 *bool                      `json:"ssl,omitempty"`
	SslCafile           *string                    `json:"ssl_cafile,omitempty"`
	SslCertificate      *string                    `json:"ssl_certificate,omitempty"`
	SslMaxVer           *DefaultBindSslMaxVer      `json:"ssl_max_ver,omitempty"`
	SslMinVer           *DefaultBindSslMinVer      `json:"ssl_min_ver,omitempty"`
	Sslv3               *DefaultBindSslv3          `json:"sslv3,omitempty"`
	StrictSni           *bool                      `json:"strict_sni,omitempty"`
	TcpUserTimeout      *int                       `json:"tcp_user_timeout"`
	Tfo                 *bool                      `json:"tfo,omitempty"`
	Thread              *string                    `json:"thread,omitempty"`
	TlsTicketKeys       *string                    `json:"tls_ticket_keys,omitempty"`
	TlsTickets          *DefaultBindTlsTickets     `json:"tls_tickets,omitempty"`
	Tlsv10              *DefaultBindTlsv10         `json:"tlsv10,omitempty"`
	Tlsv11              *DefaultBindTlsv11         `json:"tlsv11,omitempty"`
	Tlsv12              *DefaultBindTlsv12         `json:"tlsv12,omitempty"`
	Tlsv13              *DefaultBindTlsv13         `json:"tlsv13,omitempty"`
	Transparent         *bool                      `json:"transparent,omitempty"`
	Uid                 *string                    `json:"uid,omitempty"`
	User                *string                    `json:"user,omitempty"`
	V4v6                *bool                      `json:"v4v6,omitempty"`
	V6only              *bool                      `json:"v6only,omitempty"`
	Verify              *DefaultBindVerify         `json:"verify,omitempty"`
}

// DefaultBindForceStrictSni defines model for DefaultBind.ForceStrictSni.
type DefaultBindForceStrictSni string

// DefaultBindLevel defines model for DefaultBind.Level.
type DefaultBindLevel string

// DefaultBindQuicCcAlgo defines model for DefaultBind.QuicCcAlgo.
type DefaultBindQuicCcAlgo string

// DefaultBindQuicSocket defines model for DefaultBind.QuicSocket.
type DefaultBindQuicSocket string

// DefaultBindSeverityOutput defines model for DefaultBind.SeverityOutput.
type DefaultBindSeverityOutput string

// DefaultBindSslMaxVer defines model for DefaultBind.SslMaxVer.
type DefaultBindSslMaxVer string

// DefaultBindSslMinVer defines model for DefaultBind.SslMinVer.
type DefaultBindSslMinVer string

// DefaultBindSslv3 defines model for DefaultBind.Sslv3.
type DefaultBindSslv3 string

// DefaultBindTlsTickets defines model for DefaultBind.TlsTickets.
type DefaultBindTlsTickets string

// DefaultBindTlsv10 defines model for DefaultBind.Tlsv10.
type DefaultBindTlsv10 string

// DefaultBindTlsv11 defines model for DefaultBind.Tlsv11.
type DefaultBindTlsv11 string

// DefaultBindTlsv12 defines model for DefaultBind.Tlsv12.
type DefaultBindTlsv12 string

// DefaultBindTlsv13 defines model for DefaultBind.Tlsv13.
type DefaultBindTlsv13 string

// DefaultBindVerify defines model for DefaultBind.Verify.
type DefaultBindVerify string

// DefaultServer defines model for default_server.
type DefaultServer = ServerParams

// Defaults defines model for defaults.
type Defaults struct {
	Abortonclose                         *DefaultsAbortonclose                         `json:"abortonclose,omitempty"`
	AcceptInvalidHttpRequest             *DefaultsAcceptInvalidHttpRequest             `json:"accept_invalid_http_request,omitempty"`
	AcceptInvalidHttpResponse            *DefaultsAcceptInvalidHttpResponse            `json:"accept_invalid_http_response,omitempty"`
	AcceptUnsafeViolationsInHttpRequest  *DefaultsAcceptUnsafeViolationsInHttpRequest  `json:"accept_unsafe_violations_in_http_request,omitempty"`
	AcceptUnsafeViolationsInHttpResponse *DefaultsAcceptUnsafeViolationsInHttpResponse `json:"accept_unsafe_violations_in_http_response,omitempty"`

	// AclList HAProxy ACL lines array (corresponds to acl directives)
	AclList          *Acls                     `json:"acl_list,omitempty"`
	AdvCheck         *DefaultsAdvCheck         `json:"adv_check,omitempty"`
	Allbackups       *DefaultsAllbackups       `json:"allbackups,omitempty"`
	Backlog          *int                      `json:"backlog"`
	Balance          *Balance                  `json:"balance,omitempty"`
	CheckTimeout     *int                      `json:"check_timeout"`
	Checkcache       *DefaultsCheckcache       `json:"checkcache,omitempty"`
	Clflog           *bool                     `json:"clflog,omitempty"`
	ClientFinTimeout *int                      `json:"client_fin_timeout"`
	ClientTimeout    *int                      `json:"client_timeout"`
	Clitcpka         *DefaultsClitcpka         `json:"clitcpka,omitempty"`
	ClitcpkaCnt      *int                      `json:"clitcpka_cnt"`
	ClitcpkaIdle     *int                      `json:"clitcpka_idle"`
	ClitcpkaIntvl    *int                      `json:"clitcpka_intvl"`
	Compression      *Compression              `json:"compression,omitempty"`
	ConnectTimeout   *int                      `json:"connect_timeout"`
	Contstats        *DefaultsContstats        `json:"contstats,omitempty"`
	Cookie           *Cookie                   `json:"cookie,omitempty"`
	DefaultBackend   *string                   `json:"default_backend,omitempty"`
	DefaultServer    *DefaultServer            `json:"default_server,omitempty"`
	DisableH2Upgrade *DefaultsDisableH2Upgrade `json:"disable_h2_upgrade,omitempty"`
	Disabled         *bool                     `json:"disabled,omitempty"`
	DontlogNormal    *DefaultsDontlogNormal    `json:"dontlog_normal,omitempty"`
	Dontlognull      *DefaultsDontlognull      `json:"dontlognull,omitempty"`
	DynamicCookieKey *string                   `json:"dynamic_cookie_key,omitempty"`

	// EmailAlert Send emails for important log messages.
	EmailAlert               *EmailAlert                       `json:"email_alert,omitempty"`
	Enabled                  *bool                             `json:"enabled,omitempty"`
	ErrorFiles               *[]Errorfile                      `json:"error_files,omitempty"`
	ErrorLogFormat           *string                           `json:"error_log_format,omitempty"`
	ErrorFilesFromHTTPErrors *[]Errorfiles                     `json:"errorfiles_from_http_errors,omitempty"`
	Errorloc302              *Errorloc                         `json:"errorloc302,omitempty"`
	Errorloc303              *Errorloc                         `json:"errorloc303,omitempty"`
	ExternalCheck            *DefaultsExternalCheck            `json:"external_check,omitempty"`
	ExternalCheckCommand     *string                           `json:"external_check_command,omitempty"`
	ExternalCheckPath        *string                           `json:"external_check_path,omitempty"`
	Forwardfor               *Forwardfor                       `json:"forwardfor,omitempty"`
	From                     *string                           `json:"from,omitempty"`
	Fullconn                 *int                              `json:"fullconn"`
	H1CaseAdjustBogusClient  *DefaultsH1CaseAdjustBogusClient  `json:"h1_case_adjust_bogus_client,omitempty"`
	H1CaseAdjustBogusServer  *DefaultsH1CaseAdjustBogusServer  `json:"h1_case_adjust_bogus_server,omitempty"`
	HashBalanceFactor        *int                              `json:"hash_balance_factor"`
	HashPreserveAffinity     *DefaultsHashPreserveAffinity     `json:"hash_preserve_affinity,omitempty"`
	HashType                 *HashType                         `json:"hash_type,omitempty"`
	HttpBufferRequest        *DefaultsHttpBufferRequest        `json:"http-buffer-request,omitempty"`
	HttpDropRequestTrailers  *DefaultsHttpDropRequestTrailers  `json:"http-drop-request-trailers,omitempty"`
	HttpDropResponseTrailers *DefaultsHttpDropResponseTrailers `json:"http-drop-response-trailers,omitempty"`
	HttpUseHtx               *DefaultsHttpUseHtx               `json:"http-use-htx,omitempty"`

	// HttpAfterResponseRuleList HAProxy HTTP after response rules array (corresponds to http-after-response directives)
	HttpAfterResponseRuleList *HttpAfterResponseRules     `json:"http_after_response_rule_list,omitempty"`
	HttpCheckList             *HttpChecks                 `json:"http_check_list,omitempty"`
	HttpConnectionMode        *DefaultsHttpConnectionMode `json:"http_connection_mode,omitempty"`

	// HttpErrorRuleList HAProxy HTTP error rules array (corresponds to http-error directives)
	HttpErrorRuleList    *HttpErrorRules               `json:"http_error_rule_list,omitempty"`
	HttpIgnoreProbes     *DefaultsHttpIgnoreProbes     `json:"http_ignore_probes,omitempty"`
	HttpKeepAliveTimeout *int                          `json:"http_keep_alive_timeout"`
	HttpNoDelay          *DefaultsHttpNoDelay          `json:"http_no_delay,omitempty"`
	HttpPretendKeepalive *DefaultsHttpPretendKeepalive `json:"http_pretend_keepalive,omitempty"`

	// HttpRequestRuleList HAProxy HTTP request rules array (corresponds to http-request directives)
	HttpRequestRuleList *HttpRequestRules `json:"http_request_rule_list,omitempty"`
	HttpRequestTimeout  *int              `json:"http_request_timeout"`

	// HttpResponseRuleList HAProxy HTTP response rules array (corresponds to http-response directives)
	HttpResponseRuleList    *HttpResponseRules               `json:"http_response_rule_list,omitempty"`
	HttpRestrictReqHdrNames *DefaultsHttpRestrictReqHdrNames `json:"http_restrict_req_hdr_names,omitempty"`
	HttpReuse               *DefaultsHttpReuse               `json:"http_reuse,omitempty"`
	HttpSendNameHeader      *string                          `json:"http_send_name_header"`
	HttpUseProxyHeader      *DefaultsHttpUseProxyHeader      `json:"http_use_proxy_header,omitempty"`
	HttpchkParams           *HttpchkParams                   `json:"httpchk_params,omitempty"`
	Httplog                 *bool                            `json:"httplog,omitempty"`
	Httpslog                *DefaultsHttpslog                `json:"httpslog,omitempty"`
	IdleCloseOnResponse     *DefaultsIdleCloseOnResponse     `json:"idle_close_on_response,omitempty"`
	IndependentStreams      *DefaultsIndependentStreams      `json:"independent_streams,omitempty"`
	LoadServerStateFromFile *DefaultsLoadServerStateFromFile `json:"load_server_state_from_file,omitempty"`
	LogFormat               *string                          `json:"log_format,omitempty"`
	LogFormatSd             *string                          `json:"log_format_sd,omitempty"`
	LogHealthChecks         *DefaultsLogHealthChecks         `json:"log_health_checks,omitempty"`
	LogSeparateErrors       *DefaultsLogSeparateErrors       `json:"log_separate_errors,omitempty"`
	LogSteps                *[]DefaultsLogSteps              `json:"log_steps,omitempty"`
	LogTag                  *string                          `json:"log_tag,omitempty"`

	// LogTargetList HAProxy log target array (corresponds to log directives)
	LogTargetList     *LogTargets                        `json:"log_target_list,omitempty"`
	Logasap           *DefaultsLogasap                   `json:"logasap,omitempty"`
	MaxKeepAliveQueue *int                               `json:"max_keep_alive_queue"`
	Maxconn           *int                               `json:"maxconn"`
	Metadata          *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Mode              *DefaultsMode                      `json:"mode,omitempty"`
	MonitorUri        *MonitorUri                        `json:"monitor_uri,omitempty"`
	MysqlCheckParams  *MysqlCheckParams                  `json:"mysql_check_params,omitempty"`
	Name              *string                            `json:"name,omitempty"`
	Nolinger          *DefaultsNolinger                  `json:"nolinger,omitempty"`
	Originalto        *Originalto                        `json:"originalto,omitempty"`
	Persist           *DefaultsPersist                   `json:"persist,omitempty"`
	PersistRule       *PersistRule                       `json:"persist_rule,omitempty"`
	PgsqlCheckParams  *PgsqlCheckParams                  `json:"pgsql_check_params,omitempty"`
	PreferLastServer  *DefaultsPreferLastServer          `json:"prefer_last_server,omitempty"`
	QueueTimeout      *int                               `json:"queue_timeout"`
	QUICInitialRules  *QUICInitialRules                  `json:"quic_initial_rule_list,omitempty"`
	Redispatch        *Redispatch                        `json:"redispatch,omitempty"`
	Retries           *int                               `json:"retries"`
	RetryOn           *string                            `json:"retry_on,omitempty"`
	ServerFinTimeout  *int                               `json:"server_fin_timeout"`
	ServerTimeout     *int                               `json:"server_timeout"`
	SmtpchkParams     *SmtpchkParams                     `json:"smtpchk_params,omitempty"`
	SocketStats       *DefaultsSocketStats               `json:"socket_stats,omitempty"`
	Source            *Source                            `json:"source,omitempty"`
	SpliceAuto        *DefaultsSpliceAuto                `json:"splice_auto,omitempty"`
	SpliceRequest     *DefaultsSpliceRequest             `json:"splice_request,omitempty"`
	SpliceResponse    *DefaultsSpliceResponse            `json:"splice_response,omitempty"`
	Srvtcpka          *DefaultsSrvtcpka                  `json:"srvtcpka,omitempty"`
	SrvtcpkaCnt       *int                               `json:"srvtcpka_cnt"`
	SrvtcpkaIdle      *int                               `json:"srvtcpka_idle"`
	SrvtcpkaIntvl     *int                               `json:"srvtcpka_intvl"`
	StatsOptions      *StatsOptions                      `json:"stats_options,omitempty"`
	TarpitTimeout     *int                               `json:"tarpit_timeout"`
	TcpCheckRuleList  *TcpChecks                         `json:"tcp_check_rule_list,omitempty"`

	// TcpRequestRuleList HAProxy TCP request rules array (corresponds to tcp-request directive)
	TcpRequestRuleList *TcpRequestRules `json:"tcp_request_rule_list,omitempty"`

	// TcpResponseRuleList HAProxy TCP response rules array (corresponds to tcp-response directive)
	TcpResponseRuleList *TcpResponseRules        `json:"tcp_response_rule_list,omitempty"`
	TcpSmartAccept      *DefaultsTcpSmartAccept  `json:"tcp_smart_accept,omitempty"`
	TcpSmartConnect     *DefaultsTcpSmartConnect `json:"tcp_smart_connect,omitempty"`
	Tcpka               *DefaultsTcpka           `json:"tcpka,omitempty"`
	Tcplog              *bool                    `json:"tcplog,omitempty"`
	Transparent         *DefaultsTransparent     `json:"transparent,omitempty"`
	TunnelTimeout       *int                     `json:"tunnel_timeout"`
	UniqueIdFormat      *string                  `json:"unique_id_format,omitempty"`
	UniqueIdHeader      *string                  `json:"unique_id_header,omitempty"`
}

// DefaultsAbortonclose defines model for Defaults.Abortonclose.
type DefaultsAbortonclose string

// DefaultsAcceptInvalidHttpRequest defines model for Defaults.AcceptInvalidHttpRequest.
type DefaultsAcceptInvalidHttpRequest string

// DefaultsAcceptInvalidHttpResponse defines model for Defaults.AcceptInvalidHttpResponse.
type DefaultsAcceptInvalidHttpResponse string

// DefaultsAcceptUnsafeViolationsInHttpRequest defines model for Defaults.AcceptUnsafeViolationsInHttpRequest.
type DefaultsAcceptUnsafeViolationsInHttpRequest string

// DefaultsAcceptUnsafeViolationsInHttpResponse defines model for Defaults.AcceptUnsafeViolationsInHttpResponse.
type DefaultsAcceptUnsafeViolationsInHttpResponse string

// DefaultsAdvCheck defines model for Defaults.AdvCheck.
type DefaultsAdvCheck string

// DefaultsAllbackups defines model for Defaults.Allbackups.
type DefaultsAllbackups string

// DefaultsCheckcache defines model for Defaults.Checkcache.
type DefaultsCheckcache string

// DefaultsClitcpka defines model for Defaults.Clitcpka.
type DefaultsClitcpka string

// DefaultsContstats defines model for Defaults.Contstats.
type DefaultsContstats string

// DefaultsDisableH2Upgrade defines model for Defaults.DisableH2Upgrade.
type DefaultsDisableH2Upgrade string

// DefaultsDontlogNormal defines model for Defaults.DontlogNormal.
type DefaultsDontlogNormal string

// DefaultsDontlognull defines model for Defaults.Dontlognull.
type DefaultsDontlognull string

// DefaultsExternalCheck defines model for Defaults.ExternalCheck.
type DefaultsExternalCheck string

// DefaultsH1CaseAdjustBogusClient defines model for Defaults.H1CaseAdjustBogusClient.
type DefaultsH1CaseAdjustBogusClient string

// DefaultsH1CaseAdjustBogusServer defines model for Defaults.H1CaseAdjustBogusServer.
type DefaultsH1CaseAdjustBogusServer string

// DefaultsHashPreserveAffinity defines model for Defaults.HashPreserveAffinity.
type DefaultsHashPreserveAffinity string

// DefaultsHttpBufferRequest defines model for Defaults.HttpBufferRequest.
type DefaultsHttpBufferRequest string

// DefaultsHttpDropRequestTrailers defines model for Defaults.HttpDropRequestTrailers.
type DefaultsHttpDropRequestTrailers string

// DefaultsHttpDropResponseTrailers defines model for Defaults.HttpDropResponseTrailers.
type DefaultsHttpDropResponseTrailers string

// DefaultsHttpUseHtx defines model for Defaults.HttpUseHtx.
type DefaultsHttpUseHtx string

// DefaultsHttpConnectionMode defines model for Defaults.HttpConnectionMode.
type DefaultsHttpConnectionMode string

// DefaultsHttpIgnoreProbes defines model for Defaults.HttpIgnoreProbes.
type DefaultsHttpIgnoreProbes string

// DefaultsHttpNoDelay defines model for Defaults.HttpNoDelay.
type DefaultsHttpNoDelay string

// DefaultsHttpPretendKeepalive defines model for Defaults.HttpPretendKeepalive.
type DefaultsHttpPretendKeepalive string

// DefaultsHttpRestrictReqHdrNames defines model for Defaults.HttpRestrictReqHdrNames.
type DefaultsHttpRestrictReqHdrNames string

// DefaultsHttpReuse defines model for Defaults.HttpReuse.
type DefaultsHttpReuse string

// DefaultsHttpUseProxyHeader defines model for Defaults.HttpUseProxyHeader.
type DefaultsHttpUseProxyHeader string

// DefaultsHttpslog defines model for Defaults.Httpslog.
type DefaultsHttpslog string

// DefaultsIdleCloseOnResponse defines model for Defaults.IdleCloseOnResponse.
type DefaultsIdleCloseOnResponse string

// DefaultsIndependentStreams defines model for Defaults.IndependentStreams.
type DefaultsIndependentStreams string

// DefaultsLoadServerStateFromFile defines model for Defaults.LoadServerStateFromFile.
type DefaultsLoadServerStateFromFile string

// DefaultsLogHealthChecks defines model for Defaults.LogHealthChecks.
type DefaultsLogHealthChecks string

// DefaultsLogSeparateErrors defines model for Defaults.LogSeparateErrors.
type DefaultsLogSeparateErrors string

// DefaultsLogSteps defines model for Defaults.LogSteps.
type DefaultsLogSteps string

// DefaultsLogasap defines model for Defaults.Logasap.
type DefaultsLogasap string

// DefaultsMode defines model for Defaults.Mode.
type DefaultsMode string

// DefaultsNolinger defines model for Defaults.Nolinger.
type DefaultsNolinger string

// DefaultsPersist defines model for Defaults.Persist.
type DefaultsPersist string

// DefaultsPreferLastServer defines model for Defaults.PreferLastServer.
type DefaultsPreferLastServer string

// DefaultsSocketStats defines model for Defaults.SocketStats.
type DefaultsSocketStats string

// DefaultsSpliceAuto defines model for Defaults.SpliceAuto.
type DefaultsSpliceAuto string

// DefaultsSpliceRequest defines model for Defaults.SpliceRequest.
type DefaultsSpliceRequest string

// DefaultsSpliceResponse defines model for Defaults.SpliceResponse.
type DefaultsSpliceResponse string

// DefaultsSrvtcpka defines model for Defaults.Srvtcpka.
type DefaultsSrvtcpka string

// DefaultsTcpSmartAccept defines model for Defaults.TcpSmartAccept.
type DefaultsTcpSmartAccept string

// DefaultsTcpSmartConnect defines model for Defaults.TcpSmartConnect.
type DefaultsTcpSmartConnect string

// DefaultsTcpka defines model for Defaults.Tcpka.
type DefaultsTcpka string

// DefaultsTransparent defines model for Defaults.Transparent.
type DefaultsTransparent string

// DefaultsBase HAProxy defaults configuration
type DefaultsBase struct {
	Abortonclose                         *DefaultsBaseAbortonclose                         `json:"abortonclose,omitempty"`
	AcceptInvalidHttpRequest             *DefaultsBaseAcceptInvalidHttpRequest             `json:"accept_invalid_http_request,omitempty"`
	AcceptInvalidHttpResponse            *DefaultsBaseAcceptInvalidHttpResponse            `json:"accept_invalid_http_response,omitempty"`
	AcceptUnsafeViolationsInHttpRequest  *DefaultsBaseAcceptUnsafeViolationsInHttpRequest  `json:"accept_unsafe_violations_in_http_request,omitempty"`
	AcceptUnsafeViolationsInHttpResponse *DefaultsBaseAcceptUnsafeViolationsInHttpResponse `json:"accept_unsafe_violations_in_http_response,omitempty"`
	AdvCheck                             *DefaultsBaseAdvCheck                             `json:"adv_check,omitempty"`
	Allbackups                           *DefaultsBaseAllbackups                           `json:"allbackups,omitempty"`
	Backlog                              *int                                              `json:"backlog"`
	Balance                              *Balance                                          `json:"balance,omitempty"`
	CheckTimeout                         *int                                              `json:"check_timeout"`
	Checkcache                           *DefaultsBaseCheckcache                           `json:"checkcache,omitempty"`
	Clflog                               *bool                                             `json:"clflog,omitempty"`
	ClientFinTimeout                     *int                                              `json:"client_fin_timeout"`
	ClientTimeout                        *int                                              `json:"client_timeout"`
	Clitcpka                             *DefaultsBaseClitcpka                             `json:"clitcpka,omitempty"`
	ClitcpkaCnt                          *int                                              `json:"clitcpka_cnt"`
	ClitcpkaIdle                         *int                                              `json:"clitcpka_idle"`
	ClitcpkaIntvl                        *int                                              `json:"clitcpka_intvl"`
	Compression                          *Compression                                      `json:"compression,omitempty"`
	ConnectTimeout                       *int                                              `json:"connect_timeout"`
	Contstats                            *DefaultsBaseContstats                            `json:"contstats,omitempty"`
	Cookie                               *Cookie                                           `json:"cookie,omitempty"`
	DefaultBackend                       *string                                           `json:"default_backend,omitempty"`
	DefaultServer                        *DefaultServer                                    `json:"default_server,omitempty"`
	DisableH2Upgrade                     *DefaultsBaseDisableH2Upgrade                     `json:"disable_h2_upgrade,omitempty"`
	Disabled                             *bool                                             `json:"disabled,omitempty"`
	DontlogNormal                        *DefaultsBaseDontlogNormal                        `json:"dontlog_normal,omitempty"`
	Dontlognull                          *DefaultsBaseDontlognull                          `json:"dontlognull,omitempty"`
	DynamicCookieKey                     *string                                           `json:"dynamic_cookie_key,omitempty"`

	// EmailAlert Send emails for important log messages.
	EmailAlert               *EmailAlert                           `json:"email_alert,omitempty"`
	Enabled                  *bool                                 `json:"enabled,omitempty"`
	ErrorFiles               *[]Errorfile                          `json:"error_files,omitempty"`
	ErrorLogFormat           *string                               `json:"error_log_format,omitempty"`
	ErrorFilesFromHTTPErrors *[]Errorfiles                         `json:"errorfiles_from_http_errors,omitempty"`
	Errorloc302              *Errorloc                             `json:"errorloc302,omitempty"`
	Errorloc303              *Errorloc                             `json:"errorloc303,omitempty"`
	ExternalCheck            *DefaultsBaseExternalCheck            `json:"external_check,omitempty"`
	ExternalCheckCommand     *string                               `json:"external_check_command,omitempty"`
	ExternalCheckPath        *string                               `json:"external_check_path,omitempty"`
	Forwardfor               *Forwardfor                           `json:"forwardfor,omitempty"`
	From                     *string                               `json:"from,omitempty"`
	Fullconn                 *int                                  `json:"fullconn"`
	H1CaseAdjustBogusClient  *DefaultsBaseH1CaseAdjustBogusClient  `json:"h1_case_adjust_bogus_client,omitempty"`
	H1CaseAdjustBogusServer  *DefaultsBaseH1CaseAdjustBogusServer  `json:"h1_case_adjust_bogus_server,omitempty"`
	HashBalanceFactor        *int                                  `json:"hash_balance_factor"`
	HashPreserveAffinity     *DefaultsBaseHashPreserveAffinity     `json:"hash_preserve_affinity,omitempty"`
	HashType                 *HashType                             `json:"hash_type,omitempty"`
	HttpBufferRequest        *DefaultsBaseHttpBufferRequest        `json:"http-buffer-request,omitempty"`
	HttpDropRequestTrailers  *DefaultsBaseHttpDropRequestTrailers  `json:"http-drop-request-trailers,omitempty"`
	HttpDropResponseTrailers *DefaultsBaseHttpDropResponseTrailers `json:"http-drop-response-trailers,omitempty"`
	HttpUseHtx               *DefaultsBaseHttpUseHtx               `json:"http-use-htx,omitempty"`
	HttpConnectionMode       *DefaultsBaseHttpConnectionMode       `json:"http_connection_mode,omitempty"`
	HttpIgnoreProbes         *DefaultsBaseHttpIgnoreProbes         `json:"http_ignore_probes,omitempty"`
	HttpKeepAliveTimeout     *int                                  `json:"http_keep_alive_timeout"`
	HttpNoDelay              *DefaultsBaseHttpNoDelay              `json:"http_no_delay,omitempty"`
	HttpPretendKeepalive     *DefaultsBaseHttpPretendKeepalive     `json:"http_pretend_keepalive,omitempty"`
	HttpRequestTimeout       *int                                  `json:"http_request_timeout"`
	HttpRestrictReqHdrNames  *DefaultsBaseHttpRestrictReqHdrNames  `json:"http_restrict_req_hdr_names,omitempty"`
	HttpReuse                *DefaultsBaseHttpReuse                `json:"http_reuse,omitempty"`
	HttpSendNameHeader       *string                               `json:"http_send_name_header"`
	HttpUseProxyHeader       *DefaultsBaseHttpUseProxyHeader       `json:"http_use_proxy_header,omitempty"`
	HttpchkParams            *HttpchkParams                        `json:"httpchk_params,omitempty"`
	Httplog                  *bool                                 `json:"httplog,omitempty"`
	Httpslog                 *DefaultsBaseHttpslog                 `json:"httpslog,omitempty"`
	IdleCloseOnResponse      *DefaultsBaseIdleCloseOnResponse      `json:"idle_close_on_response,omitempty"`
	IndependentStreams       *DefaultsBaseIndependentStreams       `json:"independent_streams,omitempty"`
	LoadServerStateFromFile  *DefaultsBaseLoadServerStateFromFile  `json:"load_server_state_from_file,omitempty"`
	LogFormat                *string                               `json:"log_format,omitempty"`
	LogFormatSd              *string                               `json:"log_format_sd,omitempty"`
	LogHealthChecks          *DefaultsBaseLogHealthChecks          `json:"log_health_checks,omitempty"`
	LogSeparateErrors        *DefaultsBaseLogSeparateErrors        `json:"log_separate_errors,omitempty"`
	LogSteps                 *[]DefaultsBaseLogSteps               `json:"log_steps,omitempty"`
	LogTag                   *string                               `json:"log_tag,omitempty"`
	Logasap                  *DefaultsBaseLogasap                  `json:"logasap,omitempty"`
	MaxKeepAliveQueue        *int                                  `json:"max_keep_alive_queue"`
	Maxconn                  *int                                  `json:"maxconn"`
	Metadata                 *map[string]map[string]interface{}    `json:"metadata,omitempty"`
	Mode                     *DefaultsBaseMode                     `json:"mode,omitempty"`
	MonitorUri               *MonitorUri                           `json:"monitor_uri,omitempty"`
	MysqlCheckParams         *MysqlCheckParams                     `json:"mysql_check_params,omitempty"`
	Name                     *string                               `json:"name,omitempty"`
	Nolinger                 *DefaultsBaseNolinger                 `json:"nolinger,omitempty"`
	Originalto               *Originalto                           `json:"originalto,omitempty"`
	Persist                  *DefaultsBasePersist                  `json:"persist,omitempty"`
	PersistRule              *PersistRule                          `json:"persist_rule,omitempty"`
	PgsqlCheckParams         *PgsqlCheckParams                     `json:"pgsql_check_params,omitempty"`
	PreferLastServer         *DefaultsBasePreferLastServer         `json:"prefer_last_server,omitempty"`
	QueueTimeout             *int                                  `json:"queue_timeout"`
	Redispatch               *Redispatch                           `json:"redispatch,omitempty"`
	Retries                  *int                                  `json:"retries"`
	RetryOn                  *string                               `json:"retry_on,omitempty"`
	ServerFinTimeout         *int                                  `json:"server_fin_timeout"`
	ServerTimeout            *int                                  `json:"server_timeout"`
	SmtpchkParams            *SmtpchkParams                        `json:"smtpchk_params,omitempty"`
	SocketStats              *DefaultsBaseSocketStats              `json:"socket_stats,omitempty"`
	Source                   *Source                               `json:"source,omitempty"`
	SpliceAuto               *DefaultsBaseSpliceAuto               `json:"splice_auto,omitempty"`
	SpliceRequest            *DefaultsBaseSpliceRequest            `json:"splice_request,omitempty"`
	SpliceResponse           *DefaultsBaseSpliceResponse           `json:"splice_response,omitempty"`
	Srvtcpka                 *DefaultsBaseSrvtcpka                 `json:"srvtcpka,omitempty"`
	SrvtcpkaCnt              *int                                  `json:"srvtcpka_cnt"`
	SrvtcpkaIdle             *int                                  `json:"srvtcpka_idle"`
	SrvtcpkaIntvl            *int                                  `json:"srvtcpka_intvl"`
	StatsOptions             *StatsOptions                         `json:"stats_options,omitempty"`
	TarpitTimeout            *int                                  `json:"tarpit_timeout"`
	TcpSmartAccept           *DefaultsBaseTcpSmartAccept           `json:"tcp_smart_accept,omitempty"`
	TcpSmartConnect          *DefaultsBaseTcpSmartConnect          `json:"tcp_smart_connect,omitempty"`
	Tcpka                    *DefaultsBaseTcpka                    `json:"tcpka,omitempty"`
	Tcplog                   *bool                                 `json:"tcplog,omitempty"`
	Transparent              *DefaultsBaseTransparent              `json:"transparent,omitempty"`
	TunnelTimeout            *int                                  `json:"tunnel_timeout"`
	UniqueIdFormat           *string                               `json:"unique_id_format,omitempty"`
	UniqueIdHeader           *string                               `json:"unique_id_header,omitempty"`
}

// DefaultsBaseAbortonclose defines model for DefaultsBase.Abortonclose.
type DefaultsBaseAbortonclose string

// DefaultsBaseAcceptInvalidHttpRequest defines model for DefaultsBase.AcceptInvalidHttpRequest.
type DefaultsBaseAcceptInvalidHttpRequest string

// DefaultsBaseAcceptInvalidHttpResponse defines model for DefaultsBase.AcceptInvalidHttpResponse.
type DefaultsBaseAcceptInvalidHttpResponse string

// DefaultsBaseAcceptUnsafeViolationsInHttpRequest defines model for DefaultsBase.AcceptUnsafeViolationsInHttpRequest.
type DefaultsBaseAcceptUnsafeViolationsInHttpRequest string

// DefaultsBaseAcceptUnsafeViolationsInHttpResponse defines model for DefaultsBase.AcceptUnsafeViolationsInHttpResponse.
type DefaultsBaseAcceptUnsafeViolationsInHttpResponse string

// DefaultsBaseAdvCheck defines model for DefaultsBase.AdvCheck.
type DefaultsBaseAdvCheck string

// DefaultsBaseAllbackups defines model for DefaultsBase.Allbackups.
type DefaultsBaseAllbackups string

// DefaultsBaseCheckcache defines model for DefaultsBase.Checkcache.
type DefaultsBaseCheckcache string

// DefaultsBaseClitcpka defines model for DefaultsBase.Clitcpka.
type DefaultsBaseClitcpka string

// DefaultsBaseContstats defines model for DefaultsBase.Contstats.
type DefaultsBaseContstats string

// DefaultsBaseDisableH2Upgrade defines model for DefaultsBase.DisableH2Upgrade.
type DefaultsBaseDisableH2Upgrade string

// DefaultsBaseDontlogNormal defines model for DefaultsBase.DontlogNormal.
type DefaultsBaseDontlogNormal string

// DefaultsBaseDontlognull defines model for DefaultsBase.Dontlognull.
type DefaultsBaseDontlognull string

// DefaultsBaseExternalCheck defines model for DefaultsBase.ExternalCheck.
type DefaultsBaseExternalCheck string

// DefaultsBaseH1CaseAdjustBogusClient defines model for DefaultsBase.H1CaseAdjustBogusClient.
type DefaultsBaseH1CaseAdjustBogusClient string

// DefaultsBaseH1CaseAdjustBogusServer defines model for DefaultsBase.H1CaseAdjustBogusServer.
type DefaultsBaseH1CaseAdjustBogusServer string

// DefaultsBaseHashPreserveAffinity defines model for DefaultsBase.HashPreserveAffinity.
type DefaultsBaseHashPreserveAffinity string

// DefaultsBaseHttpBufferRequest defines model for DefaultsBase.HttpBufferRequest.
type DefaultsBaseHttpBufferRequest string

// DefaultsBaseHttpDropRequestTrailers defines model for DefaultsBase.HttpDropRequestTrailers.
type DefaultsBaseHttpDropRequestTrailers string

// DefaultsBaseHttpDropResponseTrailers defines model for DefaultsBase.HttpDropResponseTrailers.
type DefaultsBaseHttpDropResponseTrailers string

// DefaultsBaseHttpUseHtx defines model for DefaultsBase.HttpUseHtx.
type DefaultsBaseHttpUseHtx string

// DefaultsBaseHttpConnectionMode defines model for DefaultsBase.HttpConnectionMode.
type DefaultsBaseHttpConnectionMode string

// DefaultsBaseHttpIgnoreProbes defines model for DefaultsBase.HttpIgnoreProbes.
type DefaultsBaseHttpIgnoreProbes string

// DefaultsBaseHttpNoDelay defines model for DefaultsBase.HttpNoDelay.
type DefaultsBaseHttpNoDelay string

// DefaultsBaseHttpPretendKeepalive defines model for DefaultsBase.HttpPretendKeepalive.
type DefaultsBaseHttpPretendKeepalive string

// DefaultsBaseHttpRestrictReqHdrNames defines model for DefaultsBase.HttpRestrictReqHdrNames.
type DefaultsBaseHttpRestrictReqHdrNames string

// DefaultsBaseHttpReuse defines model for DefaultsBase.HttpReuse.
type DefaultsBaseHttpReuse string

// DefaultsBaseHttpUseProxyHeader defines model for DefaultsBase.HttpUseProxyHeader.
type DefaultsBaseHttpUseProxyHeader string

// DefaultsBaseHttpslog defines model for DefaultsBase.Httpslog.
type DefaultsBaseHttpslog string

// DefaultsBaseIdleCloseOnResponse defines model for DefaultsBase.IdleCloseOnResponse.
type DefaultsBaseIdleCloseOnResponse string

// DefaultsBaseIndependentStreams defines model for DefaultsBase.IndependentStreams.
type DefaultsBaseIndependentStreams string

// DefaultsBaseLoadServerStateFromFile defines model for DefaultsBase.LoadServerStateFromFile.
type DefaultsBaseLoadServerStateFromFile string

// DefaultsBaseLogHealthChecks defines model for DefaultsBase.LogHealthChecks.
type DefaultsBaseLogHealthChecks string

// DefaultsBaseLogSeparateErrors defines model for DefaultsBase.LogSeparateErrors.
type DefaultsBaseLogSeparateErrors string

// DefaultsBaseLogSteps defines model for DefaultsBase.LogSteps.
type DefaultsBaseLogSteps string

// DefaultsBaseLogasap defines model for DefaultsBase.Logasap.
type DefaultsBaseLogasap string

// DefaultsBaseMode defines model for DefaultsBase.Mode.
type DefaultsBaseMode string

// DefaultsBaseNolinger defines model for DefaultsBase.Nolinger.
type DefaultsBaseNolinger string

// DefaultsBasePersist defines model for DefaultsBase.Persist.
type DefaultsBasePersist string

// DefaultsBasePreferLastServer defines model for DefaultsBase.PreferLastServer.
type DefaultsBasePreferLastServer string

// DefaultsBaseSocketStats defines model for DefaultsBase.SocketStats.
type DefaultsBaseSocketStats string

// DefaultsBaseSpliceAuto defines model for DefaultsBase.SpliceAuto.
type DefaultsBaseSpliceAuto string

// DefaultsBaseSpliceRequest defines model for DefaultsBase.SpliceRequest.
type DefaultsBaseSpliceRequest string

// DefaultsBaseSpliceResponse defines model for DefaultsBase.SpliceResponse.
type DefaultsBaseSpliceResponse string

// DefaultsBaseSrvtcpka defines model for DefaultsBase.Srvtcpka.
type DefaultsBaseSrvtcpka string

// DefaultsBaseTcpSmartAccept defines model for DefaultsBase.TcpSmartAccept.
type DefaultsBaseTcpSmartAccept string

// DefaultsBaseTcpSmartConnect defines model for DefaultsBase.TcpSmartConnect.
type DefaultsBaseTcpSmartConnect string

// DefaultsBaseTcpka defines model for DefaultsBase.Tcpka.
type DefaultsBaseTcpka string

// DefaultsBaseTransparent defines model for DefaultsBase.Transparent.
type DefaultsBaseTransparent string

// DefaultsSections HAProxy defaults sections array
type DefaultsSections = []Defaults

// DeviceAtlasOptions defines model for device_atlas_options.
type DeviceAtlasOptions struct {
	JsonFile         *string `json:"json_file,omitempty"`
	LogLevel         *string `json:"log_level,omitempty"`
	PropertiesCookie *string `json:"properties_cookie,omitempty"`
	Separator        *string `json:"separator,omitempty"`
}

// DgramBind HAProxy log forward dgram bind configuration
type DgramBind struct {
	Address      *string                            `json:"address,omitempty"`
	Interface    *string                            `json:"interface,omitempty"`
	Metadata     *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name         *string                            `json:"name,omitempty"`
	Namespace    *string                            `json:"namespace,omitempty"`
	Port         *int                               `json:"port"`
	PortRangeEnd *int                               `json:"port-range-end"`
	Transparent  *bool                              `json:"transparent,omitempty"`
}

// DgramBinds HAProxy dgram bind array
type DgramBinds = []DgramBind

// EmailAlert Send emails for important log messages.
type EmailAlert struct {
	From       string                             `json:"from"`
	Level      *EmailAlertLevel                   `json:"level,omitempty"`
	Mailers    string                             `json:"mailers"`
	Metadata   *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Myhostname *string                            `json:"myhostname,omitempty"`
	To         string                             `json:"to"`
}

// EmailAlertLevel defines model for EmailAlert.Level.
type EmailAlertLevel string

// Endpoint Endpoint definition
type Endpoint struct {
	// Description Endpoint description
	Description *string `json:"description,omitempty"`

	// Title Endpoint title
	Title *string `json:"title,omitempty"`

	// Url Path to the endpoint
	Url *string `json:"url,omitempty"`
}

// Endpoints Collection of endpoints
type Endpoints = []Endpoint

// EnvironmentOptions defines model for environment_options.
type EnvironmentOptions struct {
	PresetEnvs *[]struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	} `json:"presetenv,omitempty"`
	Resetenv *string `json:"resetenv,omitempty"`
	SetEnvs  *[]struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	} `json:"setenv,omitempty"`
	Unsetenv *string `json:"unsetenv,omitempty"`
}

// Error API Error
type Error struct {
	Code                 *int              `json:"code"`
	Message              *string           `json:"message"`
	AdditionalProperties map[string]string `json:"-"`
}

// Errorfile defines model for errorfile.
type Errorfile struct {
	Code *ErrorfileCode `json:"code,omitempty"`
	File *string        `json:"file,omitempty"`
}

// ErrorfileCode defines model for Errorfile.Code.
type ErrorfileCode int

// Errorfiles defines model for errorfiles.
type Errorfiles struct {
	Codes    *[]ErrorfilesCodes                 `json:"codes,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     *string                            `json:"name,omitempty"`
}

// ErrorfilesCodes defines model for Errorfiles.Codes.
type ErrorfilesCodes int

// Errorloc defines model for errorloc.
type Errorloc struct {
	Code     ErrorlocCode                       `json:"code"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Url      string                             `json:"url"`
}

// ErrorlocCode defines model for Errorloc.Code.
type ErrorlocCode int

// FCGIApp defines model for fcgiApp.
type FCGIApp struct {
	// AclList HAProxy ACL lines array (corresponds to acl directives)
	AclList *Acls `json:"acl_list,omitempty"`

	// Docroot Defines the document root on the remote host. The parameter serves to build the default value of FastCGI parameters SCRIPT_FILENAME and PATH_TRANSLATED. It is a mandatory setting.
	Docroot string `json:"docroot"`

	// GetValues Enables or disables the retrieval of variables related to connection management.
	GetValues *FcgiAppGetValues `json:"get_values,omitempty"`

	// Index Defines the script name to append after a URI that ends with a slash ("/") to set the default value for the FastCGI parameter SCRIPT_NAME. It is an optional setting.
	Index *string `json:"index,omitempty"`

	// KeepConn Tells the FastCGI application whether or not to keep the connection open after it sends a response. If disabled, the FastCGI application closes the connection after responding to this request.
	KeepConn   *FcgiAppKeepConn `json:"keep_conn,omitempty"`
	LogStderrs *[]FcgiLogStderr `json:"log_stderrs,omitempty"`

	// MaxReqs Defines the maximum number of concurrent requests this application can accept. If the FastCGI application retrieves the variable FCGI_MAX_REQS during connection establishment, it can override this option. Furthermore, if the application does not do multiplexing, it will ignore this option.
	MaxReqs  *int                               `json:"max_reqs,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// MpxsConns Enables or disables the support of connection multiplexing. If the FastCGI application retrieves the variable FCGI_MPXS_CONNS during connection establishment, it can override this option.
	MpxsConns *FcgiAppMpxsConns `json:"mpxs_conns,omitempty"`

	// Name Declares a FastCGI application
	Name        string            `json:"name"`
	PassHeaders *[]FcgiPassHeader `json:"pass_headers,omitempty"`

	// PathInfo Defines a regular expression to extract the script-name and the path-info from the URI.
	// Thus, <regex> must have two captures: the first to capture the script name, and the second to capture the path- info.
	// If not defined, it does not perform matching on the URI, and does not fill the FastCGI parameters PATH_INFO and PATH_TRANSLATED.
	PathInfo  *string         `json:"path_info,omitempty"`
	SetParams *[]FcgiSetParam `json:"set_params,omitempty"`
}

// FcgiAppGetValues Enables or disables the retrieval of variables related to connection management.
type FcgiAppGetValues string

// FcgiAppKeepConn Tells the FastCGI application whether or not to keep the connection open after it sends a response. If disabled, the FastCGI application closes the connection after responding to this request.
type FcgiAppKeepConn string

// FcgiAppMpxsConns Enables or disables the support of connection multiplexing. If the FastCGI application retrieves the variable FCGI_MPXS_CONNS during connection establishment, it can override this option.
type FcgiAppMpxsConns string

// FcgiAppBase HAProxy FastCGI application configuration
type FcgiAppBase struct {
	// Docroot Defines the document root on the remote host. The parameter serves to build the default value of FastCGI parameters SCRIPT_FILENAME and PATH_TRANSLATED. It is a mandatory setting.
	Docroot string `json:"docroot"`

	// GetValues Enables or disables the retrieval of variables related to connection management.
	GetValues *FcgiAppBaseGetValues `json:"get_values,omitempty"`

	// Index Defines the script name to append after a URI that ends with a slash ("/") to set the default value for the FastCGI parameter SCRIPT_NAME. It is an optional setting.
	Index *string `json:"index,omitempty"`

	// KeepConn Tells the FastCGI application whether or not to keep the connection open after it sends a response. If disabled, the FastCGI application closes the connection after responding to this request.
	KeepConn   *FcgiAppBaseKeepConn `json:"keep_conn,omitempty"`
	LogStderrs *[]FcgiLogStderr     `json:"log_stderrs,omitempty"`

	// MaxReqs Defines the maximum number of concurrent requests this application can accept. If the FastCGI application retrieves the variable FCGI_MAX_REQS during connection establishment, it can override this option. Furthermore, if the application does not do multiplexing, it will ignore this option.
	MaxReqs  *int                               `json:"max_reqs,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// MpxsConns Enables or disables the support of connection multiplexing. If the FastCGI application retrieves the variable FCGI_MPXS_CONNS during connection establishment, it can override this option.
	MpxsConns *FcgiAppBaseMpxsConns `json:"mpxs_conns,omitempty"`

	// Name Declares a FastCGI application
	Name        string            `json:"name"`
	PassHeaders *[]FcgiPassHeader `json:"pass_headers,omitempty"`

	// PathInfo Defines a regular expression to extract the script-name and the path-info from the URI.
	// Thus, <regex> must have two captures: the first to capture the script name, and the second to capture the path- info.
	// If not defined, it does not perform matching on the URI, and does not fill the FastCGI parameters PATH_INFO and PATH_TRANSLATED.
	PathInfo  *string         `json:"path_info,omitempty"`
	SetParams *[]FcgiSetParam `json:"set_params,omitempty"`
}

// FcgiAppBaseGetValues Enables or disables the retrieval of variables related to connection management.
type FcgiAppBaseGetValues string

// FcgiAppBaseKeepConn Tells the FastCGI application whether or not to keep the connection open after it sends a response. If disabled, the FastCGI application closes the connection after responding to this request.
type FcgiAppBaseKeepConn string

// FcgiAppBaseMpxsConns Enables or disables the support of connection multiplexing. If the FastCGI application retrieves the variable FCGI_MPXS_CONNS during connection establishment, it can override this option.
type FcgiAppBaseMpxsConns string

// FcgiApps defines model for fcgiApps.
type FcgiApps = []FCGIApp

// FcgiLogStderr Enables logging of STDERR messages that the FastCGI application reports.
// It is an optional setting. By default, HAProxy Enterprise ignores STDERR messages.
type FcgiLogStderr struct {
	Address  *string `json:"address,omitempty"`
	Facility *string `json:"facility,omitempty"`
	Format   *string `json:"format,omitempty"`
	Global   *bool   `json:"global,omitempty"`
	Len      *int    `json:"len,omitempty"`
	Level    *string `json:"level,omitempty"`
	Minlevel *string `json:"minlevel,omitempty"`
	Sample   *struct {
		Ranges string `json:"ranges"`
		Size   int    `json:"size"`
	} `json:"sample,omitempty"`
}

// FcgiPassHeader Specifies the name of a request header to pass to the FastCGI application.
// Optionally, you can follow it with an ACL-based condition, in which case the FastCGI application evaluates it only if the condition is true.
// Most request headers are already available to the FastCGI application with the prefix "HTTP".
// Thus, you only need this directive to pass headers that are purposefully omitted.
// Currently, the headers "Authorization", "Proxy-Authorization", and hop-by-hop headers are omitted.
// Note that the headers "Content-type" and "Content-length" never pass to the FastCGI application because they are already converted into parameters.
type FcgiPassHeader struct {
	Cond     *FcgiPassHeaderCond `json:"cond,omitempty"`
	CondTest *string             `json:"cond_test,omitempty"`
	Name     *string             `json:"name,omitempty"`
}

// FcgiPassHeaderCond defines model for FcgiPassHeader.Cond.
type FcgiPassHeaderCond string

// FcgiSetParam Sets a FastCGI parameter to pass to this application.
// Its value, defined by <format> can take a formatted string, the same as the log directive.
// Optionally, you can follow it with an ACL-based condition, in which case the FastCGI application evaluates it only if the condition is true.
type FcgiSetParam struct {
	Cond     *FcgiSetParamCond `json:"cond,omitempty"`
	CondTest *string           `json:"cond_test,omitempty"`
	Format   *string           `json:"format,omitempty"`
	Name     *string           `json:"name,omitempty"`
}

// FcgiSetParamCond defines model for FcgiSetParam.Cond.
type FcgiSetParamCond string

// FiftyOneDegreesOptions defines model for fifty_one_degrees_options.
type FiftyOneDegreesOptions struct {
	CacheSize         *int    `json:"cache_size,omitempty"`
	DataFile          *string `json:"data_file,omitempty"`
	PropertyNameList  *string `json:"property_name_list,omitempty"`
	PropertySeparator *string `json:"property_separator,omitempty"`
}

// Filter HAProxy filters
type Filter struct {
	// AppName Name of the fcgi-app section this filter will use.
	AppName *string `json:"app_name,omitempty"`

	// BandwidthLimitName Filter name that will be used by 'set-bandwidth-limit' actions to reference a specific bandwidth limitation filter
	BandwidthLimitName *string `json:"bandwidth_limit_name,omitempty"`
	CacheName          *string `json:"cache_name,omitempty"`

	// DefaultLimit The max number of bytes that can be forwarded over the period.
	// The value must be specified for per-stream and shared bandwidth limitation filters.
	// It follows the HAProxy size format and is expressed in bytes.
	DefaultLimit *int `json:"default_limit,omitempty"`

	// DefaultPeriod The default time period used to evaluate the bandwidth limitation rate.
	// It can be specified for per-stream bandwidth limitation filters only.
	// It follows the HAProxy time format and is expressed in milliseconds.
	DefaultPeriod *int `json:"default_period,omitempty"`

	// Key A sample expression rule.
	// It describes what elements will be analyzed, extracted, combined, and used to select which table entry to update the counters.
	// It must be specified for shared bandwidth limitation filters only.
	Key *string `json:"key,omitempty"`

	// Limit The max number of bytes that can be forwarded over the period.
	// The value must be specified for per-stream and shared bandwidth limitation filters.
	// It follows the HAProxy size format and is expressed in bytes.
	Limit    *int                               `json:"limit,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// MinSize The optional minimum number of bytes forwarded at a time by a stream excluding the last packet that may be smaller.
	// This value can be specified for per-stream and shared bandwidth limitation filters.
	// It follows the HAProxy size format and is expressed in bytes.
	MinSize    *int    `json:"min_size,omitempty"`
	SpoeConfig *string `json:"spoe_config,omitempty"`
	SpoeEngine *string `json:"spoe_engine,omitempty"`

	// Table An optional table to be used instead of the default one, which is the stick-table declared in the current proxy.
	// It can be specified for shared bandwidth limitation filters only.
	Table              *string    `json:"table,omitempty"`
	TraceHexdump       *bool      `json:"trace_hexdump,omitempty"`
	TraceName          *string    `json:"trace_name,omitempty"`
	TraceRndForwarding *bool      `json:"trace_rnd_forwarding,omitempty"`
	TraceRndParsing    *bool      `json:"trace_rnd_parsing,omitempty"`
	Type               FilterType `json:"type"`
}

// FilterType defines model for Filter.Type.
type FilterType string

// Filters HAProxy filters array (corresponds to filter directive)
type Filters = []Filter

// Forwardfor defines model for forwardfor.
type Forwardfor struct {
	Enabled ForwardforEnabled `json:"enabled"`
	Except  *string           `json:"except,omitempty"`
	Header  *string           `json:"header,omitempty"`
	Ifnone  *bool             `json:"ifnone,omitempty"`
}

// ForwardforEnabled defines model for Forwardfor.Enabled.
type ForwardforEnabled string

// Frontend defines model for frontend.
type Frontend struct {
	AcceptInvalidHttpRequest            *FrontendAcceptInvalidHttpRequest            `json:"accept_invalid_http_request,omitempty"`
	AcceptUnsafeViolationsInHttpRequest *FrontendAcceptUnsafeViolationsInHttpRequest `json:"accept_unsafe_violations_in_http_request,omitempty"`

	// AclList HAProxy ACL lines array (corresponds to acl directives)
	AclList *Acls `json:"acl_list,omitempty"`

	// BackendSwitchingRuleList HAProxy backend switching rules array (corresponds to use_backend directives)
	BackendSwitchingRuleList *BackendSwitchingRules    `json:"backend_switching_rule_list,omitempty"`
	Backlog                  *int                      `json:"backlog"`
	Binds                    *map[string]Bind          `json:"binds,omitempty"`
	CaptureList              *Captures                 `json:"capture_list,omitempty"`
	Clflog                   *bool                     `json:"clflog,omitempty"`
	ClientFinTimeout         *int                      `json:"client_fin_timeout"`
	ClientTimeout            *int                      `json:"client_timeout"`
	Clitcpka                 *FrontendClitcpka         `json:"clitcpka,omitempty"`
	ClitcpkaCnt              *int                      `json:"clitcpka_cnt"`
	ClitcpkaIdle             *int                      `json:"clitcpka_idle"`
	ClitcpkaIntvl            *int                      `json:"clitcpka_intvl"`
	Compression              *Compression              `json:"compression,omitempty"`
	Contstats                *FrontendContstats        `json:"contstats,omitempty"`
	DefaultBackend           *string                   `json:"default_backend,omitempty"`
	Description              *string                   `json:"description,omitempty"`
	DisableH2Upgrade         *FrontendDisableH2Upgrade `json:"disable_h2_upgrade,omitempty"`
	Disabled                 *bool                     `json:"disabled,omitempty"`
	DontlogNormal            *FrontendDontlogNormal    `json:"dontlog_normal,omitempty"`
	Dontlognull              *FrontendDontlognull      `json:"dontlognull,omitempty"`

	// EmailAlert Send emails for important log messages.
	EmailAlert               *EmailAlert   `json:"email_alert,omitempty"`
	Enabled                  *bool         `json:"enabled,omitempty"`
	ErrorFiles               *[]Errorfile  `json:"error_files,omitempty"`
	ErrorLogFormat           *string       `json:"error_log_format,omitempty"`
	ErrorFilesFromHTTPErrors *[]Errorfiles `json:"errorfiles_from_http_errors,omitempty"`
	Errorloc302              *Errorloc     `json:"errorloc302,omitempty"`
	Errorloc303              *Errorloc     `json:"errorloc303,omitempty"`

	// FilterList HAProxy filters array (corresponds to filter directive)
	FilterList               *Filters                          `json:"filter_list,omitempty"`
	Forwardfor               *Forwardfor                       `json:"forwardfor,omitempty"`
	From                     *string                           `json:"from,omitempty"`
	Guid                     *string                           `json:"guid,omitempty"`
	H1CaseAdjustBogusClient  *FrontendH1CaseAdjustBogusClient  `json:"h1_case_adjust_bogus_client,omitempty"`
	HttpBufferRequest        *FrontendHttpBufferRequest        `json:"http-buffer-request,omitempty"`
	HttpDropResponseTrailers *FrontendHttpDropResponseTrailers `json:"http-drop-response-trailers,omitempty"`
	HttpUseHtx               *FrontendHttpUseHtx               `json:"http-use-htx,omitempty"`

	// HttpAfterResponseRuleList HAProxy HTTP after response rules array (corresponds to http-after-response directives)
	HttpAfterResponseRuleList *HttpAfterResponseRules     `json:"http_after_response_rule_list,omitempty"`
	HttpConnectionMode        *FrontendHttpConnectionMode `json:"http_connection_mode,omitempty"`

	// HttpErrorRuleList HAProxy HTTP error rules array (corresponds to http-error directives)
	HttpErrorRuleList    *HttpErrorRules           `json:"http_error_rule_list,omitempty"`
	HttpIgnoreProbes     *FrontendHttpIgnoreProbes `json:"http_ignore_probes,omitempty"`
	HttpKeepAliveTimeout *int                      `json:"http_keep_alive_timeout"`
	HttpNoDelay          *FrontendHttpNoDelay      `json:"http_no_delay,omitempty"`

	// HttpRequestRuleList HAProxy HTTP request rules array (corresponds to http-request directives)
	HttpRequestRuleList *HttpRequestRules `json:"http_request_rule_list,omitempty"`
	HttpRequestTimeout  *int              `json:"http_request_timeout"`

	// HttpResponseRuleList HAProxy HTTP response rules array (corresponds to http-response directives)
	HttpResponseRuleList    *HttpResponseRules               `json:"http_response_rule_list,omitempty"`
	HttpRestrictReqHdrNames *FrontendHttpRestrictReqHdrNames `json:"http_restrict_req_hdr_names,omitempty"`
	HttpUseProxyHeader      *FrontendHttpUseProxyHeader      `json:"http_use_proxy_header,omitempty"`
	Httplog                 *bool                            `json:"httplog,omitempty"`
	Httpslog                *FrontendHttpslog                `json:"httpslog,omitempty"`
	Id                      *int                             `json:"id"`
	IdleCloseOnResponse     *FrontendIdleCloseOnResponse     `json:"idle_close_on_response,omitempty"`
	IndependentStreams      *FrontendIndependentStreams      `json:"independent_streams,omitempty"`
	LogFormat               *string                          `json:"log_format,omitempty"`
	LogFormatSd             *string                          `json:"log_format_sd,omitempty"`
	LogSeparateErrors       *FrontendLogSeparateErrors       `json:"log_separate_errors,omitempty"`
	LogSteps                *[]FrontendLogSteps              `json:"log_steps,omitempty"`
	LogTag                  *string                          `json:"log_tag,omitempty"`

	// LogTargetList HAProxy log target array (corresponds to log directives)
	LogTargetList    *LogTargets                        `json:"log_target_list,omitempty"`
	Logasap          *FrontendLogasap                   `json:"logasap,omitempty"`
	Maxconn          *int                               `json:"maxconn"`
	Metadata         *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Mode             *FrontendMode                      `json:"mode,omitempty"`
	MonitorFail      *MonitorFail                       `json:"monitor_fail,omitempty"`
	MonitorUri       *MonitorUri                        `json:"monitor_uri,omitempty"`
	Name             string                             `json:"name"`
	Nolinger         *FrontendNolinger                  `json:"nolinger,omitempty"`
	Originalto       *Originalto                        `json:"originalto,omitempty"`
	QUICInitialRules *QUICInitialRules                  `json:"quic_initial_rule_list,omitempty"`
	SocketStats      *FrontendSocketStats               `json:"socket_stats,omitempty"`
	SpliceAuto       *FrontendSpliceAuto                `json:"splice_auto,omitempty"`
	SpliceRequest    *FrontendSpliceRequest             `json:"splice_request,omitempty"`
	SpliceResponse   *FrontendSpliceResponse            `json:"splice_response,omitempty"`
	SSLFrontUses     *SSLFrontUses                      `json:"ssl_front_use_list,omitempty"`
	StatsOptions     *StatsOptions                      `json:"stats_options,omitempty"`
	StickTable       *ConfigStickTable                  `json:"stick_table,omitempty"`
	TarpitTimeout    *int                               `json:"tarpit_timeout"`

	// TcpRequestRuleList HAProxy TCP request rules array (corresponds to tcp-request directive)
	TcpRequestRuleList *TcpRequestRules        `json:"tcp_request_rule_list,omitempty"`
	TcpSmartAccept     *FrontendTcpSmartAccept `json:"tcp_smart_accept,omitempty"`
	Tcpka              *FrontendTcpka          `json:"tcpka,omitempty"`
	Tcplog             *bool                   `json:"tcplog,omitempty"`
	UniqueIdFormat     *string                 `json:"unique_id_format,omitempty"`
	UniqueIdHeader     *string                 `json:"unique_id_header,omitempty"`
}

// FrontendAcceptInvalidHttpRequest defines model for Frontend.AcceptInvalidHttpRequest.
type FrontendAcceptInvalidHttpRequest string

// FrontendAcceptUnsafeViolationsInHttpRequest defines model for Frontend.AcceptUnsafeViolationsInHttpRequest.
type FrontendAcceptUnsafeViolationsInHttpRequest string

// FrontendClitcpka defines model for Frontend.Clitcpka.
type FrontendClitcpka string

// FrontendContstats defines model for Frontend.Contstats.
type FrontendContstats string

// FrontendDisableH2Upgrade defines model for Frontend.DisableH2Upgrade.
type FrontendDisableH2Upgrade string

// FrontendDontlogNormal defines model for Frontend.DontlogNormal.
type FrontendDontlogNormal string

// FrontendDontlognull defines model for Frontend.Dontlognull.
type FrontendDontlognull string

// FrontendH1CaseAdjustBogusClient defines model for Frontend.H1CaseAdjustBogusClient.
type FrontendH1CaseAdjustBogusClient string

// FrontendHttpBufferRequest defines model for Frontend.HttpBufferRequest.
type FrontendHttpBufferRequest string

// FrontendHttpDropResponseTrailers defines model for Frontend.HttpDropResponseTrailers.
type FrontendHttpDropResponseTrailers string

// FrontendHttpUseHtx defines model for Frontend.HttpUseHtx.
type FrontendHttpUseHtx string

// FrontendHttpConnectionMode defines model for Frontend.HttpConnectionMode.
type FrontendHttpConnectionMode string

// FrontendHttpIgnoreProbes defines model for Frontend.HttpIgnoreProbes.
type FrontendHttpIgnoreProbes string

// FrontendHttpNoDelay defines model for Frontend.HttpNoDelay.
type FrontendHttpNoDelay string

// FrontendHttpRestrictReqHdrNames defines model for Frontend.HttpRestrictReqHdrNames.
type FrontendHttpRestrictReqHdrNames string

// FrontendHttpUseProxyHeader defines model for Frontend.HttpUseProxyHeader.
type FrontendHttpUseProxyHeader string

// FrontendHttpslog defines model for Frontend.Httpslog.
type FrontendHttpslog string

// FrontendIdleCloseOnResponse defines model for Frontend.IdleCloseOnResponse.
type FrontendIdleCloseOnResponse string

// FrontendIndependentStreams defines model for Frontend.IndependentStreams.
type FrontendIndependentStreams string

// FrontendLogSeparateErrors defines model for Frontend.LogSeparateErrors.
type FrontendLogSeparateErrors string

// FrontendLogSteps defines model for Frontend.LogSteps.
type FrontendLogSteps string

// FrontendLogasap defines model for Frontend.Logasap.
type FrontendLogasap string

// FrontendMode defines model for Frontend.Mode.
type FrontendMode string

// FrontendNolinger defines model for Frontend.Nolinger.
type FrontendNolinger string

// FrontendSocketStats defines model for Frontend.SocketStats.
type FrontendSocketStats string

// FrontendSpliceAuto defines model for Frontend.SpliceAuto.
type FrontendSpliceAuto string

// FrontendSpliceRequest defines model for Frontend.SpliceRequest.
type FrontendSpliceRequest string

// FrontendSpliceResponse defines model for Frontend.SpliceResponse.
type FrontendSpliceResponse string

// FrontendTcpSmartAccept defines model for Frontend.TcpSmartAccept.
type FrontendTcpSmartAccept string

// FrontendTcpka defines model for Frontend.Tcpka.
type FrontendTcpka string

// FrontendBase HAProxy frontend configuration
type FrontendBase struct {
	AcceptInvalidHttpRequest            *FrontendBaseAcceptInvalidHttpRequest            `json:"accept_invalid_http_request,omitempty"`
	AcceptUnsafeViolationsInHttpRequest *FrontendBaseAcceptUnsafeViolationsInHttpRequest `json:"accept_unsafe_violations_in_http_request,omitempty"`
	Backlog                             *int                                             `json:"backlog"`
	Clflog                              *bool                                            `json:"clflog,omitempty"`
	ClientFinTimeout                    *int                                             `json:"client_fin_timeout"`
	ClientTimeout                       *int                                             `json:"client_timeout"`
	Clitcpka                            *FrontendBaseClitcpka                            `json:"clitcpka,omitempty"`
	ClitcpkaCnt                         *int                                             `json:"clitcpka_cnt"`
	ClitcpkaIdle                        *int                                             `json:"clitcpka_idle"`
	ClitcpkaIntvl                       *int                                             `json:"clitcpka_intvl"`
	Compression                         *Compression                                     `json:"compression,omitempty"`
	Contstats                           *FrontendBaseContstats                           `json:"contstats,omitempty"`
	DefaultBackend                      *string                                          `json:"default_backend,omitempty"`
	Description                         *string                                          `json:"description,omitempty"`
	DisableH2Upgrade                    *FrontendBaseDisableH2Upgrade                    `json:"disable_h2_upgrade,omitempty"`
	Disabled                            *bool                                            `json:"disabled,omitempty"`
	DontlogNormal                       *FrontendBaseDontlogNormal                       `json:"dontlog_normal,omitempty"`
	Dontlognull                         *FrontendBaseDontlognull                         `json:"dontlognull,omitempty"`

	// EmailAlert Send emails for important log messages.
	EmailAlert               *EmailAlert                           `json:"email_alert,omitempty"`
	Enabled                  *bool                                 `json:"enabled,omitempty"`
	ErrorFiles               *[]Errorfile                          `json:"error_files,omitempty"`
	ErrorLogFormat           *string                               `json:"error_log_format,omitempty"`
	ErrorFilesFromHTTPErrors *[]Errorfiles                         `json:"errorfiles_from_http_errors,omitempty"`
	Errorloc302              *Errorloc                             `json:"errorloc302,omitempty"`
	Errorloc303              *Errorloc                             `json:"errorloc303,omitempty"`
	Forwardfor               *Forwardfor                           `json:"forwardfor,omitempty"`
	From                     *string                               `json:"from,omitempty"`
	Guid                     *string                               `json:"guid,omitempty"`
	H1CaseAdjustBogusClient  *FrontendBaseH1CaseAdjustBogusClient  `json:"h1_case_adjust_bogus_client,omitempty"`
	HttpBufferRequest        *FrontendBaseHttpBufferRequest        `json:"http-buffer-request,omitempty"`
	HttpDropResponseTrailers *FrontendBaseHttpDropResponseTrailers `json:"http-drop-response-trailers,omitempty"`
	HttpUseHtx               *FrontendBaseHttpUseHtx               `json:"http-use-htx,omitempty"`
	HttpConnectionMode       *FrontendBaseHttpConnectionMode       `json:"http_connection_mode,omitempty"`
	HttpIgnoreProbes         *FrontendBaseHttpIgnoreProbes         `json:"http_ignore_probes,omitempty"`
	HttpKeepAliveTimeout     *int                                  `json:"http_keep_alive_timeout"`
	HttpNoDelay              *FrontendBaseHttpNoDelay              `json:"http_no_delay,omitempty"`
	HttpRequestTimeout       *int                                  `json:"http_request_timeout"`
	HttpRestrictReqHdrNames  *FrontendBaseHttpRestrictReqHdrNames  `json:"http_restrict_req_hdr_names,omitempty"`
	HttpUseProxyHeader       *FrontendBaseHttpUseProxyHeader       `json:"http_use_proxy_header,omitempty"`
	Httplog                  *bool                                 `json:"httplog,omitempty"`
	Httpslog                 *FrontendBaseHttpslog                 `json:"httpslog,omitempty"`
	Id                       *int                                  `json:"id"`
	IdleCloseOnResponse      *FrontendBaseIdleCloseOnResponse      `json:"idle_close_on_response,omitempty"`
	IndependentStreams       *FrontendBaseIndependentStreams       `json:"independent_streams,omitempty"`
	LogFormat                *string                               `json:"log_format,omitempty"`
	LogFormatSd              *string                               `json:"log_format_sd,omitempty"`
	LogSeparateErrors        *FrontendBaseLogSeparateErrors        `json:"log_separate_errors,omitempty"`
	LogSteps                 *[]FrontendBaseLogSteps               `json:"log_steps,omitempty"`
	LogTag                   *string                               `json:"log_tag,omitempty"`
	Logasap                  *FrontendBaseLogasap                  `json:"logasap,omitempty"`
	Maxconn                  *int                                  `json:"maxconn"`
	Metadata                 *map[string]map[string]interface{}    `json:"metadata,omitempty"`
	Mode                     *FrontendBaseMode                     `json:"mode,omitempty"`
	MonitorFail              *MonitorFail                          `json:"monitor_fail,omitempty"`
	MonitorUri               *MonitorUri                           `json:"monitor_uri,omitempty"`
	Name                     string                                `json:"name"`
	Nolinger                 *FrontendBaseNolinger                 `json:"nolinger,omitempty"`
	Originalto               *Originalto                           `json:"originalto,omitempty"`
	SocketStats              *FrontendBaseSocketStats              `json:"socket_stats,omitempty"`
	SpliceAuto               *FrontendBaseSpliceAuto               `json:"splice_auto,omitempty"`
	SpliceRequest            *FrontendBaseSpliceRequest            `json:"splice_request,omitempty"`
	SpliceResponse           *FrontendBaseSpliceResponse           `json:"splice_response,omitempty"`
	StatsOptions             *StatsOptions                         `json:"stats_options,omitempty"`
	StickTable               *ConfigStickTable                     `json:"stick_table,omitempty"`
	TarpitTimeout            *int                                  `json:"tarpit_timeout"`
	TcpSmartAccept           *FrontendBaseTcpSmartAccept           `json:"tcp_smart_accept,omitempty"`
	Tcpka                    *FrontendBaseTcpka                    `json:"tcpka,omitempty"`
	Tcplog                   *bool                                 `json:"tcplog,omitempty"`
	UniqueIdFormat           *string                               `json:"unique_id_format,omitempty"`
	UniqueIdHeader           *string                               `json:"unique_id_header,omitempty"`
}

// FrontendBaseAcceptInvalidHttpRequest defines model for FrontendBase.AcceptInvalidHttpRequest.
type FrontendBaseAcceptInvalidHttpRequest string

// FrontendBaseAcceptUnsafeViolationsInHttpRequest defines model for FrontendBase.AcceptUnsafeViolationsInHttpRequest.
type FrontendBaseAcceptUnsafeViolationsInHttpRequest string

// FrontendBaseClitcpka defines model for FrontendBase.Clitcpka.
type FrontendBaseClitcpka string

// FrontendBaseContstats defines model for FrontendBase.Contstats.
type FrontendBaseContstats string

// FrontendBaseDisableH2Upgrade defines model for FrontendBase.DisableH2Upgrade.
type FrontendBaseDisableH2Upgrade string

// FrontendBaseDontlogNormal defines model for FrontendBase.DontlogNormal.
type FrontendBaseDontlogNormal string

// FrontendBaseDontlognull defines model for FrontendBase.Dontlognull.
type FrontendBaseDontlognull string

// FrontendBaseH1CaseAdjustBogusClient defines model for FrontendBase.H1CaseAdjustBogusClient.
type FrontendBaseH1CaseAdjustBogusClient string

// FrontendBaseHttpBufferRequest defines model for FrontendBase.HttpBufferRequest.
type FrontendBaseHttpBufferRequest string

// FrontendBaseHttpDropResponseTrailers defines model for FrontendBase.HttpDropResponseTrailers.
type FrontendBaseHttpDropResponseTrailers string

// FrontendBaseHttpUseHtx defines model for FrontendBase.HttpUseHtx.
type FrontendBaseHttpUseHtx string

// FrontendBaseHttpConnectionMode defines model for FrontendBase.HttpConnectionMode.
type FrontendBaseHttpConnectionMode string

// FrontendBaseHttpIgnoreProbes defines model for FrontendBase.HttpIgnoreProbes.
type FrontendBaseHttpIgnoreProbes string

// FrontendBaseHttpNoDelay defines model for FrontendBase.HttpNoDelay.
type FrontendBaseHttpNoDelay string

// FrontendBaseHttpRestrictReqHdrNames defines model for FrontendBase.HttpRestrictReqHdrNames.
type FrontendBaseHttpRestrictReqHdrNames string

// FrontendBaseHttpUseProxyHeader defines model for FrontendBase.HttpUseProxyHeader.
type FrontendBaseHttpUseProxyHeader string

// FrontendBaseHttpslog defines model for FrontendBase.Httpslog.
type FrontendBaseHttpslog string

// FrontendBaseIdleCloseOnResponse defines model for FrontendBase.IdleCloseOnResponse.
type FrontendBaseIdleCloseOnResponse string

// FrontendBaseIndependentStreams defines model for FrontendBase.IndependentStreams.
type FrontendBaseIndependentStreams string

// FrontendBaseLogSeparateErrors defines model for FrontendBase.LogSeparateErrors.
type FrontendBaseLogSeparateErrors string

// FrontendBaseLogSteps defines model for FrontendBase.LogSteps.
type FrontendBaseLogSteps string

// FrontendBaseLogasap defines model for FrontendBase.Logasap.
type FrontendBaseLogasap string

// FrontendBaseMode defines model for FrontendBase.Mode.
type FrontendBaseMode string

// FrontendBaseNolinger defines model for FrontendBase.Nolinger.
type FrontendBaseNolinger string

// FrontendBaseSocketStats defines model for FrontendBase.SocketStats.
type FrontendBaseSocketStats string

// FrontendBaseSpliceAuto defines model for FrontendBase.SpliceAuto.
type FrontendBaseSpliceAuto string

// FrontendBaseSpliceRequest defines model for FrontendBase.SpliceRequest.
type FrontendBaseSpliceRequest string

// FrontendBaseSpliceResponse defines model for FrontendBase.SpliceResponse.
type FrontendBaseSpliceResponse string

// FrontendBaseTcpSmartAccept defines model for FrontendBase.TcpSmartAccept.
type FrontendBaseTcpSmartAccept string

// FrontendBaseTcpka defines model for FrontendBase.Tcpka.
type FrontendBaseTcpka string

// Frontends HAProxy frontends array
type Frontends = []Frontend

// GeneralFile General use file
type GeneralFile struct {
	Description *string `json:"description,omitempty"`
	File        *string `json:"file,omitempty"`
	Id          *string `json:"id,omitempty"`

	// Size File size in bytes.
	Size        *int    `json:"size"`
	StorageName *string `json:"storage_name,omitempty"`
}

// GeneralFiles Array of general use files
type GeneralFiles = []GeneralFile

// Global defines model for global.
type Global struct {
	Chroot          *string `json:"chroot,omitempty"`
	CloseSpreadTime *int    `json:"close_spread_time"`
	ClusterSecret   *string `json:"cluster_secret,omitempty"`
	CPUMaps         *[]struct {
		CpuSet  string `json:"cpu_set"`
		Process string `json:"process"`
	} `json:"cpu_maps,omitempty"`
	CpuPolicy *GlobalCpuPolicy `json:"cpu_policy,omitempty"`
	CPUSets   *[]struct {
		Directive GlobalCpuSetDirective `json:"directive"`
		Set       *string               `json:"set,omitempty"`
	} `json:"cpu_set,omitempty"`
	Daemon            *bool         `json:"daemon,omitempty"`
	DebugOptions      *DebugOptions `json:"debug_options,omitempty"`
	GlobalDefaultPath *struct {
		Path *string               `json:"path,omitempty"`
		Type GlobalDefaultPathType `json:"type"`
	} `json:"default_path,omitempty"`
	Description                  *string                 `json:"description,omitempty"`
	DeviceAtlasOptions           *DeviceAtlasOptions     `json:"device_atlas_options,omitempty"`
	DnsAcceptFamily              *string                 `json:"dns_accept_family,omitempty"`
	EnvironmentOptions           *EnvironmentOptions     `json:"environment_options,omitempty"`
	ExposeDeprecatedDirectives   *bool                   `json:"expose_deprecated_directives,omitempty"`
	ExposeExperimentalDirectives *bool                   `json:"expose_experimental_directives,omitempty"`
	ExternalCheck                *bool                   `json:"external_check,omitempty"`
	FiftyOneDegreesOptions       *FiftyOneDegreesOptions `json:"fifty_one_degrees_options,omitempty"`
	ForceCfgParserPause          *int                    `json:"force_cfg_parser_pause"`
	Gid                          *int                    `json:"gid,omitempty"`
	Grace                        *int                    `json:"grace"`
	Group                        *string                 `json:"group,omitempty"`
	H1AcceptPayloadWithAnyMethod *bool                   `json:"h1_accept_payload_with_any_method,omitempty"`
	H1CaseAdjusts                *[]struct {
		From string `json:"from"`
		To   string `json:"to"`
	} `json:"h1_case_adjust,omitempty"`
	H1CaseAdjustFile                       *string `json:"h1_case_adjust_file,omitempty"`
	H1DoNotCloseOnInsecureTransferEncoding *bool   `json:"h1_do_not_close_on_insecure_transfer_encoding,omitempty"`
	H2WorkaroundBogusWebsocketClients      *bool   `json:"h2_workaround_bogus_websocket_clients,omitempty"`
	HardStopAfter                          *int    `json:"hard_stop_after"`
	GlobalHarden                           *struct {
		GlobalHardenRejectPrivilegedPorts *struct {
			Quic *GlobalHardenRejectPrivilegedPortsQuic `json:"quic,omitempty"`
			Tcp  *GlobalHardenRejectPrivilegedPortsTcp  `json:"tcp,omitempty"`
		} `json:"reject_privileged_ports,omitempty"`
	} `json:"harden,omitempty"`
	HttpClientOptions     *HttpClientOptions `json:"http_client_options,omitempty"`
	HttpErrCodes          *[]HTTPCodes       `json:"http_err_codes,omitempty"`
	HttpFailCodes         *[]HTTPCodes       `json:"http_fail_codes,omitempty"`
	InsecureForkWanted    *bool              `json:"insecure_fork_wanted,omitempty"`
	InsecureSetuidWanted  *bool              `json:"insecure_setuid_wanted,omitempty"`
	LimitedQuic           *bool              `json:"limited_quic,omitempty"`
	Localpeer             *string            `json:"localpeer,omitempty"`
	GlobalLogSendHostname *struct {
		Enabled GlobalLogSendHostnameEnabled `json:"enabled"`
		Param   *string                      `json:"param,omitempty"`
	} `json:"log_send_hostname,omitempty"`

	// LogTargetList HAProxy log target array (corresponds to log directives)
	LogTargetList      *LogTargets                        `json:"log_target_list,omitempty"`
	LuaOptions         *LuaOptions                        `json:"lua_options,omitempty"`
	MasterWorker       *bool                              `json:"master-worker,omitempty"`
	Metadata           *map[string]map[string]interface{} `json:"metadata,omitempty"`
	MworkerMaxReloads  *int                               `json:"mworker_max_reloads"`
	Nbthread           *int                               `json:"nbthread,omitempty"`
	NoQuic             *bool                              `json:"no_quic,omitempty"`
	Node               *string                            `json:"node,omitempty"`
	NumaCpuMapping     *GlobalNumaCpuMapping              `json:"numa_cpu_mapping,omitempty"`
	OcspUpdateOptions  *OcspUpdateOptions                 `json:"ocsp_update_options,omitempty"`
	PerformanceOptions *PerformanceOptions                `json:"performance_options,omitempty"`
	Pidfile            *string                            `json:"pidfile,omitempty"`
	Pp2NeverSendLocal  *bool                              `json:"pp2_never_send_local,omitempty"`
	PreallocFd         *bool                              `json:"prealloc_fd,omitempty"`
	RuntimeAPIs        *[]struct {
		AcceptNetscalerCip *int      `json:"accept_netscaler_cip,omitempty"`
		AcceptProxy        *bool     `json:"accept_proxy,omitempty"`
		Address            string    `json:"address"`
		Allow0rtt          *bool     `json:"allow_0rtt,omitempty"`
		Alpn               *string   `json:"alpn,omitempty"`
		Backlog            *string   `json:"backlog,omitempty"`
		CaIgnoreErr        *string   `json:"ca_ignore_err,omitempty"`
		CaSignFile         *string   `json:"ca_sign_file,omitempty"`
		CaSignPass         *string   `json:"ca_sign_pass,omitempty"`
		CaVerifyFile       *string   `json:"ca_verify_file,omitempty"`
		Ciphers            *string   `json:"ciphers,omitempty"`
		Ciphersuites       *string   `json:"ciphersuites,omitempty"`
		ClientSigalgs      *string   `json:"client_sigalgs,omitempty"`
		CrlFile            *string   `json:"crl_file,omitempty"`
		CrtIgnoreErr       *string   `json:"crt_ignore_err,omitempty"`
		CrtList            *string   `json:"crt_list,omitempty"`
		Curves             *string   `json:"curves,omitempty"`
		DefaultCrtList     *[]string `json:"default_crt_list,omitempty"`
		DeferAccept        *bool     `json:"defer_accept,omitempty"`
		Ecdhe              *string   `json:"ecdhe,omitempty"`
		ExposeFdListeners  *bool     `json:"expose_fd_listeners,omitempty"`

		// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
		ForceSslv3     *bool                            `json:"force_sslv3,omitempty"`
		ForceStrictSni *GlobalRuntimeApisForceStrictSni `json:"force_strict_sni,omitempty"`

		// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
		ForceTlsv10 *bool `json:"force_tlsv10,omitempty"`

		// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
		ForceTlsv11 *bool `json:"force_tlsv11,omitempty"`

		// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
		ForceTlsv12 *bool `json:"force_tlsv12,omitempty"`

		// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
		ForceTlsv13          *bool                   `json:"force_tlsv13,omitempty"`
		GenerateCertificates *bool                   `json:"generate_certificates,omitempty"`
		Gid                  *int                    `json:"gid,omitempty"`
		Group                *string                 `json:"group,omitempty"`
		GuidPrefix           *string                 `json:"guid_prefix,omitempty"`
		Id                   *string                 `json:"id,omitempty"`
		IdlePing             *int                    `json:"idle_ping"`
		Interface            *string                 `json:"interface,omitempty"`
		Level                *GlobalRuntimeApisLevel `json:"level,omitempty"`
		Maxconn              *int                    `json:"maxconn,omitempty"`
		Mode                 *string                 `json:"mode,omitempty"`
		Mss                  *string                 `json:"mss,omitempty"`
		Name                 *string                 `json:"name,omitempty"`
		Namespace            *string                 `json:"namespace,omitempty"`
		Nbconn               *int                    `json:"nbconn,omitempty"`
		Nice                 *int                    `json:"nice,omitempty"`
		NoAlpn               *bool                   `json:"no_alpn,omitempty"`
		NoCaNames            *bool                   `json:"no_ca_names,omitempty"`

		// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
		NoSslv3     *bool `json:"no_sslv3,omitempty"`
		NoStrictSni *bool `json:"no_strict_sni,omitempty"`

		// NoTlsTickets This field is deprecated in favor of tls_tickets, and will be removed in a future release
		NoTlsTickets *bool `json:"no_tls_tickets,omitempty"`

		// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
		NoTlsv10 *bool `json:"no_tlsv10,omitempty"`

		// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
		NoTlsv11 *bool `json:"no_tlsv11,omitempty"`

		// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
		NoTlsv12 *bool `json:"no_tlsv12,omitempty"`

		// NoTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
		NoTlsv13            *bool                            `json:"no_tlsv13,omitempty"`
		Npn                 *string                          `json:"npn,omitempty"`
		PreferClientCiphers *bool                            `json:"prefer_client_ciphers,omitempty"`
		Proto               *string                          `json:"proto,omitempty"`
		QuicCcAlgo          *GlobalRuntimeApisQuicCcAlgo     `json:"quic-cc-algo,omitempty"`
		QuicForceRetry      *bool                            `json:"quic-force-retry,omitempty"`
		QuicSocket          *GlobalRuntimeApisQuicSocket     `json:"quic-socket,omitempty"`
		QuicCcAlgoBurstSize *int                             `json:"quic_cc_algo_burst_size"`
		QuicCcAlgoMaxWindow *int                             `json:"quic_cc_algo_max_window"`
		SeverityOutput      *GlobalRuntimeApisSeverityOutput `json:"severity_output,omitempty"`
		Sigalgs             *string                          `json:"sigalgs,omitempty"`
		Ssl                 *bool                            `json:"ssl,omitempty"`
		SslCafile           *string                          `json:"ssl_cafile,omitempty"`
		SslCertificate      *string                          `json:"ssl_certificate,omitempty"`
		SslMaxVer           *GlobalRuntimeApisSslMaxVer      `json:"ssl_max_ver,omitempty"`
		SslMinVer           *GlobalRuntimeApisSslMinVer      `json:"ssl_min_ver,omitempty"`
		Sslv3               *GlobalRuntimeApisSslv3          `json:"sslv3,omitempty"`
		StrictSni           *bool                            `json:"strict_sni,omitempty"`
		TcpUserTimeout      *int                             `json:"tcp_user_timeout"`
		Tfo                 *bool                            `json:"tfo,omitempty"`
		Thread              *string                          `json:"thread,omitempty"`
		TlsTicketKeys       *string                          `json:"tls_ticket_keys,omitempty"`
		TlsTickets          *GlobalRuntimeApisTlsTickets     `json:"tls_tickets,omitempty"`
		Tlsv10              *GlobalRuntimeApisTlsv10         `json:"tlsv10,omitempty"`
		Tlsv11              *GlobalRuntimeApisTlsv11         `json:"tlsv11,omitempty"`
		Tlsv12              *GlobalRuntimeApisTlsv12         `json:"tlsv12,omitempty"`
		Tlsv13              *GlobalRuntimeApisTlsv13         `json:"tlsv13,omitempty"`
		Transparent         *bool                            `json:"transparent,omitempty"`
		Uid                 *string                          `json:"uid,omitempty"`
		User                *string                          `json:"user,omitempty"`
		V4v6                *bool                            `json:"v4v6,omitempty"`
		V6only              *bool                            `json:"v6only,omitempty"`
		Verify              *GlobalRuntimeApisVerify         `json:"verify,omitempty"`
	} `json:"runtime_apis,omitempty"`
	SetDumpable *bool `json:"set_dumpable,omitempty"`
	SetVars     *[]struct {
		Expr string `json:"expr"`
		Name string `json:"name"`
	} `json:"set_var,omitempty"`
	SetVarFmts *[]struct {
		Format string `json:"format"`
		Name   string `json:"name"`
	} `json:"set_var_fmt,omitempty"`
	Setcap           *string     `json:"setcap,omitempty"`
	SslOptions       *SslOptions `json:"ssl_options,omitempty"`
	StatsFile        *string     `json:"stats_file,omitempty"`
	StatsMaxconn     *int        `json:"stats_maxconn"`
	StatsTimeout     *int        `json:"stats_timeout"`
	StrictLimits     *bool       `json:"strict_limits,omitempty"`
	ThreadGroupLines *[]struct {
		Group      string `json:"group"`
		NumOrRange string `json:"num_or_range"`
	} `json:"thread_group_lines,omitempty"`
	ThreadGroups            *int               `json:"thread_groups,omitempty"`
	TuneBufferOptions       *TuneBufferOptions `json:"tune_buffer_options,omitempty"`
	TuneLuaOptions          *TuneLuaOptions    `json:"tune_lua_options,omitempty"`
	TuneOptions             *TuneOptions       `json:"tune_options,omitempty"`
	TuneQuicOptions         *TuneQuicOptions   `json:"tune_quic_options,omitempty"`
	TuneSslOptions          *TuneSslOptions    `json:"tune_ssl_options,omitempty"`
	TuneVarsOptions         *TuneVarsOptions   `json:"tune_vars_options,omitempty"`
	TuneZlibOptions         *TuneZlibOptions   `json:"tune_zlib_options,omitempty"`
	Uid                     *int               `json:"uid,omitempty"`
	UlimitN                 *int               `json:"ulimit_n,omitempty"`
	User                    *string            `json:"user,omitempty"`
	WarnBlockedTrafficAfter *int               `json:"warn_blocked_traffic_after"`
	WurflOptions            *WurflOptions      `json:"wurfl_options,omitempty"`
}

// GlobalCpuPolicy defines model for Global.CpuPolicy.
type GlobalCpuPolicy string

// GlobalCpuSetDirective defines model for Global.CpuSet.Directive.
type GlobalCpuSetDirective string

// GlobalDefaultPathType defines model for Global.DefaultPath.Type.
type GlobalDefaultPathType string

// GlobalHardenRejectPrivilegedPortsQuic defines model for Global.Harden.RejectPrivilegedPorts.Quic.
type GlobalHardenRejectPrivilegedPortsQuic string

// GlobalHardenRejectPrivilegedPortsTcp defines model for Global.Harden.RejectPrivilegedPorts.Tcp.
type GlobalHardenRejectPrivilegedPortsTcp string

// GlobalLogSendHostnameEnabled defines model for Global.LogSendHostname.Enabled.
type GlobalLogSendHostnameEnabled string

// GlobalNumaCpuMapping defines model for Global.NumaCpuMapping.
type GlobalNumaCpuMapping string

// GlobalRuntimeApisForceStrictSni defines model for Global.RuntimeApis.ForceStrictSni.
type GlobalRuntimeApisForceStrictSni string

// GlobalRuntimeApisLevel defines model for Global.RuntimeApis.Level.
type GlobalRuntimeApisLevel string

// GlobalRuntimeApisQuicCcAlgo defines model for Global.RuntimeApis.QuicCcAlgo.
type GlobalRuntimeApisQuicCcAlgo string

// GlobalRuntimeApisQuicSocket defines model for Global.RuntimeApis.QuicSocket.
type GlobalRuntimeApisQuicSocket string

// GlobalRuntimeApisSeverityOutput defines model for Global.RuntimeApis.SeverityOutput.
type GlobalRuntimeApisSeverityOutput string

// GlobalRuntimeApisSslMaxVer defines model for Global.RuntimeApis.SslMaxVer.
type GlobalRuntimeApisSslMaxVer string

// GlobalRuntimeApisSslMinVer defines model for Global.RuntimeApis.SslMinVer.
type GlobalRuntimeApisSslMinVer string

// GlobalRuntimeApisSslv3 defines model for Global.RuntimeApis.Sslv3.
type GlobalRuntimeApisSslv3 string

// GlobalRuntimeApisTlsTickets defines model for Global.RuntimeApis.TlsTickets.
type GlobalRuntimeApisTlsTickets string

// GlobalRuntimeApisTlsv10 defines model for Global.RuntimeApis.Tlsv10.
type GlobalRuntimeApisTlsv10 string

// GlobalRuntimeApisTlsv11 defines model for Global.RuntimeApis.Tlsv11.
type GlobalRuntimeApisTlsv11 string

// GlobalRuntimeApisTlsv12 defines model for Global.RuntimeApis.Tlsv12.
type GlobalRuntimeApisTlsv12 string

// GlobalRuntimeApisTlsv13 defines model for Global.RuntimeApis.Tlsv13.
type GlobalRuntimeApisTlsv13 string

// GlobalRuntimeApisVerify defines model for Global.RuntimeApis.Verify.
type GlobalRuntimeApisVerify string

// GlobalBase HAProxy global configuration
type GlobalBase struct {
	Chroot          *string `json:"chroot,omitempty"`
	CloseSpreadTime *int    `json:"close_spread_time"`
	ClusterSecret   *string `json:"cluster_secret,omitempty"`
	CPUMaps         *[]struct {
		CpuSet  string `json:"cpu_set"`
		Process string `json:"process"`
	} `json:"cpu_maps,omitempty"`
	CpuPolicy *GlobalBaseCpuPolicy `json:"cpu_policy,omitempty"`
	CPUSets   *[]struct {
		Directive GlobalBaseCpuSetDirective `json:"directive"`
		Set       *string                   `json:"set,omitempty"`
	} `json:"cpu_set,omitempty"`
	Daemon            *bool         `json:"daemon,omitempty"`
	DebugOptions      *DebugOptions `json:"debug_options,omitempty"`
	GlobalDefaultPath *struct {
		Path *string                   `json:"path,omitempty"`
		Type GlobalBaseDefaultPathType `json:"type"`
	} `json:"default_path,omitempty"`
	Description                  *string                 `json:"description,omitempty"`
	DeviceAtlasOptions           *DeviceAtlasOptions     `json:"device_atlas_options,omitempty"`
	DnsAcceptFamily              *string                 `json:"dns_accept_family,omitempty"`
	EnvironmentOptions           *EnvironmentOptions     `json:"environment_options,omitempty"`
	ExposeDeprecatedDirectives   *bool                   `json:"expose_deprecated_directives,omitempty"`
	ExposeExperimentalDirectives *bool                   `json:"expose_experimental_directives,omitempty"`
	ExternalCheck                *bool                   `json:"external_check,omitempty"`
	FiftyOneDegreesOptions       *FiftyOneDegreesOptions `json:"fifty_one_degrees_options,omitempty"`
	ForceCfgParserPause          *int                    `json:"force_cfg_parser_pause"`
	Gid                          *int                    `json:"gid,omitempty"`
	Grace                        *int                    `json:"grace"`
	Group                        *string                 `json:"group,omitempty"`
	H1AcceptPayloadWithAnyMethod *bool                   `json:"h1_accept_payload_with_any_method,omitempty"`
	H1CaseAdjusts                *[]struct {
		From string `json:"from"`
		To   string `json:"to"`
	} `json:"h1_case_adjust,omitempty"`
	H1CaseAdjustFile                       *string `json:"h1_case_adjust_file,omitempty"`
	H1DoNotCloseOnInsecureTransferEncoding *bool   `json:"h1_do_not_close_on_insecure_transfer_encoding,omitempty"`
	H2WorkaroundBogusWebsocketClients      *bool   `json:"h2_workaround_bogus_websocket_clients,omitempty"`
	HardStopAfter                          *int    `json:"hard_stop_after"`
	GlobalHarden                           *struct {
		GlobalHardenRejectPrivilegedPorts *struct {
			Quic *GlobalBaseHardenRejectPrivilegedPortsQuic `json:"quic,omitempty"`
			Tcp  *GlobalBaseHardenRejectPrivilegedPortsTcp  `json:"tcp,omitempty"`
		} `json:"reject_privileged_ports,omitempty"`
	} `json:"harden,omitempty"`
	HttpClientOptions     *HttpClientOptions `json:"http_client_options,omitempty"`
	HttpErrCodes          *[]HTTPCodes       `json:"http_err_codes,omitempty"`
	HttpFailCodes         *[]HTTPCodes       `json:"http_fail_codes,omitempty"`
	InsecureForkWanted    *bool              `json:"insecure_fork_wanted,omitempty"`
	InsecureSetuidWanted  *bool              `json:"insecure_setuid_wanted,omitempty"`
	LimitedQuic           *bool              `json:"limited_quic,omitempty"`
	Localpeer             *string            `json:"localpeer,omitempty"`
	GlobalLogSendHostname *struct {
		Enabled GlobalBaseLogSendHostnameEnabled `json:"enabled"`
		Param   *string                          `json:"param,omitempty"`
	} `json:"log_send_hostname,omitempty"`
	LuaOptions         *LuaOptions                        `json:"lua_options,omitempty"`
	MasterWorker       *bool                              `json:"master-worker,omitempty"`
	Metadata           *map[string]map[string]interface{} `json:"metadata,omitempty"`
	MworkerMaxReloads  *int                               `json:"mworker_max_reloads"`
	Nbthread           *int                               `json:"nbthread,omitempty"`
	NoQuic             *bool                              `json:"no_quic,omitempty"`
	Node               *string                            `json:"node,omitempty"`
	NumaCpuMapping     *GlobalBaseNumaCpuMapping          `json:"numa_cpu_mapping,omitempty"`
	OcspUpdateOptions  *OcspUpdateOptions                 `json:"ocsp_update_options,omitempty"`
	PerformanceOptions *PerformanceOptions                `json:"performance_options,omitempty"`
	Pidfile            *string                            `json:"pidfile,omitempty"`
	Pp2NeverSendLocal  *bool                              `json:"pp2_never_send_local,omitempty"`
	PreallocFd         *bool                              `json:"prealloc_fd,omitempty"`
	RuntimeAPIs        *[]struct {
		AcceptNetscalerCip *int      `json:"accept_netscaler_cip,omitempty"`
		AcceptProxy        *bool     `json:"accept_proxy,omitempty"`
		Address            string    `json:"address"`
		Allow0rtt          *bool     `json:"allow_0rtt,omitempty"`
		Alpn               *string   `json:"alpn,omitempty"`
		Backlog            *string   `json:"backlog,omitempty"`
		CaIgnoreErr        *string   `json:"ca_ignore_err,omitempty"`
		CaSignFile         *string   `json:"ca_sign_file,omitempty"`
		CaSignPass         *string   `json:"ca_sign_pass,omitempty"`
		CaVerifyFile       *string   `json:"ca_verify_file,omitempty"`
		Ciphers            *string   `json:"ciphers,omitempty"`
		Ciphersuites       *string   `json:"ciphersuites,omitempty"`
		ClientSigalgs      *string   `json:"client_sigalgs,omitempty"`
		CrlFile            *string   `json:"crl_file,omitempty"`
		CrtIgnoreErr       *string   `json:"crt_ignore_err,omitempty"`
		CrtList            *string   `json:"crt_list,omitempty"`
		Curves             *string   `json:"curves,omitempty"`
		DefaultCrtList     *[]string `json:"default_crt_list,omitempty"`
		DeferAccept        *bool     `json:"defer_accept,omitempty"`
		Ecdhe              *string   `json:"ecdhe,omitempty"`
		ExposeFdListeners  *bool     `json:"expose_fd_listeners,omitempty"`

		// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
		ForceSslv3     *bool                                `json:"force_sslv3,omitempty"`
		ForceStrictSni *GlobalBaseRuntimeApisForceStrictSni `json:"force_strict_sni,omitempty"`

		// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
		ForceTlsv10 *bool `json:"force_tlsv10,omitempty"`

		// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
		ForceTlsv11 *bool `json:"force_tlsv11,omitempty"`

		// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
		ForceTlsv12 *bool `json:"force_tlsv12,omitempty"`

		// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
		ForceTlsv13          *bool                       `json:"force_tlsv13,omitempty"`
		GenerateCertificates *bool                       `json:"generate_certificates,omitempty"`
		Gid                  *int                        `json:"gid,omitempty"`
		Group                *string                     `json:"group,omitempty"`
		GuidPrefix           *string                     `json:"guid_prefix,omitempty"`
		Id                   *string                     `json:"id,omitempty"`
		IdlePing             *int                        `json:"idle_ping"`
		Interface            *string                     `json:"interface,omitempty"`
		Level                *GlobalBaseRuntimeApisLevel `json:"level,omitempty"`
		Maxconn              *int                        `json:"maxconn,omitempty"`
		Mode                 *string                     `json:"mode,omitempty"`
		Mss                  *string                     `json:"mss,omitempty"`
		Name                 *string                     `json:"name,omitempty"`
		Namespace            *string                     `json:"namespace,omitempty"`
		Nbconn               *int                        `json:"nbconn,omitempty"`
		Nice                 *int                        `json:"nice,omitempty"`
		NoAlpn               *bool                       `json:"no_alpn,omitempty"`
		NoCaNames            *bool                       `json:"no_ca_names,omitempty"`

		// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
		NoSslv3     *bool `json:"no_sslv3,omitempty"`
		NoStrictSni *bool `json:"no_strict_sni,omitempty"`

		// NoTlsTickets This field is deprecated in favor of tls_tickets, and will be removed in a future release
		NoTlsTickets *bool `json:"no_tls_tickets,omitempty"`

		// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
		NoTlsv10 *bool `json:"no_tlsv10,omitempty"`

		// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
		NoTlsv11 *bool `json:"no_tlsv11,omitempty"`

		// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
		NoTlsv12 *bool `json:"no_tlsv12,omitempty"`

		// NoTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
		NoTlsv13            *bool                                `json:"no_tlsv13,omitempty"`
		Npn                 *string                              `json:"npn,omitempty"`
		PreferClientCiphers *bool                                `json:"prefer_client_ciphers,omitempty"`
		Proto               *string                              `json:"proto,omitempty"`
		QuicCcAlgo          *GlobalBaseRuntimeApisQuicCcAlgo     `json:"quic-cc-algo,omitempty"`
		QuicForceRetry      *bool                                `json:"quic-force-retry,omitempty"`
		QuicSocket          *GlobalBaseRuntimeApisQuicSocket     `json:"quic-socket,omitempty"`
		QuicCcAlgoBurstSize *int                                 `json:"quic_cc_algo_burst_size"`
		QuicCcAlgoMaxWindow *int                                 `json:"quic_cc_algo_max_window"`
		SeverityOutput      *GlobalBaseRuntimeApisSeverityOutput `json:"severity_output,omitempty"`
		Sigalgs             *string                              `json:"sigalgs,omitempty"`
		Ssl                 *bool                                `json:"ssl,omitempty"`
		SslCafile           *string                              `json:"ssl_cafile,omitempty"`
		SslCertificate      *string                              `json:"ssl_certificate,omitempty"`
		SslMaxVer           *GlobalBaseRuntimeApisSslMaxVer      `json:"ssl_max_ver,omitempty"`
		SslMinVer           *GlobalBaseRuntimeApisSslMinVer      `json:"ssl_min_ver,omitempty"`
		Sslv3               *GlobalBaseRuntimeApisSslv3          `json:"sslv3,omitempty"`
		StrictSni           *bool                                `json:"strict_sni,omitempty"`
		TcpUserTimeout      *int                                 `json:"tcp_user_timeout"`
		Tfo                 *bool                                `json:"tfo,omitempty"`
		Thread              *string                              `json:"thread,omitempty"`
		TlsTicketKeys       *string                              `json:"tls_ticket_keys,omitempty"`
		TlsTickets          *GlobalBaseRuntimeApisTlsTickets     `json:"tls_tickets,omitempty"`
		Tlsv10              *GlobalBaseRuntimeApisTlsv10         `json:"tlsv10,omitempty"`
		Tlsv11              *GlobalBaseRuntimeApisTlsv11         `json:"tlsv11,omitempty"`
		Tlsv12              *GlobalBaseRuntimeApisTlsv12         `json:"tlsv12,omitempty"`
		Tlsv13              *GlobalBaseRuntimeApisTlsv13         `json:"tlsv13,omitempty"`
		Transparent         *bool                                `json:"transparent,omitempty"`
		Uid                 *string                              `json:"uid,omitempty"`
		User                *string                              `json:"user,omitempty"`
		V4v6                *bool                                `json:"v4v6,omitempty"`
		V6only              *bool                                `json:"v6only,omitempty"`
		Verify              *GlobalBaseRuntimeApisVerify         `json:"verify,omitempty"`
	} `json:"runtime_apis,omitempty"`
	SetDumpable *bool `json:"set_dumpable,omitempty"`
	SetVars     *[]struct {
		Expr string `json:"expr"`
		Name string `json:"name"`
	} `json:"set_var,omitempty"`
	SetVarFmts *[]struct {
		Format string `json:"format"`
		Name   string `json:"name"`
	} `json:"set_var_fmt,omitempty"`
	Setcap           *string     `json:"setcap,omitempty"`
	SslOptions       *SslOptions `json:"ssl_options,omitempty"`
	StatsFile        *string     `json:"stats_file,omitempty"`
	StatsMaxconn     *int        `json:"stats_maxconn"`
	StatsTimeout     *int        `json:"stats_timeout"`
	StrictLimits     *bool       `json:"strict_limits,omitempty"`
	ThreadGroupLines *[]struct {
		Group      string `json:"group"`
		NumOrRange string `json:"num_or_range"`
	} `json:"thread_group_lines,omitempty"`
	ThreadGroups            *int               `json:"thread_groups,omitempty"`
	TuneBufferOptions       *TuneBufferOptions `json:"tune_buffer_options,omitempty"`
	TuneLuaOptions          *TuneLuaOptions    `json:"tune_lua_options,omitempty"`
	TuneOptions             *TuneOptions       `json:"tune_options,omitempty"`
	TuneQuicOptions         *TuneQuicOptions   `json:"tune_quic_options,omitempty"`
	TuneSslOptions          *TuneSslOptions    `json:"tune_ssl_options,omitempty"`
	TuneVarsOptions         *TuneVarsOptions   `json:"tune_vars_options,omitempty"`
	TuneZlibOptions         *TuneZlibOptions   `json:"tune_zlib_options,omitempty"`
	Uid                     *int               `json:"uid,omitempty"`
	UlimitN                 *int               `json:"ulimit_n,omitempty"`
	User                    *string            `json:"user,omitempty"`
	WarnBlockedTrafficAfter *int               `json:"warn_blocked_traffic_after"`
	WurflOptions            *WurflOptions      `json:"wurfl_options,omitempty"`
}

// GlobalBaseCpuPolicy defines model for GlobalBase.CpuPolicy.
type GlobalBaseCpuPolicy string

// GlobalBaseCpuSetDirective defines model for GlobalBase.CpuSet.Directive.
type GlobalBaseCpuSetDirective string

// GlobalBaseDefaultPathType defines model for GlobalBase.DefaultPath.Type.
type GlobalBaseDefaultPathType string

// GlobalBaseHardenRejectPrivilegedPortsQuic defines model for GlobalBase.Harden.RejectPrivilegedPorts.Quic.
type GlobalBaseHardenRejectPrivilegedPortsQuic string

// GlobalBaseHardenRejectPrivilegedPortsTcp defines model for GlobalBase.Harden.RejectPrivilegedPorts.Tcp.
type GlobalBaseHardenRejectPrivilegedPortsTcp string

// GlobalBaseLogSendHostnameEnabled defines model for GlobalBase.LogSendHostname.Enabled.
type GlobalBaseLogSendHostnameEnabled string

// GlobalBaseNumaCpuMapping defines model for GlobalBase.NumaCpuMapping.
type GlobalBaseNumaCpuMapping string

// GlobalBaseRuntimeApisForceStrictSni defines model for GlobalBase.RuntimeApis.ForceStrictSni.
type GlobalBaseRuntimeApisForceStrictSni string

// GlobalBaseRuntimeApisLevel defines model for GlobalBase.RuntimeApis.Level.
type GlobalBaseRuntimeApisLevel string

// GlobalBaseRuntimeApisQuicCcAlgo defines model for GlobalBase.RuntimeApis.QuicCcAlgo.
type GlobalBaseRuntimeApisQuicCcAlgo string

// GlobalBaseRuntimeApisQuicSocket defines model for GlobalBase.RuntimeApis.QuicSocket.
type GlobalBaseRuntimeApisQuicSocket string

// GlobalBaseRuntimeApisSeverityOutput defines model for GlobalBase.RuntimeApis.SeverityOutput.
type GlobalBaseRuntimeApisSeverityOutput string

// GlobalBaseRuntimeApisSslMaxVer defines model for GlobalBase.RuntimeApis.SslMaxVer.
type GlobalBaseRuntimeApisSslMaxVer string

// GlobalBaseRuntimeApisSslMinVer defines model for GlobalBase.RuntimeApis.SslMinVer.
type GlobalBaseRuntimeApisSslMinVer string

// GlobalBaseRuntimeApisSslv3 defines model for GlobalBase.RuntimeApis.Sslv3.
type GlobalBaseRuntimeApisSslv3 string

// GlobalBaseRuntimeApisTlsTickets defines model for GlobalBase.RuntimeApis.TlsTickets.
type GlobalBaseRuntimeApisTlsTickets string

// GlobalBaseRuntimeApisTlsv10 defines model for GlobalBase.RuntimeApis.Tlsv10.
type GlobalBaseRuntimeApisTlsv10 string

// GlobalBaseRuntimeApisTlsv11 defines model for GlobalBase.RuntimeApis.Tlsv11.
type GlobalBaseRuntimeApisTlsv11 string

// GlobalBaseRuntimeApisTlsv12 defines model for GlobalBase.RuntimeApis.Tlsv12.
type GlobalBaseRuntimeApisTlsv12 string

// GlobalBaseRuntimeApisTlsv13 defines model for GlobalBase.RuntimeApis.Tlsv13.
type GlobalBaseRuntimeApisTlsv13 string

// GlobalBaseRuntimeApisVerify defines model for GlobalBase.RuntimeApis.Verify.
type GlobalBaseRuntimeApisVerify string

// Group HAProxy userlist group
type Group struct {
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
	Users    *string                            `json:"users,omitempty"`
}

// Groups HAProxy userlist groups array
type Groups = []Group

// HashType defines model for hash_type.
type HashType struct {
	Function *HashTypeFunction `json:"function,omitempty"`
	Method   *HashTypeMethod   `json:"method,omitempty"`
	Modifier *HashTypeModifier `json:"modifier,omitempty"`
}

// HashTypeFunction defines model for HashType.Function.
type HashTypeFunction string

// HashTypeMethod defines model for HashType.Method.
type HashTypeMethod string

// HashTypeModifier defines model for HashType.Modifier.
type HashTypeModifier string

// Health defines model for health.
type Health struct {
	Haproxy *HealthHaproxy `json:"haproxy,omitempty"`
}

// HealthHaproxy defines model for Health.Haproxy.
type HealthHaproxy string

// HttpAfterResponseRule HAProxy HTTP after response rule configuration (corresponds to http-after-response directives)
type HttpAfterResponseRule struct {
	AclFile       *string                            `json:"acl_file,omitempty"`
	AclKeyfmt     *string                            `json:"acl_keyfmt,omitempty"`
	CaptureId     *int                               `json:"capture_id"`
	CaptureLen    *int                               `json:"capture_len,omitempty"`
	CaptureSample *string                            `json:"capture_sample,omitempty"`
	Cond          *HttpAfterResponseRuleCond         `json:"cond,omitempty"`
	CondTest      *string                            `json:"cond_test,omitempty"`
	HdrFormat     *string                            `json:"hdr_format,omitempty"`
	HdrMatch      *string                            `json:"hdr_match,omitempty"`
	HdrMethod     *string                            `json:"hdr_method,omitempty"`
	HdrName       *string                            `json:"hdr_name,omitempty"`
	LogLevel      *HttpAfterResponseRuleLogLevel     `json:"log_level,omitempty"`
	MapFile       *string                            `json:"map_file,omitempty"`
	MapKeyfmt     *string                            `json:"map_keyfmt,omitempty"`
	MapValuefmt   *string                            `json:"map_valuefmt,omitempty"`
	Metadata      *map[string]map[string]interface{} `json:"metadata,omitempty"`
	ScExpr        *string                            `json:"sc_expr,omitempty"`
	ScId          *int                               `json:"sc_id,omitempty"`
	ScIdx         *int                               `json:"sc_idx,omitempty"`
	ScInt         *int                               `json:"sc_int"`
	Status        *int                               `json:"status,omitempty"`
	StatusReason  *string                            `json:"status_reason,omitempty"`
	StrictMode    *HttpAfterResponseRuleStrictMode   `json:"strict_mode,omitempty"`
	Type          HttpAfterResponseRuleType          `json:"type"`
	VarExpr       *string                            `json:"var_expr,omitempty"`
	VarFormat     *string                            `json:"var_format,omitempty"`
	VarName       *string                            `json:"var_name,omitempty"`
	VarScope      *string                            `json:"var_scope,omitempty"`
}

// HttpAfterResponseRuleCond defines model for HttpAfterResponseRule.Cond.
type HttpAfterResponseRuleCond string

// HttpAfterResponseRuleLogLevel defines model for HttpAfterResponseRule.LogLevel.
type HttpAfterResponseRuleLogLevel string

// HttpAfterResponseRuleStrictMode defines model for HttpAfterResponseRule.StrictMode.
type HttpAfterResponseRuleStrictMode string

// HttpAfterResponseRuleType defines model for HttpAfterResponseRule.Type.
type HttpAfterResponseRuleType string

// HttpAfterResponseRules HAProxy HTTP after response rules array (corresponds to http-after-response directives)
type HttpAfterResponseRules = []HttpAfterResponseRule

// HttpCheck defines model for http_check.
type HttpCheck struct {
	Addr            *string                            `json:"addr,omitempty"`
	Alpn            *string                            `json:"alpn,omitempty"`
	Body            *string                            `json:"body,omitempty"`
	BodyLogFormat   *string                            `json:"body_log_format,omitempty"`
	CheckComment    *string                            `json:"check_comment,omitempty"`
	Default         *bool                              `json:"default,omitempty"`
	ErrorStatus     *HttpCheckErrorStatus              `json:"error_status,omitempty"`
	ExclamationMark *bool                              `json:"exclamation_mark,omitempty"`
	CheckHeaders    *[]ReturnHeader                    `json:"headers,omitempty"`
	Linger          *bool                              `json:"linger,omitempty"`
	Match           *HttpCheckMatch                    `json:"match,omitempty"`
	Metadata        *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Method          *HttpCheckMethod                   `json:"method,omitempty"`
	MinRecv         *int                               `json:"min_recv"`
	OkStatus        *HttpCheckOkStatus                 `json:"ok_status,omitempty"`
	OnError         *string                            `json:"on_error,omitempty"`
	OnSuccess       *string                            `json:"on_success,omitempty"`
	Pattern         *string                            `json:"pattern,omitempty"`
	Port            *int                               `json:"port"`
	PortString      *string                            `json:"port_string,omitempty"`
	Proto           *string                            `json:"proto,omitempty"`
	SendProxy       *bool                              `json:"send_proxy,omitempty"`
	Sni             *string                            `json:"sni,omitempty"`
	Ssl             *bool                              `json:"ssl,omitempty"`
	StatusCode      *string                            `json:"status-code,omitempty"`
	ToutStatus      *HttpCheckToutStatus               `json:"tout_status,omitempty"`
	Type            HttpCheckType                      `json:"type"`
	Uri             *string                            `json:"uri,omitempty"`
	UriLogFormat    *string                            `json:"uri_log_format,omitempty"`
	VarExpr         *string                            `json:"var_expr,omitempty"`
	VarFormat       *string                            `json:"var_format,omitempty"`
	VarName         *string                            `json:"var_name,omitempty"`
	VarScope        *string                            `json:"var_scope,omitempty"`
	Version         *string                            `json:"version,omitempty"`
	ViaSocks4       *bool                              `json:"via_socks4,omitempty"`
}

// HttpCheckErrorStatus defines model for HttpCheck.ErrorStatus.
type HttpCheckErrorStatus string

// HttpCheckMatch defines model for HttpCheck.Match.
type HttpCheckMatch string

// HttpCheckMethod defines model for HttpCheck.Method.
type HttpCheckMethod string

// HttpCheckOkStatus defines model for HttpCheck.OkStatus.
type HttpCheckOkStatus string

// HttpCheckToutStatus defines model for HttpCheck.ToutStatus.
type HttpCheckToutStatus string

// HttpCheckType defines model for HttpCheck.Type.
type HttpCheckType string

// HttpChecks defines model for http_checks.
type HttpChecks = []HttpCheck

// HttpClientOptions defines model for http_client_options.
type HttpClientOptions struct {
	ResolversDisabled *HttpClientOptionsResolversDisabled `json:"resolvers_disabled,omitempty"`
	ResolversId       *string                             `json:"resolvers_id,omitempty"`
	ResolversPrefer   *HttpClientOptionsResolversPrefer   `json:"resolvers_prefer,omitempty"`
	Retries           *int                                `json:"retries,omitempty"`
	SslCaFile         *string                             `json:"ssl_ca_file,omitempty"`
	SslVerify         *HttpClientOptionsSslVerify         `json:"ssl_verify"`
	TimeoutConnect    *int                                `json:"timeout_connect"`
}

// HttpClientOptionsResolversDisabled defines model for HttpClientOptions.ResolversDisabled.
type HttpClientOptionsResolversDisabled string

// HttpClientOptionsResolversPrefer defines model for HttpClientOptions.ResolversPrefer.
type HttpClientOptionsResolversPrefer string

// HttpClientOptionsSslVerify defines model for HttpClientOptions.SslVerify.
type HttpClientOptionsSslVerify string

// HTTPCodes defines model for http_codes.
type HTTPCodes struct {
	Value string `json:"value"`
}

// HttpErrorRule HAProxy HTTP error rule configuration (corresponds to http-error directives)
type HttpErrorRule struct {
	Metadata            *map[string]map[string]interface{} `json:"metadata,omitempty"`
	ReturnContent       *string                            `json:"return_content,omitempty"`
	ReturnContentFormat *HttpErrorRuleReturnContentFormat  `json:"return_content_format,omitempty"`
	ReturnContentType   *string                            `json:"return_content_type"`
	ReturnHeaders       *[]ReturnHeader                    `json:"return_hdrs,omitempty"`
	Status              HttpErrorRuleStatus                `json:"status"`
	Type                HttpErrorRuleType                  `json:"type"`
}

// HttpErrorRuleReturnContentFormat defines model for HttpErrorRule.ReturnContentFormat.
type HttpErrorRuleReturnContentFormat string

// HttpErrorRuleStatus defines model for HttpErrorRule.Status.
type HttpErrorRuleStatus int

// HttpErrorRuleType defines model for HttpErrorRule.Type.
type HttpErrorRuleType string

// HttpErrorRules HAProxy HTTP error rules array (corresponds to http-error directives)
type HttpErrorRules = []HttpErrorRule

// HttpErrorsSection A globally declared group of HTTP errors
type HttpErrorsSection struct {
	ErrorFiles []Errorfile                        `json:"error_files"`
	Metadata   *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name       string                             `json:"name"`
}

// HttpErrorsSections An array of HAProxy http-error sections
type HttpErrorsSections = []HttpErrorsSection

// HttpRequestRule HAProxy HTTP request rule configuration (corresponds to http-request directives)
type HttpRequestRule struct {
	AclFile              *string                             `json:"acl_file,omitempty"`
	AclKeyfmt            *string                             `json:"acl_keyfmt,omitempty"`
	AuthRealm            *string                             `json:"auth_realm,omitempty"`
	BandwidthLimitLimit  *string                             `json:"bandwidth_limit_limit,omitempty"`
	BandwidthLimitName   *string                             `json:"bandwidth_limit_name,omitempty"`
	BandwidthLimitPeriod *string                             `json:"bandwidth_limit_period,omitempty"`
	CacheName            *string                             `json:"cache_name,omitempty"`
	CaptureId            *int                                `json:"capture_id"`
	CaptureLen           *int                                `json:"capture_len,omitempty"`
	CaptureSample        *string                             `json:"capture_sample,omitempty"`
	Cond                 *HttpRequestRuleCond                `json:"cond,omitempty"`
	CondTest             *string                             `json:"cond_test,omitempty"`
	DenyStatus           *int                                `json:"deny_status"`
	Expr                 *string                             `json:"expr,omitempty"`
	HdrFormat            *string                             `json:"hdr_format,omitempty"`
	HdrMatch             *string                             `json:"hdr_match,omitempty"`
	HdrMethod            *string                             `json:"hdr_method,omitempty"`
	HdrName              *string                             `json:"hdr_name,omitempty"`
	HintFormat           *string                             `json:"hint_format,omitempty"`
	HintName             *string                             `json:"hint_name,omitempty"`
	LogLevel             *HttpRequestRuleLogLevel            `json:"log_level,omitempty"`
	LuaAction            *string                             `json:"lua_action,omitempty"`
	LuaParams            *string                             `json:"lua_params,omitempty"`
	MapFile              *string                             `json:"map_file,omitempty"`
	MapKeyfmt            *string                             `json:"map_keyfmt,omitempty"`
	MapValuefmt          *string                             `json:"map_valuefmt,omitempty"`
	MarkValue            *string                             `json:"mark_value,omitempty"`
	Metadata             *map[string]map[string]interface{}  `json:"metadata,omitempty"`
	MethodFmt            *string                             `json:"method_fmt,omitempty"`
	NiceValue            *int                                `json:"nice_value,omitempty"`
	Normalizer           *HttpRequestRuleNormalizer          `json:"normalizer,omitempty"`
	NormalizerFull       *bool                               `json:"normalizer_full,omitempty"`
	NormalizerStrict     *bool                               `json:"normalizer_strict,omitempty"`
	PathFmt              *string                             `json:"path_fmt,omitempty"`
	PathMatch            *string                             `json:"path_match,omitempty"`
	Protocol             *HttpRequestRuleProtocol            `json:"protocol,omitempty"`
	QueryFmt             *string                             `json:"query-fmt,omitempty"`
	RedirCode            *HttpRequestRuleRedirCode           `json:"redir_code"`
	RedirOption          *string                             `json:"redir_option,omitempty"`
	RedirType            *HttpRequestRuleRedirType           `json:"redir_type,omitempty"`
	RedirValue           *string                             `json:"redir_value,omitempty"`
	Resolvers            *string                             `json:"resolvers,omitempty"`
	ReturnContent        *string                             `json:"return_content,omitempty"`
	ReturnContentFormat  *HttpRequestRuleReturnContentFormat `json:"return_content_format,omitempty"`
	ReturnContentType    *string                             `json:"return_content_type"`
	ReturnHeaders        *[]ReturnHeader                     `json:"return_hdrs,omitempty"`
	ReturnStatusCode     *int                                `json:"return_status_code"`
	RstTtl               *int                                `json:"rst_ttl,omitempty"`
	ScExpr               *string                             `json:"sc_expr,omitempty"`
	ScId                 *int                                `json:"sc_id,omitempty"`
	ScIdx                *int                                `json:"sc_idx,omitempty"`
	ScInt                *int                                `json:"sc_int"`
	ServiceName          *string                             `json:"service_name,omitempty"`
	SpoeEngine           *string                             `json:"spoe_engine,omitempty"`
	SpoeGroup            *string                             `json:"spoe_group,omitempty"`
	StrictMode           *HttpRequestRuleStrictMode          `json:"strict_mode,omitempty"`
	Timeout              *string                             `json:"timeout,omitempty"`
	TimeoutType          *HttpRequestRuleTimeoutType         `json:"timeout_type,omitempty"`
	TosValue             *string                             `json:"tos_value,omitempty"`
	TrackScKey           *string                             `json:"track_sc_key,omitempty"`
	TrackScStickCounter  *int                                `json:"track_sc_stick_counter"`
	TrackScTable         *string                             `json:"track_sc_table,omitempty"`
	Type                 HttpRequestRuleType                 `json:"type"`
	UriFmt               *string                             `json:"uri-fmt,omitempty"`
	UriMatch             *string                             `json:"uri-match,omitempty"`
	VarExpr              *string                             `json:"var_expr,omitempty"`
	VarFormat            *string                             `json:"var_format,omitempty"`
	VarName              *string                             `json:"var_name,omitempty"`
	VarScope             *string                             `json:"var_scope,omitempty"`
	WaitAtLeast          *int                                `json:"wait_at_least"`
	WaitTime             *int                                `json:"wait_time"`
}

// HttpRequestRuleCond defines model for HttpRequestRule.Cond.
type HttpRequestRuleCond string

// HttpRequestRuleLogLevel defines model for HttpRequestRule.LogLevel.
type HttpRequestRuleLogLevel string

// HttpRequestRuleNormalizer defines model for HttpRequestRule.Normalizer.
type HttpRequestRuleNormalizer string

// HttpRequestRuleProtocol defines model for HttpRequestRule.Protocol.
type HttpRequestRuleProtocol string

// HttpRequestRuleRedirCode defines model for HttpRequestRule.RedirCode.
type HttpRequestRuleRedirCode int

// HttpRequestRuleRedirType defines model for HttpRequestRule.RedirType.
type HttpRequestRuleRedirType string

// HttpRequestRuleReturnContentFormat defines model for HttpRequestRule.ReturnContentFormat.
type HttpRequestRuleReturnContentFormat string

// HttpRequestRuleStrictMode defines model for HttpRequestRule.StrictMode.
type HttpRequestRuleStrictMode string

// HttpRequestRuleTimeoutType defines model for HttpRequestRule.TimeoutType.
type HttpRequestRuleTimeoutType string

// HttpRequestRuleType defines model for HttpRequestRule.Type.
type HttpRequestRuleType string

// HttpRequestRules HAProxy HTTP request rules array (corresponds to http-request directives)
type HttpRequestRules = []HttpRequestRule

// HttpResponseRule HAProxy HTTP response rule configuration (corresponds to http-response directives)
type HttpResponseRule struct {
	AclFile              *string                              `json:"acl_file,omitempty"`
	AclKeyfmt            *string                              `json:"acl_keyfmt,omitempty"`
	BandwidthLimitLimit  *string                              `json:"bandwidth_limit_limit,omitempty"`
	BandwidthLimitName   *string                              `json:"bandwidth_limit_name,omitempty"`
	BandwidthLimitPeriod *string                              `json:"bandwidth_limit_period,omitempty"`
	CacheName            *string                              `json:"cache_name,omitempty"`
	CaptureId            *int                                 `json:"capture_id"`
	CaptureSample        *string                              `json:"capture_sample,omitempty"`
	Cond                 *HttpResponseRuleCond                `json:"cond,omitempty"`
	CondTest             *string                              `json:"cond_test,omitempty"`
	DenyStatus           *int                                 `json:"deny_status"`
	Expr                 *string                              `json:"expr,omitempty"`
	HdrFormat            *string                              `json:"hdr_format,omitempty"`
	HdrMatch             *string                              `json:"hdr_match,omitempty"`
	HdrMethod            *string                              `json:"hdr_method,omitempty"`
	HdrName              *string                              `json:"hdr_name,omitempty"`
	LogLevel             *HttpResponseRuleLogLevel            `json:"log_level,omitempty"`
	LuaAction            *string                              `json:"lua_action,omitempty"`
	LuaParams            *string                              `json:"lua_params,omitempty"`
	MapFile              *string                              `json:"map_file,omitempty"`
	MapKeyfmt            *string                              `json:"map_keyfmt,omitempty"`
	MapValuefmt          *string                              `json:"map_valuefmt,omitempty"`
	MarkValue            *string                              `json:"mark_value,omitempty"`
	Metadata             *map[string]map[string]interface{}   `json:"metadata,omitempty"`
	NiceValue            *int                                 `json:"nice_value,omitempty"`
	RedirCode            *HttpResponseRuleRedirCode           `json:"redir_code"`
	RedirOption          *string                              `json:"redir_option,omitempty"`
	RedirType            *HttpResponseRuleRedirType           `json:"redir_type,omitempty"`
	RedirValue           *string                              `json:"redir_value,omitempty"`
	ReturnContent        *string                              `json:"return_content,omitempty"`
	ReturnContentFormat  *HttpResponseRuleReturnContentFormat `json:"return_content_format,omitempty"`
	ReturnContentType    *string                              `json:"return_content_type"`
	ReturnHeaders        *[]ReturnHeader                      `json:"return_hdrs,omitempty"`
	ReturnStatusCode     *int                                 `json:"return_status_code"`
	RstTtl               *int                                 `json:"rst_ttl,omitempty"`
	ScExpr               *string                              `json:"sc_expr,omitempty"`
	ScId                 *int                                 `json:"sc_id,omitempty"`
	ScIdx                *int                                 `json:"sc_idx,omitempty"`
	ScInt                *int                                 `json:"sc_int"`
	SpoeEngine           *string                              `json:"spoe_engine,omitempty"`
	SpoeGroup            *string                              `json:"spoe_group,omitempty"`
	Status               *int                                 `json:"status,omitempty"`
	StatusReason         *string                              `json:"status_reason,omitempty"`
	StrictMode           *HttpResponseRuleStrictMode          `json:"strict_mode,omitempty"`
	Timeout              *string                              `json:"timeout,omitempty"`
	TimeoutType          *HttpResponseRuleTimeoutType         `json:"timeout_type,omitempty"`
	TosValue             *string                              `json:"tos_value,omitempty"`
	TrackScKey           *string                              `json:"track_sc_key,omitempty"`
	TrackScStickCounter  *int                                 `json:"track_sc_stick_counter"`
	TrackScTable         *string                              `json:"track_sc_table,omitempty"`
	Type                 HttpResponseRuleType                 `json:"type"`
	VarExpr              *string                              `json:"var_expr,omitempty"`
	VarFormat            *string                              `json:"var_format,omitempty"`
	VarName              *string                              `json:"var_name,omitempty"`
	VarScope             *string                              `json:"var_scope,omitempty"`
	WaitAtLeast          *int                                 `json:"wait_at_least"`
	WaitTime             *int                                 `json:"wait_time"`
}

// HttpResponseRuleCond defines model for HttpResponseRule.Cond.
type HttpResponseRuleCond string

// HttpResponseRuleLogLevel defines model for HttpResponseRule.LogLevel.
type HttpResponseRuleLogLevel string

// HttpResponseRuleRedirCode defines model for HttpResponseRule.RedirCode.
type HttpResponseRuleRedirCode int

// HttpResponseRuleRedirType defines model for HttpResponseRule.RedirType.
type HttpResponseRuleRedirType string

// HttpResponseRuleReturnContentFormat defines model for HttpResponseRule.ReturnContentFormat.
type HttpResponseRuleReturnContentFormat string

// HttpResponseRuleStrictMode defines model for HttpResponseRule.StrictMode.
type HttpResponseRuleStrictMode string

// HttpResponseRuleTimeoutType defines model for HttpResponseRule.TimeoutType.
type HttpResponseRuleTimeoutType string

// HttpResponseRuleType defines model for HttpResponseRule.Type.
type HttpResponseRuleType string

// HttpResponseRules HAProxy HTTP response rules array (corresponds to http-response directives)
type HttpResponseRules = []HttpResponseRule

// HttpchkParams defines model for httpchk_params.
type HttpchkParams struct {
	Host    *string              `json:"host,omitempty"`
	Method  *HttpchkParamsMethod `json:"method,omitempty"`
	Uri     *string              `json:"uri,omitempty"`
	Version *string              `json:"version,omitempty"`
}

// HttpchkParamsMethod defines model for HttpchkParams.Method.
type HttpchkParamsMethod string

// Info General API, OS and hardware information
type Info struct {
	Api *struct {
		// BuildDate HAProxy Dataplane API build date
		BuildDate *time.Time `json:"build_date,omitempty"`

		// Version HAProxy Dataplane API version string
		Version *string `json:"version,omitempty"`
	} `json:"api,omitempty"`
	System *struct {
		CpuInfo *struct {
			Model *string `json:"model,omitempty"`

			// NumCpus Number of logical CPUs
			NumCpus *int `json:"num_cpus,omitempty"`
		} `json:"cpu_info,omitempty"`

		// Hostname Hostname where the HAProxy is running
		Hostname *string `json:"hostname,omitempty"`
		MemInfo  *struct {
			DataplaneapiMemory *int `json:"dataplaneapi_memory,omitempty"`
			FreeMemory         *int `json:"free_memory,omitempty"`
			TotalMemory        *int `json:"total_memory,omitempty"`
		} `json:"mem_info,omitempty"`

		// OsString OS string
		OsString *string `json:"os_string,omitempty"`

		// Time Current time in milliseconds since Epoch.
		Time *int `json:"time,omitempty"`

		// Uptime System uptime
		Uptime *int `json:"uptime"`
	} `json:"system,omitempty"`
}

// LogForward defines model for log_forward.
type LogForward struct {
	AssumeRfc6587Ntf *bool                 `json:"assume-rfc6587-ntf,omitempty"`
	Backlog          *int                  `json:"backlog"`
	Binds            *map[string]Bind      `json:"binds,omitempty"`
	DgramBinds       *map[string]DgramBind `json:"dgram_binds,omitempty"`
	DontParseLog     *bool                 `json:"dont-parse-log,omitempty"`

	// LogTargetList HAProxy log target array (corresponds to log directives)
	LogTargetList *LogTargets                        `json:"log_target_list,omitempty"`
	Maxconn       *int                               `json:"maxconn"`
	Metadata      *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name          string                             `json:"name"`
	TimeoutClient *int                               `json:"timeout_client"`
}

// LogForwardBase HAProxy log forward configuration
type LogForwardBase struct {
	AssumeRfc6587Ntf *bool                              `json:"assume-rfc6587-ntf,omitempty"`
	Backlog          *int                               `json:"backlog"`
	DontParseLog     *bool                              `json:"dont-parse-log,omitempty"`
	Maxconn          *int                               `json:"maxconn"`
	Metadata         *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name             string                             `json:"name"`
	TimeoutClient    *int                               `json:"timeout_client"`
}

// LogForwards HAProxy log forwards array
type LogForwards = []LogForward

// LogProfile Defines a logging profile for one or more steps.
type LogProfile struct {
	// LogTag Override syslog log tag set by other "log-tag" directives.
	LogTag   *string                            `json:"log_tag,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// Name Name of the logging profile.
	Name string `json:"name"`

	// Steps List of steps where to override the logging.
	Steps *LogProfileSteps `json:"steps,omitempty"`
}

// LogProfileStep Defines what to log for a given step.
type LogProfileStep struct {
	// Drop If enabled, no log shall be emitted for the given step.
	Drop *LogProfileStepDrop `json:"drop,omitempty"`

	// Format Override "log-format" or "error-log-format" strings depending on the step.
	Format   *string                            `json:"format,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// Sd Override the "log-format-sd" string.
	Sd *string `json:"sd,omitempty"`

	// Step Logging step name.
	Step LogProfileStepStep `json:"step"`
}

// LogProfileStepDrop If enabled, no log shall be emitted for the given step.
type LogProfileStepDrop string

// LogProfileStepStep Logging step name.
type LogProfileStepStep string

// LogProfileSteps List of steps where to override the logging.
type LogProfileSteps = []LogProfileStep

// LogProfiles List of Logging Profiles
type LogProfiles = []LogProfile

// LogTarget Per-instance logging of events and traffic.
type LogTarget struct {
	Address     *string                            `json:"address,omitempty"`
	Facility    *LogTargetFacility                 `json:"facility,omitempty"`
	Format      *LogTargetFormat                   `json:"format,omitempty"`
	Global      *bool                              `json:"global,omitempty"`
	Length      *int                               `json:"length,omitempty"`
	Level       *LogTargetLevel                    `json:"level,omitempty"`
	Metadata    *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Minlevel    *LogTargetMinlevel                 `json:"minlevel,omitempty"`
	Nolog       *bool                              `json:"nolog,omitempty"`
	Profile     *string                            `json:"profile,omitempty"`
	SampleRange *string                            `json:"sample_range,omitempty"`
	SampleSize  *int                               `json:"sample_size,omitempty"`
}

// LogTargetFacility defines model for LogTarget.Facility.
type LogTargetFacility string

// LogTargetFormat defines model for LogTarget.Format.
type LogTargetFormat string

// LogTargetLevel defines model for LogTarget.Level.
type LogTargetLevel string

// LogTargetMinlevel defines model for LogTarget.Minlevel.
type LogTargetMinlevel string

// LogTargets HAProxy log target array (corresponds to log directives)
type LogTargets = []LogTarget

// LuaOptions defines model for lua_options.
type LuaOptions struct {
	LoadPerThread *string `json:"load_per_thread,omitempty"`
	Loads         *[]struct {
		File string `json:"file"`
	} `json:"loads,omitempty"`
	PrependPath *[]struct {
		Path string                     `json:"path"`
		Type *LuaOptionsPrependPathType `json:"type,omitempty"`
	} `json:"prepend_path,omitempty"`
}

// LuaOptionsPrependPathType defines model for LuaOptions.PrependPath.Type.
type LuaOptionsPrependPathType string

// MailerEntries HAProxy mailer entries
type MailerEntries = []MailerEntry

// MailerEntry Mailer entry of a Mailers section
type MailerEntry struct {
	Address  string                             `json:"address"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
	Port     int                                `json:"port"`
}

// MailersSection defines model for mailers_section.
type MailersSection struct {
	MailerEntries *map[string]MailerEntry            `json:"mailer_entries,omitempty"`
	Metadata      *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name          string                             `json:"name"`
	Timeout       *int                               `json:"timeout"`
}

// MailersSectionBase A list of SMTP servers used by HAProxy to send emails.
type MailersSectionBase struct {
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
	Timeout  *int                               `json:"timeout"`
}

// MailersSections HAProxy mailers_section array
type MailersSections = []MailersSection

// Map Map File
type Map struct {
	Description *string `json:"description,omitempty"`
	File        *string `json:"file,omitempty"`
	Id          *string `json:"id,omitempty"`

	// Size File size in bytes.
	Size        *int    `json:"size"`
	StorageName *string `json:"storage_name,omitempty"`
}

// MapEntries Entries of one runtime map
type MapEntries = []MapEntry

// MapEntry One Map Entry
type MapEntry struct {
	Id    *string `json:"id,omitempty"`
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Maps Array of runtime map files
type Maps = []Map

// MonitorFail defines model for monitor_fail.
type MonitorFail struct {
	Cond     MonitorFailCond `json:"cond"`
	CondTest string          `json:"cond_test"`
}

// MonitorFailCond defines model for MonitorFail.Cond.
type MonitorFailCond string

// MonitorUri defines model for monitor_uri.
type MonitorUri = string

// MysqlCheckParams defines model for mysql_check_params.
type MysqlCheckParams struct {
	ClientVersion *MysqlCheckParamsClientVersion `json:"client_version,omitempty"`
	Username      *string                        `json:"username,omitempty"`
}

// MysqlCheckParamsClientVersion defines model for MysqlCheckParams.ClientVersion.
type MysqlCheckParamsClientVersion string

// Nameserver Nameserver used in Runtime DNS configuration
type Nameserver struct {
	Address  string                             `json:"address"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
	Port     *int                               `json:"port"`
}

// Nameservers Nameservers array
type Nameservers = []Nameserver

// NativeStat Current stats for one object.
type NativeStat struct {
	BackendName *string          `json:"backend_name,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Stats       *NativeStatStats `json:"stats,omitempty"`
	Type        *NativeStatType  `json:"type,omitempty"`
}

// NativeStatType defines model for NativeStat.Type.
type NativeStatType string

// NativeStatStats defines model for native_stat_stats.
type NativeStatStats struct {
	Act           *int                        `json:"act"`
	Addr          *string                     `json:"addr,omitempty"`
	AgentCode     *int                        `json:"agent_code"`
	AgentDesc     *string                     `json:"agent_desc,omitempty"`
	AgentDuration *int                        `json:"agent_duration"`
	AgentFall     *int                        `json:"agent_fall"`
	AgentHealth   *int                        `json:"agent_health"`
	AgentRise     *int                        `json:"agent_rise"`
	AgentStatus   *NativeStatStatsAgentStatus `json:"agent_status,omitempty"`
	Algo          *string                     `json:"algo,omitempty"`
	Bck           *int                        `json:"bck"`
	Bin           *int                        `json:"bin"`
	Bout          *int                        `json:"bout"`
	CheckCode     *int                        `json:"check_code"`
	CheckDesc     *string                     `json:"check_desc,omitempty"`
	CheckDuration *int                        `json:"check_duration"`
	CheckFall     *int                        `json:"check_fall"`
	CheckHealth   *int                        `json:"check_health"`
	CheckRise     *int                        `json:"check_rise"`
	CheckStatus   *NativeStatStatsCheckStatus `json:"check_status,omitempty"`
	Chkdown       *int                        `json:"chkdown"`
	Chkfail       *int                        `json:"chkfail"`
	CliAbrt       *int                        `json:"cli_abrt"`
	CompByp       *int                        `json:"comp_byp"`
	CompIn        *int                        `json:"comp_in"`
	CompOut       *int                        `json:"comp_out"`
	CompRsp       *int                        `json:"comp_rsp"`
	ConnRate      *int                        `json:"conn_rate"`
	ConnRateMax   *int                        `json:"conn_rate_max"`
	ConnTot       *int                        `json:"conn_tot"`
	Cookie        *string                     `json:"cookie,omitempty"`
	Ctime         *int                        `json:"ctime"`
	Dcon          *int                        `json:"dcon"`
	Downtime      *int                        `json:"downtime"`
	Dreq          *int                        `json:"dreq"`
	Dresp         *int                        `json:"dresp"`
	Dses          *int                        `json:"dses"`
	Econ          *int                        `json:"econ"`
	Ereq          *int                        `json:"ereq"`
	Eresp         *int                        `json:"eresp"`
	Hanafail      *string                     `json:"hanafail,omitempty"`
	Hrsp1xx       *int                        `json:"hrsp_1xx"`
	Hrsp2xx       *int                        `json:"hrsp_2xx"`
	Hrsp3xx       *int                        `json:"hrsp_3xx"`
	Hrsp4xx       *int                        `json:"hrsp_4xx"`
	Hrsp5xx       *int                        `json:"hrsp_5xx"`
	HrspOther     *int                        `json:"hrsp_other"`
	Iid           *int                        `json:"iid"`
	Intercepted   *int                        `json:"intercepted"`
	LastAgt       *string                     `json:"last_agt"`
	LastChk       *string                     `json:"last_chk"`
	Lastchg       *int                        `json:"lastchg"`
	Lastsess      *int                        `json:"lastsess"`
	Lbtot         *int                        `json:"lbtot"`
	Mode          *NativeStatStatsMode        `json:"mode,omitempty"`
	Pid           *int                        `json:"pid"`
	Qcur          *int                        `json:"qcur"`
	Qlimit        *int                        `json:"qlimit"`
	Qmax          *int                        `json:"qmax"`
	Qtime         *int                        `json:"qtime"`
	Rate          *int                        `json:"rate"`
	RateLim       *int                        `json:"rate_lim"`
	RateMax       *int                        `json:"rate_max"`
	ReqRate       *int                        `json:"req_rate"`
	ReqRateMax    *int                        `json:"req_rate_max"`
	ReqTot        *int                        `json:"req_tot"`
	Rtime         *int                        `json:"rtime"`
	Scur          *int                        `json:"scur"`
	Sid           *int                        `json:"sid"`
	Slim          *int                        `json:"slim"`
	Smax          *int                        `json:"smax"`
	SrvAbrt       *int                        `json:"srv_abrt"`
	Status        *NativeStatStatsStatus      `json:"status,omitempty"`
	Stot          *int                        `json:"stot"`
	Throttle      *int                        `json:"throttle"`
	Tracked       *string                     `json:"tracked,omitempty"`
	Ttime         *int                        `json:"ttime"`
	Weight        *int                        `json:"weight"`
	Wredis        *int                        `json:"wredis"`
	Wretr         *int                        `json:"wretr"`
}

// NativeStatStatsAgentStatus defines model for NativeStatStats.AgentStatus.
type NativeStatStatsAgentStatus string

// NativeStatStatsCheckStatus defines model for NativeStatStats.CheckStatus.
type NativeStatStatsCheckStatus string

// NativeStatStatsMode defines model for NativeStatStats.Mode.
type NativeStatStatsMode string

// NativeStatStatsStatus defines model for NativeStatStats.Status.
type NativeStatStatsStatus string

// NativeStats HAProxy stats array
type NativeStats struct {
	Error      *string       `json:"error,omitempty"`
	RuntimeAPI *string       `json:"runtimeAPI,omitempty"`
	Stats      *[]NativeStat `json:"stats,omitempty"`
}

// OcspUpdateOptions defines model for ocsp_update_options.
type OcspUpdateOptions struct {
	Disable   *bool `json:"disable"`
	Httpproxy *struct {
		Address *string `json:"address,omitempty"`
		Port    *int    `json:"port"`
	} `json:"httpproxy,omitempty"`

	// Maxdelay Sets the maximum interval between two automatic updates of the same OCSP response.This time is expressed in seconds
	Maxdelay *int `json:"maxdelay"`

	// Mindelay Sets the minimum interval between two automatic updates of the same OCSP response. This time is expressed in seconds
	Mindelay *int                   `json:"mindelay"`
	Mode     *OcspUpdateOptionsMode `json:"mode,omitempty"`
}

// OcspUpdateOptionsMode defines model for OcspUpdateOptions.Mode.
type OcspUpdateOptionsMode string

// Originalto defines model for originalto.
type Originalto struct {
	Enabled OriginaltoEnabled `json:"enabled"`
	Except  *string           `json:"except,omitempty"`
	Header  *string           `json:"header,omitempty"`
}

// OriginaltoEnabled defines model for Originalto.Enabled.
type OriginaltoEnabled string

// PeerEntries HAProxy peer entries array
type PeerEntries = []PeerEntry

// PeerEntry Peer Entry from peers table
type PeerEntry struct {
	Address  string                             `json:"address"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
	Port     *int                               `json:"port"`
	Shard    *int                               `json:"shard,omitempty"`
}

// PeerSection defines model for peer_section.
type PeerSection struct {
	Binds *map[string]Bind `json:"binds,omitempty"`

	// DefaultBind HAProxy default bind configuration
	DefaultBind   *DefaultBind   `json:"default_bind,omitempty"`
	DefaultServer *DefaultServer `json:"default_server,omitempty"`
	Disabled      *bool          `json:"disabled,omitempty"`
	Enabled       *bool          `json:"enabled,omitempty"`

	// LogTargetList HAProxy log target array (corresponds to log directives)
	LogTargetList *LogTargets                        `json:"log_target_list,omitempty"`
	Metadata      *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name          string                             `json:"name"`
	PeerEntries   *map[string]PeerEntry              `json:"peer_entries,omitempty"`
	Servers       *map[string]Server                 `json:"servers,omitempty"`

	// Shards In some configurations, one would like to distribute the stick-table contents
	// to some peers in place of sending all the stick-table contents to each peer
	// declared in the "peers" section. In such cases, "shards" specifies the
	// number of peer involved in this stick-table contents distribution.
	Shards *int              `json:"shards,omitempty"`
	Tables *map[string]Table `json:"tables,omitempty"`
}

// PeerSectionBase HAProxy peer_section configuration
type PeerSectionBase struct {
	// DefaultBind HAProxy default bind configuration
	DefaultBind   *DefaultBind                       `json:"default_bind,omitempty"`
	DefaultServer *DefaultServer                     `json:"default_server,omitempty"`
	Disabled      *bool                              `json:"disabled,omitempty"`
	Enabled       *bool                              `json:"enabled,omitempty"`
	Metadata      *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name          string                             `json:"name"`

	// Shards In some configurations, one would like to distribute the stick-table contents
	// to some peers in place of sending all the stick-table contents to each peer
	// declared in the "peers" section. In such cases, "shards" specifies the
	// number of peer involved in this stick-table contents distribution.
	Shards *int `json:"shards,omitempty"`
}

// PeerSections HAProxy peer_section array
type PeerSections = []PeerSection

// PerformanceOptions defines model for performance_options.
type PerformanceOptions struct {
	BusyPolling     *bool                              `json:"busy_polling,omitempty"`
	MaxSpreadChecks *int                               `json:"max_spread_checks"`
	Maxcompcpuusage *int                               `json:"maxcompcpuusage,omitempty"`
	Maxcomprate     *int                               `json:"maxcomprate,omitempty"`
	Maxconn         *int                               `json:"maxconn,omitempty"`
	Maxconnrate     *int                               `json:"maxconnrate,omitempty"`
	Maxpipes        *int                               `json:"maxpipes,omitempty"`
	Maxsessrate     *int                               `json:"maxsessrate,omitempty"`
	Maxzlibmem      *int                               `json:"maxzlibmem,omitempty"`
	Noepoll         *bool                              `json:"noepoll,omitempty"`
	Noevports       *bool                              `json:"noevports,omitempty"`
	Nogetaddrinfo   *bool                              `json:"nogetaddrinfo,omitempty"`
	Nokqueue        *bool                              `json:"nokqueue,omitempty"`
	Nopoll          *bool                              `json:"nopoll,omitempty"`
	Noreuseport     *bool                              `json:"noreuseport,omitempty"`
	Nosplice        *bool                              `json:"nosplice,omitempty"`
	ProfilingMemory *PerformanceOptionsProfilingMemory `json:"profiling_memory,omitempty"`
	ProfilingTasks  *PerformanceOptionsProfilingTasks  `json:"profiling_tasks,omitempty"`
	ServerStateBase *string                            `json:"server_state_base,omitempty"`
	ServerStateFile *string                            `json:"server_state_file,omitempty"`
	SpreadChecks    *int                               `json:"spread_checks,omitempty"`
	ThreadHardLimit *int                               `json:"thread_hard_limit"`
}

// PerformanceOptionsProfilingMemory defines model for PerformanceOptions.ProfilingMemory.
type PerformanceOptionsProfilingMemory string

// PerformanceOptionsProfilingTasks defines model for PerformanceOptions.ProfilingTasks.
type PerformanceOptionsProfilingTasks string

// PersistRule defines model for persist_rule.
type PersistRule struct {
	RdpCookieName *string         `json:"rdp_cookie_name,omitempty"`
	Type          PersistRuleType `json:"type"`
}

// PersistRuleType defines model for PersistRule.Type.
type PersistRuleType string

// PgsqlCheckParams defines model for pgsql_check_params.
type PgsqlCheckParams struct {
	Username *string `json:"username,omitempty"`
}

// ProcessInfo General HAProxy process information
type ProcessInfo struct {
	Error      *string          `json:"error,omitempty"`
	Info       *ProcessInfoItem `json:"info,omitempty"`
	RuntimeAPI *string          `json:"runtimeAPI,omitempty"`
}

// ProcessInfoItem defines model for process_info_item.
type ProcessInfoItem struct {
	ActivePeers        *int `json:"active_peers"`
	BusyPolling        *int `json:"busy_polling"`
	BytesOutRate       *int `json:"bytes_out_rate"`
	CompressBpsIn      *int `json:"compress_bps_in"`
	CompressBpsOut     *int `json:"compress_bps_out"`
	CompressBpsRateLim *int `json:"compress_bps_rate_lim"`
	ConnRate           *int `json:"conn_rate"`
	ConnRateLimit      *int `json:"conn_rate_limit"`
	ConnectedPeers     *int `json:"connected_peers"`
	CumConns           *int `json:"cum_conns"`
	CumReq             *int `json:"cum_req"`
	CumSslConns        *int `json:"cum_ssl_conns"`
	CurrConns          *int `json:"curr_conns"`
	CurrSslConns       *int `json:"curr_ssl_conns"`
	DroppedLogs        *int `json:"dropped_logs"`
	FailedResolutions  *int `json:"failed_resolutions"`
	HardMaxConn        *int `json:"hard_max_conn"`
	IdlePct            *int `json:"idle_pct"`
	Jobs               *int `json:"jobs"`
	Listeners          *int `json:"listeners"`
	MaxConn            *int `json:"max_conn"`
	MaxConnRate        *int `json:"max_conn_rate"`
	MaxPipes           *int `json:"max_pipes"`
	MaxSessRate        *int `json:"max_sess_rate"`
	MaxSock            *int `json:"max_sock"`
	MaxSslConns        *int `json:"max_ssl_conns"`
	MaxSslRate         *int `json:"max_ssl_rate"`
	MaxZlibMemUsage    *int `json:"max_zlib_mem_usage"`
	MemMaxMb           *int `json:"mem_max_mb"`

	// Nbthread Number of threads
	Nbthread *int    `json:"nbthread"`
	Node     *string `json:"node,omitempty"`

	// Pid Process id of the replying worker process
	Pid         *int `json:"pid"`
	PipesFree   *int `json:"pipes_free"`
	PipesUsed   *int `json:"pipes_used"`
	PoolAllocMb *int `json:"pool_alloc_mb"`
	PoolFailed  *int `json:"pool_failed"`
	PoolUsedMb  *int `json:"pool_used_mb"`

	// ProcessNum Process number
	ProcessNum *int `json:"process_num"`

	// Processes Number of spawned processes
	Processes *int `json:"processes"`

	// ReleaseDate HAProxy version release date
	ReleaseDate             *openapi_types.Date `json:"release_date,omitempty"`
	RunQueue                *int                `json:"run_queue"`
	SessRate                *int                `json:"sess_rate"`
	SessRateLimit           *int                `json:"sess_rate_limit"`
	SslBackendKeyRate       *int                `json:"ssl_backend_key_rate"`
	SslBackendMaxKeyRate    *int                `json:"ssl_backend_max_key_rate"`
	SslCacheLookups         *int                `json:"ssl_cache_lookups"`
	SslCacheMisses          *int                `json:"ssl_cache_misses"`
	SslFrontendKeyRate      *int                `json:"ssl_frontend_key_rate"`
	SslFrontendMaxKeyRate   *int                `json:"ssl_frontend_max_key_rate"`
	SslFrontendSessionReuse *int                `json:"ssl_frontend_session_reuse"`
	SslRate                 *int                `json:"ssl_rate"`
	SslRateLimit            *int                `json:"ssl_rate_limit"`
	Stopping                *int                `json:"stopping"`
	Tasks                   *int                `json:"tasks"`
	TotalBytesOut           *int                `json:"total_bytes_out"`
	UlimitN                 *int                `json:"ulimit_n"`
	Unstoppable             *int                `json:"unstoppable"`

	// Uptime HAProxy uptime in s
	Uptime *int `json:"uptime"`

	// Version HAProxy version string
	Version      *string `json:"version,omitempty"`
	ZlibMemUsage *int    `json:"zlib_mem_usage"`
}

// Program HAProxy program configuration
type Program struct {
	// Command The command to be run, with flags and options.
	Command string `json:"command"`

	// Group The group to run the command as, if different than the HAProxy group.
	Group    *string                            `json:"group,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`

	// StartOnReload HAProxy stops and recreates child programs at reload.
	StartOnReload *ProgramStartOnReload `json:"start-on-reload,omitempty"`

	// User The user to run the command as, if different than the HAProxy user.
	User *string `json:"user,omitempty"`
}

// ProgramStartOnReload HAProxy stops and recreates child programs at reload.
type ProgramStartOnReload string

// Programs defines model for programs.
type Programs = []Program

// QUICInitialRule QUIC Initial configuration
type QUICInitialRule struct {
	Cond     *QuicInitialRuleCond               `json:"cond,omitempty"`
	CondTest *string                            `json:"cond_test,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Type     QuicInitialRuleType                `json:"type"`
}

// QuicInitialRuleCond defines model for QuicInitialRule.Cond.
type QuicInitialRuleCond string

// QuicInitialRuleType defines model for QuicInitialRule.Type.
type QuicInitialRuleType string

// QUICInitialRules defines model for quic_initial_rules.
type QUICInitialRules = []QUICInitialRule

// Redispatch defines model for redispatch.
type Redispatch struct {
	Enabled  RedispatchEnabled `json:"enabled"`
	Interval *int              `json:"interval,omitempty"`
}

// RedispatchEnabled defines model for Redispatch.Enabled.
type RedispatchEnabled string

// Reload HAProxy reload
type Reload struct {
	Id              *string       `json:"id,omitempty"`
	ReloadTimestamp *int          `json:"reload_timestamp,omitempty"`
	Response        *string       `json:"response,omitempty"`
	Status          *ReloadStatus `json:"status,omitempty"`
}

// ReloadStatus defines model for Reload.Status.
type ReloadStatus string

// Reloads HAProxy reloads array
type Reloads = []Reload

// Resolver defines model for resolver.
type Resolver struct {
	AcceptedPayloadSize *int                               `json:"accepted_payload_size,omitempty"`
	HoldNx              *int                               `json:"hold_nx"`
	HoldObsolete        *int                               `json:"hold_obsolete"`
	HoldOther           *int                               `json:"hold_other"`
	HoldRefused         *int                               `json:"hold_refused"`
	HoldTimeout         *int                               `json:"hold_timeout"`
	HoldValid           *int                               `json:"hold_valid"`
	Metadata            *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name                string                             `json:"name"`
	Nameservers         *map[string]Nameserver             `json:"nameservers,omitempty"`
	ParseResolvConf     *bool                              `json:"parse-resolv-conf,omitempty"`
	ResolveRetries      *int                               `json:"resolve_retries,omitempty"`
	TimeoutResolve      *int                               `json:"timeout_resolve,omitempty"`
	TimeoutRetry        *int                               `json:"timeout_retry,omitempty"`
}

// ResolverBase Runtime DNS configuration
type ResolverBase struct {
	AcceptedPayloadSize *int                               `json:"accepted_payload_size,omitempty"`
	HoldNx              *int                               `json:"hold_nx"`
	HoldObsolete        *int                               `json:"hold_obsolete"`
	HoldOther           *int                               `json:"hold_other"`
	HoldRefused         *int                               `json:"hold_refused"`
	HoldTimeout         *int                               `json:"hold_timeout"`
	HoldValid           *int                               `json:"hold_valid"`
	Metadata            *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name                string                             `json:"name"`
	ParseResolvConf     *bool                              `json:"parse-resolv-conf,omitempty"`
	ResolveRetries      *int                               `json:"resolve_retries,omitempty"`
	TimeoutResolve      *int                               `json:"timeout_resolve,omitempty"`
	TimeoutRetry        *int                               `json:"timeout_retry,omitempty"`
}

// Resolvers HAProxy resolvers array
type Resolvers = []Resolver

// ReturnHeader defines model for return_header.
type ReturnHeader struct {
	Fmt  string `json:"fmt"`
	Name string `json:"name"`
}

// Ring defines model for ring.
type Ring struct {
	Description    *string                            `json:"description,omitempty"`
	Format         *RingFormat                        `json:"format,omitempty"`
	Maxlen         *int                               `json:"maxlen"`
	Metadata       *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name           string                             `json:"name"`
	Servers        *map[string]Server                 `json:"servers,omitempty"`
	Size           *int                               `json:"size"`
	TimeoutConnect *int                               `json:"timeout_connect"`
	TimeoutServer  *int                               `json:"timeout_server"`
}

// RingFormat defines model for Ring.Format.
type RingFormat string

// RingBase HAProxy ring configuration
type RingBase struct {
	Description    *string                            `json:"description,omitempty"`
	Format         *RingBaseFormat                    `json:"format,omitempty"`
	Maxlen         *int                               `json:"maxlen"`
	Metadata       *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name           string                             `json:"name"`
	Size           *int                               `json:"size"`
	TimeoutConnect *int                               `json:"timeout_connect"`
	TimeoutServer  *int                               `json:"timeout_server"`
}

// RingBaseFormat defines model for RingBase.Format.
type RingBaseFormat string

// Rings HAProxy rings array
type Rings = []Ring

// RuntimeAddServer Settable properties when adding a new server using HAProxy's runtime.
type RuntimeAddServer struct {
	Address            *string                           `json:"address,omitempty"`
	AgentAddr          *string                           `json:"agent-addr,omitempty"`
	AgentCheck         *RuntimeAddServerAgentCheck       `json:"agent-check,omitempty"`
	AgentInter         *int                              `json:"agent-inter"`
	AgentPort          *int                              `json:"agent-port"`
	AgentSend          *string                           `json:"agent-send,omitempty"`
	Allow0rtt          *bool                             `json:"allow_0rtt,omitempty"`
	Alpn               *string                           `json:"alpn,omitempty"`
	Backup             *RuntimeAddServerBackup           `json:"backup,omitempty"`
	Check              *RuntimeAddServerCheck            `json:"check,omitempty"`
	CheckSendProxy     *RuntimeAddServerCheckSendProxy   `json:"check-send-proxy,omitempty"`
	CheckSni           *string                           `json:"check-sni,omitempty"`
	CheckSsl           *RuntimeAddServerCheckSsl         `json:"check-ssl,omitempty"`
	CheckAlpn          *string                           `json:"check_alpn,omitempty"`
	CheckProto         *string                           `json:"check_proto,omitempty"`
	CheckViaSocks4     *RuntimeAddServerCheckViaSocks4   `json:"check_via_socks4,omitempty"`
	Ciphers            *string                           `json:"ciphers,omitempty"`
	Ciphersuites       *string                           `json:"ciphersuites,omitempty"`
	CrlFile            *string                           `json:"crl_file,omitempty"`
	Downinter          *int                              `json:"downinter"`
	ErrorLimit         *int                              `json:"error_limit"`
	Fall               *int                              `json:"fall"`
	Fastinter          *int                              `json:"fastinter"`
	ForceSslv3         *RuntimeAddServerForceSslv3       `json:"force_sslv3,omitempty"`
	ForceTlsv10        *RuntimeAddServerForceTlsv10      `json:"force_tlsv10,omitempty"`
	ForceTlsv11        *RuntimeAddServerForceTlsv11      `json:"force_tlsv11,omitempty"`
	ForceTlsv12        *RuntimeAddServerForceTlsv12      `json:"force_tlsv12,omitempty"`
	ForceTlsv13        *RuntimeAddServerForceTlsv13      `json:"force_tlsv13,omitempty"`
	HealthCheckAddress *string                           `json:"health_check_address,omitempty"`
	HealthCheckPort    *int                              `json:"health_check_port"`
	Id                 *string                           `json:"id,omitempty"`
	Inter              *int                              `json:"inter"`
	Maintenance        *RuntimeAddServerMaintenance      `json:"maintenance,omitempty"`
	Maxconn            *int                              `json:"maxconn"`
	Maxqueue           *int                              `json:"maxqueue"`
	Minconn            *int                              `json:"minconn"`
	Name               *string                           `json:"name,omitempty"`
	NoSslv3            *RuntimeAddServerNoSslv3          `json:"no_sslv3,omitempty"`
	NoTlsv10           *RuntimeAddServerNoTlsv10         `json:"no_tlsv10,omitempty"`
	NoTlsv11           *RuntimeAddServerNoTlsv11         `json:"no_tlsv11,omitempty"`
	NoTlsv12           *RuntimeAddServerNoTlsv12         `json:"no_tlsv12,omitempty"`
	NoTlsv13           *RuntimeAddServerNoTlsv13         `json:"no_tlsv13,omitempty"`
	Npn                *string                           `json:"npn,omitempty"`
	Observe            *RuntimeAddServerObserve          `json:"observe,omitempty"`
	OnError            *RuntimeAddServerOnError          `json:"on-error,omitempty"`
	OnMarkedDown       *RuntimeAddServerOnMarkedDown     `json:"on-marked-down,omitempty"`
	OnMarkedUp         *RuntimeAddServerOnMarkedUp       `json:"on-marked-up,omitempty"`
	PoolLowConn        *int                              `json:"pool_low_conn"`
	PoolMaxConn        *int                              `json:"pool_max_conn"`
	PoolPurgeDelay     *int                              `json:"pool_purge_delay"`
	Port               *int                              `json:"port"`
	Proto              *string                           `json:"proto,omitempty"`
	ProxyV2Options     *[]RuntimeAddServerProxyV2Options `json:"proxy-v2-options,omitempty"`
	Rise               *int                              `json:"rise"`
	SendProxy          *RuntimeAddServerSendProxy        `json:"send-proxy,omitempty"`
	SendProxyV2        *RuntimeAddServerSendProxyV2      `json:"send-proxy-v2,omitempty"`
	SendProxyV2Ssl     *RuntimeAddServerSendProxyV2Ssl   `json:"send_proxy_v2_ssl,omitempty"`
	SendProxyV2SslCn   *RuntimeAddServerSendProxyV2SslCn `json:"send_proxy_v2_ssl_cn,omitempty"`
	Slowstart          *int                              `json:"slowstart"`
	Sni                *string                           `json:"sni,omitempty"`
	Source             *string                           `json:"source,omitempty"`
	Ssl                *RuntimeAddServerSsl              `json:"ssl,omitempty"`
	SslCafile          *string                           `json:"ssl_cafile,omitempty"`
	SslCertificate     *string                           `json:"ssl_certificate,omitempty"`
	SslMaxVer          *RuntimeAddServerSslMaxVer        `json:"ssl_max_ver,omitempty"`
	SslMinVer          *RuntimeAddServerSslMinVer        `json:"ssl_min_ver,omitempty"`
	SslReuse           *RuntimeAddServerSslReuse         `json:"ssl_reuse,omitempty"`
	Tfo                *RuntimeAddServerTfo              `json:"tfo,omitempty"`
	TlsTickets         *RuntimeAddServerTlsTickets       `json:"tls_tickets,omitempty"`
	Track              *string                           `json:"track,omitempty"`
	Verify             *RuntimeAddServerVerify           `json:"verify,omitempty"`
	Verifyhost         *string                           `json:"verifyhost,omitempty"`
	Weight             *int                              `json:"weight"`
	Ws                 *RuntimeAddServerWs               `json:"ws,omitempty"`
}

// RuntimeAddServerAgentCheck defines model for RuntimeAddServer.AgentCheck.
type RuntimeAddServerAgentCheck string

// RuntimeAddServerBackup defines model for RuntimeAddServer.Backup.
type RuntimeAddServerBackup string

// RuntimeAddServerCheck defines model for RuntimeAddServer.Check.
type RuntimeAddServerCheck string

// RuntimeAddServerCheckSendProxy defines model for RuntimeAddServer.CheckSendProxy.
type RuntimeAddServerCheckSendProxy string

// RuntimeAddServerCheckSsl defines model for RuntimeAddServer.CheckSsl.
type RuntimeAddServerCheckSsl string

// RuntimeAddServerCheckViaSocks4 defines model for RuntimeAddServer.CheckViaSocks4.
type RuntimeAddServerCheckViaSocks4 string

// RuntimeAddServerForceSslv3 defines model for RuntimeAddServer.ForceSslv3.
type RuntimeAddServerForceSslv3 string

// RuntimeAddServerForceTlsv10 defines model for RuntimeAddServer.ForceTlsv10.
type RuntimeAddServerForceTlsv10 string

// RuntimeAddServerForceTlsv11 defines model for RuntimeAddServer.ForceTlsv11.
type RuntimeAddServerForceTlsv11 string

// RuntimeAddServerForceTlsv12 defines model for RuntimeAddServer.ForceTlsv12.
type RuntimeAddServerForceTlsv12 string

// RuntimeAddServerForceTlsv13 defines model for RuntimeAddServer.ForceTlsv13.
type RuntimeAddServerForceTlsv13 string

// RuntimeAddServerMaintenance defines model for RuntimeAddServer.Maintenance.
type RuntimeAddServerMaintenance string

// RuntimeAddServerNoSslv3 defines model for RuntimeAddServer.NoSslv3.
type RuntimeAddServerNoSslv3 string

// RuntimeAddServerNoTlsv10 defines model for RuntimeAddServer.NoTlsv10.
type RuntimeAddServerNoTlsv10 string

// RuntimeAddServerNoTlsv11 defines model for RuntimeAddServer.NoTlsv11.
type RuntimeAddServerNoTlsv11 string

// RuntimeAddServerNoTlsv12 defines model for RuntimeAddServer.NoTlsv12.
type RuntimeAddServerNoTlsv12 string

// RuntimeAddServerNoTlsv13 defines model for RuntimeAddServer.NoTlsv13.
type RuntimeAddServerNoTlsv13 string

// RuntimeAddServerObserve defines model for RuntimeAddServer.Observe.
type RuntimeAddServerObserve string

// RuntimeAddServerOnError defines model for RuntimeAddServer.OnError.
type RuntimeAddServerOnError string

// RuntimeAddServerOnMarkedDown defines model for RuntimeAddServer.OnMarkedDown.
type RuntimeAddServerOnMarkedDown string

// RuntimeAddServerOnMarkedUp defines model for RuntimeAddServer.OnMarkedUp.
type RuntimeAddServerOnMarkedUp string

// RuntimeAddServerProxyV2Options defines model for RuntimeAddServer.ProxyV2Options.
type RuntimeAddServerProxyV2Options string

// RuntimeAddServerSendProxy defines model for RuntimeAddServer.SendProxy.
type RuntimeAddServerSendProxy string

// RuntimeAddServerSendProxyV2 defines model for RuntimeAddServer.SendProxyV2.
type RuntimeAddServerSendProxyV2 string

// RuntimeAddServerSendProxyV2Ssl defines model for RuntimeAddServer.SendProxyV2Ssl.
type RuntimeAddServerSendProxyV2Ssl string

// RuntimeAddServerSendProxyV2SslCn defines model for RuntimeAddServer.SendProxyV2SslCn.
type RuntimeAddServerSendProxyV2SslCn string

// RuntimeAddServerSsl defines model for RuntimeAddServer.Ssl.
type RuntimeAddServerSsl string

// RuntimeAddServerSslMaxVer defines model for RuntimeAddServer.SslMaxVer.
type RuntimeAddServerSslMaxVer string

// RuntimeAddServerSslMinVer defines model for RuntimeAddServer.SslMinVer.
type RuntimeAddServerSslMinVer string

// RuntimeAddServerSslReuse defines model for RuntimeAddServer.SslReuse.
type RuntimeAddServerSslReuse string

// RuntimeAddServerTfo defines model for RuntimeAddServer.Tfo.
type RuntimeAddServerTfo string

// RuntimeAddServerTlsTickets defines model for RuntimeAddServer.TlsTickets.
type RuntimeAddServerTlsTickets string

// RuntimeAddServerVerify defines model for RuntimeAddServer.Verify.
type RuntimeAddServerVerify string

// RuntimeAddServerWs defines model for RuntimeAddServer.Ws.
type RuntimeAddServerWs string

// RuntimeServer Runtime transient server properties
type RuntimeServer struct {
	Address          *string                        `json:"address,omitempty"`
	AdminState       *RuntimeServerAdminState       `json:"admin_state,omitempty"`
	Id               *string                        `json:"id,omitempty"`
	Name             *string                        `json:"name,omitempty"`
	OperationalState *RuntimeServerOperationalState `json:"operational_state,omitempty"`
	Port             *int                           `json:"port"`
}

// RuntimeServerAdminState defines model for RuntimeServer.AdminState.
type RuntimeServerAdminState string

// RuntimeServerOperationalState defines model for RuntimeServer.OperationalState.
type RuntimeServerOperationalState string

// RuntimeServers HAProxy runtime servers array
type RuntimeServers = []RuntimeServer

// Server defines model for server.
type Server struct {
	Address           string                `json:"address"`
	AgentAddr         *string               `json:"agent-addr,omitempty"`
	AgentCheck        *ServerAgentCheck     `json:"agent-check,omitempty"`
	AgentInter        *int                  `json:"agent-inter"`
	AgentPort         *int                  `json:"agent-port"`
	AgentSend         *string               `json:"agent-send,omitempty"`
	Allow0rtt         *bool                 `json:"allow_0rtt,omitempty"`
	Alpn              *string               `json:"alpn,omitempty"`
	Backup            *ServerBackup         `json:"backup,omitempty"`
	Check             *ServerCheck          `json:"check,omitempty"`
	CheckPoolConnName *string               `json:"check-pool-conn-name,omitempty"`
	CheckReusePool    *ServerCheckReusePool `json:"check-reuse-pool,omitempty"`
	CheckSendProxy    *ServerCheckSendProxy `json:"check-send-proxy,omitempty"`
	CheckSni          *string               `json:"check-sni,omitempty"`
	CheckSsl          *ServerCheckSsl       `json:"check-ssl,omitempty"`
	CheckAlpn         *string               `json:"check_alpn,omitempty"`
	CheckProto        *string               `json:"check_proto,omitempty"`
	CheckViaSocks4    *ServerCheckViaSocks4 `json:"check_via_socks4,omitempty"`
	Ciphers           *string               `json:"ciphers,omitempty"`
	Ciphersuites      *string               `json:"ciphersuites,omitempty"`
	ClientSigalgs     *string               `json:"client_sigalgs,omitempty"`
	Cookie            *string               `json:"cookie,omitempty"`
	CrlFile           *string               `json:"crl_file,omitempty"`
	Curves            *string               `json:"curves,omitempty"`
	Downinter         *int                  `json:"downinter"`
	ErrorLimit        *int                  `json:"error_limit,omitempty"`
	Fall              *int                  `json:"fall"`
	Fastinter         *int                  `json:"fastinter"`

	// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	ForceSslv3 *ServerForceSslv3 `json:"force_sslv3,omitempty"`

	// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	ForceTlsv10 *ServerForceTlsv10 `json:"force_tlsv10,omitempty"`

	// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	ForceTlsv11 *ServerForceTlsv11 `json:"force_tlsv11,omitempty"`

	// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	ForceTlsv12 *ServerForceTlsv12 `json:"force_tlsv12,omitempty"`

	// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	ForceTlsv13        *ServerForceTlsv13                 `json:"force_tlsv13,omitempty"`
	Guid               *string                            `json:"guid,omitempty"`
	HashKey            *string                            `json:"hash_key,omitempty"`
	HealthCheckAddress *string                            `json:"health_check_address,omitempty"`
	HealthCheckPort    *int                               `json:"health_check_port"`
	Id                 *int                               `json:"id"`
	IdlePing           *int                               `json:"idle_ping"`
	InitAddr           *string                            `json:"init-addr"`
	InitState          *ServerInitState                   `json:"init-state,omitempty"`
	Inter              *int                               `json:"inter"`
	LogBufsize         *int                               `json:"log-bufsize"`
	LogProto           *ServerLogProto                    `json:"log_proto,omitempty"`
	Maintenance        *ServerMaintenance                 `json:"maintenance,omitempty"`
	MaxReuse           *int                               `json:"max_reuse"`
	Maxconn            *int                               `json:"maxconn"`
	Maxqueue           *int                               `json:"maxqueue"`
	Metadata           *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Minconn            *int                               `json:"minconn"`
	Name               string                             `json:"name"`
	Namespace          *string                            `json:"namespace,omitempty"`

	// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	NoSslv3 *ServerNoSslv3 `json:"no_sslv3,omitempty"`

	// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	NoTlsv10 *ServerNoTlsv10 `json:"no_tlsv10,omitempty"`

	// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	NoTlsv11 *ServerNoTlsv11 `json:"no_tlsv11,omitempty"`

	// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	NoTlsv12 *ServerNoTlsv12 `json:"no_tlsv12,omitempty"`

	// NoTlsv13 This field is deprecated in favor of force_tlsv13, and will be removed in a future release
	NoTlsv13         *ServerNoTlsv13         `json:"no_tlsv13,omitempty"`
	NoVerifyhost     *ServerNoVerifyhost     `json:"no_verifyhost,omitempty"`
	Npn              *string                 `json:"npn,omitempty"`
	Observe          *ServerObserve          `json:"observe,omitempty"`
	OnError          *ServerOnError          `json:"on-error,omitempty"`
	OnMarkedDown     *ServerOnMarkedDown     `json:"on-marked-down,omitempty"`
	OnMarkedUp       *ServerOnMarkedUp       `json:"on-marked-up,omitempty"`
	PoolConnName     *string                 `json:"pool_conn_name,omitempty"`
	PoolLowConn      *int                    `json:"pool_low_conn"`
	PoolMaxConn      *int                    `json:"pool_max_conn"`
	PoolPurgeDelay   *int                    `json:"pool_purge_delay"`
	Port             *int                    `json:"port"`
	Proto            *string                 `json:"proto,omitempty"`
	ProxyV2Options   *[]ServerProxyV2Options `json:"proxy-v2-options,omitempty"`
	Redir            *string                 `json:"redir,omitempty"`
	ResolveNet       *string                 `json:"resolve-net,omitempty"`
	ResolvePrefer    *ServerResolvePrefer    `json:"resolve-prefer,omitempty"`
	ResolveOpts      *string                 `json:"resolve_opts,omitempty"`
	Resolvers        *string                 `json:"resolvers,omitempty"`
	Rise             *int                    `json:"rise"`
	SendProxy        *ServerSendProxy        `json:"send-proxy,omitempty"`
	SendProxyV2      *ServerSendProxyV2      `json:"send-proxy-v2,omitempty"`
	SendProxyV2Ssl   *ServerSendProxyV2Ssl   `json:"send_proxy_v2_ssl,omitempty"`
	SendProxyV2SslCn *ServerSendProxyV2SslCn `json:"send_proxy_v2_ssl_cn,omitempty"`
	SetProxyV2TlvFmt *struct {
		Id    string `json:"id"`
		Value string `json:"value"`
	} `json:"set-proxy-v2-tlv-fmt,omitempty"`
	Shard          *int              `json:"shard,omitempty"`
	Sigalgs        *string           `json:"sigalgs,omitempty"`
	Slowstart      *int              `json:"slowstart"`
	Sni            *string           `json:"sni,omitempty"`
	Socks4         *string           `json:"socks4,omitempty"`
	Source         *string           `json:"source,omitempty"`
	Ssl            *ServerSsl        `json:"ssl,omitempty"`
	SslCafile      *string           `json:"ssl_cafile,omitempty"`
	SslCertificate *string           `json:"ssl_certificate,omitempty"`
	SslMaxVer      *ServerSslMaxVer  `json:"ssl_max_ver,omitempty"`
	SslMinVer      *ServerSslMinVer  `json:"ssl_min_ver,omitempty"`
	SslReuse       *ServerSslReuse   `json:"ssl_reuse,omitempty"`
	Sslv3          *ServerSslv3      `json:"sslv3,omitempty"`
	Stick          *ServerStick      `json:"stick,omitempty"`
	StrictMaxconn  *bool             `json:"strict-maxconn,omitempty"`
	TcpUt          *int              `json:"tcp_ut"`
	Tfo            *ServerTfo        `json:"tfo,omitempty"`
	TlsTickets     *ServerTlsTickets `json:"tls_tickets,omitempty"`
	Tlsv10         *ServerTlsv10     `json:"tlsv10,omitempty"`
	Tlsv11         *ServerTlsv11     `json:"tlsv11,omitempty"`
	Tlsv12         *ServerTlsv12     `json:"tlsv12,omitempty"`
	Tlsv13         *ServerTlsv13     `json:"tlsv13,omitempty"`
	Track          *string           `json:"track,omitempty"`
	Verify         *ServerVerify     `json:"verify,omitempty"`
	Verifyhost     *string           `json:"verifyhost,omitempty"`
	Weight         *int              `json:"weight"`
	Ws             *ServerWs         `json:"ws,omitempty"`
}

// ServerAgentCheck defines model for Server.AgentCheck.
type ServerAgentCheck string

// ServerBackup defines model for Server.Backup.
type ServerBackup string

// ServerCheck defines model for Server.Check.
type ServerCheck string

// ServerCheckReusePool defines model for Server.CheckReusePool.
type ServerCheckReusePool string

// ServerCheckSendProxy defines model for Server.CheckSendProxy.
type ServerCheckSendProxy string

// ServerCheckSsl defines model for Server.CheckSsl.
type ServerCheckSsl string

// ServerCheckViaSocks4 defines model for Server.CheckViaSocks4.
type ServerCheckViaSocks4 string

// ServerForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
type ServerForceSslv3 string

// ServerForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
type ServerForceTlsv10 string

// ServerForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
type ServerForceTlsv11 string

// ServerForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
type ServerForceTlsv12 string

// ServerForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
type ServerForceTlsv13 string

// ServerInitState defines model for Server.InitState.
type ServerInitState string

// ServerLogProto defines model for Server.LogProto.
type ServerLogProto string

// ServerMaintenance defines model for Server.Maintenance.
type ServerMaintenance string

// ServerNoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
type ServerNoSslv3 string

// ServerNoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
type ServerNoTlsv10 string

// ServerNoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
type ServerNoTlsv11 string

// ServerNoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
type ServerNoTlsv12 string

// ServerNoTlsv13 This field is deprecated in favor of force_tlsv13, and will be removed in a future release
type ServerNoTlsv13 string

// ServerNoVerifyhost defines model for Server.NoVerifyhost.
type ServerNoVerifyhost string

// ServerObserve defines model for Server.Observe.
type ServerObserve string

// ServerOnError defines model for Server.OnError.
type ServerOnError string

// ServerOnMarkedDown defines model for Server.OnMarkedDown.
type ServerOnMarkedDown string

// ServerOnMarkedUp defines model for Server.OnMarkedUp.
type ServerOnMarkedUp string

// ServerProxyV2Options defines model for Server.ProxyV2Options.
type ServerProxyV2Options string

// ServerResolvePrefer defines model for Server.ResolvePrefer.
type ServerResolvePrefer string

// ServerSendProxy defines model for Server.SendProxy.
type ServerSendProxy string

// ServerSendProxyV2 defines model for Server.SendProxyV2.
type ServerSendProxyV2 string

// ServerSendProxyV2Ssl defines model for Server.SendProxyV2Ssl.
type ServerSendProxyV2Ssl string

// ServerSendProxyV2SslCn defines model for Server.SendProxyV2SslCn.
type ServerSendProxyV2SslCn string

// ServerSsl defines model for Server.Ssl.
type ServerSsl string

// ServerSslMaxVer defines model for Server.SslMaxVer.
type ServerSslMaxVer string

// ServerSslMinVer defines model for Server.SslMinVer.
type ServerSslMinVer string

// ServerSslReuse defines model for Server.SslReuse.
type ServerSslReuse string

// ServerSslv3 defines model for Server.Sslv3.
type ServerSslv3 string

// ServerStick defines model for Server.Stick.
type ServerStick string

// ServerTfo defines model for Server.Tfo.
type ServerTfo string

// ServerTlsTickets defines model for Server.TlsTickets.
type ServerTlsTickets string

// ServerTlsv10 defines model for Server.Tlsv10.
type ServerTlsv10 string

// ServerTlsv11 defines model for Server.Tlsv11.
type ServerTlsv11 string

// ServerTlsv12 defines model for Server.Tlsv12.
type ServerTlsv12 string

// ServerTlsv13 defines model for Server.Tlsv13.
type ServerTlsv13 string

// ServerVerify defines model for Server.Verify.
type ServerVerify string

// ServerWs defines model for Server.Ws.
type ServerWs string

// ServerParams defines model for server_params.
type ServerParams struct {
	AgentAddr         *string                     `json:"agent-addr,omitempty"`
	AgentCheck        *ServerParamsAgentCheck     `json:"agent-check,omitempty"`
	AgentInter        *int                        `json:"agent-inter"`
	AgentPort         *int                        `json:"agent-port"`
	AgentSend         *string                     `json:"agent-send,omitempty"`
	Allow0rtt         *bool                       `json:"allow_0rtt,omitempty"`
	Alpn              *string                     `json:"alpn,omitempty"`
	Backup            *ServerParamsBackup         `json:"backup,omitempty"`
	Check             *ServerParamsCheck          `json:"check,omitempty"`
	CheckPoolConnName *string                     `json:"check-pool-conn-name,omitempty"`
	CheckReusePool    *ServerParamsCheckReusePool `json:"check-reuse-pool,omitempty"`
	CheckSendProxy    *ServerParamsCheckSendProxy `json:"check-send-proxy,omitempty"`
	CheckSni          *string                     `json:"check-sni,omitempty"`
	CheckSsl          *ServerParamsCheckSsl       `json:"check-ssl,omitempty"`
	CheckAlpn         *string                     `json:"check_alpn,omitempty"`
	CheckProto        *string                     `json:"check_proto,omitempty"`
	CheckViaSocks4    *ServerParamsCheckViaSocks4 `json:"check_via_socks4,omitempty"`
	Ciphers           *string                     `json:"ciphers,omitempty"`
	Ciphersuites      *string                     `json:"ciphersuites,omitempty"`
	ClientSigalgs     *string                     `json:"client_sigalgs,omitempty"`
	Cookie            *string                     `json:"cookie,omitempty"`
	CrlFile           *string                     `json:"crl_file,omitempty"`
	Curves            *string                     `json:"curves,omitempty"`
	Downinter         *int                        `json:"downinter"`
	ErrorLimit        *int                        `json:"error_limit,omitempty"`
	Fall              *int                        `json:"fall"`
	Fastinter         *int                        `json:"fastinter"`

	// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	ForceSslv3 *ServerParamsForceSslv3 `json:"force_sslv3,omitempty"`

	// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	ForceTlsv10 *ServerParamsForceTlsv10 `json:"force_tlsv10,omitempty"`

	// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	ForceTlsv11 *ServerParamsForceTlsv11 `json:"force_tlsv11,omitempty"`

	// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	ForceTlsv12 *ServerParamsForceTlsv12 `json:"force_tlsv12,omitempty"`

	// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	ForceTlsv13        *ServerParamsForceTlsv13 `json:"force_tlsv13,omitempty"`
	Guid               *string                  `json:"guid,omitempty"`
	HashKey            *string                  `json:"hash_key,omitempty"`
	HealthCheckAddress *string                  `json:"health_check_address,omitempty"`
	HealthCheckPort    *int                     `json:"health_check_port"`
	IdlePing           *int                     `json:"idle_ping"`
	InitAddr           *string                  `json:"init-addr"`
	InitState          *ServerParamsInitState   `json:"init-state,omitempty"`
	Inter              *int                     `json:"inter"`
	LogBufsize         *int                     `json:"log-bufsize"`
	LogProto           *ServerParamsLogProto    `json:"log_proto,omitempty"`
	Maintenance        *ServerParamsMaintenance `json:"maintenance,omitempty"`
	MaxReuse           *int                     `json:"max_reuse"`
	Maxconn            *int                     `json:"maxconn"`
	Maxqueue           *int                     `json:"maxqueue"`
	Minconn            *int                     `json:"minconn"`
	Namespace          *string                  `json:"namespace,omitempty"`

	// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	NoSslv3 *ServerParamsNoSslv3 `json:"no_sslv3,omitempty"`

	// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	NoTlsv10 *ServerParamsNoTlsv10 `json:"no_tlsv10,omitempty"`

	// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	NoTlsv11 *ServerParamsNoTlsv11 `json:"no_tlsv11,omitempty"`

	// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	NoTlsv12 *ServerParamsNoTlsv12 `json:"no_tlsv12,omitempty"`

	// NoTlsv13 This field is deprecated in favor of force_tlsv13, and will be removed in a future release
	NoTlsv13         *ServerParamsNoTlsv13         `json:"no_tlsv13,omitempty"`
	NoVerifyhost     *ServerParamsNoVerifyhost     `json:"no_verifyhost,omitempty"`
	Npn              *string                       `json:"npn,omitempty"`
	Observe          *ServerParamsObserve          `json:"observe,omitempty"`
	OnError          *ServerParamsOnError          `json:"on-error,omitempty"`
	OnMarkedDown     *ServerParamsOnMarkedDown     `json:"on-marked-down,omitempty"`
	OnMarkedUp       *ServerParamsOnMarkedUp       `json:"on-marked-up,omitempty"`
	PoolConnName     *string                       `json:"pool_conn_name,omitempty"`
	PoolLowConn      *int                          `json:"pool_low_conn"`
	PoolMaxConn      *int                          `json:"pool_max_conn"`
	PoolPurgeDelay   *int                          `json:"pool_purge_delay"`
	Proto            *string                       `json:"proto,omitempty"`
	ProxyV2Options   *[]ServerParamsProxyV2Options `json:"proxy-v2-options,omitempty"`
	Redir            *string                       `json:"redir,omitempty"`
	ResolveNet       *string                       `json:"resolve-net,omitempty"`
	ResolvePrefer    *ServerParamsResolvePrefer    `json:"resolve-prefer,omitempty"`
	ResolveOpts      *string                       `json:"resolve_opts,omitempty"`
	Resolvers        *string                       `json:"resolvers,omitempty"`
	Rise             *int                          `json:"rise"`
	SendProxy        *ServerParamsSendProxy        `json:"send-proxy,omitempty"`
	SendProxyV2      *ServerParamsSendProxyV2      `json:"send-proxy-v2,omitempty"`
	SendProxyV2Ssl   *ServerParamsSendProxyV2Ssl   `json:"send_proxy_v2_ssl,omitempty"`
	SendProxyV2SslCn *ServerParamsSendProxyV2SslCn `json:"send_proxy_v2_ssl_cn,omitempty"`
	SetProxyV2TlvFmt *struct {
		Id    string `json:"id"`
		Value string `json:"value"`
	} `json:"set-proxy-v2-tlv-fmt,omitempty"`
	Shard          *int                    `json:"shard,omitempty"`
	Sigalgs        *string                 `json:"sigalgs,omitempty"`
	Slowstart      *int                    `json:"slowstart"`
	Sni            *string                 `json:"sni,omitempty"`
	Socks4         *string                 `json:"socks4,omitempty"`
	Source         *string                 `json:"source,omitempty"`
	Ssl            *ServerParamsSsl        `json:"ssl,omitempty"`
	SslCafile      *string                 `json:"ssl_cafile,omitempty"`
	SslCertificate *string                 `json:"ssl_certificate,omitempty"`
	SslMaxVer      *ServerParamsSslMaxVer  `json:"ssl_max_ver,omitempty"`
	SslMinVer      *ServerParamsSslMinVer  `json:"ssl_min_ver,omitempty"`
	SslReuse       *ServerParamsSslReuse   `json:"ssl_reuse,omitempty"`
	Sslv3          *ServerParamsSslv3      `json:"sslv3,omitempty"`
	Stick          *ServerParamsStick      `json:"stick,omitempty"`
	StrictMaxconn  *bool                   `json:"strict-maxconn,omitempty"`
	TcpUt          *int                    `json:"tcp_ut"`
	Tfo            *ServerParamsTfo        `json:"tfo,omitempty"`
	TlsTickets     *ServerParamsTlsTickets `json:"tls_tickets,omitempty"`
	Tlsv10         *ServerParamsTlsv10     `json:"tlsv10,omitempty"`
	Tlsv11         *ServerParamsTlsv11     `json:"tlsv11,omitempty"`
	Tlsv12         *ServerParamsTlsv12     `json:"tlsv12,omitempty"`
	Tlsv13         *ServerParamsTlsv13     `json:"tlsv13,omitempty"`
	Track          *string                 `json:"track,omitempty"`
	Verify         *ServerParamsVerify     `json:"verify,omitempty"`
	Verifyhost     *string                 `json:"verifyhost,omitempty"`
	Weight         *int                    `json:"weight"`
	Ws             *ServerParamsWs         `json:"ws,omitempty"`
}

// ServerParamsAgentCheck defines model for ServerParams.AgentCheck.
type ServerParamsAgentCheck string

// ServerParamsBackup defines model for ServerParams.Backup.
type ServerParamsBackup string

// ServerParamsCheck defines model for ServerParams.Check.
type ServerParamsCheck string

// ServerParamsCheckReusePool defines model for ServerParams.CheckReusePool.
type ServerParamsCheckReusePool string

// ServerParamsCheckSendProxy defines model for ServerParams.CheckSendProxy.
type ServerParamsCheckSendProxy string

// ServerParamsCheckSsl defines model for ServerParams.CheckSsl.
type ServerParamsCheckSsl string

// ServerParamsCheckViaSocks4 defines model for ServerParams.CheckViaSocks4.
type ServerParamsCheckViaSocks4 string

// ServerParamsForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
type ServerParamsForceSslv3 string

// ServerParamsForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
type ServerParamsForceTlsv10 string

// ServerParamsForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
type ServerParamsForceTlsv11 string

// ServerParamsForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
type ServerParamsForceTlsv12 string

// ServerParamsForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
type ServerParamsForceTlsv13 string

// ServerParamsInitState defines model for ServerParams.InitState.
type ServerParamsInitState string

// ServerParamsLogProto defines model for ServerParams.LogProto.
type ServerParamsLogProto string

// ServerParamsMaintenance defines model for ServerParams.Maintenance.
type ServerParamsMaintenance string

// ServerParamsNoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
type ServerParamsNoSslv3 string

// ServerParamsNoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
type ServerParamsNoTlsv10 string

// ServerParamsNoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
type ServerParamsNoTlsv11 string

// ServerParamsNoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
type ServerParamsNoTlsv12 string

// ServerParamsNoTlsv13 This field is deprecated in favor of force_tlsv13, and will be removed in a future release
type ServerParamsNoTlsv13 string

// ServerParamsNoVerifyhost defines model for ServerParams.NoVerifyhost.
type ServerParamsNoVerifyhost string

// ServerParamsObserve defines model for ServerParams.Observe.
type ServerParamsObserve string

// ServerParamsOnError defines model for ServerParams.OnError.
type ServerParamsOnError string

// ServerParamsOnMarkedDown defines model for ServerParams.OnMarkedDown.
type ServerParamsOnMarkedDown string

// ServerParamsOnMarkedUp defines model for ServerParams.OnMarkedUp.
type ServerParamsOnMarkedUp string

// ServerParamsProxyV2Options defines model for ServerParams.ProxyV2Options.
type ServerParamsProxyV2Options string

// ServerParamsResolvePrefer defines model for ServerParams.ResolvePrefer.
type ServerParamsResolvePrefer string

// ServerParamsSendProxy defines model for ServerParams.SendProxy.
type ServerParamsSendProxy string

// ServerParamsSendProxyV2 defines model for ServerParams.SendProxyV2.
type ServerParamsSendProxyV2 string

// ServerParamsSendProxyV2Ssl defines model for ServerParams.SendProxyV2Ssl.
type ServerParamsSendProxyV2Ssl string

// ServerParamsSendProxyV2SslCn defines model for ServerParams.SendProxyV2SslCn.
type ServerParamsSendProxyV2SslCn string

// ServerParamsSsl defines model for ServerParams.Ssl.
type ServerParamsSsl string

// ServerParamsSslMaxVer defines model for ServerParams.SslMaxVer.
type ServerParamsSslMaxVer string

// ServerParamsSslMinVer defines model for ServerParams.SslMinVer.
type ServerParamsSslMinVer string

// ServerParamsSslReuse defines model for ServerParams.SslReuse.
type ServerParamsSslReuse string

// ServerParamsSslv3 defines model for ServerParams.Sslv3.
type ServerParamsSslv3 string

// ServerParamsStick defines model for ServerParams.Stick.
type ServerParamsStick string

// ServerParamsTfo defines model for ServerParams.Tfo.
type ServerParamsTfo string

// ServerParamsTlsTickets defines model for ServerParams.TlsTickets.
type ServerParamsTlsTickets string

// ServerParamsTlsv10 defines model for ServerParams.Tlsv10.
type ServerParamsTlsv10 string

// ServerParamsTlsv11 defines model for ServerParams.Tlsv11.
type ServerParamsTlsv11 string

// ServerParamsTlsv12 defines model for ServerParams.Tlsv12.
type ServerParamsTlsv12 string

// ServerParamsTlsv13 defines model for ServerParams.Tlsv13.
type ServerParamsTlsv13 string

// ServerParamsVerify defines model for ServerParams.Verify.
type ServerParamsVerify string

// ServerParamsWs defines model for ServerParams.Ws.
type ServerParamsWs string

// ServerSwitchingRule HAProxy server switching rule configuration (corresponds to use-server directive)
type ServerSwitchingRule struct {
	Cond         *ServerSwitchingRuleCond           `json:"cond,omitempty"`
	CondTest     *string                            `json:"cond_test,omitempty"`
	Metadata     *map[string]map[string]interface{} `json:"metadata,omitempty"`
	TargetServer string                             `json:"target_server"`
}

// ServerSwitchingRuleCond defines model for ServerSwitchingRule.Cond.
type ServerSwitchingRuleCond string

// ServerSwitchingRules HAProxy backend server switching rules array (corresponds to use-server directives)
type ServerSwitchingRules = []ServerSwitchingRule

// ServerTemplate defines model for server_template.
type ServerTemplate struct {
	AgentAddr         *string                       `json:"agent-addr,omitempty"`
	AgentCheck        *ServerTemplateAgentCheck     `json:"agent-check,omitempty"`
	AgentInter        *int                          `json:"agent-inter"`
	AgentPort         *int                          `json:"agent-port"`
	AgentSend         *string                       `json:"agent-send,omitempty"`
	Allow0rtt         *bool                         `json:"allow_0rtt,omitempty"`
	Alpn              *string                       `json:"alpn,omitempty"`
	Backup            *ServerTemplateBackup         `json:"backup,omitempty"`
	Check             *ServerTemplateCheck          `json:"check,omitempty"`
	CheckPoolConnName *string                       `json:"check-pool-conn-name,omitempty"`
	CheckReusePool    *ServerTemplateCheckReusePool `json:"check-reuse-pool,omitempty"`
	CheckSendProxy    *ServerTemplateCheckSendProxy `json:"check-send-proxy,omitempty"`
	CheckSni          *string                       `json:"check-sni,omitempty"`
	CheckSsl          *ServerTemplateCheckSsl       `json:"check-ssl,omitempty"`
	CheckAlpn         *string                       `json:"check_alpn,omitempty"`
	CheckProto        *string                       `json:"check_proto,omitempty"`
	CheckViaSocks4    *ServerTemplateCheckViaSocks4 `json:"check_via_socks4,omitempty"`
	Ciphers           *string                       `json:"ciphers,omitempty"`
	Ciphersuites      *string                       `json:"ciphersuites,omitempty"`
	ClientSigalgs     *string                       `json:"client_sigalgs,omitempty"`
	Cookie            *string                       `json:"cookie,omitempty"`
	CrlFile           *string                       `json:"crl_file,omitempty"`
	Curves            *string                       `json:"curves,omitempty"`
	Downinter         *int                          `json:"downinter"`
	ErrorLimit        *int                          `json:"error_limit,omitempty"`
	Fall              *int                          `json:"fall"`
	Fastinter         *int                          `json:"fastinter"`

	// ForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	ForceSslv3 *ServerTemplateForceSslv3 `json:"force_sslv3,omitempty"`

	// ForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	ForceTlsv10 *ServerTemplateForceTlsv10 `json:"force_tlsv10,omitempty"`

	// ForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	ForceTlsv11 *ServerTemplateForceTlsv11 `json:"force_tlsv11,omitempty"`

	// ForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	ForceTlsv12 *ServerTemplateForceTlsv12 `json:"force_tlsv12,omitempty"`

	// ForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
	ForceTlsv13        *ServerTemplateForceTlsv13         `json:"force_tlsv13,omitempty"`
	Fqdn               string                             `json:"fqdn"`
	Guid               *string                            `json:"guid,omitempty"`
	HashKey            *string                            `json:"hash_key,omitempty"`
	HealthCheckAddress *string                            `json:"health_check_address,omitempty"`
	HealthCheckPort    *int                               `json:"health_check_port"`
	Id                 *int                               `json:"id"`
	IdlePing           *int                               `json:"idle_ping"`
	InitAddr           *string                            `json:"init-addr"`
	InitState          *ServerTemplateInitState           `json:"init-state,omitempty"`
	Inter              *int                               `json:"inter"`
	LogBufsize         *int                               `json:"log-bufsize"`
	LogProto           *ServerTemplateLogProto            `json:"log_proto,omitempty"`
	Maintenance        *ServerTemplateMaintenance         `json:"maintenance,omitempty"`
	MaxReuse           *int                               `json:"max_reuse"`
	Maxconn            *int                               `json:"maxconn"`
	Maxqueue           *int                               `json:"maxqueue"`
	Metadata           *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Minconn            *int                               `json:"minconn"`
	Namespace          *string                            `json:"namespace,omitempty"`

	// NoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
	NoSslv3 *ServerTemplateNoSslv3 `json:"no_sslv3,omitempty"`

	// NoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
	NoTlsv10 *ServerTemplateNoTlsv10 `json:"no_tlsv10,omitempty"`

	// NoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
	NoTlsv11 *ServerTemplateNoTlsv11 `json:"no_tlsv11,omitempty"`

	// NoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
	NoTlsv12 *ServerTemplateNoTlsv12 `json:"no_tlsv12,omitempty"`

	// NoTlsv13 This field is deprecated in favor of force_tlsv13, and will be removed in a future release
	NoTlsv13         *ServerTemplateNoTlsv13         `json:"no_tlsv13,omitempty"`
	NoVerifyhost     *ServerTemplateNoVerifyhost     `json:"no_verifyhost,omitempty"`
	Npn              *string                         `json:"npn,omitempty"`
	NumOrRange       string                          `json:"num_or_range"`
	Observe          *ServerTemplateObserve          `json:"observe,omitempty"`
	OnError          *ServerTemplateOnError          `json:"on-error,omitempty"`
	OnMarkedDown     *ServerTemplateOnMarkedDown     `json:"on-marked-down,omitempty"`
	OnMarkedUp       *ServerTemplateOnMarkedUp       `json:"on-marked-up,omitempty"`
	PoolConnName     *string                         `json:"pool_conn_name,omitempty"`
	PoolLowConn      *int                            `json:"pool_low_conn"`
	PoolMaxConn      *int                            `json:"pool_max_conn"`
	PoolPurgeDelay   *int                            `json:"pool_purge_delay"`
	Port             *int                            `json:"port"`
	Prefix           string                          `json:"prefix"`
	Proto            *string                         `json:"proto,omitempty"`
	ProxyV2Options   *[]ServerTemplateProxyV2Options `json:"proxy-v2-options,omitempty"`
	Redir            *string                         `json:"redir,omitempty"`
	ResolveNet       *string                         `json:"resolve-net,omitempty"`
	ResolvePrefer    *ServerTemplateResolvePrefer    `json:"resolve-prefer,omitempty"`
	ResolveOpts      *string                         `json:"resolve_opts,omitempty"`
	Resolvers        *string                         `json:"resolvers,omitempty"`
	Rise             *int                            `json:"rise"`
	SendProxy        *ServerTemplateSendProxy        `json:"send-proxy,omitempty"`
	SendProxyV2      *ServerTemplateSendProxyV2      `json:"send-proxy-v2,omitempty"`
	SendProxyV2Ssl   *ServerTemplateSendProxyV2Ssl   `json:"send_proxy_v2_ssl,omitempty"`
	SendProxyV2SslCn *ServerTemplateSendProxyV2SslCn `json:"send_proxy_v2_ssl_cn,omitempty"`
	SetProxyV2TlvFmt *struct {
		Id    string `json:"id"`
		Value string `json:"value"`
	} `json:"set-proxy-v2-tlv-fmt,omitempty"`
	Shard          *int                      `json:"shard,omitempty"`
	Sigalgs        *string                   `json:"sigalgs,omitempty"`
	Slowstart      *int                      `json:"slowstart"`
	Sni            *string                   `json:"sni,omitempty"`
	Socks4         *string                   `json:"socks4,omitempty"`
	Source         *string                   `json:"source,omitempty"`
	Ssl            *ServerTemplateSsl        `json:"ssl,omitempty"`
	SslCafile      *string                   `json:"ssl_cafile,omitempty"`
	SslCertificate *string                   `json:"ssl_certificate,omitempty"`
	SslMaxVer      *ServerTemplateSslMaxVer  `json:"ssl_max_ver,omitempty"`
	SslMinVer      *ServerTemplateSslMinVer  `json:"ssl_min_ver,omitempty"`
	SslReuse       *ServerTemplateSslReuse   `json:"ssl_reuse,omitempty"`
	Sslv3          *ServerTemplateSslv3      `json:"sslv3,omitempty"`
	Stick          *ServerTemplateStick      `json:"stick,omitempty"`
	StrictMaxconn  *bool                     `json:"strict-maxconn,omitempty"`
	TcpUt          *int                      `json:"tcp_ut"`
	Tfo            *ServerTemplateTfo        `json:"tfo,omitempty"`
	TlsTickets     *ServerTemplateTlsTickets `json:"tls_tickets,omitempty"`
	Tlsv10         *ServerTemplateTlsv10     `json:"tlsv10,omitempty"`
	Tlsv11         *ServerTemplateTlsv11     `json:"tlsv11,omitempty"`
	Tlsv12         *ServerTemplateTlsv12     `json:"tlsv12,omitempty"`
	Tlsv13         *ServerTemplateTlsv13     `json:"tlsv13,omitempty"`
	Track          *string                   `json:"track,omitempty"`
	Verify         *ServerTemplateVerify     `json:"verify,omitempty"`
	Verifyhost     *string                   `json:"verifyhost,omitempty"`
	Weight         *int                      `json:"weight"`
	Ws             *ServerTemplateWs         `json:"ws,omitempty"`
}

// ServerTemplateAgentCheck defines model for ServerTemplate.AgentCheck.
type ServerTemplateAgentCheck string

// ServerTemplateBackup defines model for ServerTemplate.Backup.
type ServerTemplateBackup string

// ServerTemplateCheck defines model for ServerTemplate.Check.
type ServerTemplateCheck string

// ServerTemplateCheckReusePool defines model for ServerTemplate.CheckReusePool.
type ServerTemplateCheckReusePool string

// ServerTemplateCheckSendProxy defines model for ServerTemplate.CheckSendProxy.
type ServerTemplateCheckSendProxy string

// ServerTemplateCheckSsl defines model for ServerTemplate.CheckSsl.
type ServerTemplateCheckSsl string

// ServerTemplateCheckViaSocks4 defines model for ServerTemplate.CheckViaSocks4.
type ServerTemplateCheckViaSocks4 string

// ServerTemplateForceSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
type ServerTemplateForceSslv3 string

// ServerTemplateForceTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
type ServerTemplateForceTlsv10 string

// ServerTemplateForceTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
type ServerTemplateForceTlsv11 string

// ServerTemplateForceTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
type ServerTemplateForceTlsv12 string

// ServerTemplateForceTlsv13 This field is deprecated in favor of tlsv13, and will be removed in a future release
type ServerTemplateForceTlsv13 string

// ServerTemplateInitState defines model for ServerTemplate.InitState.
type ServerTemplateInitState string

// ServerTemplateLogProto defines model for ServerTemplate.LogProto.
type ServerTemplateLogProto string

// ServerTemplateMaintenance defines model for ServerTemplate.Maintenance.
type ServerTemplateMaintenance string

// ServerTemplateNoSslv3 This field is deprecated in favor of sslv3, and will be removed in a future release
type ServerTemplateNoSslv3 string

// ServerTemplateNoTlsv10 This field is deprecated in favor of tlsv10, and will be removed in a future release
type ServerTemplateNoTlsv10 string

// ServerTemplateNoTlsv11 This field is deprecated in favor of tlsv11, and will be removed in a future release
type ServerTemplateNoTlsv11 string

// ServerTemplateNoTlsv12 This field is deprecated in favor of tlsv12, and will be removed in a future release
type ServerTemplateNoTlsv12 string

// ServerTemplateNoTlsv13 This field is deprecated in favor of force_tlsv13, and will be removed in a future release
type ServerTemplateNoTlsv13 string

// ServerTemplateNoVerifyhost defines model for ServerTemplate.NoVerifyhost.
type ServerTemplateNoVerifyhost string

// ServerTemplateObserve defines model for ServerTemplate.Observe.
type ServerTemplateObserve string

// ServerTemplateOnError defines model for ServerTemplate.OnError.
type ServerTemplateOnError string

// ServerTemplateOnMarkedDown defines model for ServerTemplate.OnMarkedDown.
type ServerTemplateOnMarkedDown string

// ServerTemplateOnMarkedUp defines model for ServerTemplate.OnMarkedUp.
type ServerTemplateOnMarkedUp string

// ServerTemplateProxyV2Options defines model for ServerTemplate.ProxyV2Options.
type ServerTemplateProxyV2Options string

// ServerTemplateResolvePrefer defines model for ServerTemplate.ResolvePrefer.
type ServerTemplateResolvePrefer string

// ServerTemplateSendProxy defines model for ServerTemplate.SendProxy.
type ServerTemplateSendProxy string

// ServerTemplateSendProxyV2 defines model for ServerTemplate.SendProxyV2.
type ServerTemplateSendProxyV2 string

// ServerTemplateSendProxyV2Ssl defines model for ServerTemplate.SendProxyV2Ssl.
type ServerTemplateSendProxyV2Ssl string

// ServerTemplateSendProxyV2SslCn defines model for ServerTemplate.SendProxyV2SslCn.
type ServerTemplateSendProxyV2SslCn string

// ServerTemplateSsl defines model for ServerTemplate.Ssl.
type ServerTemplateSsl string

// ServerTemplateSslMaxVer defines model for ServerTemplate.SslMaxVer.
type ServerTemplateSslMaxVer string

// ServerTemplateSslMinVer defines model for ServerTemplate.SslMinVer.
type ServerTemplateSslMinVer string

// ServerTemplateSslReuse defines model for ServerTemplate.SslReuse.
type ServerTemplateSslReuse string

// ServerTemplateSslv3 defines model for ServerTemplate.Sslv3.
type ServerTemplateSslv3 string

// ServerTemplateStick defines model for ServerTemplate.Stick.
type ServerTemplateStick string

// ServerTemplateTfo defines model for ServerTemplate.Tfo.
type ServerTemplateTfo string

// ServerTemplateTlsTickets defines model for ServerTemplate.TlsTickets.
type ServerTemplateTlsTickets string

// ServerTemplateTlsv10 defines model for ServerTemplate.Tlsv10.
type ServerTemplateTlsv10 string

// ServerTemplateTlsv11 defines model for ServerTemplate.Tlsv11.
type ServerTemplateTlsv11 string

// ServerTemplateTlsv12 defines model for ServerTemplate.Tlsv12.
type ServerTemplateTlsv12 string

// ServerTemplateTlsv13 defines model for ServerTemplate.Tlsv13.
type ServerTemplateTlsv13 string

// ServerTemplateVerify defines model for ServerTemplate.Verify.
type ServerTemplateVerify string

// ServerTemplateWs defines model for ServerTemplate.Ws.
type ServerTemplateWs string

// ServerTemplates HAProxy backend server templates array
type ServerTemplates = []ServerTemplate

// Servers HAProxy backend servers array
type Servers = []Server

// Site Site configuration. Sites are considered as one service and all farms connected to that service.
// Farms are connected to service using use-backend and default_backend directives. Sites let you
// configure simple HAProxy configurations, for more advanced options use /haproxy/configuration
// endpoints.
type Site struct {
	Farms *[]struct {
		Balance    *Balance       `json:"balance,omitempty"`
		Cond       *SiteFarmsCond `json:"cond,omitempty"`
		CondTest   *string        `json:"cond_test,omitempty"`
		Forwardfor *Forwardfor    `json:"forwardfor,omitempty"`
		Mode       *SiteFarmsMode `json:"mode,omitempty"`
		Name       string         `json:"name"`
		Servers    *[]Server      `json:"servers,omitempty"`
		UseAs      SiteFarmsUseAs `json:"use_as"`
	} `json:"farms,omitempty"`
	Name    string `json:"name"`
	Service *struct {
		HttpConnectionMode *SiteServiceHttpConnectionMode `json:"http_connection_mode,omitempty"`
		Listeners          *[]Bind                        `json:"listeners,omitempty"`
		Maxconn            *int                           `json:"maxconn"`
		Mode               *SiteServiceMode               `json:"mode,omitempty"`
	} `json:"service,omitempty"`
}

// SiteFarmsCond defines model for Site.Farms.Cond.
type SiteFarmsCond string

// SiteFarmsMode defines model for Site.Farms.Mode.
type SiteFarmsMode string

// SiteFarmsUseAs defines model for Site.Farms.UseAs.
type SiteFarmsUseAs string

// SiteServiceHttpConnectionMode defines model for Site.Service.HttpConnectionMode.
type SiteServiceHttpConnectionMode string

// SiteServiceMode defines model for Site.Service.Mode.
type SiteServiceMode string

// Sites Sites array. Sites are considered as one service and all farms connected to that service.
// Farms are connected to service using use-backend and default_backend directives. Sites let you
// configure simple HAProxy configurations, for more advanced options use /haproxy/configuration
// endpoints.
type Sites = []Site

// SmtpchkParams defines model for smtpchk_params.
type SmtpchkParams struct {
	Domain *string `json:"domain,omitempty"`
	Hello  *string `json:"hello,omitempty"`
}

// Source defines model for source.
type Source struct {
	Address       string        `json:"address"`
	AddressSecond *string       `json:"address_second,omitempty"`
	Hdr           *string       `json:"hdr,omitempty"`
	Interface     *string       `json:"interface,omitempty"`
	Occ           *string       `json:"occ,omitempty"`
	Port          *int          `json:"port,omitempty"`
	PortSecond    *int          `json:"port_second,omitempty"`
	Usesrc        *SourceUsesrc `json:"usesrc,omitempty"`
}

// SourceUsesrc defines model for Source.Usesrc.
type SourceUsesrc string

// SpoeAgent SPOE agent configuration
type SpoeAgent struct {
	Async           *SpoeAgentAsync           `json:"async,omitempty"`
	ContinueOnError *SpoeAgentContinueOnError `json:"continue-on-error,omitempty"`
	DontlogNormal   *SpoeAgentDontlogNormal   `json:"dontlog-normal,omitempty"`
	EngineName      *string                   `json:"engine-name,omitempty"`
	ForceSetVar     *SpoeAgentForceSetVar     `json:"force-set-var,omitempty"`
	Groups          *string                   `json:"groups,omitempty"`
	HelloTimeout    *int                      `json:"hello_timeout,omitempty"`
	IdleTimeout     *int                      `json:"idle_timeout,omitempty"`

	// Log HAProxy log target array (corresponds to log directives)
	Log                  *LogTargets               `json:"log,omitempty"`
	MaxFrameSize         *int                      `json:"max-frame-size,omitempty"`
	MaxWaitingFrames     *int                      `json:"max-waiting-frames,omitempty"`
	Maxconnrate          *int                      `json:"maxconnrate,omitempty"`
	Maxerrrate           *int                      `json:"maxerrrate,omitempty"`
	Messages             *string                   `json:"messages,omitempty"`
	Name                 string                    `json:"name"`
	OptionSetOnError     *string                   `json:"option_set-on-error,omitempty"`
	OptionSetProcessTime *string                   `json:"option_set-process-time,omitempty"`
	OptionSetTotalTime   *string                   `json:"option_set-total-time,omitempty"`
	OptionVarPrefix      *string                   `json:"option_var-prefix,omitempty"`
	Pipelining           *SpoeAgentPipelining      `json:"pipelining,omitempty"`
	ProcessingTimeout    *int                      `json:"processing_timeout,omitempty"`
	RegisterVarNames     *string                   `json:"register-var-names,omitempty"`
	SendFragPayload      *SpoeAgentSendFragPayload `json:"send-frag-payload,omitempty"`
	UseBackend           *string                   `json:"use-backend,omitempty"`
}

// SpoeAgentAsync defines model for SpoeAgent.Async.
type SpoeAgentAsync string

// SpoeAgentContinueOnError defines model for SpoeAgent.ContinueOnError.
type SpoeAgentContinueOnError string

// SpoeAgentDontlogNormal defines model for SpoeAgent.DontlogNormal.
type SpoeAgentDontlogNormal string

// SpoeAgentForceSetVar defines model for SpoeAgent.ForceSetVar.
type SpoeAgentForceSetVar string

// SpoeAgentPipelining defines model for SpoeAgent.Pipelining.
type SpoeAgentPipelining string

// SpoeAgentSendFragPayload defines model for SpoeAgent.SendFragPayload.
type SpoeAgentSendFragPayload string

// SpoeAgents SPOE Agents of one scope in SPOE file
type SpoeAgents = []SpoeAgent

// SpoeFiles SPOE files
type SpoeFiles = []string

// SpoeGroup SPOE group section configuration
type SpoeGroup struct {
	Messages *string `json:"messages,omitempty"`
	Name     string  `json:"name"`
}

// SpoeGroups SPOE Groups of one scope in SPOE file
type SpoeGroups = []SpoeGroup

// SpoeMessage SPOE message section configuration
type SpoeMessage struct {
	// Acl HAProxy ACL lines array (corresponds to acl directives)
	Acl   *Acls   `json:"acl,omitempty"`
	Args  *string `json:"args,omitempty"`
	Event *struct {
		Cond     *SpoeMessageEventCond `json:"cond,omitempty"`
		CondTest *string               `json:"cond_test,omitempty"`
		Name     SpoeMessageEventName  `json:"name"`
	} `json:"event,omitempty"`
	Name string `json:"name"`
}

// SpoeMessageEventCond defines model for SpoeMessage.Event.Cond.
type SpoeMessageEventCond string

// SpoeMessageEventName defines model for SpoeMessage.Event.Name.
type SpoeMessageEventName string

// SpoeMessages SPOE Messages of one scope in SPOE file
type SpoeMessages = []SpoeMessage

// SpoeScope SPOE scope name
type SpoeScope = string

// SpoeScopes All SPOE Scopes
type SpoeScopes = []SpoeScope

// SpoeTransaction SPOE configuration transaction
type SpoeTransaction struct {
	UnderscoreVersion *int                   `json:"_version,omitempty"`
	Id                *string                `json:"id,omitempty"`
	Status            *SpoeTransactionStatus `json:"status,omitempty"`
}

// SpoeTransactionStatus defines model for SpoeTransaction.Status.
type SpoeTransactionStatus string

// SpoeTransactions SPOE Configuration transactions array
type SpoeTransactions = []SpoeTransaction

// SslCaFile A file containing one or more SSL/TLS certificates and keys
type SslCaFile struct {
	Count       *string `json:"count,omitempty"`
	File        *string `json:"file,omitempty"`
	StorageName *string `json:"storage_name,omitempty"`
}

// SslCaFiles Array of SSL CA files
type SslCaFiles = []SslCaFile

// SslCertificate A file containing one or more SSL/TLS certificates and keys
type SslCertificate struct {
	Algorithm         *string    `json:"algorithm,omitempty"`
	AuthorityKeyId    *string    `json:"authority_key_id,omitempty"`
	ChainIssuer       *string    `json:"chain_issuer,omitempty"`
	ChainSubject      *string    `json:"chain_subject,omitempty"`
	Description       *string    `json:"description,omitempty"`
	Domains           *string    `json:"domains,omitempty"`
	File              *string    `json:"file,omitempty"`
	IpAddresses       *string    `json:"ip_addresses,omitempty"`
	Issuers           *string    `json:"issuers,omitempty"`
	NotAfter          *time.Time `json:"not_after"`
	NotBefore         *time.Time `json:"not_before"`
	Serial            *string    `json:"serial,omitempty"`
	Sha1FingerPrint   *string    `json:"sha1_finger_print,omitempty"`
	Sha256FingerPrint *string    `json:"sha256_finger_print,omitempty"`

	// Size File size in bytes.
	Size *int `json:"size"`

	// Status Only set when using the runtime API.
	Status                  *string `json:"status,omitempty"`
	StorageName             *string `json:"storage_name,omitempty"`
	Subject                 *string `json:"subject,omitempty"`
	SubjectAlternativeNames *string `json:"subject_alternative_names,omitempty"`
	SubjectKeyId            *string `json:"subject_key_id,omitempty"`
}

// SslCertificates Array of ssl certificate files
type SslCertificates = []SslCertificate

// SslCrl A file containing one or more SSL/TLS CRLs
type SslCrl struct {
	Description *string `json:"description,omitempty"`
	File        *string `json:"file,omitempty"`
	StorageName *string `json:"storage_name,omitempty"`
}

// SslCrlEntries defines model for ssl_crl_entries.
type SslCrlEntries = []SslCrlEntry

// SslCrlEntry A certificate revocation list entry.
type SslCrlEntry struct {
	Issuer              *string             `json:"issuer,omitempty"`
	LastUpdate          *openapi_types.Date `json:"last_update,omitempty"`
	NextUpdate          *openapi_types.Date `json:"next_update,omitempty"`
	RevokedCertificates *[]struct {
		RevocationDate *openapi_types.Date `json:"revocation_date,omitempty"`
		SerialNumber   *string             `json:"serial_number,omitempty"`
	} `json:"revoked_certificates,omitempty"`
	SignatureAlgorithm *string `json:"signature_algorithm,omitempty"`
	Status             *string `json:"status,omitempty"`
	StorageName        *string `json:"storage_name,omitempty"`
	Version            *string `json:"version,omitempty"`
}

// SslCrls Array of ssl crl files
type SslCrls = []SslCrl

// SslCrtList SSL Crt List file
type SslCrtList struct {
	File *string `json:"file,omitempty"`
}

// SslCrtListEntries Array of SSL Crt List Entry
type SslCrtListEntries = []SslCrtListEntry

// SslCrtListEntry SSL Crt List Entry
type SslCrtListEntry struct {
	File          *string   `json:"file,omitempty"`
	LineNumber    *int      `json:"line_number,omitempty"`
	SNIFilter     *[]string `json:"sni_filter,omitempty"`
	SSLBindConfig *string   `json:"ssl_bind_config,omitempty"`
}

// SslCrtListFile A file referencing one or more certificates with their configuration.
type SslCrtListFile struct {
	Description *string `json:"description,omitempty"`
	File        *string `json:"file,omitempty"`

	// Size File size in bytes.
	Size        *int    `json:"size"`
	StorageName *string `json:"storage_name,omitempty"`
}

// SslCrtListFiles List of SSL certificate list files (crt-list)
type SslCrtListFiles = []SslCrtListFile

// SslCrtLists Array of SSL Crt List
type SslCrtLists = []SslCrtList

// SSLFrontUse Assign a certificate to the current frontend
type SSLFrontUse struct {
	Allow0rtt *bool   `json:"allow_0rtt,omitempty"`
	Alpn      *string `json:"alpn,omitempty"`
	CaFile    *string `json:"ca_file,omitempty"`

	// Certificate Certificate filename
	Certificate   string  `json:"certificate"`
	Ciphers       *string `json:"ciphers,omitempty"`
	Ciphersuites  *string `json:"ciphersuites,omitempty"`
	ClientSigalgs *string `json:"client_sigalgs,omitempty"`
	CrlFile       *string `json:"crl_file,omitempty"`
	Curves        *string `json:"curves,omitempty"`
	Ecdhe         *string `json:"ecdhe,omitempty"`

	// Issuer OCSP issuer filename
	Issuer *string `json:"issuer,omitempty"`

	// Key Private key filename
	Key       *string                            `json:"key,omitempty"`
	Metadata  *map[string]map[string]interface{} `json:"metadata,omitempty"`
	NoAlpn    *bool                              `json:"no_alpn,omitempty"`
	NoCaNames *bool                              `json:"no_ca_names,omitempty"`
	Npn       *string                            `json:"npn,omitempty"`

	// Ocsp OCSP response filename
	Ocsp *string `json:"ocsp,omitempty"`

	// OcspUpdate Automatic OCSP response update
	OcspUpdate *SslFrontUseOcspUpdate `json:"ocsp_update,omitempty"`

	// Sctl Signed Certificate Timestamp List filename
	Sctl      *string               `json:"sctl,omitempty"`
	Sigalgs   *string               `json:"sigalgs,omitempty"`
	SslMaxVer *SslFrontUseSslMaxVer `json:"ssl_max_ver,omitempty"`
	SslMinVer *SslFrontUseSslMinVer `json:"ssl_min_ver,omitempty"`
	Verify    *SslFrontUseVerify    `json:"verify,omitempty"`
}

// SslFrontUseOcspUpdate Automatic OCSP response update
type SslFrontUseOcspUpdate string

// SslFrontUseSslMaxVer defines model for SslFrontUse.SslMaxVer.
type SslFrontUseSslMaxVer string

// SslFrontUseSslMinVer defines model for SslFrontUse.SslMinVer.
type SslFrontUseSslMinVer string

// SslFrontUseVerify defines model for SslFrontUse.Verify.
type SslFrontUseVerify string

// SSLFrontUses defines model for ssl_front_uses.
type SSLFrontUses = []SSLFrontUse

// SslOptions defines model for ssl_options.
type SslOptions struct {
	AcmeScheduler              *SslOptionsAcmeScheduler `json:"acme_scheduler,omitempty"`
	CaBase                     *string                  `json:"ca_base,omitempty"`
	CrtBase                    *string                  `json:"crt_base,omitempty"`
	DefaultBindCiphers         *string                  `json:"default_bind_ciphers,omitempty"`
	DefaultBindCiphersuites    *string                  `json:"default_bind_ciphersuites,omitempty"`
	DefaultBindClientSigalgs   *string                  `json:"default_bind_client_sigalgs,omitempty"`
	DefaultBindCurves          *string                  `json:"default_bind_curves,omitempty"`
	DefaultBindOptions         *string                  `json:"default_bind_options,omitempty"`
	DefaultBindSigalgs         *string                  `json:"default_bind_sigalgs,omitempty"`
	DefaultServerCiphers       *string                  `json:"default_server_ciphers,omitempty"`
	DefaultServerCiphersuites  *string                  `json:"default_server_ciphersuites,omitempty"`
	DefaultServerClientSigalgs *string                  `json:"default_server_client_sigalgs,omitempty"`
	DefaultServerCurves        *string                  `json:"default_server_curves,omitempty"`
	DefaultServerOptions       *string                  `json:"default_server_options,omitempty"`
	DefaultServerSigalgs       *string                  `json:"default_server_sigalgs,omitempty"`
	DhParamFile                *string                  `json:"dh_param_file,omitempty"`
	SslEngines                 *[]struct {
		Algorithms *string `json:"algorithms"`
		Name       string  `json:"name"`
	} `json:"engines,omitempty"`
	IssuersChainPath *string                 `json:"issuers_chain_path,omitempty"`
	LoadExtraFiles   *string                 `json:"load_extra_files,omitempty"`
	Maxsslconn       *int                    `json:"maxsslconn,omitempty"`
	Maxsslrate       *int                    `json:"maxsslrate,omitempty"`
	ModeAsync        *SslOptionsModeAsync    `json:"mode_async,omitempty"`
	Propquery        *string                 `json:"propquery,omitempty"`
	Provider         *string                 `json:"provider,omitempty"`
	ProviderPath     *string                 `json:"provider_path,omitempty"`
	SecurityLevel    *int                    `json:"security_level"`
	ServerVerify     *SslOptionsServerVerify `json:"server_verify,omitempty"`
	SkipSelfIssuedCa *bool                   `json:"skip_self_issued_ca,omitempty"`
}

// SslOptionsAcmeScheduler defines model for SslOptions.AcmeScheduler.
type SslOptionsAcmeScheduler string

// SslOptionsModeAsync defines model for SslOptions.ModeAsync.
type SslOptionsModeAsync string

// SslOptionsServerVerify defines model for SslOptions.ServerVerify.
type SslOptionsServerVerify string

// StatsAuth defines model for stats_auth.
type StatsAuth struct {
	Passwd string `json:"passwd"`
	User   string `json:"user"`
}

// StatsHttpRequest defines model for stats_http_request.
type StatsHttpRequest struct {
	Cond     *string              `json:"cond,omitempty"`
	CondTest *string              `json:"cond_test,omitempty"`
	Realm    *string              `json:"realm,omitempty"`
	Type     StatsHttpRequestType `json:"type"`
}

// StatsHttpRequestType defines model for StatsHttpRequest.Type.
type StatsHttpRequestType string

// StatsOptions defines model for stats_options.
type StatsOptions struct {
	StatsAdmin         *bool                       `json:"stats_admin,omitempty"`
	StatsAdminCond     *StatsOptionsStatsAdminCond `json:"stats_admin_cond,omitempty"`
	StatsAdminCondTest *string                     `json:"stats_admin_cond_test,omitempty"`
	StatsAuths         *[]StatsAuth                `json:"stats_auths,omitempty"`
	StatsEnable        *bool                       `json:"stats_enable,omitempty"`
	StatsHideVersion   *bool                       `json:"stats_hide_version,omitempty"`
	StatsHttpRequests  *[]StatsHttpRequest         `json:"stats_http_requests,omitempty"`
	StatsMaxconn       *int                        `json:"stats_maxconn,omitempty"`
	StatsRealm         *bool                       `json:"stats_realm,omitempty"`
	StatsRealmRealm    *string                     `json:"stats_realm_realm"`
	StatsRefreshDelay  *int                        `json:"stats_refresh_delay"`
	StatsShowDesc      *string                     `json:"stats_show_desc"`
	StatsShowLegends   *bool                       `json:"stats_show_legends,omitempty"`
	StatsShowModules   *bool                       `json:"stats_show_modules,omitempty"`
	StatsShowNodeName  *string                     `json:"stats_show_node_name"`
	StatsUriPrefix     *string                     `json:"stats_uri_prefix,omitempty"`
}

// StatsOptionsStatsAdminCond defines model for StatsOptions.StatsAdminCond.
type StatsOptionsStatsAdminCond string

// StickRule Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.
type StickRule struct {
	Cond     *StickRuleCond                     `json:"cond,omitempty"`
	CondTest *string                            `json:"cond_test,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Pattern  string                             `json:"pattern"`
	Table    *string                            `json:"table,omitempty"`
	Type     StickRuleType                      `json:"type"`
}

// StickRuleCond defines model for StickRule.Cond.
type StickRuleCond string

// StickRuleType defines model for StickRule.Type.
type StickRuleType string

// StickRules HAProxy backend stick rules array (corresponds to stick store-request, stick match, stick on, stick store-response)
type StickRules = []StickRule

// StickTable Stick Table Information
type StickTable struct {
	Fields *[]struct {
		Field  *StickTableFieldsField `json:"field,omitempty"`
		Period *int                   `json:"period,omitempty"`
		Type   *StickTableFieldsType  `json:"type,omitempty"`
	} `json:"fields,omitempty"`
	Name *string         `json:"name,omitempty"`
	Size *int            `json:"size"`
	Type *StickTableType `json:"type,omitempty"`
	Used *int            `json:"used"`
}

// StickTableFieldsField defines model for StickTable.Fields.Field.
type StickTableFieldsField string

// StickTableFieldsType defines model for StickTable.Fields.Type.
type StickTableFieldsType string

// StickTableType defines model for StickTable.Type.
type StickTableType string

// StickTableEntries Entries of one runtime stick table
type StickTableEntries = []StickTableEntry

// StickTableEntry One entry in stick table
type StickTableEntry struct {
	BytesInCnt   *int    `json:"bytes_in_cnt"`
	BytesInRate  *int    `json:"bytes_in_rate"`
	BytesOutCnt  *int    `json:"bytes_out_cnt"`
	BytesOutRate *int    `json:"bytes_out_rate"`
	ConnCnt      *int    `json:"conn_cnt"`
	ConnCur      *int    `json:"conn_cur"`
	ConnRate     *int    `json:"conn_rate"`
	Exp          *int    `json:"exp"`
	GlitchCnt    *int    `json:"glitch_cnt"`
	GlitchRate   *int    `json:"glitch_rate"`
	Gpc0         *int    `json:"gpc0"`
	Gpc0Rate     *int    `json:"gpc0_rate"`
	Gpc1         *int    `json:"gpc1"`
	Gpc1Rate     *int    `json:"gpc1_rate"`
	Gpt0         *int    `json:"gpt0"`
	HttpErrCnt   *int    `json:"http_err_cnt"`
	HttpErrRate  *int    `json:"http_err_rate"`
	HttpReqCnt   *int    `json:"http_req_cnt"`
	HttpReqRate  *int    `json:"http_req_rate"`
	Id           *string `json:"id,omitempty"`
	Key          *string `json:"key,omitempty"`
	ServerId     *int    `json:"server_id"`
	SessCnt      *int    `json:"sess_cnt"`
	SessRate     *int    `json:"sess_rate"`
	Use          *bool   `json:"use,omitempty"`
}

// StickTables Array of runtime stick tables
type StickTables = []StickTable

// Table defines model for table.
type Table struct {
	Expire   *string                            `json:"expire"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     *string                            `json:"name,omitempty"`
	NoPurge  *bool                              `json:"no_purge,omitempty"`
	RecvOnly *bool                              `json:"recv_only,omitempty"`
	Size     *string                            `json:"size,omitempty"`
	Store    *string                            `json:"store,omitempty"`
	Type     *TableType                         `json:"type,omitempty"`
	TypeLen  *int                               `json:"type_len"`
	WriteTo  *string                            `json:"write_to"`
}

// TableType defines model for Table.Type.
type TableType string

// Tables HAProxy table array
type Tables = []Table

// TcpCheck defines model for tcp_check.
type TcpCheck struct {
	Action          TcpCheckAction                     `json:"action"`
	Addr            *string                            `json:"addr,omitempty"`
	Alpn            *string                            `json:"alpn,omitempty"`
	CheckComment    *string                            `json:"check_comment,omitempty"`
	Data            *string                            `json:"data,omitempty"`
	Default         *bool                              `json:"default,omitempty"`
	ErrorStatus     *TcpCheckErrorStatus               `json:"error_status,omitempty"`
	ExclamationMark *bool                              `json:"exclamation_mark,omitempty"`
	Fmt             *string                            `json:"fmt,omitempty"`
	HexFmt          *string                            `json:"hex_fmt,omitempty"`
	HexString       *string                            `json:"hex_string,omitempty"`
	Linger          *bool                              `json:"linger,omitempty"`
	Match           *TcpCheckMatch                     `json:"match,omitempty"`
	Metadata        *map[string]map[string]interface{} `json:"metadata,omitempty"`
	MinRecv         *int                               `json:"min_recv,omitempty"`
	OkStatus        *TcpCheckOkStatus                  `json:"ok_status,omitempty"`
	OnError         *string                            `json:"on_error,omitempty"`
	OnSuccess       *string                            `json:"on_success,omitempty"`
	Pattern         *string                            `json:"pattern,omitempty"`
	Port            *int                               `json:"port"`
	PortString      *string                            `json:"port_string,omitempty"`
	Proto           *string                            `json:"proto,omitempty"`
	SendProxy       *bool                              `json:"send_proxy,omitempty"`
	Sni             *string                            `json:"sni,omitempty"`
	Ssl             *bool                              `json:"ssl,omitempty"`
	StatusCode      *string                            `json:"status-code,omitempty"`
	ToutStatus      *TcpCheckToutStatus                `json:"tout_status,omitempty"`
	VarExpr         *string                            `json:"var_expr,omitempty"`
	VarFmt          *string                            `json:"var_fmt,omitempty"`
	VarName         *string                            `json:"var_name,omitempty"`
	VarScope        *string                            `json:"var_scope,omitempty"`
	ViaSocks4       *bool                              `json:"via_socks4,omitempty"`
}

// TcpCheckAction defines model for TcpCheck.Action.
type TcpCheckAction string

// TcpCheckErrorStatus defines model for TcpCheck.ErrorStatus.
type TcpCheckErrorStatus string

// TcpCheckMatch defines model for TcpCheck.Match.
type TcpCheckMatch string

// TcpCheckOkStatus defines model for TcpCheck.OkStatus.
type TcpCheckOkStatus string

// TcpCheckToutStatus defines model for TcpCheck.ToutStatus.
type TcpCheckToutStatus string

// TcpChecks defines model for tcp_checks.
type TcpChecks = []TcpCheck

// TcpRequestRule HAProxy TCP Request Rule configuration (corresponds to tcp-request)
type TcpRequestRule struct {
	Action               *TcpRequestRuleAction              `json:"action,omitempty"`
	BandwidthLimitLimit  *string                            `json:"bandwidth_limit_limit,omitempty"`
	BandwidthLimitName   *string                            `json:"bandwidth_limit_name,omitempty"`
	BandwidthLimitPeriod *string                            `json:"bandwidth_limit_period,omitempty"`
	CaptureLen           *int                               `json:"capture_len,omitempty"`
	CaptureSample        *string                            `json:"capture_sample,omitempty"`
	Cond                 *TcpRequestRuleCond                `json:"cond,omitempty"`
	CondTest             *string                            `json:"cond_test,omitempty"`
	Expr                 *string                            `json:"expr,omitempty"`
	GptValue             *string                            `json:"gpt_value,omitempty"`
	LogLevel             *TcpRequestRuleLogLevel            `json:"log_level,omitempty"`
	LuaAction            *string                            `json:"lua_action,omitempty"`
	LuaParams            *string                            `json:"lua_params,omitempty"`
	MarkValue            *string                            `json:"mark_value,omitempty"`
	Metadata             *map[string]map[string]interface{} `json:"metadata,omitempty"`
	NiceValue            *int                               `json:"nice_value,omitempty"`
	ResolveProtocol      *TcpRequestRuleResolveProtocol     `json:"resolve_protocol,omitempty"`
	ResolveResolvers     *string                            `json:"resolve_resolvers,omitempty"`
	ResolveVar           *string                            `json:"resolve_var,omitempty"`
	RstTtl               *int                               `json:"rst_ttl,omitempty"`
	ScIdx                *string                            `json:"sc_idx,omitempty"`
	ScIncId              *string                            `json:"sc_inc_id,omitempty"`
	ScInt                *int                               `json:"sc_int"`
	ServerName           *string                            `json:"server_name,omitempty"`
	ServiceName          *string                            `json:"service_name,omitempty"`
	SpoeEngineName       *string                            `json:"spoe_engine_name,omitempty"`
	SpoeGroupName        *string                            `json:"spoe_group_name,omitempty"`
	SwitchModeProto      *string                            `json:"switch_mode_proto,omitempty"`
	Timeout              *int                               `json:"timeout"`
	TosValue             *string                            `json:"tos_value,omitempty"`
	TrackKey             *string                            `json:"track_key,omitempty"`
	TrackStickCounter    *int                               `json:"track_stick_counter"`
	TrackTable           *string                            `json:"track_table,omitempty"`
	Type                 TcpRequestRuleType                 `json:"type"`
	VarFormat            *string                            `json:"var_format,omitempty"`
	VarName              *string                            `json:"var_name,omitempty"`
	VarScope             *string                            `json:"var_scope,omitempty"`
}

// TcpRequestRuleAction defines model for TcpRequestRule.Action.
type TcpRequestRuleAction string

// TcpRequestRuleCond defines model for TcpRequestRule.Cond.
type TcpRequestRuleCond string

// TcpRequestRuleLogLevel defines model for TcpRequestRule.LogLevel.
type TcpRequestRuleLogLevel string

// TcpRequestRuleResolveProtocol defines model for TcpRequestRule.ResolveProtocol.
type TcpRequestRuleResolveProtocol string

// TcpRequestRuleType defines model for TcpRequestRule.Type.
type TcpRequestRuleType string

// TcpRequestRules HAProxy TCP request rules array (corresponds to tcp-request directive)
type TcpRequestRules = []TcpRequestRule

// TcpResponseRule HAProxy TCP Response Rule configuration (corresponds to tcp-response)
type TcpResponseRule struct {
	Action               *TcpResponseRuleAction             `json:"action,omitempty"`
	BandwidthLimitLimit  *string                            `json:"bandwidth_limit_limit,omitempty"`
	BandwidthLimitName   *string                            `json:"bandwidth_limit_name,omitempty"`
	BandwidthLimitPeriod *string                            `json:"bandwidth_limit_period,omitempty"`
	Cond                 *TcpResponseRuleCond               `json:"cond,omitempty"`
	CondTest             *string                            `json:"cond_test,omitempty"`
	Expr                 *string                            `json:"expr,omitempty"`
	LogLevel             *TcpResponseRuleLogLevel           `json:"log_level,omitempty"`
	LuaAction            *string                            `json:"lua_action,omitempty"`
	LuaParams            *string                            `json:"lua_params,omitempty"`
	MarkValue            *string                            `json:"mark_value,omitempty"`
	Metadata             *map[string]map[string]interface{} `json:"metadata,omitempty"`
	NiceValue            *int                               `json:"nice_value,omitempty"`
	RstTtl               *int                               `json:"rst_ttl,omitempty"`
	ScExpr               *string                            `json:"sc_expr,omitempty"`
	ScId                 *int                               `json:"sc_id,omitempty"`
	ScIdx                *int                               `json:"sc_idx,omitempty"`
	ScInt                *int                               `json:"sc_int"`
	SpoeEngine           *string                            `json:"spoe_engine,omitempty"`
	SpoeGroup            *string                            `json:"spoe_group,omitempty"`
	Timeout              *int                               `json:"timeout"`
	TosValue             *string                            `json:"tos_value,omitempty"`
	Type                 TcpResponseRuleType                `json:"type"`
	VarFormat            *string                            `json:"var_format,omitempty"`
	VarName              *string                            `json:"var_name,omitempty"`
	VarScope             *string                            `json:"var_scope,omitempty"`
}

// TcpResponseRuleAction defines model for TcpResponseRule.Action.
type TcpResponseRuleAction string

// TcpResponseRuleCond defines model for TcpResponseRule.Cond.
type TcpResponseRuleCond string

// TcpResponseRuleLogLevel defines model for TcpResponseRule.LogLevel.
type TcpResponseRuleLogLevel string

// TcpResponseRuleType defines model for TcpResponseRule.Type.
type TcpResponseRuleType string

// TcpResponseRules HAProxy TCP response rules array (corresponds to tcp-response directive)
type TcpResponseRules = []TcpResponseRule

// TraceEntries list of entries in a traces section
type TraceEntries = []TraceEntry

// TraceEntry Configure a trace event
type TraceEntry struct {
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`

	// Trace Trace parameters
	Trace string `json:"trace"`
}

// Traces Trace events configuration
type Traces struct {
	// Entries list of entries in a traces section
	Entries  *TraceEntries                      `json:"entries,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
}

// Transaction HAProxy configuration transaction
type Transaction struct {
	UnderscoreVersion *int               `json:"_version,omitempty"`
	Id                *string            `json:"id,omitempty"`
	Status            *TransactionStatus `json:"status,omitempty"`
}

// TransactionStatus defines model for Transaction.Status.
type TransactionStatus string

// Transactions Configuration transactions array
type Transactions = []Transaction

// TuneBufferOptions defines model for tune_buffer_options.
type TuneBufferOptions struct {
	BuffersLimit   *int `json:"buffers_limit"`
	BuffersReserve *int `json:"buffers_reserve,omitempty"`
	Bufsize        *int `json:"bufsize,omitempty"`
	BufsizeSmall   *int `json:"bufsize_small"`
	Pipesize       *int `json:"pipesize,omitempty"`
	RcvbufBackend  *int `json:"rcvbuf_backend"`
	RcvbufClient   *int `json:"rcvbuf_client"`
	RcvbufFrontend *int `json:"rcvbuf_frontend"`
	RcvbufServer   *int `json:"rcvbuf_server"`
	RecvEnough     *int `json:"recv_enough,omitempty"`
	SndbufBackend  *int `json:"sndbuf_backend"`
	SndbufClient   *int `json:"sndbuf_client"`
	SndbufFrontend *int `json:"sndbuf_frontend"`
	SndbufServer   *int `json:"sndbuf_server"`
}

// TuneLuaOptions defines model for tune_lua_options.
type TuneLuaOptions struct {
	BoolSampleConversion *TuneLuaOptionsBoolSampleConversion `json:"bool_sample_conversion,omitempty"`
	BurstTimeout         *int                                `json:"burst_timeout"`
	ForcedYield          *int                                `json:"forced_yield,omitempty"`
	LogLoggers           *TuneLuaOptionsLogLoggers           `json:"log_loggers,omitempty"`
	LogStderr            *TuneLuaOptionsLogStderr            `json:"log_stderr,omitempty"`
	Maxmem               *int                                `json:"maxmem"`
	ServiceTimeout       *int                                `json:"service_timeout"`
	SessionTimeout       *int                                `json:"session_timeout"`
	TaskTimeout          *int                                `json:"task_timeout"`
}

// TuneLuaOptionsBoolSampleConversion defines model for TuneLuaOptions.BoolSampleConversion.
type TuneLuaOptionsBoolSampleConversion string

// TuneLuaOptionsLogLoggers defines model for TuneLuaOptions.LogLoggers.
type TuneLuaOptionsLogLoggers string

// TuneLuaOptionsLogStderr defines model for TuneLuaOptions.LogStderr.
type TuneLuaOptionsLogStderr string

// TuneOptions defines model for tune_options.
type TuneOptions struct {
	AppletZeroCopyForwarding   *TuneOptionsAppletZeroCopyForwarding   `json:"applet_zero_copy_forwarding,omitempty"`
	CompMaxlevel               *int                                   `json:"comp_maxlevel,omitempty"`
	DisableFastForward         *bool                                  `json:"disable_fast_forward,omitempty"`
	DisableZeroCopyForwarding  *bool                                  `json:"disable_zero_copy_forwarding,omitempty"`
	EpollMaskEvents            *[]TuneOptionsEpollMaskEvents          `json:"epoll_mask_events,omitempty"`
	EventsMaxEventsAtOnce      *int                                   `json:"events_max_events_at_once,omitempty"`
	FailAlloc                  *bool                                  `json:"fail_alloc,omitempty"`
	FdEdgeTriggered            *TuneOptionsFdEdgeTriggered            `json:"fd_edge_triggered,omitempty"`
	GlitchesKillCpuUsage       *int                                   `json:"glitches_kill_cpu_usage"`
	H1ZeroCopyFwdRecv          *TuneOptionsH1ZeroCopyFwdRecv          `json:"h1_zero_copy_fwd_recv,omitempty"`
	H1ZeroCopyFwdSend          *TuneOptionsH1ZeroCopyFwdSend          `json:"h1_zero_copy_fwd_send,omitempty"`
	H2BeGlitchesThreshold      *int                                   `json:"h2_be_glitches_threshold"`
	H2BeInitialWindowSize      *int                                   `json:"h2_be_initial_window_size,omitempty"`
	H2BeMaxConcurrentStreams   *int                                   `json:"h2_be_max_concurrent_streams,omitempty"`
	H2BeRxbuf                  *int                                   `json:"h2_be_rxbuf"`
	H2FeGlitchesThreshold      *int                                   `json:"h2_fe_glitches_threshold"`
	H2FeInitialWindowSize      *int                                   `json:"h2_fe_initial_window_size,omitempty"`
	H2FeMaxConcurrentStreams   *int                                   `json:"h2_fe_max_concurrent_streams,omitempty"`
	H2FeMaxTotalStreams        *int                                   `json:"h2_fe_max_total_streams"`
	H2FeRxbuf                  *int                                   `json:"h2_fe_rxbuf"`
	H2HeaderTableSize          *int                                   `json:"h2_header_table_size,omitempty"`
	H2InitialWindowSize        *int                                   `json:"h2_initial_window_size"`
	H2MaxConcurrentStreams     *int                                   `json:"h2_max_concurrent_streams,omitempty"`
	H2MaxFrameSize             *int                                   `json:"h2_max_frame_size,omitempty"`
	H2ZeroCopyFwdSend          *TuneOptionsH2ZeroCopyFwdSend          `json:"h2_zero_copy_fwd_send,omitempty"`
	HttpCookielen              *int                                   `json:"http_cookielen,omitempty"`
	HttpLogurilen              *int                                   `json:"http_logurilen,omitempty"`
	HttpMaxhdr                 *int                                   `json:"http_maxhdr,omitempty"`
	IdlePoolShared             *TuneOptionsIdlePoolShared             `json:"idle_pool_shared,omitempty"`
	Idletimer                  *int                                   `json:"idletimer"`
	ListenerDefaultShards      *TuneOptionsListenerDefaultShards      `json:"listener_default_shards,omitempty"`
	ListenerMultiQueue         *TuneOptionsListenerMultiQueue         `json:"listener_multi_queue,omitempty"`
	MaxChecksPerThread         *int                                   `json:"max_checks_per_thread"`
	MaxRulesAtOnce             *int                                   `json:"max_rules_at_once"`
	Maxaccept                  *int                                   `json:"maxaccept,omitempty"`
	Maxpollevents              *int                                   `json:"maxpollevents,omitempty"`
	Maxrewrite                 *int                                   `json:"maxrewrite,omitempty"`
	MemoryHotSize              *int                                   `json:"memory_hot_size"`
	NotsentLowatClient         *int                                   `json:"notsent_lowat_client"`
	NotsentLowatServer         *int                                   `json:"notsent_lowat_server"`
	PatternCacheSize           *int                                   `json:"pattern_cache_size"`
	PeersMaxUpdatesAtOnce      *int                                   `json:"peers_max_updates_at_once,omitempty"`
	PoolHighFdRatio            *int                                   `json:"pool_high_fd_ratio,omitempty"`
	PoolLowFdRatio             *int                                   `json:"pool_low_fd_ratio,omitempty"`
	PtZeroCopyForwarding       *TuneOptionsPtZeroCopyForwarding       `json:"pt_zero_copy_forwarding,omitempty"`
	ReniceRuntime              *int                                   `json:"renice_runtime"`
	ReniceStartup              *int                                   `json:"renice_startup"`
	RingQueues                 *int                                   `json:"ring_queues"`
	RunqueueDepth              *int                                   `json:"runqueue_depth,omitempty"`
	SchedLowLatency            *TuneOptionsSchedLowLatency            `json:"sched_low_latency,omitempty"`
	StickCounters              *int                                   `json:"stick_counters"`
	TakeoverOtherTgConnections *TuneOptionsTakeoverOtherTgConnections `json:"takeover_other_tg_connections,omitempty"`
}

// TuneOptionsAppletZeroCopyForwarding defines model for TuneOptions.AppletZeroCopyForwarding.
type TuneOptionsAppletZeroCopyForwarding string

// TuneOptionsEpollMaskEvents defines model for TuneOptions.EpollMaskEvents.
type TuneOptionsEpollMaskEvents string

// TuneOptionsFdEdgeTriggered defines model for TuneOptions.FdEdgeTriggered.
type TuneOptionsFdEdgeTriggered string

// TuneOptionsH1ZeroCopyFwdRecv defines model for TuneOptions.H1ZeroCopyFwdRecv.
type TuneOptionsH1ZeroCopyFwdRecv string

// TuneOptionsH1ZeroCopyFwdSend defines model for TuneOptions.H1ZeroCopyFwdSend.
type TuneOptionsH1ZeroCopyFwdSend string

// TuneOptionsH2ZeroCopyFwdSend defines model for TuneOptions.H2ZeroCopyFwdSend.
type TuneOptionsH2ZeroCopyFwdSend string

// TuneOptionsIdlePoolShared defines model for TuneOptions.IdlePoolShared.
type TuneOptionsIdlePoolShared string

// TuneOptionsListenerDefaultShards defines model for TuneOptions.ListenerDefaultShards.
type TuneOptionsListenerDefaultShards string

// TuneOptionsListenerMultiQueue defines model for TuneOptions.ListenerMultiQueue.
type TuneOptionsListenerMultiQueue string

// TuneOptionsPtZeroCopyForwarding defines model for TuneOptions.PtZeroCopyForwarding.
type TuneOptionsPtZeroCopyForwarding string

// TuneOptionsSchedLowLatency defines model for TuneOptions.SchedLowLatency.
type TuneOptionsSchedLowLatency string

// TuneOptionsTakeoverOtherTgConnections defines model for TuneOptions.TakeoverOtherTgConnections.
type TuneOptionsTakeoverOtherTgConnections string

// TuneQuicOptions defines model for tune_quic_options.
type TuneQuicOptions struct {
	FrontendConnTxBuffersLimit *int                            `json:"frontend_conn_tx_buffers_limit"`
	FrontendMaxIdleTimeout     *int                            `json:"frontend_max_idle_timeout"`
	FrontendMaxStreamsBidi     *int                            `json:"frontend_max_streams_bidi"`
	FrontendMaxTxMemory        *int                            `json:"frontend_max_tx_memory"`
	MaxFrameLoss               *int                            `json:"max_frame_loss"`
	ReorderRatio               *int                            `json:"reorder_ratio"`
	RetryThreshold             *int                            `json:"retry_threshold"`
	SocketOwner                *TuneQuicOptionsSocketOwner     `json:"socket_owner,omitempty"`
	ZeroCopyFwdSend            *TuneQuicOptionsZeroCopyFwdSend `json:"zero_copy_fwd_send,omitempty"`
}

// TuneQuicOptionsSocketOwner defines model for TuneQuicOptions.SocketOwner.
type TuneQuicOptionsSocketOwner string

// TuneQuicOptionsZeroCopyFwdSend defines model for TuneQuicOptions.ZeroCopyFwdSend.
type TuneQuicOptionsZeroCopyFwdSend string

// TuneSslOptions defines model for tune_ssl_options.
type TuneSslOptions struct {
	Cachesize          *int                  `json:"cachesize"`
	CaptureBufferSize  *int                  `json:"capture_buffer_size"`
	CtxCacheSize       *int                  `json:"ctx_cache_size,omitempty"`
	DefaultDhParam     *int                  `json:"default_dh_param,omitempty"`
	ForcePrivateCache  *bool                 `json:"force_private_cache,omitempty"`
	Keylog             *TuneSslOptionsKeylog `json:"keylog,omitempty"`
	Lifetime           *int                  `json:"lifetime"`
	Maxrecord          *int                  `json:"maxrecord"`
	OcspUpdateMaxDelay *int                  `json:"ocsp_update_max_delay"`
	OcspUpdateMinDelay *int                  `json:"ocsp_update_min_delay"`
}

// TuneSslOptionsKeylog defines model for TuneSslOptions.Keylog.
type TuneSslOptionsKeylog string

// TuneVarsOptions defines model for tune_vars_options.
type TuneVarsOptions struct {
	GlobalMaxSize *int `json:"global_max_size"`
	ProcMaxSize   *int `json:"proc_max_size"`
	ReqresMaxSize *int `json:"reqres_max_size"`
	SessMaxSize   *int `json:"sess_max_size"`
	TxnMaxSize    *int `json:"txn_max_size"`
}

// TuneZlibOptions defines model for tune_zlib_options.
type TuneZlibOptions struct {
	Memlevel   *int `json:"memlevel,omitempty"`
	Windowsize *int `json:"windowsize,omitempty"`
}

// User HAProxy userlist user
type User struct {
	Groups         *string                            `json:"groups,omitempty"`
	Metadata       *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Password       string                             `json:"password"`
	SecurePassword bool                               `json:"secure_password"`
	Username       string                             `json:"username"`
}

// Userlist defines model for userlist.
type Userlist struct {
	Groups   *map[string]Group                  `json:"groups,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
	Users    *map[string]User                   `json:"users,omitempty"`
}

// UserlistBase HAProxy configuration of access control
type UserlistBase struct {
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name     string                             `json:"name"`
}

// Userlists HAProxy userlists array
type Userlists = []Userlist

// Users HAProxy userlist users array
type Users = []User

// WurflOptions defines model for wurfl_options.
type WurflOptions struct {
	CacheSize                *int    `json:"cache_size,omitempty"`
	DataFile                 *string `json:"data_file,omitempty"`
	InformationList          *string `json:"information_list,omitempty"`
	InformationListSeparator *string `json:"information_list_separator,omitempty"`
	PatchFile                *string `json:"patch_file,omitempty"`
}

// ForceReload defines model for force_reload.
type ForceReload = bool

// FullSection defines model for full_section.
type FullSection = bool

// ParentName defines model for parent_name.
type ParentName = string

// SkipReload defines model for skip_reload.
type SkipReload = bool

// TransactionId defines model for transaction_id.
type TransactionId = string

// Version defines model for version.
type Version = int

// AlreadyExists API Error
type AlreadyExists = Error

// BadRequest API Error
type BadRequest = Error

// DefaultError API Error
type DefaultError = Error

// NotAcceptable API Error
type NotAcceptable = Error

// NotFound API Error
type NotFound = Error

// FcgiApp App with all it's children resources
type FcgiApp = FCGIApp

// QuicInitialRule QUIC Initial configuration
type QuicInitialRule = QUICInitialRule

// QuicInitialRules defines model for quic_initial_rules.
type QuicInitialRules = QUICInitialRules

// SslFrontUse Assign a certificate to the current frontend
type SslFrontUse = SSLFrontUse

// DeleteClusterParams defines parameters for DeleteCluster.
type DeleteClusterParams struct {
	// Configuration In case of moving to single mode do we keep or clean configuration
	Configuration *DeleteClusterParamsConfiguration `form:"configuration,omitempty" json:"configuration,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// DeleteClusterParamsConfiguration defines parameters for DeleteCluster.
type DeleteClusterParamsConfiguration string

// PostClusterParams defines parameters for PostCluster.
type PostClusterParams struct {
	// Configuration In case of moving to single mode do we keep or clean configuration
	Configuration *PostClusterParamsConfiguration `form:"configuration,omitempty" json:"configuration,omitempty"`

	// AdvertisedAddress Force the advertised address when joining a cluster
	AdvertisedAddress *string `form:"advertised_address,omitempty" json:"advertised_address,omitempty"`

	// AdvertisedPort Force the advertised port when joining a cluster
	AdvertisedPort *int `form:"advertised_port,omitempty" json:"advertised_port,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// PostClusterParamsConfiguration defines parameters for PostCluster.
type PostClusterParamsConfiguration string

// EditClusterParams defines parameters for EditCluster.
type EditClusterParams struct {
	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetAcmeProvidersParams defines parameters for GetAcmeProviders.
type GetAcmeProvidersParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateAcmeProviderParams defines parameters for CreateAcmeProvider.
type CreateAcmeProviderParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteAcmeProviderParams defines parameters for DeleteAcmeProvider.
type DeleteAcmeProviderParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAcmeProviderParams defines parameters for GetAcmeProvider.
type GetAcmeProviderParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// EditAcmeProviderParams defines parameters for EditAcmeProvider.
type EditAcmeProviderParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetBackendsParams defines parameters for GetBackends.
type GetBackendsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateBackendParams defines parameters for CreateBackend.
type CreateBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteBackendParams defines parameters for DeleteBackend.
type DeleteBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetBackendParams defines parameters for GetBackend.
type GetBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceBackendParams defines parameters for ReplaceBackend.
type ReplaceBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllAclBackendParams defines parameters for GetAllAclBackend.
type GetAllAclBackendParams struct {
	// AclName ACL name
	AclName *string `form:"acl_name,omitempty" json:"acl_name,omitempty"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllAclBackendParams defines parameters for ReplaceAllAclBackend.
type ReplaceAllAclBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteAclBackendParams defines parameters for DeleteAclBackend.
type DeleteAclBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAclBackendParams defines parameters for GetAclBackend.
type GetAclBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateAclBackendParams defines parameters for CreateAclBackend.
type CreateAclBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceAclBackendParams defines parameters for ReplaceAclBackend.
type ReplaceAclBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllFilterBackendParams defines parameters for GetAllFilterBackend.
type GetAllFilterBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllFilterBackendParams defines parameters for ReplaceAllFilterBackend.
type ReplaceAllFilterBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteFilterBackendParams defines parameters for DeleteFilterBackend.
type DeleteFilterBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetFilterBackendParams defines parameters for GetFilterBackend.
type GetFilterBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateFilterBackendParams defines parameters for CreateFilterBackend.
type CreateFilterBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceFilterBackendParams defines parameters for ReplaceFilterBackend.
type ReplaceFilterBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPAfterResponseRuleBackendParams defines parameters for GetAllHTTPAfterResponseRuleBackend.
type GetAllHTTPAfterResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPAfterResponseRuleBackendParams defines parameters for ReplaceAllHTTPAfterResponseRuleBackend.
type ReplaceAllHTTPAfterResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPAfterResponseRuleBackendParams defines parameters for DeleteHTTPAfterResponseRuleBackend.
type DeleteHTTPAfterResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPAfterResponseRuleBackendParams defines parameters for GetHTTPAfterResponseRuleBackend.
type GetHTTPAfterResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPAfterResponseRuleBackendParams defines parameters for CreateHTTPAfterResponseRuleBackend.
type CreateHTTPAfterResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPAfterResponseRuleBackendParams defines parameters for ReplaceHTTPAfterResponseRuleBackend.
type ReplaceHTTPAfterResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPCheckBackendParams defines parameters for GetAllHTTPCheckBackend.
type GetAllHTTPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPCheckBackendParams defines parameters for ReplaceAllHTTPCheckBackend.
type ReplaceAllHTTPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPCheckBackendParams defines parameters for DeleteHTTPCheckBackend.
type DeleteHTTPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPCheckBackendParams defines parameters for GetHTTPCheckBackend.
type GetHTTPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPCheckBackendParams defines parameters for CreateHTTPCheckBackend.
type CreateHTTPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPCheckBackendParams defines parameters for ReplaceHTTPCheckBackend.
type ReplaceHTTPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPErrorRuleBackendParams defines parameters for GetAllHTTPErrorRuleBackend.
type GetAllHTTPErrorRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPErrorRuleBackendParams defines parameters for ReplaceAllHTTPErrorRuleBackend.
type ReplaceAllHTTPErrorRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPErrorRuleBackendParams defines parameters for DeleteHTTPErrorRuleBackend.
type DeleteHTTPErrorRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPErrorRuleBackendParams defines parameters for GetHTTPErrorRuleBackend.
type GetHTTPErrorRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPErrorRuleBackendParams defines parameters for CreateHTTPErrorRuleBackend.
type CreateHTTPErrorRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPErrorRuleBackendParams defines parameters for ReplaceHTTPErrorRuleBackend.
type ReplaceHTTPErrorRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPRequestRuleBackendParams defines parameters for GetAllHTTPRequestRuleBackend.
type GetAllHTTPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPRequestRuleBackendParams defines parameters for ReplaceAllHTTPRequestRuleBackend.
type ReplaceAllHTTPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPRequestRuleBackendParams defines parameters for DeleteHTTPRequestRuleBackend.
type DeleteHTTPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPRequestRuleBackendParams defines parameters for GetHTTPRequestRuleBackend.
type GetHTTPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPRequestRuleBackendParams defines parameters for CreateHTTPRequestRuleBackend.
type CreateHTTPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPRequestRuleBackendParams defines parameters for ReplaceHTTPRequestRuleBackend.
type ReplaceHTTPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPResponseRuleBackendParams defines parameters for GetAllHTTPResponseRuleBackend.
type GetAllHTTPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPResponseRuleBackendParams defines parameters for ReplaceAllHTTPResponseRuleBackend.
type ReplaceAllHTTPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPResponseRuleBackendParams defines parameters for DeleteHTTPResponseRuleBackend.
type DeleteHTTPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPResponseRuleBackendParams defines parameters for GetHTTPResponseRuleBackend.
type GetHTTPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPResponseRuleBackendParams defines parameters for CreateHTTPResponseRuleBackend.
type CreateHTTPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPResponseRuleBackendParams defines parameters for ReplaceHTTPResponseRuleBackend.
type ReplaceHTTPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllLogTargetBackendParams defines parameters for GetAllLogTargetBackend.
type GetAllLogTargetBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllLogTargetBackendParams defines parameters for ReplaceAllLogTargetBackend.
type ReplaceAllLogTargetBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteLogTargetBackendParams defines parameters for DeleteLogTargetBackend.
type DeleteLogTargetBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogTargetBackendParams defines parameters for GetLogTargetBackend.
type GetLogTargetBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateLogTargetBackendParams defines parameters for CreateLogTargetBackend.
type CreateLogTargetBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceLogTargetBackendParams defines parameters for ReplaceLogTargetBackend.
type ReplaceLogTargetBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetServerSwitchingRulesParams defines parameters for GetServerSwitchingRules.
type GetServerSwitchingRulesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceServerSwitchingRulesParams defines parameters for ReplaceServerSwitchingRules.
type ReplaceServerSwitchingRulesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteServerSwitchingRuleParams defines parameters for DeleteServerSwitchingRule.
type DeleteServerSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetServerSwitchingRuleParams defines parameters for GetServerSwitchingRule.
type GetServerSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateServerSwitchingRuleParams defines parameters for CreateServerSwitchingRule.
type CreateServerSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceServerSwitchingRuleParams defines parameters for ReplaceServerSwitchingRule.
type ReplaceServerSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetServerTemplatesParams defines parameters for GetServerTemplates.
type GetServerTemplatesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateServerTemplateParams defines parameters for CreateServerTemplate.
type CreateServerTemplateParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteServerTemplateParams defines parameters for DeleteServerTemplate.
type DeleteServerTemplateParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetServerTemplateParams defines parameters for GetServerTemplate.
type GetServerTemplateParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceServerTemplateParams defines parameters for ReplaceServerTemplate.
type ReplaceServerTemplateParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllServerBackendParams defines parameters for GetAllServerBackend.
type GetAllServerBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateServerBackendParams defines parameters for CreateServerBackend.
type CreateServerBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteServerBackendParams defines parameters for DeleteServerBackend.
type DeleteServerBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetServerBackendParams defines parameters for GetServerBackend.
type GetServerBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceServerBackendParams defines parameters for ReplaceServerBackend.
type ReplaceServerBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetStickRulesParams defines parameters for GetStickRules.
type GetStickRulesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceStickRulesParams defines parameters for ReplaceStickRules.
type ReplaceStickRulesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteStickRuleParams defines parameters for DeleteStickRule.
type DeleteStickRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetStickRuleParams defines parameters for GetStickRule.
type GetStickRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateStickRuleParams defines parameters for CreateStickRule.
type CreateStickRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceStickRuleParams defines parameters for ReplaceStickRule.
type ReplaceStickRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllTCPCheckBackendParams defines parameters for GetAllTCPCheckBackend.
type GetAllTCPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllTCPCheckBackendParams defines parameters for ReplaceAllTCPCheckBackend.
type ReplaceAllTCPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTCPCheckBackendParams defines parameters for DeleteTCPCheckBackend.
type DeleteTCPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTCPCheckBackendParams defines parameters for GetTCPCheckBackend.
type GetTCPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTCPCheckBackendParams defines parameters for CreateTCPCheckBackend.
type CreateTCPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTCPCheckBackendParams defines parameters for ReplaceTCPCheckBackend.
type ReplaceTCPCheckBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllTCPRequestRuleBackendParams defines parameters for GetAllTCPRequestRuleBackend.
type GetAllTCPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllTCPRequestRuleBackendParams defines parameters for ReplaceAllTCPRequestRuleBackend.
type ReplaceAllTCPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTCPRequestRuleBackendParams defines parameters for DeleteTCPRequestRuleBackend.
type DeleteTCPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTCPRequestRuleBackendParams defines parameters for GetTCPRequestRuleBackend.
type GetTCPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTCPRequestRuleBackendParams defines parameters for CreateTCPRequestRuleBackend.
type CreateTCPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTCPRequestRuleBackendParams defines parameters for ReplaceTCPRequestRuleBackend.
type ReplaceTCPRequestRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllTCPResponseRuleBackendParams defines parameters for GetAllTCPResponseRuleBackend.
type GetAllTCPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllTCPResponseRuleBackendParams defines parameters for ReplaceAllTCPResponseRuleBackend.
type ReplaceAllTCPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTCPResponseRuleBackendParams defines parameters for DeleteTCPResponseRuleBackend.
type DeleteTCPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTCPResponseRuleBackendParams defines parameters for GetTCPResponseRuleBackend.
type GetTCPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTCPResponseRuleBackendParams defines parameters for CreateTCPResponseRuleBackend.
type CreateTCPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTCPResponseRuleBackendParams defines parameters for ReplaceTCPResponseRuleBackend.
type ReplaceTCPResponseRuleBackendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetCachesParams defines parameters for GetCaches.
type GetCachesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateCacheParams defines parameters for CreateCache.
type CreateCacheParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteCacheParams defines parameters for DeleteCache.
type DeleteCacheParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetCacheParams defines parameters for GetCache.
type GetCacheParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceCacheParams defines parameters for ReplaceCache.
type ReplaceCacheParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetCrtLoadsParams defines parameters for GetCrtLoads.
type GetCrtLoadsParams struct {
	// CrtStore Parent crt_store name
	CrtStore string `form:"crt_store" json:"crt_store"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateCrtLoadParams defines parameters for CreateCrtLoad.
type CreateCrtLoadParams struct {
	// CrtStore Parent crt_store section name
	CrtStore string `form:"crt_store" json:"crt_store"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteCrtLoadParams defines parameters for DeleteCrtLoad.
type DeleteCrtLoadParams struct {
	// CrtStore Parent crt_store section name
	CrtStore string `form:"crt_store" json:"crt_store"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetCrtLoadParams defines parameters for GetCrtLoad.
type GetCrtLoadParams struct {
	// CrtStore Parent crt_store name
	CrtStore string `form:"crt_store" json:"crt_store"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceCrtLoadParams defines parameters for ReplaceCrtLoad.
type ReplaceCrtLoadParams struct {
	// CrtStore Parent crt_store section name
	CrtStore string `form:"crt_store" json:"crt_store"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetCrtStoresParams defines parameters for GetCrtStores.
type GetCrtStoresParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateCrtStoreParams defines parameters for CreateCrtStore.
type CreateCrtStoreParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteCrtStoreParams defines parameters for DeleteCrtStore.
type DeleteCrtStoreParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetCrtStoreParams defines parameters for GetCrtStore.
type GetCrtStoreParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// EditCrtStoreParams defines parameters for EditCrtStore.
type EditCrtStoreParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetDefaultsSectionsParams defines parameters for GetDefaultsSections.
type GetDefaultsSectionsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// AddDefaultsSectionParams defines parameters for AddDefaultsSection.
type AddDefaultsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateDefaultsSectionParams defines parameters for CreateDefaultsSection.
type CreateDefaultsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteDefaultsSectionParams defines parameters for DeleteDefaultsSection.
type DeleteDefaultsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetDefaultsSectionParams defines parameters for GetDefaultsSection.
type GetDefaultsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceDefaultsSectionParams defines parameters for ReplaceDefaultsSection.
type ReplaceDefaultsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllAclDefaultsParams defines parameters for GetAllAclDefaults.
type GetAllAclDefaultsParams struct {
	// AclName ACL name
	AclName *string `form:"acl_name,omitempty" json:"acl_name,omitempty"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllAclDefaultsParams defines parameters for ReplaceAllAclDefaults.
type ReplaceAllAclDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteAclDefaultsParams defines parameters for DeleteAclDefaults.
type DeleteAclDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAclDefaultsParams defines parameters for GetAclDefaults.
type GetAclDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateAclDefaultsParams defines parameters for CreateAclDefaults.
type CreateAclDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceAclDefaultsParams defines parameters for ReplaceAclDefaults.
type ReplaceAclDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPAfterResponseRuleDefaultsParams defines parameters for GetAllHTTPAfterResponseRuleDefaults.
type GetAllHTTPAfterResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPAfterResponseRuleDefaultsParams defines parameters for ReplaceAllHTTPAfterResponseRuleDefaults.
type ReplaceAllHTTPAfterResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPAfterResponseRuleDefaultsParams defines parameters for DeleteHTTPAfterResponseRuleDefaults.
type DeleteHTTPAfterResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPAfterResponseRuleDefaultsParams defines parameters for GetHTTPAfterResponseRuleDefaults.
type GetHTTPAfterResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPAfterResponseRuleDefaultsParams defines parameters for CreateHTTPAfterResponseRuleDefaults.
type CreateHTTPAfterResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPAfterResponseRuleDefaultsParams defines parameters for ReplaceHTTPAfterResponseRuleDefaults.
type ReplaceHTTPAfterResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPCheckDefaultsParams defines parameters for GetAllHTTPCheckDefaults.
type GetAllHTTPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPCheckDefaultsParams defines parameters for ReplaceAllHTTPCheckDefaults.
type ReplaceAllHTTPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPCheckDefaultsParams defines parameters for DeleteHTTPCheckDefaults.
type DeleteHTTPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPCheckDefaultsParams defines parameters for GetHTTPCheckDefaults.
type GetHTTPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPCheckDefaultsParams defines parameters for CreateHTTPCheckDefaults.
type CreateHTTPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPCheckDefaultsParams defines parameters for ReplaceHTTPCheckDefaults.
type ReplaceHTTPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPErrorRuleDefaultsParams defines parameters for GetAllHTTPErrorRuleDefaults.
type GetAllHTTPErrorRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPErrorRuleDefaultsParams defines parameters for ReplaceAllHTTPErrorRuleDefaults.
type ReplaceAllHTTPErrorRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPErrorRuleDefaultsParams defines parameters for DeleteHTTPErrorRuleDefaults.
type DeleteHTTPErrorRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPErrorRuleDefaultsParams defines parameters for GetHTTPErrorRuleDefaults.
type GetHTTPErrorRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPErrorRuleDefaultsParams defines parameters for CreateHTTPErrorRuleDefaults.
type CreateHTTPErrorRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPErrorRuleDefaultsParams defines parameters for ReplaceHTTPErrorRuleDefaults.
type ReplaceHTTPErrorRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPRequestRuleDefaultsParams defines parameters for GetAllHTTPRequestRuleDefaults.
type GetAllHTTPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPRequestRuleDefaultsParams defines parameters for ReplaceAllHTTPRequestRuleDefaults.
type ReplaceAllHTTPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPRequestRuleDefaultsParams defines parameters for DeleteHTTPRequestRuleDefaults.
type DeleteHTTPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPRequestRuleDefaultsParams defines parameters for GetHTTPRequestRuleDefaults.
type GetHTTPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPRequestRuleDefaultsParams defines parameters for CreateHTTPRequestRuleDefaults.
type CreateHTTPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPRequestRuleDefaultsParams defines parameters for ReplaceHTTPRequestRuleDefaults.
type ReplaceHTTPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPResponseRuleDefaultsParams defines parameters for GetAllHTTPResponseRuleDefaults.
type GetAllHTTPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPResponseRuleDefaultsParams defines parameters for ReplaceAllHTTPResponseRuleDefaults.
type ReplaceAllHTTPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPResponseRuleDefaultsParams defines parameters for DeleteHTTPResponseRuleDefaults.
type DeleteHTTPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPResponseRuleDefaultsParams defines parameters for GetHTTPResponseRuleDefaults.
type GetHTTPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPResponseRuleDefaultsParams defines parameters for CreateHTTPResponseRuleDefaults.
type CreateHTTPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPResponseRuleDefaultsParams defines parameters for ReplaceHTTPResponseRuleDefaults.
type ReplaceHTTPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllLogTargetDefaultsParams defines parameters for GetAllLogTargetDefaults.
type GetAllLogTargetDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllLogTargetDefaultsParams defines parameters for ReplaceAllLogTargetDefaults.
type ReplaceAllLogTargetDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteLogTargetDefaultsParams defines parameters for DeleteLogTargetDefaults.
type DeleteLogTargetDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogTargetDefaultsParams defines parameters for GetLogTargetDefaults.
type GetLogTargetDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateLogTargetDefaultsParams defines parameters for CreateLogTargetDefaults.
type CreateLogTargetDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceLogTargetDefaultsParams defines parameters for ReplaceLogTargetDefaults.
type ReplaceLogTargetDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllQUICInitialRuleDefaultsParams defines parameters for GetAllQUICInitialRuleDefaults.
type GetAllQUICInitialRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllQUICInitialRuleDefaultsParams defines parameters for ReplaceAllQUICInitialRuleDefaults.
type ReplaceAllQUICInitialRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteQUICInitialRuleDefaultsParams defines parameters for DeleteQUICInitialRuleDefaults.
type DeleteQUICInitialRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetQUICInitialRuleDefaultsParams defines parameters for GetQUICInitialRuleDefaults.
type GetQUICInitialRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateQUICInitialRuleDefaultsParams defines parameters for CreateQUICInitialRuleDefaults.
type CreateQUICInitialRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceQUICInitialRuleDefaultsParams defines parameters for ReplaceQUICInitialRuleDefaults.
type ReplaceQUICInitialRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllTCPCheckDefaultsParams defines parameters for GetAllTCPCheckDefaults.
type GetAllTCPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllTCPCheckDefaultsParams defines parameters for ReplaceAllTCPCheckDefaults.
type ReplaceAllTCPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTCPCheckDefaultsParams defines parameters for DeleteTCPCheckDefaults.
type DeleteTCPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTCPCheckDefaultsParams defines parameters for GetTCPCheckDefaults.
type GetTCPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTCPCheckDefaultsParams defines parameters for CreateTCPCheckDefaults.
type CreateTCPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTCPCheckDefaultsParams defines parameters for ReplaceTCPCheckDefaults.
type ReplaceTCPCheckDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllTCPRequestRuleDefaultsParams defines parameters for GetAllTCPRequestRuleDefaults.
type GetAllTCPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllTCPRequestRuleDefaultsParams defines parameters for ReplaceAllTCPRequestRuleDefaults.
type ReplaceAllTCPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTCPRequestRuleDefaultsParams defines parameters for DeleteTCPRequestRuleDefaults.
type DeleteTCPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTCPRequestRuleDefaultsParams defines parameters for GetTCPRequestRuleDefaults.
type GetTCPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTCPRequestRuleDefaultsParams defines parameters for CreateTCPRequestRuleDefaults.
type CreateTCPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTCPRequestRuleDefaultsParams defines parameters for ReplaceTCPRequestRuleDefaults.
type ReplaceTCPRequestRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllTCPResponseRuleDefaultsParams defines parameters for GetAllTCPResponseRuleDefaults.
type GetAllTCPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllTCPResponseRuleDefaultsParams defines parameters for ReplaceAllTCPResponseRuleDefaults.
type ReplaceAllTCPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTCPResponseRuleDefaultsParams defines parameters for DeleteTCPResponseRuleDefaults.
type DeleteTCPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTCPResponseRuleDefaultsParams defines parameters for GetTCPResponseRuleDefaults.
type GetTCPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTCPResponseRuleDefaultsParams defines parameters for CreateTCPResponseRuleDefaults.
type CreateTCPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTCPResponseRuleDefaultsParams defines parameters for ReplaceTCPResponseRuleDefaults.
type ReplaceTCPResponseRuleDefaultsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetFCGIAppsParams defines parameters for GetFCGIApps.
type GetFCGIAppsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateFCGIAppParams defines parameters for CreateFCGIApp.
type CreateFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteFCGIAppParams defines parameters for DeleteFCGIApp.
type DeleteFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetFCGIAppParams defines parameters for GetFCGIApp.
type GetFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceFCGIAppParams defines parameters for ReplaceFCGIApp.
type ReplaceFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllAclFCGIAppParams defines parameters for GetAllAclFCGIApp.
type GetAllAclFCGIAppParams struct {
	// AclName ACL name
	AclName *string `form:"acl_name,omitempty" json:"acl_name,omitempty"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllAclFCGIAppParams defines parameters for ReplaceAllAclFCGIApp.
type ReplaceAllAclFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteAclFCGIAppParams defines parameters for DeleteAclFCGIApp.
type DeleteAclFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAclFCGIAppParams defines parameters for GetAclFCGIApp.
type GetAclFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateAclFCGIAppParams defines parameters for CreateAclFCGIApp.
type CreateAclFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceAclFCGIAppParams defines parameters for ReplaceAclFCGIApp.
type ReplaceAclFCGIAppParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetFrontendsParams defines parameters for GetFrontends.
type GetFrontendsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateFrontendParams defines parameters for CreateFrontend.
type CreateFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteFrontendParams defines parameters for DeleteFrontend.
type DeleteFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetFrontendParams defines parameters for GetFrontend.
type GetFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceFrontendParams defines parameters for ReplaceFrontend.
type ReplaceFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllAclFrontendParams defines parameters for GetAllAclFrontend.
type GetAllAclFrontendParams struct {
	// AclName ACL name
	AclName *string `form:"acl_name,omitempty" json:"acl_name,omitempty"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllAclFrontendParams defines parameters for ReplaceAllAclFrontend.
type ReplaceAllAclFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteAclFrontendParams defines parameters for DeleteAclFrontend.
type DeleteAclFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAclFrontendParams defines parameters for GetAclFrontend.
type GetAclFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateAclFrontendParams defines parameters for CreateAclFrontend.
type CreateAclFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceAclFrontendParams defines parameters for ReplaceAclFrontend.
type ReplaceAclFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetBackendSwitchingRulesParams defines parameters for GetBackendSwitchingRules.
type GetBackendSwitchingRulesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceBackendSwitchingRulesParams defines parameters for ReplaceBackendSwitchingRules.
type ReplaceBackendSwitchingRulesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteBackendSwitchingRuleParams defines parameters for DeleteBackendSwitchingRule.
type DeleteBackendSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetBackendSwitchingRuleParams defines parameters for GetBackendSwitchingRule.
type GetBackendSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateBackendSwitchingRuleParams defines parameters for CreateBackendSwitchingRule.
type CreateBackendSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceBackendSwitchingRuleParams defines parameters for ReplaceBackendSwitchingRule.
type ReplaceBackendSwitchingRuleParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllBindFrontendParams defines parameters for GetAllBindFrontend.
type GetAllBindFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateBindFrontendParams defines parameters for CreateBindFrontend.
type CreateBindFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteBindFrontendParams defines parameters for DeleteBindFrontend.
type DeleteBindFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetBindFrontendParams defines parameters for GetBindFrontend.
type GetBindFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceBindFrontendParams defines parameters for ReplaceBindFrontend.
type ReplaceBindFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetDeclareCapturesParams defines parameters for GetDeclareCaptures.
type GetDeclareCapturesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceDeclareCapturesParams defines parameters for ReplaceDeclareCaptures.
type ReplaceDeclareCapturesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteDeclareCaptureParams defines parameters for DeleteDeclareCapture.
type DeleteDeclareCaptureParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetDeclareCaptureParams defines parameters for GetDeclareCapture.
type GetDeclareCaptureParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateDeclareCaptureParams defines parameters for CreateDeclareCapture.
type CreateDeclareCaptureParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceDeclareCaptureParams defines parameters for ReplaceDeclareCapture.
type ReplaceDeclareCaptureParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllFilterFrontendParams defines parameters for GetAllFilterFrontend.
type GetAllFilterFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllFilterFrontendParams defines parameters for ReplaceAllFilterFrontend.
type ReplaceAllFilterFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteFilterFrontendParams defines parameters for DeleteFilterFrontend.
type DeleteFilterFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetFilterFrontendParams defines parameters for GetFilterFrontend.
type GetFilterFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateFilterFrontendParams defines parameters for CreateFilterFrontend.
type CreateFilterFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceFilterFrontendParams defines parameters for ReplaceFilterFrontend.
type ReplaceFilterFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPAfterResponseRuleFrontendParams defines parameters for GetAllHTTPAfterResponseRuleFrontend.
type GetAllHTTPAfterResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPAfterResponseRuleFrontendParams defines parameters for ReplaceAllHTTPAfterResponseRuleFrontend.
type ReplaceAllHTTPAfterResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPAfterResponseRuleFrontendParams defines parameters for DeleteHTTPAfterResponseRuleFrontend.
type DeleteHTTPAfterResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPAfterResponseRuleFrontendParams defines parameters for GetHTTPAfterResponseRuleFrontend.
type GetHTTPAfterResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPAfterResponseRuleFrontendParams defines parameters for CreateHTTPAfterResponseRuleFrontend.
type CreateHTTPAfterResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPAfterResponseRuleFrontendParams defines parameters for ReplaceHTTPAfterResponseRuleFrontend.
type ReplaceHTTPAfterResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPErrorRuleFrontendParams defines parameters for GetAllHTTPErrorRuleFrontend.
type GetAllHTTPErrorRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPErrorRuleFrontendParams defines parameters for ReplaceAllHTTPErrorRuleFrontend.
type ReplaceAllHTTPErrorRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPErrorRuleFrontendParams defines parameters for DeleteHTTPErrorRuleFrontend.
type DeleteHTTPErrorRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPErrorRuleFrontendParams defines parameters for GetHTTPErrorRuleFrontend.
type GetHTTPErrorRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPErrorRuleFrontendParams defines parameters for CreateHTTPErrorRuleFrontend.
type CreateHTTPErrorRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPErrorRuleFrontendParams defines parameters for ReplaceHTTPErrorRuleFrontend.
type ReplaceHTTPErrorRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPRequestRuleFrontendParams defines parameters for GetAllHTTPRequestRuleFrontend.
type GetAllHTTPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPRequestRuleFrontendParams defines parameters for ReplaceAllHTTPRequestRuleFrontend.
type ReplaceAllHTTPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPRequestRuleFrontendParams defines parameters for DeleteHTTPRequestRuleFrontend.
type DeleteHTTPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPRequestRuleFrontendParams defines parameters for GetHTTPRequestRuleFrontend.
type GetHTTPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPRequestRuleFrontendParams defines parameters for CreateHTTPRequestRuleFrontend.
type CreateHTTPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPRequestRuleFrontendParams defines parameters for ReplaceHTTPRequestRuleFrontend.
type ReplaceHTTPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllHTTPResponseRuleFrontendParams defines parameters for GetAllHTTPResponseRuleFrontend.
type GetAllHTTPResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllHTTPResponseRuleFrontendParams defines parameters for ReplaceAllHTTPResponseRuleFrontend.
type ReplaceAllHTTPResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPResponseRuleFrontendParams defines parameters for DeleteHTTPResponseRuleFrontend.
type DeleteHTTPResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPResponseRuleFrontendParams defines parameters for GetHTTPResponseRuleFrontend.
type GetHTTPResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPResponseRuleFrontendParams defines parameters for CreateHTTPResponseRuleFrontend.
type CreateHTTPResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceHTTPResponseRuleFrontendParams defines parameters for ReplaceHTTPResponseRuleFrontend.
type ReplaceHTTPResponseRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllLogTargetFrontendParams defines parameters for GetAllLogTargetFrontend.
type GetAllLogTargetFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllLogTargetFrontendParams defines parameters for ReplaceAllLogTargetFrontend.
type ReplaceAllLogTargetFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteLogTargetFrontendParams defines parameters for DeleteLogTargetFrontend.
type DeleteLogTargetFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogTargetFrontendParams defines parameters for GetLogTargetFrontend.
type GetLogTargetFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateLogTargetFrontendParams defines parameters for CreateLogTargetFrontend.
type CreateLogTargetFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceLogTargetFrontendParams defines parameters for ReplaceLogTargetFrontend.
type ReplaceLogTargetFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllQUICInitialRuleFrontendParams defines parameters for GetAllQUICInitialRuleFrontend.
type GetAllQUICInitialRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllQUICInitialRuleFrontendParams defines parameters for ReplaceAllQUICInitialRuleFrontend.
type ReplaceAllQUICInitialRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteQUICInitialRuleFrontendParams defines parameters for DeleteQUICInitialRuleFrontend.
type DeleteQUICInitialRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetQUICInitialRuleFrontendParams defines parameters for GetQUICInitialRuleFrontend.
type GetQUICInitialRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateQUICInitialRuleFrontendParams defines parameters for CreateQUICInitialRuleFrontend.
type CreateQUICInitialRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceQUICInitialRuleFrontendParams defines parameters for ReplaceQUICInitialRuleFrontend.
type ReplaceQUICInitialRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllSSLFrontUsesParams defines parameters for GetAllSSLFrontUses.
type GetAllSSLFrontUsesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateSSLFrontUseParams defines parameters for CreateSSLFrontUse.
type CreateSSLFrontUseParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteSSLFrontUseParams defines parameters for DeleteSSLFrontUse.
type DeleteSSLFrontUseParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetSSLFrontUseParams defines parameters for GetSSLFrontUse.
type GetSSLFrontUseParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceSSLFrontUseParams defines parameters for ReplaceSSLFrontUse.
type ReplaceSSLFrontUseParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllTCPRequestRuleFrontendParams defines parameters for GetAllTCPRequestRuleFrontend.
type GetAllTCPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllTCPRequestRuleFrontendParams defines parameters for ReplaceAllTCPRequestRuleFrontend.
type ReplaceAllTCPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTCPRequestRuleFrontendParams defines parameters for DeleteTCPRequestRuleFrontend.
type DeleteTCPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTCPRequestRuleFrontendParams defines parameters for GetTCPRequestRuleFrontend.
type GetTCPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTCPRequestRuleFrontendParams defines parameters for CreateTCPRequestRuleFrontend.
type CreateTCPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTCPRequestRuleFrontendParams defines parameters for ReplaceTCPRequestRuleFrontend.
type ReplaceTCPRequestRuleFrontendParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetGlobalParams defines parameters for GetGlobal.
type GetGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceGlobalParams defines parameters for ReplaceGlobal.
type ReplaceGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllLogTargetGlobalParams defines parameters for GetAllLogTargetGlobal.
type GetAllLogTargetGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllLogTargetGlobalParams defines parameters for ReplaceAllLogTargetGlobal.
type ReplaceAllLogTargetGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteLogTargetGlobalParams defines parameters for DeleteLogTargetGlobal.
type DeleteLogTargetGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogTargetGlobalParams defines parameters for GetLogTargetGlobal.
type GetLogTargetGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateLogTargetGlobalParams defines parameters for CreateLogTargetGlobal.
type CreateLogTargetGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceLogTargetGlobalParams defines parameters for ReplaceLogTargetGlobal.
type ReplaceLogTargetGlobalParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateGroupParams defines parameters for CreateGroup.
type CreateGroupParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteGroupParams defines parameters for DeleteGroup.
type DeleteGroupParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetGroupParams defines parameters for GetGroup.
type GetGroupParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceGroupParams defines parameters for ReplaceGroup.
type ReplaceGroupParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPErrorsSectionsParams defines parameters for GetHTTPErrorsSections.
type GetHTTPErrorsSectionsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateHTTPErrorsSectionParams defines parameters for CreateHTTPErrorsSection.
type CreateHTTPErrorsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteHTTPErrorsSectionParams defines parameters for DeleteHTTPErrorsSection.
type DeleteHTTPErrorsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHTTPErrorsSectionParams defines parameters for GetHTTPErrorsSection.
type GetHTTPErrorsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceHTTPErrorsSectionParams defines parameters for ReplaceHTTPErrorsSection.
type ReplaceHTTPErrorsSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogForwardsParams defines parameters for GetLogForwards.
type GetLogForwardsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateLogForwardParams defines parameters for CreateLogForward.
type CreateLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteLogForwardParams defines parameters for DeleteLogForward.
type DeleteLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogForwardParams defines parameters for GetLogForward.
type GetLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceLogForwardParams defines parameters for ReplaceLogForward.
type ReplaceLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllBindLogForwardParams defines parameters for GetAllBindLogForward.
type GetAllBindLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateBindLogForwardParams defines parameters for CreateBindLogForward.
type CreateBindLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteBindLogForwardParams defines parameters for DeleteBindLogForward.
type DeleteBindLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetBindLogForwardParams defines parameters for GetBindLogForward.
type GetBindLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceBindLogForwardParams defines parameters for ReplaceBindLogForward.
type ReplaceBindLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetDgramBindsParams defines parameters for GetDgramBinds.
type GetDgramBindsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateDgramBindParams defines parameters for CreateDgramBind.
type CreateDgramBindParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteDgramBindParams defines parameters for DeleteDgramBind.
type DeleteDgramBindParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetDgramBindParams defines parameters for GetDgramBind.
type GetDgramBindParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceDgramBindParams defines parameters for ReplaceDgramBind.
type ReplaceDgramBindParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllLogTargetLogForwardParams defines parameters for GetAllLogTargetLogForward.
type GetAllLogTargetLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllLogTargetLogForwardParams defines parameters for ReplaceAllLogTargetLogForward.
type ReplaceAllLogTargetLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteLogTargetLogForwardParams defines parameters for DeleteLogTargetLogForward.
type DeleteLogTargetLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogTargetLogForwardParams defines parameters for GetLogTargetLogForward.
type GetLogTargetLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateLogTargetLogForwardParams defines parameters for CreateLogTargetLogForward.
type CreateLogTargetLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceLogTargetLogForwardParams defines parameters for ReplaceLogTargetLogForward.
type ReplaceLogTargetLogForwardParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogProfilesParams defines parameters for GetLogProfiles.
type GetLogProfilesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateLogProfileParams defines parameters for CreateLogProfile.
type CreateLogProfileParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteLogProfileParams defines parameters for DeleteLogProfile.
type DeleteLogProfileParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogProfileParams defines parameters for GetLogProfile.
type GetLogProfileParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// EditLogProfileParams defines parameters for EditLogProfile.
type EditLogProfileParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetMailerEntriesParams defines parameters for GetMailerEntries.
type GetMailerEntriesParams struct {
	// MailersSection Parent mailers section name
	MailersSection string `form:"mailers_section" json:"mailers_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateMailerEntryParams defines parameters for CreateMailerEntry.
type CreateMailerEntryParams struct {
	// MailersSection Parent mailers section name
	MailersSection string `form:"mailers_section" json:"mailers_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteMailerEntryParams defines parameters for DeleteMailerEntry.
type DeleteMailerEntryParams struct {
	// MailersSection Parent mailers section name
	MailersSection string `form:"mailers_section" json:"mailers_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetMailerEntryParams defines parameters for GetMailerEntry.
type GetMailerEntryParams struct {
	// MailersSection Parent mailers name
	MailersSection string `form:"mailers_section" json:"mailers_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceMailerEntryParams defines parameters for ReplaceMailerEntry.
type ReplaceMailerEntryParams struct {
	// MailersSection Parent mailers section name
	MailersSection string `form:"mailers_section" json:"mailers_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetMailersSectionsParams defines parameters for GetMailersSections.
type GetMailersSectionsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateMailersSectionParams defines parameters for CreateMailersSection.
type CreateMailersSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteMailersSectionParams defines parameters for DeleteMailersSection.
type DeleteMailersSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetMailersSectionParams defines parameters for GetMailersSection.
type GetMailersSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// EditMailersSectionParams defines parameters for EditMailersSection.
type EditMailersSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetNameserversParams defines parameters for GetNameservers.
type GetNameserversParams struct {
	// Resolver Parent resolver name
	Resolver string `form:"resolver" json:"resolver"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateNameserverParams defines parameters for CreateNameserver.
type CreateNameserverParams struct {
	// Resolver Parent resolver name
	Resolver string `form:"resolver" json:"resolver"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteNameserverParams defines parameters for DeleteNameserver.
type DeleteNameserverParams struct {
	// Resolver Parent resolver name
	Resolver string `form:"resolver" json:"resolver"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetNameserverParams defines parameters for GetNameserver.
type GetNameserverParams struct {
	// Resolver Parent resolver name
	Resolver string `form:"resolver" json:"resolver"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceNameserverParams defines parameters for ReplaceNameserver.
type ReplaceNameserverParams struct {
	// Resolver Parent resolver name
	Resolver string `form:"resolver" json:"resolver"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetPeerEntriesParams defines parameters for GetPeerEntries.
type GetPeerEntriesParams struct {
	// PeerSection Parent peer section name
	PeerSection string `form:"peer_section" json:"peer_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreatePeerEntryParams defines parameters for CreatePeerEntry.
type CreatePeerEntryParams struct {
	// PeerSection Parent peer section name
	PeerSection string `form:"peer_section" json:"peer_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeletePeerEntryParams defines parameters for DeletePeerEntry.
type DeletePeerEntryParams struct {
	// PeerSection Parent peers name
	PeerSection string `form:"peer_section" json:"peer_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetPeerEntryParams defines parameters for GetPeerEntry.
type GetPeerEntryParams struct {
	// PeerSection Parent peers name
	PeerSection string `form:"peer_section" json:"peer_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplacePeerEntryParams defines parameters for ReplacePeerEntry.
type ReplacePeerEntryParams struct {
	// PeerSection Parent peers name
	PeerSection string `form:"peer_section" json:"peer_section"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetPeerSectionsParams defines parameters for GetPeerSections.
type GetPeerSectionsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreatePeerParams defines parameters for CreatePeer.
type CreatePeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeletePeerParams defines parameters for DeletePeer.
type DeletePeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetPeerSectionParams defines parameters for GetPeerSection.
type GetPeerSectionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllBindPeerParams defines parameters for GetAllBindPeer.
type GetAllBindPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateBindPeerParams defines parameters for CreateBindPeer.
type CreateBindPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteBindPeerParams defines parameters for DeleteBindPeer.
type DeleteBindPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetBindPeerParams defines parameters for GetBindPeer.
type GetBindPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceBindPeerParams defines parameters for ReplaceBindPeer.
type ReplaceBindPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllLogTargetPeerParams defines parameters for GetAllLogTargetPeer.
type GetAllLogTargetPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceAllLogTargetPeerParams defines parameters for ReplaceAllLogTargetPeer.
type ReplaceAllLogTargetPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteLogTargetPeerParams defines parameters for DeleteLogTargetPeer.
type DeleteLogTargetPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetLogTargetPeerParams defines parameters for GetLogTargetPeer.
type GetLogTargetPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateLogTargetPeerParams defines parameters for CreateLogTargetPeer.
type CreateLogTargetPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceLogTargetPeerParams defines parameters for ReplaceLogTargetPeer.
type ReplaceLogTargetPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetAllServerPeerParams defines parameters for GetAllServerPeer.
type GetAllServerPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateServerPeerParams defines parameters for CreateServerPeer.
type CreateServerPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteServerPeerParams defines parameters for DeleteServerPeer.
type DeleteServerPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetServerPeerParams defines parameters for GetServerPeer.
type GetServerPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceServerPeerParams defines parameters for ReplaceServerPeer.
type ReplaceServerPeerParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTablesParams defines parameters for GetTables.
type GetTablesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateTableParams defines parameters for CreateTable.
type CreateTableParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTableParams defines parameters for DeleteTable.
type DeleteTableParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTableParams defines parameters for GetTable.
type GetTableParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceTableParams defines parameters for ReplaceTable.
type ReplaceTableParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetProgramsParams defines parameters for GetPrograms.
type GetProgramsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateProgramParams defines parameters for CreateProgram.
type CreateProgramParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteProgramParams defines parameters for DeleteProgram.
type DeleteProgramParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetProgramParams defines parameters for GetProgram.
type GetProgramParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceProgramParams defines parameters for ReplaceProgram.
type ReplaceProgramParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetHAProxyConfigurationParams defines parameters for GetHAProxyConfiguration.
type GetHAProxyConfigurationParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// PostHAProxyConfigurationTextBody defines parameters for PostHAProxyConfiguration.
type PostHAProxyConfigurationTextBody = string

// PostHAProxyConfigurationParams defines parameters for PostHAProxyConfiguration.
type PostHAProxyConfigurationParams struct {
	// SkipVersion If set, no version check will be done and the pushed config will be enforced
	SkipVersion *bool `form:"skip_version,omitempty" json:"skip_version,omitempty"`

	// SkipReload If set, no reload will be initiated and runtime actions from X-Runtime-Actions will be applied
	SkipReload *bool `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// OnlyValidate If set, only validates configuration, without applying it
	OnlyValidate *bool `form:"only_validate,omitempty" json:"only_validate,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// XRuntimeActions List of Runtime API commands with parameters separated by ';'
	XRuntimeActions *string `json:"X-Runtime-Actions,omitempty"`
}

// GetResolversParams defines parameters for GetResolvers.
type GetResolversParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateResolverParams defines parameters for CreateResolver.
type CreateResolverParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteResolverParams defines parameters for DeleteResolver.
type DeleteResolverParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetResolverParams defines parameters for GetResolver.
type GetResolverParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceResolverParams defines parameters for ReplaceResolver.
type ReplaceResolverParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetRingsParams defines parameters for GetRings.
type GetRingsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateRingParams defines parameters for CreateRing.
type CreateRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteRingParams defines parameters for DeleteRing.
type DeleteRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetRingParams defines parameters for GetRing.
type GetRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// ReplaceRingParams defines parameters for ReplaceRing.
type ReplaceRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetAllServerRingParams defines parameters for GetAllServerRing.
type GetAllServerRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateServerRingParams defines parameters for CreateServerRing.
type CreateServerRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteServerRingParams defines parameters for DeleteServerRing.
type DeleteServerRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetServerRingParams defines parameters for GetServerRing.
type GetServerRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceServerRingParams defines parameters for ReplaceServerRing.
type ReplaceServerRingParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteTracesParams defines parameters for DeleteTraces.
type DeleteTracesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTracesParams defines parameters for GetTraces.
type GetTracesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateTracesParams defines parameters for CreateTraces.
type CreateTracesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceTracesParams defines parameters for ReplaceTraces.
type ReplaceTracesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteTraceEntryParams defines parameters for DeleteTraceEntry.
type DeleteTraceEntryParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// CreateTraceEntryParams defines parameters for CreateTraceEntry.
type CreateTraceEntryParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetUserlistsParams defines parameters for GetUserlists.
type GetUserlistsParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// CreateUserlistParams defines parameters for CreateUserlist.
type CreateUserlistParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// DeleteUserlistParams defines parameters for DeleteUserlist.
type DeleteUserlistParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetUserlistParams defines parameters for GetUserlist.
type GetUserlistParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// FullSection Indicates if the action affects the specified child resources as well
	FullSection *FullSection `form:"full_section,omitempty" json:"full_section,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateUserParams defines parameters for CreateUser.
type CreateUserParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteUserParams defines parameters for DeleteUser.
type DeleteUserParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceUserParams defines parameters for ReplaceUser.
type ReplaceUserParams struct {
	// Userlist Parent userlist name
	Userlist string `form:"userlist" json:"userlist"`

	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetConfigurationVersionParams defines parameters for GetConfigurationVersion.
type GetConfigurationVersionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// GetAllRuntimeMapFilesParams defines parameters for GetAllRuntimeMapFiles.
type GetAllRuntimeMapFilesParams struct {
	// IncludeUnmanaged If true, also show unmanaged map files loaded in haproxy
	IncludeUnmanaged *bool `form:"include_unmanaged,omitempty" json:"include_unmanaged,omitempty"`
}

// ClearRuntimeMapParams defines parameters for ClearRuntimeMap.
type ClearRuntimeMapParams struct {
	// ForceDelete If true, deletes file from disk
	ForceDelete *bool `form:"forceDelete,omitempty" json:"forceDelete,omitempty"`

	// ForceSync If true, immediately syncs changes to disk
	ForceSync *bool `form:"force_sync,omitempty" json:"force_sync,omitempty"`
}

// AddPayloadRuntimeMapParams defines parameters for AddPayloadRuntimeMap.
type AddPayloadRuntimeMapParams struct {
	// ForceSync If true, immediately syncs changes to disk
	ForceSync *bool `form:"force_sync,omitempty" json:"force_sync,omitempty"`
}

// AddMapEntryParams defines parameters for AddMapEntry.
type AddMapEntryParams struct {
	// ForceSync If true, immediately syncs changes to disk
	ForceSync *bool `form:"force_sync,omitempty" json:"force_sync,omitempty"`
}

// DeleteRuntimeMapEntryParams defines parameters for DeleteRuntimeMapEntry.
type DeleteRuntimeMapEntryParams struct {
	// ForceSync If true, immediately syncs changes to disk
	ForceSync *bool `form:"force_sync,omitempty" json:"force_sync,omitempty"`
}

// ReplaceRuntimeMapEntryJSONBody defines parameters for ReplaceRuntimeMapEntry.
type ReplaceRuntimeMapEntryJSONBody struct {
	// Value Map value
	Value string `json:"value"`
}

// ReplaceRuntimeMapEntryParams defines parameters for ReplaceRuntimeMapEntry.
type ReplaceRuntimeMapEntryParams struct {
	// ForceSync If true, immediately syncs changes to disk
	ForceSync *bool `form:"force_sync,omitempty" json:"force_sync,omitempty"`
}

// CreateCaFileMultipartBody defines parameters for CreateCaFile.
type CreateCaFileMultipartBody struct {
	// FileUpload CA certificate file
	FileUpload openapi_types.File `json:"file_upload"`
}

// SetCaFileMultipartBody defines parameters for SetCaFile.
type SetCaFileMultipartBody struct {
	FileUpload openapi_types.File `json:"file_upload"`
}

// AddCaEntryMultipartBody defines parameters for AddCaEntry.
type AddCaEntryMultipartBody struct {
	// FileUpload Payload of the cert entry
	FileUpload openapi_types.File `json:"file_upload"`
}

// CreateCertMultipartBody defines parameters for CreateCert.
type CreateCertMultipartBody struct {
	// FileUpload Certificate file
	FileUpload openapi_types.File `json:"file_upload"`
}

// ReplaceCertMultipartBody defines parameters for ReplaceCert.
type ReplaceCertMultipartBody struct {
	FileUpload openapi_types.File `json:"file_upload"`
}

// CreateCrlMultipartBody defines parameters for CreateCrl.
type CreateCrlMultipartBody struct {
	// FileUpload CRL file
	FileUpload openapi_types.File `json:"file_upload"`
}

// GetCrlParams defines parameters for GetCrl.
type GetCrlParams struct {
	// Index Entry index to return. Starts at 1. If not provided, all entries are returned.
	Index *int `form:"index,omitempty" json:"index,omitempty"`
}

// ReplaceCrlMultipartBody defines parameters for ReplaceCrl.
type ReplaceCrlMultipartBody struct {
	// FileUpload CRL file contents
	FileUpload openapi_types.File `json:"file_upload"`
}

// DeleteCrtListEntryParams defines parameters for DeleteCrtListEntry.
type DeleteCrtListEntryParams struct {
	// Name SSL crt list name
	Name string `form:"name" json:"name"`

	// CertFile SSL cert entry name
	CertFile string `form:"cert_file" json:"cert_file"`

	// LineNumber The line number where the entry is located, in case several entries share the same certificate.
	LineNumber *int `form:"line_number,omitempty" json:"line_number,omitempty"`
}

// GetAllCrtListEntriesParams defines parameters for GetAllCrtListEntries.
type GetAllCrtListEntriesParams struct {
	// Name SSL crt-list filename
	Name string `form:"name" json:"name"`
}

// AddCrtListEntryParams defines parameters for AddCrtListEntry.
type AddCrtListEntryParams struct {
	// Name SSL crt-list filename
	Name string `form:"name" json:"name"`
}

// GetStickTableEntriesParams defines parameters for GetStickTableEntries.
type GetStickTableEntriesParams struct {
	// Filter A list of filters in format data.<type> <operator> <value> separated by comma
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Key Key which we want the entries for
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// Count Max number of entries to be returned for pagination
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// Offset Offset which indicates how many items we skip in pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SetStickTableEntriesJSONBody defines parameters for SetStickTableEntries.
type SetStickTableEntriesJSONBody struct {
	// DataType One entry in stick table
	DataType StickTableEntry `json:"data_type"`
	Key      string          `json:"key"`
}

// GetSitesParams defines parameters for GetSites.
type GetSitesParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateSiteParams defines parameters for CreateSite.
type CreateSiteParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteSiteParams defines parameters for DeleteSite.
type DeleteSiteParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetSiteParams defines parameters for GetSite.
type GetSiteParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceSiteParams defines parameters for ReplaceSite.
type ReplaceSiteParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// CreateSpoeMultipartBody defines parameters for CreateSpoe.
type CreateSpoeMultipartBody struct {
	// FileUpload The spoe file to upload
	FileUpload *openapi_types.File `json:"file_upload,omitempty"`
}

// GetAllSpoeScopeParams defines parameters for GetAllSpoeScope.
type GetAllSpoeScopeParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateSpoeScopeParams defines parameters for CreateSpoeScope.
type CreateSpoeScopeParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// DeleteSpoeScopeParams defines parameters for DeleteSpoeScope.
type DeleteSpoeScopeParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetSpoeScopeParams defines parameters for GetSpoeScope.
type GetSpoeScopeParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// GetAllSpoeAgentParams defines parameters for GetAllSpoeAgent.
type GetAllSpoeAgentParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateSpoeAgentParams defines parameters for CreateSpoeAgent.
type CreateSpoeAgentParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// DeleteSpoeAgentParams defines parameters for DeleteSpoeAgent.
type DeleteSpoeAgentParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetSpoeAgentParams defines parameters for GetSpoeAgent.
type GetSpoeAgentParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceSpoeAgentParams defines parameters for ReplaceSpoeAgent.
type ReplaceSpoeAgentParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetAllSpoeGroupParams defines parameters for GetAllSpoeGroup.
type GetAllSpoeGroupParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateSpoeGroupParams defines parameters for CreateSpoeGroup.
type CreateSpoeGroupParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// DeleteSpoeGroupParams defines parameters for DeleteSpoeGroup.
type DeleteSpoeGroupParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetSpoeGroupParams defines parameters for GetSpoeGroup.
type GetSpoeGroupParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceSpoeGroupParams defines parameters for ReplaceSpoeGroup.
type ReplaceSpoeGroupParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetAllSpoeMessageParams defines parameters for GetAllSpoeMessage.
type GetAllSpoeMessageParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// CreateSpoeMessageParams defines parameters for CreateSpoeMessage.
type CreateSpoeMessageParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// DeleteSpoeMessageParams defines parameters for DeleteSpoeMessage.
type DeleteSpoeMessageParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetSpoeMessageParams defines parameters for GetSpoeMessage.
type GetSpoeMessageParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// ReplaceSpoeMessageParams defines parameters for ReplaceSpoeMessage.
type ReplaceSpoeMessageParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`

	// Version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// GetAllSpoeTransactionParams defines parameters for GetAllSpoeTransaction.
type GetAllSpoeTransactionParams struct {
	// Status Filter by transaction status
	Status *GetAllSpoeTransactionParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetAllSpoeTransactionParamsStatus defines parameters for GetAllSpoeTransaction.
type GetAllSpoeTransactionParamsStatus string

// StartSpoeTransactionParams defines parameters for StartSpoeTransaction.
type StartSpoeTransactionParams struct {
	// Version Configuration version on which to work on
	Version int `form:"version" json:"version"`
}

// CommitSpoeTransactionParams defines parameters for CommitSpoeTransaction.
type CommitSpoeTransactionParams struct {
	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetSpoeConfigurationVersionParams defines parameters for GetSpoeConfigurationVersion.
type GetSpoeConfigurationVersionParams struct {
	// TransactionId ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	TransactionId *TransactionId `form:"transaction_id,omitempty" json:"transaction_id,omitempty"`
}

// GetStatsParams defines parameters for GetStats.
type GetStatsParams struct {
	// Type Object type to get stats for (one of frontend, backend, server)
	Type *GetStatsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Name Object name to get stats for
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Parent Object parent name to get stats for, in case the object is a server
	Parent *string `form:"parent,omitempty" json:"parent,omitempty"`
}

// GetStatsParamsType defines parameters for GetStats.
type GetStatsParamsType string

// CreateStorageGeneralFileMultipartBody defines parameters for CreateStorageGeneralFile.
type CreateStorageGeneralFileMultipartBody struct {
	// FileUpload General use file content
	FileUpload *openapi_types.File `json:"file_upload,omitempty"`
}

// ReplaceStorageGeneralFileMultipartBody defines parameters for ReplaceStorageGeneralFile.
type ReplaceStorageGeneralFileMultipartBody struct {
	// FileUpload General use file content
	FileUpload *openapi_types.File `json:"file_upload,omitempty"`
}

// ReplaceStorageGeneralFileParams defines parameters for ReplaceStorageGeneralFile.
type ReplaceStorageGeneralFileParams struct {
	// SkipReload If set, no reload will be initiated after update
	SkipReload *SkipReload `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// CreateStorageMapFileMultipartBody defines parameters for CreateStorageMapFile.
type CreateStorageMapFileMultipartBody struct {
	// FileUpload The map file contents
	FileUpload *openapi_types.File `json:"file_upload,omitempty"`
}

// ReplaceStorageMapFileTextBody defines parameters for ReplaceStorageMapFile.
type ReplaceStorageMapFileTextBody = string

// ReplaceStorageMapFileParams defines parameters for ReplaceStorageMapFile.
type ReplaceStorageMapFileParams struct {
	// SkipReload If set, no reload will be initiated after update
	SkipReload *SkipReload `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// CreateStorageSSLCertificateMultipartBody defines parameters for CreateStorageSSLCertificate.
type CreateStorageSSLCertificateMultipartBody struct {
	// FileUpload The SSL certificate to upload
	FileUpload *openapi_types.File `json:"file_upload,omitempty"`
}

// CreateStorageSSLCertificateParams defines parameters for CreateStorageSSLCertificate.
type CreateStorageSSLCertificateParams struct {
	// SkipReload If set, no reload will be initiated after update
	SkipReload *SkipReload `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteStorageSSLCertificateParams defines parameters for DeleteStorageSSLCertificate.
type DeleteStorageSSLCertificateParams struct {
	// SkipReload If set, no reload will be initiated after update
	SkipReload *SkipReload `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceStorageSSLCertificateTextBody defines parameters for ReplaceStorageSSLCertificate.
type ReplaceStorageSSLCertificateTextBody = string

// ReplaceStorageSSLCertificateParams defines parameters for ReplaceStorageSSLCertificate.
type ReplaceStorageSSLCertificateParams struct {
	// SkipReload If set, no reload will be initiated after update
	SkipReload *SkipReload `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// CreateStorageSSLCrtListFileMultipartBody defines parameters for CreateStorageSSLCrtListFile.
type CreateStorageSSLCrtListFileMultipartBody struct {
	// FileUpload The certificate list to upload
	FileUpload *openapi_types.File `json:"file_upload,omitempty"`
}

// CreateStorageSSLCrtListFileParams defines parameters for CreateStorageSSLCrtListFile.
type CreateStorageSSLCrtListFileParams struct {
	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteStorageSSLCrtListFileParams defines parameters for DeleteStorageSSLCrtListFile.
type DeleteStorageSSLCrtListFileParams struct {
	// SkipReload If set, no reload will be initiated after update
	SkipReload *SkipReload `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// ReplaceStorageSSLCrtListFileTextBody defines parameters for ReplaceStorageSSLCrtListFile.
type ReplaceStorageSSLCrtListFileTextBody = string

// ReplaceStorageSSLCrtListFileParams defines parameters for ReplaceStorageSSLCrtListFile.
type ReplaceStorageSSLCrtListFileParams struct {
	// SkipReload If set, no reload will be initiated after update
	SkipReload *SkipReload `form:"skip_reload,omitempty" json:"skip_reload,omitempty"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// DeleteStorageSSLCrtListEntryParams defines parameters for DeleteStorageSSLCrtListEntry.
type DeleteStorageSSLCrtListEntryParams struct {
	// Certificate SSL certificate filename
	Certificate string `form:"certificate" json:"certificate"`

	// LineNumber The line number in the crt-list
	LineNumber int `form:"line_number" json:"line_number"`

	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// CreateStorageSSLCrtListEntryParams defines parameters for CreateStorageSSLCrtListEntry.
type CreateStorageSSLCrtListEntryParams struct {
	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	// Status Filter by transaction status
	Status *GetTransactionsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetTransactionsParamsStatus defines parameters for GetTransactions.
type GetTransactionsParamsStatus string

// StartTransactionParams defines parameters for StartTransaction.
type StartTransactionParams struct {
	// Version Configuration version on which to work on
	Version int `form:"version" json:"version"`
}

// CommitTransactionParams defines parameters for CommitTransaction.
type CommitTransactionParams struct {
	// ForceReload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	ForceReload *ForceReload `form:"force_reload,omitempty" json:"force_reload,omitempty"`
}

// PostClusterJSONRequestBody defines body for PostCluster for application/json ContentType.
type PostClusterJSONRequestBody = ClusterSettings

// EditClusterJSONRequestBody defines body for EditCluster for application/json ContentType.
type EditClusterJSONRequestBody = ClusterSettings

// CreateAWSRegionJSONRequestBody defines body for CreateAWSRegion for application/json ContentType.
type CreateAWSRegionJSONRequestBody = AwsRegion

// ReplaceAWSRegionJSONRequestBody defines body for ReplaceAWSRegion for application/json ContentType.
type ReplaceAWSRegionJSONRequestBody = AwsRegion

// CreateConsulJSONRequestBody defines body for CreateConsul for application/json ContentType.
type CreateConsulJSONRequestBody = Consul

// ReplaceConsulJSONRequestBody defines body for ReplaceConsul for application/json ContentType.
type ReplaceConsulJSONRequestBody = Consul

// CreateAcmeProviderJSONRequestBody defines body for CreateAcmeProvider for application/json ContentType.
type CreateAcmeProviderJSONRequestBody = AcmeProvider

// EditAcmeProviderJSONRequestBody defines body for EditAcmeProvider for application/json ContentType.
type EditAcmeProviderJSONRequestBody = AcmeProvider

// CreateBackendJSONRequestBody defines body for CreateBackend for application/json ContentType.
type CreateBackendJSONRequestBody = Backend

// ReplaceBackendJSONRequestBody defines body for ReplaceBackend for application/json ContentType.
type ReplaceBackendJSONRequestBody = Backend

// ReplaceAllAclBackendJSONRequestBody defines body for ReplaceAllAclBackend for application/json ContentType.
type ReplaceAllAclBackendJSONRequestBody = Acls

// CreateAclBackendJSONRequestBody defines body for CreateAclBackend for application/json ContentType.
type CreateAclBackendJSONRequestBody = Acl

// ReplaceAclBackendJSONRequestBody defines body for ReplaceAclBackend for application/json ContentType.
type ReplaceAclBackendJSONRequestBody = Acl

// ReplaceAllFilterBackendJSONRequestBody defines body for ReplaceAllFilterBackend for application/json ContentType.
type ReplaceAllFilterBackendJSONRequestBody = Filters

// CreateFilterBackendJSONRequestBody defines body for CreateFilterBackend for application/json ContentType.
type CreateFilterBackendJSONRequestBody = Filter

// ReplaceFilterBackendJSONRequestBody defines body for ReplaceFilterBackend for application/json ContentType.
type ReplaceFilterBackendJSONRequestBody = Filter

// ReplaceAllHTTPAfterResponseRuleBackendJSONRequestBody defines body for ReplaceAllHTTPAfterResponseRuleBackend for application/json ContentType.
type ReplaceAllHTTPAfterResponseRuleBackendJSONRequestBody = HttpAfterResponseRules

// CreateHTTPAfterResponseRuleBackendJSONRequestBody defines body for CreateHTTPAfterResponseRuleBackend for application/json ContentType.
type CreateHTTPAfterResponseRuleBackendJSONRequestBody = HttpAfterResponseRule

// ReplaceHTTPAfterResponseRuleBackendJSONRequestBody defines body for ReplaceHTTPAfterResponseRuleBackend for application/json ContentType.
type ReplaceHTTPAfterResponseRuleBackendJSONRequestBody = HttpAfterResponseRule

// ReplaceAllHTTPCheckBackendJSONRequestBody defines body for ReplaceAllHTTPCheckBackend for application/json ContentType.
type ReplaceAllHTTPCheckBackendJSONRequestBody = HttpChecks

// CreateHTTPCheckBackendJSONRequestBody defines body for CreateHTTPCheckBackend for application/json ContentType.
type CreateHTTPCheckBackendJSONRequestBody = HttpCheck

// ReplaceHTTPCheckBackendJSONRequestBody defines body for ReplaceHTTPCheckBackend for application/json ContentType.
type ReplaceHTTPCheckBackendJSONRequestBody = HttpCheck

// ReplaceAllHTTPErrorRuleBackendJSONRequestBody defines body for ReplaceAllHTTPErrorRuleBackend for application/json ContentType.
type ReplaceAllHTTPErrorRuleBackendJSONRequestBody = HttpErrorRules

// CreateHTTPErrorRuleBackendJSONRequestBody defines body for CreateHTTPErrorRuleBackend for application/json ContentType.
type CreateHTTPErrorRuleBackendJSONRequestBody = HttpErrorRule

// ReplaceHTTPErrorRuleBackendJSONRequestBody defines body for ReplaceHTTPErrorRuleBackend for application/json ContentType.
type ReplaceHTTPErrorRuleBackendJSONRequestBody = HttpErrorRule

// ReplaceAllHTTPRequestRuleBackendJSONRequestBody defines body for ReplaceAllHTTPRequestRuleBackend for application/json ContentType.
type ReplaceAllHTTPRequestRuleBackendJSONRequestBody = HttpRequestRules

// CreateHTTPRequestRuleBackendJSONRequestBody defines body for CreateHTTPRequestRuleBackend for application/json ContentType.
type CreateHTTPRequestRuleBackendJSONRequestBody = HttpRequestRule

// ReplaceHTTPRequestRuleBackendJSONRequestBody defines body for ReplaceHTTPRequestRuleBackend for application/json ContentType.
type ReplaceHTTPRequestRuleBackendJSONRequestBody = HttpRequestRule

// ReplaceAllHTTPResponseRuleBackendJSONRequestBody defines body for ReplaceAllHTTPResponseRuleBackend for application/json ContentType.
type ReplaceAllHTTPResponseRuleBackendJSONRequestBody = HttpResponseRules

// CreateHTTPResponseRuleBackendJSONRequestBody defines body for CreateHTTPResponseRuleBackend for application/json ContentType.
type CreateHTTPResponseRuleBackendJSONRequestBody = HttpResponseRule

// ReplaceHTTPResponseRuleBackendJSONRequestBody defines body for ReplaceHTTPResponseRuleBackend for application/json ContentType.
type ReplaceHTTPResponseRuleBackendJSONRequestBody = HttpResponseRule

// ReplaceAllLogTargetBackendJSONRequestBody defines body for ReplaceAllLogTargetBackend for application/json ContentType.
type ReplaceAllLogTargetBackendJSONRequestBody = LogTargets

// CreateLogTargetBackendJSONRequestBody defines body for CreateLogTargetBackend for application/json ContentType.
type CreateLogTargetBackendJSONRequestBody = LogTarget

// ReplaceLogTargetBackendJSONRequestBody defines body for ReplaceLogTargetBackend for application/json ContentType.
type ReplaceLogTargetBackendJSONRequestBody = LogTarget

// ReplaceServerSwitchingRulesJSONRequestBody defines body for ReplaceServerSwitchingRules for application/json ContentType.
type ReplaceServerSwitchingRulesJSONRequestBody = ServerSwitchingRules

// CreateServerSwitchingRuleJSONRequestBody defines body for CreateServerSwitchingRule for application/json ContentType.
type CreateServerSwitchingRuleJSONRequestBody = ServerSwitchingRule

// ReplaceServerSwitchingRuleJSONRequestBody defines body for ReplaceServerSwitchingRule for application/json ContentType.
type ReplaceServerSwitchingRuleJSONRequestBody = ServerSwitchingRule

// CreateServerTemplateJSONRequestBody defines body for CreateServerTemplate for application/json ContentType.
type CreateServerTemplateJSONRequestBody = ServerTemplate

// ReplaceServerTemplateJSONRequestBody defines body for ReplaceServerTemplate for application/json ContentType.
type ReplaceServerTemplateJSONRequestBody = ServerTemplate

// CreateServerBackendJSONRequestBody defines body for CreateServerBackend for application/json ContentType.
type CreateServerBackendJSONRequestBody = Server

// ReplaceServerBackendJSONRequestBody defines body for ReplaceServerBackend for application/json ContentType.
type ReplaceServerBackendJSONRequestBody = Server

// ReplaceStickRulesJSONRequestBody defines body for ReplaceStickRules for application/json ContentType.
type ReplaceStickRulesJSONRequestBody = StickRules

// CreateStickRuleJSONRequestBody defines body for CreateStickRule for application/json ContentType.
type CreateStickRuleJSONRequestBody = StickRule

// ReplaceStickRuleJSONRequestBody defines body for ReplaceStickRule for application/json ContentType.
type ReplaceStickRuleJSONRequestBody = StickRule

// ReplaceAllTCPCheckBackendJSONRequestBody defines body for ReplaceAllTCPCheckBackend for application/json ContentType.
type ReplaceAllTCPCheckBackendJSONRequestBody = TcpChecks

// CreateTCPCheckBackendJSONRequestBody defines body for CreateTCPCheckBackend for application/json ContentType.
type CreateTCPCheckBackendJSONRequestBody = TcpCheck

// ReplaceTCPCheckBackendJSONRequestBody defines body for ReplaceTCPCheckBackend for application/json ContentType.
type ReplaceTCPCheckBackendJSONRequestBody = TcpCheck

// ReplaceAllTCPRequestRuleBackendJSONRequestBody defines body for ReplaceAllTCPRequestRuleBackend for application/json ContentType.
type ReplaceAllTCPRequestRuleBackendJSONRequestBody = TcpRequestRules

// CreateTCPRequestRuleBackendJSONRequestBody defines body for CreateTCPRequestRuleBackend for application/json ContentType.
type CreateTCPRequestRuleBackendJSONRequestBody = TcpRequestRule

// ReplaceTCPRequestRuleBackendJSONRequestBody defines body for ReplaceTCPRequestRuleBackend for application/json ContentType.
type ReplaceTCPRequestRuleBackendJSONRequestBody = TcpRequestRule

// ReplaceAllTCPResponseRuleBackendJSONRequestBody defines body for ReplaceAllTCPResponseRuleBackend for application/json ContentType.
type ReplaceAllTCPResponseRuleBackendJSONRequestBody = TcpResponseRules

// CreateTCPResponseRuleBackendJSONRequestBody defines body for CreateTCPResponseRuleBackend for application/json ContentType.
type CreateTCPResponseRuleBackendJSONRequestBody = TcpResponseRule

// ReplaceTCPResponseRuleBackendJSONRequestBody defines body for ReplaceTCPResponseRuleBackend for application/json ContentType.
type ReplaceTCPResponseRuleBackendJSONRequestBody = TcpResponseRule

// CreateCacheJSONRequestBody defines body for CreateCache for application/json ContentType.
type CreateCacheJSONRequestBody = Cache

// ReplaceCacheJSONRequestBody defines body for ReplaceCache for application/json ContentType.
type ReplaceCacheJSONRequestBody = Cache

// CreateCrtLoadJSONRequestBody defines body for CreateCrtLoad for application/json ContentType.
type CreateCrtLoadJSONRequestBody = CrtLoad

// ReplaceCrtLoadJSONRequestBody defines body for ReplaceCrtLoad for application/json ContentType.
type ReplaceCrtLoadJSONRequestBody = CrtLoad

// CreateCrtStoreJSONRequestBody defines body for CreateCrtStore for application/json ContentType.
type CreateCrtStoreJSONRequestBody = CrtStore

// EditCrtStoreJSONRequestBody defines body for EditCrtStore for application/json ContentType.
type EditCrtStoreJSONRequestBody = CrtStore

// AddDefaultsSectionJSONRequestBody defines body for AddDefaultsSection for application/json ContentType.
type AddDefaultsSectionJSONRequestBody = Defaults

// CreateDefaultsSectionJSONRequestBody defines body for CreateDefaultsSection for application/json ContentType.
type CreateDefaultsSectionJSONRequestBody = Defaults

// ReplaceDefaultsSectionJSONRequestBody defines body for ReplaceDefaultsSection for application/json ContentType.
type ReplaceDefaultsSectionJSONRequestBody = Defaults

// ReplaceAllAclDefaultsJSONRequestBody defines body for ReplaceAllAclDefaults for application/json ContentType.
type ReplaceAllAclDefaultsJSONRequestBody = Acls

// CreateAclDefaultsJSONRequestBody defines body for CreateAclDefaults for application/json ContentType.
type CreateAclDefaultsJSONRequestBody = Acl

// ReplaceAclDefaultsJSONRequestBody defines body for ReplaceAclDefaults for application/json ContentType.
type ReplaceAclDefaultsJSONRequestBody = Acl

// ReplaceAllHTTPAfterResponseRuleDefaultsJSONRequestBody defines body for ReplaceAllHTTPAfterResponseRuleDefaults for application/json ContentType.
type ReplaceAllHTTPAfterResponseRuleDefaultsJSONRequestBody = HttpAfterResponseRules

// CreateHTTPAfterResponseRuleDefaultsJSONRequestBody defines body for CreateHTTPAfterResponseRuleDefaults for application/json ContentType.
type CreateHTTPAfterResponseRuleDefaultsJSONRequestBody = HttpAfterResponseRule

// ReplaceHTTPAfterResponseRuleDefaultsJSONRequestBody defines body for ReplaceHTTPAfterResponseRuleDefaults for application/json ContentType.
type ReplaceHTTPAfterResponseRuleDefaultsJSONRequestBody = HttpAfterResponseRule

// ReplaceAllHTTPCheckDefaultsJSONRequestBody defines body for ReplaceAllHTTPCheckDefaults for application/json ContentType.
type ReplaceAllHTTPCheckDefaultsJSONRequestBody = HttpChecks

// CreateHTTPCheckDefaultsJSONRequestBody defines body for CreateHTTPCheckDefaults for application/json ContentType.
type CreateHTTPCheckDefaultsJSONRequestBody = HttpCheck

// ReplaceHTTPCheckDefaultsJSONRequestBody defines body for ReplaceHTTPCheckDefaults for application/json ContentType.
type ReplaceHTTPCheckDefaultsJSONRequestBody = HttpCheck

// ReplaceAllHTTPErrorRuleDefaultsJSONRequestBody defines body for ReplaceAllHTTPErrorRuleDefaults for application/json ContentType.
type ReplaceAllHTTPErrorRuleDefaultsJSONRequestBody = HttpErrorRules

// CreateHTTPErrorRuleDefaultsJSONRequestBody defines body for CreateHTTPErrorRuleDefaults for application/json ContentType.
type CreateHTTPErrorRuleDefaultsJSONRequestBody = HttpErrorRule

// ReplaceHTTPErrorRuleDefaultsJSONRequestBody defines body for ReplaceHTTPErrorRuleDefaults for application/json ContentType.
type ReplaceHTTPErrorRuleDefaultsJSONRequestBody = HttpErrorRule

// ReplaceAllHTTPRequestRuleDefaultsJSONRequestBody defines body for ReplaceAllHTTPRequestRuleDefaults for application/json ContentType.
type ReplaceAllHTTPRequestRuleDefaultsJSONRequestBody = HttpRequestRules

// CreateHTTPRequestRuleDefaultsJSONRequestBody defines body for CreateHTTPRequestRuleDefaults for application/json ContentType.
type CreateHTTPRequestRuleDefaultsJSONRequestBody = HttpRequestRule

// ReplaceHTTPRequestRuleDefaultsJSONRequestBody defines body for ReplaceHTTPRequestRuleDefaults for application/json ContentType.
type ReplaceHTTPRequestRuleDefaultsJSONRequestBody = HttpRequestRule

// ReplaceAllHTTPResponseRuleDefaultsJSONRequestBody defines body for ReplaceAllHTTPResponseRuleDefaults for application/json ContentType.
type ReplaceAllHTTPResponseRuleDefaultsJSONRequestBody = HttpResponseRules

// CreateHTTPResponseRuleDefaultsJSONRequestBody defines body for CreateHTTPResponseRuleDefaults for application/json ContentType.
type CreateHTTPResponseRuleDefaultsJSONRequestBody = HttpResponseRule

// ReplaceHTTPResponseRuleDefaultsJSONRequestBody defines body for ReplaceHTTPResponseRuleDefaults for application/json ContentType.
type ReplaceHTTPResponseRuleDefaultsJSONRequestBody = HttpResponseRule

// ReplaceAllLogTargetDefaultsJSONRequestBody defines body for ReplaceAllLogTargetDefaults for application/json ContentType.
type ReplaceAllLogTargetDefaultsJSONRequestBody = LogTargets

// CreateLogTargetDefaultsJSONRequestBody defines body for CreateLogTargetDefaults for application/json ContentType.
type CreateLogTargetDefaultsJSONRequestBody = LogTarget

// ReplaceLogTargetDefaultsJSONRequestBody defines body for ReplaceLogTargetDefaults for application/json ContentType.
type ReplaceLogTargetDefaultsJSONRequestBody = LogTarget

// ReplaceAllQUICInitialRuleDefaultsJSONRequestBody defines body for ReplaceAllQUICInitialRuleDefaults for application/json ContentType.
type ReplaceAllQUICInitialRuleDefaultsJSONRequestBody = QUICInitialRules

// CreateQUICInitialRuleDefaultsJSONRequestBody defines body for CreateQUICInitialRuleDefaults for application/json ContentType.
type CreateQUICInitialRuleDefaultsJSONRequestBody = QUICInitialRule

// ReplaceQUICInitialRuleDefaultsJSONRequestBody defines body for ReplaceQUICInitialRuleDefaults for application/json ContentType.
type ReplaceQUICInitialRuleDefaultsJSONRequestBody = QUICInitialRule

// ReplaceAllTCPCheckDefaultsJSONRequestBody defines body for ReplaceAllTCPCheckDefaults for application/json ContentType.
type ReplaceAllTCPCheckDefaultsJSONRequestBody = TcpChecks

// CreateTCPCheckDefaultsJSONRequestBody defines body for CreateTCPCheckDefaults for application/json ContentType.
type CreateTCPCheckDefaultsJSONRequestBody = TcpCheck

// ReplaceTCPCheckDefaultsJSONRequestBody defines body for ReplaceTCPCheckDefaults for application/json ContentType.
type ReplaceTCPCheckDefaultsJSONRequestBody = TcpCheck

// ReplaceAllTCPRequestRuleDefaultsJSONRequestBody defines body for ReplaceAllTCPRequestRuleDefaults for application/json ContentType.
type ReplaceAllTCPRequestRuleDefaultsJSONRequestBody = TcpRequestRules

// CreateTCPRequestRuleDefaultsJSONRequestBody defines body for CreateTCPRequestRuleDefaults for application/json ContentType.
type CreateTCPRequestRuleDefaultsJSONRequestBody = TcpRequestRule

// ReplaceTCPRequestRuleDefaultsJSONRequestBody defines body for ReplaceTCPRequestRuleDefaults for application/json ContentType.
type ReplaceTCPRequestRuleDefaultsJSONRequestBody = TcpRequestRule

// ReplaceAllTCPResponseRuleDefaultsJSONRequestBody defines body for ReplaceAllTCPResponseRuleDefaults for application/json ContentType.
type ReplaceAllTCPResponseRuleDefaultsJSONRequestBody = TcpResponseRules

// CreateTCPResponseRuleDefaultsJSONRequestBody defines body for CreateTCPResponseRuleDefaults for application/json ContentType.
type CreateTCPResponseRuleDefaultsJSONRequestBody = TcpResponseRule

// ReplaceTCPResponseRuleDefaultsJSONRequestBody defines body for ReplaceTCPResponseRuleDefaults for application/json ContentType.
type ReplaceTCPResponseRuleDefaultsJSONRequestBody = TcpResponseRule

// CreateFCGIAppJSONRequestBody defines body for CreateFCGIApp for application/json ContentType.
type CreateFCGIAppJSONRequestBody = FCGIApp

// ReplaceFCGIAppJSONRequestBody defines body for ReplaceFCGIApp for application/json ContentType.
type ReplaceFCGIAppJSONRequestBody = FCGIApp

// ReplaceAllAclFCGIAppJSONRequestBody defines body for ReplaceAllAclFCGIApp for application/json ContentType.
type ReplaceAllAclFCGIAppJSONRequestBody = Acls

// CreateAclFCGIAppJSONRequestBody defines body for CreateAclFCGIApp for application/json ContentType.
type CreateAclFCGIAppJSONRequestBody = Acl

// ReplaceAclFCGIAppJSONRequestBody defines body for ReplaceAclFCGIApp for application/json ContentType.
type ReplaceAclFCGIAppJSONRequestBody = Acl

// CreateFrontendJSONRequestBody defines body for CreateFrontend for application/json ContentType.
type CreateFrontendJSONRequestBody = Frontend

// ReplaceFrontendJSONRequestBody defines body for ReplaceFrontend for application/json ContentType.
type ReplaceFrontendJSONRequestBody = Frontend

// ReplaceAllAclFrontendJSONRequestBody defines body for ReplaceAllAclFrontend for application/json ContentType.
type ReplaceAllAclFrontendJSONRequestBody = Acls

// CreateAclFrontendJSONRequestBody defines body for CreateAclFrontend for application/json ContentType.
type CreateAclFrontendJSONRequestBody = Acl

// ReplaceAclFrontendJSONRequestBody defines body for ReplaceAclFrontend for application/json ContentType.
type ReplaceAclFrontendJSONRequestBody = Acl

// ReplaceBackendSwitchingRulesJSONRequestBody defines body for ReplaceBackendSwitchingRules for application/json ContentType.
type ReplaceBackendSwitchingRulesJSONRequestBody = BackendSwitchingRules

// CreateBackendSwitchingRuleJSONRequestBody defines body for CreateBackendSwitchingRule for application/json ContentType.
type CreateBackendSwitchingRuleJSONRequestBody = BackendSwitchingRule

// ReplaceBackendSwitchingRuleJSONRequestBody defines body for ReplaceBackendSwitchingRule for application/json ContentType.
type ReplaceBackendSwitchingRuleJSONRequestBody = BackendSwitchingRule

// CreateBindFrontendJSONRequestBody defines body for CreateBindFrontend for application/json ContentType.
type CreateBindFrontendJSONRequestBody = Bind

// ReplaceBindFrontendJSONRequestBody defines body for ReplaceBindFrontend for application/json ContentType.
type ReplaceBindFrontendJSONRequestBody = Bind

// ReplaceDeclareCapturesJSONRequestBody defines body for ReplaceDeclareCaptures for application/json ContentType.
type ReplaceDeclareCapturesJSONRequestBody = Captures

// CreateDeclareCaptureJSONRequestBody defines body for CreateDeclareCapture for application/json ContentType.
type CreateDeclareCaptureJSONRequestBody = Capture

// ReplaceDeclareCaptureJSONRequestBody defines body for ReplaceDeclareCapture for application/json ContentType.
type ReplaceDeclareCaptureJSONRequestBody = Capture

// ReplaceAllFilterFrontendJSONRequestBody defines body for ReplaceAllFilterFrontend for application/json ContentType.
type ReplaceAllFilterFrontendJSONRequestBody = Filters

// CreateFilterFrontendJSONRequestBody defines body for CreateFilterFrontend for application/json ContentType.
type CreateFilterFrontendJSONRequestBody = Filter

// ReplaceFilterFrontendJSONRequestBody defines body for ReplaceFilterFrontend for application/json ContentType.
type ReplaceFilterFrontendJSONRequestBody = Filter

// ReplaceAllHTTPAfterResponseRuleFrontendJSONRequestBody defines body for ReplaceAllHTTPAfterResponseRuleFrontend for application/json ContentType.
type ReplaceAllHTTPAfterResponseRuleFrontendJSONRequestBody = HttpAfterResponseRules

// CreateHTTPAfterResponseRuleFrontendJSONRequestBody defines body for CreateHTTPAfterResponseRuleFrontend for application/json ContentType.
type CreateHTTPAfterResponseRuleFrontendJSONRequestBody = HttpAfterResponseRule

// ReplaceHTTPAfterResponseRuleFrontendJSONRequestBody defines body for ReplaceHTTPAfterResponseRuleFrontend for application/json ContentType.
type ReplaceHTTPAfterResponseRuleFrontendJSONRequestBody = HttpAfterResponseRule

// ReplaceAllHTTPErrorRuleFrontendJSONRequestBody defines body for ReplaceAllHTTPErrorRuleFrontend for application/json ContentType.
type ReplaceAllHTTPErrorRuleFrontendJSONRequestBody = HttpErrorRules

// CreateHTTPErrorRuleFrontendJSONRequestBody defines body for CreateHTTPErrorRuleFrontend for application/json ContentType.
type CreateHTTPErrorRuleFrontendJSONRequestBody = HttpErrorRule

// ReplaceHTTPErrorRuleFrontendJSONRequestBody defines body for ReplaceHTTPErrorRuleFrontend for application/json ContentType.
type ReplaceHTTPErrorRuleFrontendJSONRequestBody = HttpErrorRule

// ReplaceAllHTTPRequestRuleFrontendJSONRequestBody defines body for ReplaceAllHTTPRequestRuleFrontend for application/json ContentType.
type ReplaceAllHTTPRequestRuleFrontendJSONRequestBody = HttpRequestRules

// CreateHTTPRequestRuleFrontendJSONRequestBody defines body for CreateHTTPRequestRuleFrontend for application/json ContentType.
type CreateHTTPRequestRuleFrontendJSONRequestBody = HttpRequestRule

// ReplaceHTTPRequestRuleFrontendJSONRequestBody defines body for ReplaceHTTPRequestRuleFrontend for application/json ContentType.
type ReplaceHTTPRequestRuleFrontendJSONRequestBody = HttpRequestRule

// ReplaceAllHTTPResponseRuleFrontendJSONRequestBody defines body for ReplaceAllHTTPResponseRuleFrontend for application/json ContentType.
type ReplaceAllHTTPResponseRuleFrontendJSONRequestBody = HttpResponseRules

// CreateHTTPResponseRuleFrontendJSONRequestBody defines body for CreateHTTPResponseRuleFrontend for application/json ContentType.
type CreateHTTPResponseRuleFrontendJSONRequestBody = HttpResponseRule

// ReplaceHTTPResponseRuleFrontendJSONRequestBody defines body for ReplaceHTTPResponseRuleFrontend for application/json ContentType.
type ReplaceHTTPResponseRuleFrontendJSONRequestBody = HttpResponseRule

// ReplaceAllLogTargetFrontendJSONRequestBody defines body for ReplaceAllLogTargetFrontend for application/json ContentType.
type ReplaceAllLogTargetFrontendJSONRequestBody = LogTargets

// CreateLogTargetFrontendJSONRequestBody defines body for CreateLogTargetFrontend for application/json ContentType.
type CreateLogTargetFrontendJSONRequestBody = LogTarget

// ReplaceLogTargetFrontendJSONRequestBody defines body for ReplaceLogTargetFrontend for application/json ContentType.
type ReplaceLogTargetFrontendJSONRequestBody = LogTarget

// ReplaceAllQUICInitialRuleFrontendJSONRequestBody defines body for ReplaceAllQUICInitialRuleFrontend for application/json ContentType.
type ReplaceAllQUICInitialRuleFrontendJSONRequestBody = QUICInitialRules

// CreateQUICInitialRuleFrontendJSONRequestBody defines body for CreateQUICInitialRuleFrontend for application/json ContentType.
type CreateQUICInitialRuleFrontendJSONRequestBody = QUICInitialRule

// ReplaceQUICInitialRuleFrontendJSONRequestBody defines body for ReplaceQUICInitialRuleFrontend for application/json ContentType.
type ReplaceQUICInitialRuleFrontendJSONRequestBody = QUICInitialRule

// CreateSSLFrontUseJSONRequestBody defines body for CreateSSLFrontUse for application/json ContentType.
type CreateSSLFrontUseJSONRequestBody = SSLFrontUse

// ReplaceSSLFrontUseJSONRequestBody defines body for ReplaceSSLFrontUse for application/json ContentType.
type ReplaceSSLFrontUseJSONRequestBody = SSLFrontUse

// ReplaceAllTCPRequestRuleFrontendJSONRequestBody defines body for ReplaceAllTCPRequestRuleFrontend for application/json ContentType.
type ReplaceAllTCPRequestRuleFrontendJSONRequestBody = TcpRequestRules

// CreateTCPRequestRuleFrontendJSONRequestBody defines body for CreateTCPRequestRuleFrontend for application/json ContentType.
type CreateTCPRequestRuleFrontendJSONRequestBody = TcpRequestRule

// ReplaceTCPRequestRuleFrontendJSONRequestBody defines body for ReplaceTCPRequestRuleFrontend for application/json ContentType.
type ReplaceTCPRequestRuleFrontendJSONRequestBody = TcpRequestRule

// ReplaceGlobalJSONRequestBody defines body for ReplaceGlobal for application/json ContentType.
type ReplaceGlobalJSONRequestBody = Global

// ReplaceAllLogTargetGlobalJSONRequestBody defines body for ReplaceAllLogTargetGlobal for application/json ContentType.
type ReplaceAllLogTargetGlobalJSONRequestBody = LogTargets

// CreateLogTargetGlobalJSONRequestBody defines body for CreateLogTargetGlobal for application/json ContentType.
type CreateLogTargetGlobalJSONRequestBody = LogTarget

// ReplaceLogTargetGlobalJSONRequestBody defines body for ReplaceLogTargetGlobal for application/json ContentType.
type ReplaceLogTargetGlobalJSONRequestBody = LogTarget

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = Group

// ReplaceGroupJSONRequestBody defines body for ReplaceGroup for application/json ContentType.
type ReplaceGroupJSONRequestBody = Group

// CreateHTTPErrorsSectionJSONRequestBody defines body for CreateHTTPErrorsSection for application/json ContentType.
type CreateHTTPErrorsSectionJSONRequestBody = HttpErrorsSection

// ReplaceHTTPErrorsSectionJSONRequestBody defines body for ReplaceHTTPErrorsSection for application/json ContentType.
type ReplaceHTTPErrorsSectionJSONRequestBody = HttpErrorsSection

// CreateLogForwardJSONRequestBody defines body for CreateLogForward for application/json ContentType.
type CreateLogForwardJSONRequestBody = LogForward

// ReplaceLogForwardJSONRequestBody defines body for ReplaceLogForward for application/json ContentType.
type ReplaceLogForwardJSONRequestBody = LogForward

// CreateBindLogForwardJSONRequestBody defines body for CreateBindLogForward for application/json ContentType.
type CreateBindLogForwardJSONRequestBody = Bind

// ReplaceBindLogForwardJSONRequestBody defines body for ReplaceBindLogForward for application/json ContentType.
type ReplaceBindLogForwardJSONRequestBody = Bind

// CreateDgramBindJSONRequestBody defines body for CreateDgramBind for application/json ContentType.
type CreateDgramBindJSONRequestBody = DgramBind

// ReplaceDgramBindJSONRequestBody defines body for ReplaceDgramBind for application/json ContentType.
type ReplaceDgramBindJSONRequestBody = DgramBind

// ReplaceAllLogTargetLogForwardJSONRequestBody defines body for ReplaceAllLogTargetLogForward for application/json ContentType.
type ReplaceAllLogTargetLogForwardJSONRequestBody = LogTargets

// CreateLogTargetLogForwardJSONRequestBody defines body for CreateLogTargetLogForward for application/json ContentType.
type CreateLogTargetLogForwardJSONRequestBody = LogTarget

// ReplaceLogTargetLogForwardJSONRequestBody defines body for ReplaceLogTargetLogForward for application/json ContentType.
type ReplaceLogTargetLogForwardJSONRequestBody = LogTarget

// CreateLogProfileJSONRequestBody defines body for CreateLogProfile for application/json ContentType.
type CreateLogProfileJSONRequestBody = LogProfile

// EditLogProfileJSONRequestBody defines body for EditLogProfile for application/json ContentType.
type EditLogProfileJSONRequestBody = LogProfile

// CreateMailerEntryJSONRequestBody defines body for CreateMailerEntry for application/json ContentType.
type CreateMailerEntryJSONRequestBody = MailerEntry

// ReplaceMailerEntryJSONRequestBody defines body for ReplaceMailerEntry for application/json ContentType.
type ReplaceMailerEntryJSONRequestBody = MailerEntry

// CreateMailersSectionJSONRequestBody defines body for CreateMailersSection for application/json ContentType.
type CreateMailersSectionJSONRequestBody = MailersSection

// EditMailersSectionJSONRequestBody defines body for EditMailersSection for application/json ContentType.
type EditMailersSectionJSONRequestBody = MailersSection

// CreateNameserverJSONRequestBody defines body for CreateNameserver for application/json ContentType.
type CreateNameserverJSONRequestBody = Nameserver

// ReplaceNameserverJSONRequestBody defines body for ReplaceNameserver for application/json ContentType.
type ReplaceNameserverJSONRequestBody = Nameserver

// CreatePeerEntryJSONRequestBody defines body for CreatePeerEntry for application/json ContentType.
type CreatePeerEntryJSONRequestBody = PeerEntry

// ReplacePeerEntryJSONRequestBody defines body for ReplacePeerEntry for application/json ContentType.
type ReplacePeerEntryJSONRequestBody = PeerEntry

// CreatePeerJSONRequestBody defines body for CreatePeer for application/json ContentType.
type CreatePeerJSONRequestBody = PeerSection

// CreateBindPeerJSONRequestBody defines body for CreateBindPeer for application/json ContentType.
type CreateBindPeerJSONRequestBody = Bind

// ReplaceBindPeerJSONRequestBody defines body for ReplaceBindPeer for application/json ContentType.
type ReplaceBindPeerJSONRequestBody = Bind

// ReplaceAllLogTargetPeerJSONRequestBody defines body for ReplaceAllLogTargetPeer for application/json ContentType.
type ReplaceAllLogTargetPeerJSONRequestBody = LogTargets

// CreateLogTargetPeerJSONRequestBody defines body for CreateLogTargetPeer for application/json ContentType.
type CreateLogTargetPeerJSONRequestBody = LogTarget

// ReplaceLogTargetPeerJSONRequestBody defines body for ReplaceLogTargetPeer for application/json ContentType.
type ReplaceLogTargetPeerJSONRequestBody = LogTarget

// CreateServerPeerJSONRequestBody defines body for CreateServerPeer for application/json ContentType.
type CreateServerPeerJSONRequestBody = Server

// ReplaceServerPeerJSONRequestBody defines body for ReplaceServerPeer for application/json ContentType.
type ReplaceServerPeerJSONRequestBody = Server

// CreateTableJSONRequestBody defines body for CreateTable for application/json ContentType.
type CreateTableJSONRequestBody = Table

// ReplaceTableJSONRequestBody defines body for ReplaceTable for application/json ContentType.
type ReplaceTableJSONRequestBody = Table

// CreateProgramJSONRequestBody defines body for CreateProgram for application/json ContentType.
type CreateProgramJSONRequestBody = Program

// ReplaceProgramJSONRequestBody defines body for ReplaceProgram for application/json ContentType.
type ReplaceProgramJSONRequestBody = Program

// PostHAProxyConfigurationTextRequestBody defines body for PostHAProxyConfiguration for text/plain ContentType.
type PostHAProxyConfigurationTextRequestBody = PostHAProxyConfigurationTextBody

// CreateResolverJSONRequestBody defines body for CreateResolver for application/json ContentType.
type CreateResolverJSONRequestBody = Resolver

// ReplaceResolverJSONRequestBody defines body for ReplaceResolver for application/json ContentType.
type ReplaceResolverJSONRequestBody = Resolver

// CreateRingJSONRequestBody defines body for CreateRing for application/json ContentType.
type CreateRingJSONRequestBody = Ring

// ReplaceRingJSONRequestBody defines body for ReplaceRing for application/json ContentType.
type ReplaceRingJSONRequestBody = Ring

// CreateServerRingJSONRequestBody defines body for CreateServerRing for application/json ContentType.
type CreateServerRingJSONRequestBody = Server

// ReplaceServerRingJSONRequestBody defines body for ReplaceServerRing for application/json ContentType.
type ReplaceServerRingJSONRequestBody = Server

// CreateTracesJSONRequestBody defines body for CreateTraces for application/json ContentType.
type CreateTracesJSONRequestBody = Traces

// ReplaceTracesJSONRequestBody defines body for ReplaceTraces for application/json ContentType.
type ReplaceTracesJSONRequestBody = Traces

// DeleteTraceEntryJSONRequestBody defines body for DeleteTraceEntry for application/json ContentType.
type DeleteTraceEntryJSONRequestBody = TraceEntry

// CreateTraceEntryJSONRequestBody defines body for CreateTraceEntry for application/json ContentType.
type CreateTraceEntryJSONRequestBody = TraceEntry

// CreateUserlistJSONRequestBody defines body for CreateUserlist for application/json ContentType.
type CreateUserlistJSONRequestBody = Userlist

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// ReplaceUserJSONRequestBody defines body for ReplaceUser for application/json ContentType.
type ReplaceUserJSONRequestBody = User

// PostServicesHaproxyRuntimeAclsParentNameEntriesJSONRequestBody defines body for PostServicesHaproxyRuntimeAclsParentNameEntries for application/json ContentType.
type PostServicesHaproxyRuntimeAclsParentNameEntriesJSONRequestBody = AclFileEntry

// AddPayloadRuntimeACLJSONRequestBody defines body for AddPayloadRuntimeACL for application/json ContentType.
type AddPayloadRuntimeACLJSONRequestBody = AclFilesEntries

// AddRuntimeServerJSONRequestBody defines body for AddRuntimeServer for application/json ContentType.
type AddRuntimeServerJSONRequestBody = RuntimeAddServer

// ReplaceRuntimeServerJSONRequestBody defines body for ReplaceRuntimeServer for application/json ContentType.
type ReplaceRuntimeServerJSONRequestBody = RuntimeServer

// AddPayloadRuntimeMapJSONRequestBody defines body for AddPayloadRuntimeMap for application/json ContentType.
type AddPayloadRuntimeMapJSONRequestBody = MapEntries

// AddMapEntryJSONRequestBody defines body for AddMapEntry for application/json ContentType.
type AddMapEntryJSONRequestBody = MapEntry

// ReplaceRuntimeMapEntryJSONRequestBody defines body for ReplaceRuntimeMapEntry for application/json ContentType.
type ReplaceRuntimeMapEntryJSONRequestBody ReplaceRuntimeMapEntryJSONBody

// CreateCaFileMultipartRequestBody defines body for CreateCaFile for multipart/form-data ContentType.
type CreateCaFileMultipartRequestBody CreateCaFileMultipartBody

// SetCaFileMultipartRequestBody defines body for SetCaFile for multipart/form-data ContentType.
type SetCaFileMultipartRequestBody SetCaFileMultipartBody

// AddCaEntryMultipartRequestBody defines body for AddCaEntry for multipart/form-data ContentType.
type AddCaEntryMultipartRequestBody AddCaEntryMultipartBody

// CreateCertMultipartRequestBody defines body for CreateCert for multipart/form-data ContentType.
type CreateCertMultipartRequestBody CreateCertMultipartBody

// ReplaceCertMultipartRequestBody defines body for ReplaceCert for multipart/form-data ContentType.
type ReplaceCertMultipartRequestBody ReplaceCertMultipartBody

// CreateCrlMultipartRequestBody defines body for CreateCrl for multipart/form-data ContentType.
type CreateCrlMultipartRequestBody CreateCrlMultipartBody

// ReplaceCrlMultipartRequestBody defines body for ReplaceCrl for multipart/form-data ContentType.
type ReplaceCrlMultipartRequestBody ReplaceCrlMultipartBody

// AddCrtListEntryJSONRequestBody defines body for AddCrtListEntry for application/json ContentType.
type AddCrtListEntryJSONRequestBody = SslCrtListEntry

// SetStickTableEntriesJSONRequestBody defines body for SetStickTableEntries for application/json ContentType.
type SetStickTableEntriesJSONRequestBody SetStickTableEntriesJSONBody

// CreateSiteJSONRequestBody defines body for CreateSite for application/json ContentType.
type CreateSiteJSONRequestBody = Site

// ReplaceSiteJSONRequestBody defines body for ReplaceSite for application/json ContentType.
type ReplaceSiteJSONRequestBody = Site

// CreateSpoeMultipartRequestBody defines body for CreateSpoe for multipart/form-data ContentType.
type CreateSpoeMultipartRequestBody CreateSpoeMultipartBody

// CreateSpoeScopeJSONRequestBody defines body for CreateSpoeScope for application/json ContentType.
type CreateSpoeScopeJSONRequestBody = SpoeScope

// CreateSpoeAgentJSONRequestBody defines body for CreateSpoeAgent for application/json ContentType.
type CreateSpoeAgentJSONRequestBody = SpoeAgent

// ReplaceSpoeAgentJSONRequestBody defines body for ReplaceSpoeAgent for application/json ContentType.
type ReplaceSpoeAgentJSONRequestBody = SpoeAgent

// CreateSpoeGroupJSONRequestBody defines body for CreateSpoeGroup for application/json ContentType.
type CreateSpoeGroupJSONRequestBody = SpoeGroup

// ReplaceSpoeGroupJSONRequestBody defines body for ReplaceSpoeGroup for application/json ContentType.
type ReplaceSpoeGroupJSONRequestBody = SpoeGroup

// CreateSpoeMessageJSONRequestBody defines body for CreateSpoeMessage for application/json ContentType.
type CreateSpoeMessageJSONRequestBody = SpoeMessage

// ReplaceSpoeMessageJSONRequestBody defines body for ReplaceSpoeMessage for application/json ContentType.
type ReplaceSpoeMessageJSONRequestBody = SpoeMessage

// CreateStorageGeneralFileMultipartRequestBody defines body for CreateStorageGeneralFile for multipart/form-data ContentType.
type CreateStorageGeneralFileMultipartRequestBody CreateStorageGeneralFileMultipartBody

// ReplaceStorageGeneralFileMultipartRequestBody defines body for ReplaceStorageGeneralFile for multipart/form-data ContentType.
type ReplaceStorageGeneralFileMultipartRequestBody ReplaceStorageGeneralFileMultipartBody

// CreateStorageMapFileMultipartRequestBody defines body for CreateStorageMapFile for multipart/form-data ContentType.
type CreateStorageMapFileMultipartRequestBody CreateStorageMapFileMultipartBody

// ReplaceStorageMapFileTextRequestBody defines body for ReplaceStorageMapFile for text/plain ContentType.
type ReplaceStorageMapFileTextRequestBody = ReplaceStorageMapFileTextBody

// CreateStorageSSLCertificateMultipartRequestBody defines body for CreateStorageSSLCertificate for multipart/form-data ContentType.
type CreateStorageSSLCertificateMultipartRequestBody CreateStorageSSLCertificateMultipartBody

// ReplaceStorageSSLCertificateTextRequestBody defines body for ReplaceStorageSSLCertificate for text/plain ContentType.
type ReplaceStorageSSLCertificateTextRequestBody = ReplaceStorageSSLCertificateTextBody

// CreateStorageSSLCrtListFileMultipartRequestBody defines body for CreateStorageSSLCrtListFile for multipart/form-data ContentType.
type CreateStorageSSLCrtListFileMultipartRequestBody CreateStorageSSLCrtListFileMultipartBody

// ReplaceStorageSSLCrtListFileTextRequestBody defines body for ReplaceStorageSSLCrtListFile for text/plain ContentType.
type ReplaceStorageSSLCrtListFileTextRequestBody = ReplaceStorageSSLCrtListFileTextBody

// CreateStorageSSLCrtListEntryJSONRequestBody defines body for CreateStorageSSLCrtListEntry for application/json ContentType.
type CreateStorageSSLCrtListEntryJSONRequestBody = SslCrtListEntry

// Getter for additional properties for Error. Returns the specified
// element and whether it was found
func (a Error) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error
func (a *Error) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error to handle AdditionalProperties
func (a *Error) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error to handle AdditionalProperties
func (a Error) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["message"], err = json.Marshal(a.Message)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'message': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
